/**
 * @module nx
 */

var nx = {
    VERSION: '0.9.0',
    DEBUG: false,
    global: (function () {
        return this;
    }).call(null)
};


// prepare for cross browser
(function () {
    if (!Function.prototype.bind) {
        Function.prototype.bind = function (context) {
            var f = this;
            return function () {
                return f.apply(context, arguments);
            };
        };
    }
})();


(function (nx) {
    /**
     * @class nx
     * @static
     */


    var isArray = Array.isArray || function (target) {
        return target && target.constructor === Array;
    };
    var isPojo = function (obj) {
        var hasown = Object.prototype.hasOwnProperty;
        if (!obj || Object.prototype.toString(obj) !== "[object Object]" || obj.nodeType || obj === window) {
            return false;
        }
        try {
            // Not own constructor property must be Object
            if (obj.constructor && !hasown.call(obj, "constructor") && !hasown.call(obj.constructor.prototype, "isPrototypeOf")) {
                return false;
            }
        } catch (e) {
            // IE8,9 Will throw exceptions on certain host objects #9897
            return false;
        }
        var key;
        for (key in obj) {}
        return key === undefined || hasown.call(obj, key);
    };

    /**
     * Extend target with properties from sources.
     * @method extend
     * @param target {Object} The target object to be extended.
     * @param source* {Object} The source objects.
     * @returns {Object}
     */
    nx.extend = function (target) {
        for (var i = 1, length = arguments.length; i < length; i++) {
            var arg = arguments[i];
            for (var key in arg) {
                if (arg.hasOwnProperty(key)) {
                    target[key] = arg[key];
                }
            }
        }

        return target;
    };

    /**
     * Iterate over target and execute the callback with context.
     * @method each
     * @param target {Object|Array|Iterable} The target object to be iterate over.
     * @param callback {Function} The callback function to execute.
     * @param context {Object} The context object which act as 'this'.
     */
    nx.each = function (target, callback, context) {
        /* jshint -W014 */
        if (target && callback) {
            if (target.__each__) {
                target.__each__(callback, context);
            } else {
                // FIXME maybe some other array-like things missed here
                if (isArray(target) // normal Array
                    || Object.prototype.toString.call(target) === "[object Arguments]" // array-like: arguments
                    || nx.global.NodeList && target instanceof NodeList // array-like: NodeList
                    || nx.global.HTMLCollection && target instanceof HTMLCollection // array-like: HTMLCollection
                ) {
                    for (var i = 0, length = target.length; i < length; i++) {
                        if (callback.call(context, target[i], i) === false) {
                            break;
                        }
                    }
                } else {
                    for (var key in target) {
                        if (target.hasOwnProperty(key)) {
                            if (callback.call(context, target[key], key) === false) {
                                break;
                            }
                        }
                    }
                }
            }
        }
    };

    /**
     * Shallow clone target object.
     * @method clone
     * @param target {Object|Array} The target object to be cloned.
     * @returns {Object} The cloned object.
     */

    nx.clone = (function () {
        var deepclone = (function () {
            var get, put, top, keys, clone;
            get = function (map, key) {
                for (var i = 0; i < map.length; i++) {
                    if (map[i].key === key) {
                        return map[i].value;
                    }
                }
                return null;
            };
            put = function (map, key, value) {
                var i;
                for (i = 0; i < map.length; i++) {
                    if (map[i].key === key) {
                        map[i].value = value;
                        return;
                    }
                }
                map[i] = {
                    key: key,
                    value: value
                };
            };
            top = function (stack) {
                if (stack.length === 0) {
                    return null;
                }
                return stack[stack.length - 1];
            };
            keys = function (obj) {
                var keys = [];
                if (Object.prototype.toString.call(obj) == '[object Array]') {
                    for (var i = 0; i < obj.length; i++) {
                        keys.push(i);
                    }
                } else {
                    for (var key in obj) {
                        keys.push(key);
                    }
                }
                return keys;
            };
            clone = function (self) {
                // TODO clone DOM object
                if (window === self || document === self) {
                    // window and document cannot be clone
                    return null;
                }
                if (["null", "undefined", "number", "string", "boolean", "function"].indexOf(typeof self) >= 0) {
                    return self;
                }
                if (!isArray(self) && !isPojo(self)) {
                    return self;
                }
                var map = [],
                    stack = [],
                    origin = self,
                    dest = (isArray(self) ? [] : {});
                var stacktop, key, cached;
                // initialize the map and stack
                put(map, origin, dest);
                stack.push({
                    origin: origin,
                    dest: dest,
                    keys: keys(origin),
                    idx: 0
                });
                while (true) {
                    stacktop = top(stack);
                    if (!stacktop) {
                        // the whole object is cloned
                        break;
                    }
                    origin = stacktop.origin;
                    dest = stacktop.dest;
                    if (stacktop.keys.length <= stacktop.idx) {
                        // object on the stack top is cloned
                        stack.pop();
                        continue;
                    }
                    key = stacktop.keys[stacktop.idx++];
                    // clone an object
                    if (isArray(origin[key])) {
                        dest[key] = [];
                    } else if (isPojo(origin[key])) {
                        dest[key] = {};
                    } else {
                        dest[key] = origin[key];
                        continue;
                    }
                    // check if needn't deep into or cloned already
                    cached = get(map, origin[key]);
                    if (cached) {
                        dest[key] = cached;
                        continue;
                    }
                    // deep into the object
                    put(map, origin[key], dest[key]);
                    stack.push({
                        origin: origin[key],
                        dest: dest[key],
                        keys: keys(origin[key]),
                        idx: 0
                    });
                }
                return dest;
            };
            return clone;
        })();
        return function (target, cfg) {
            if (target) {
                if (target.__clone__) {
                    return target.__clone__(cfg);
                } else if (!cfg) {
                    if (nx.is(target, 'Array')) {
                        return target.slice(0);
                    } else {
                        var result = {};
                        for (var key in target) {
                            if (target.hasOwnProperty(key)) {
                                result[key] = target[key];
                            }
                        }

                        return result;
                    }
                } else {
                    // TODO more config options
                    return deepclone(target);
                }
            } else {
                return target;
            }
        };
    })();

    /**
     * Check whether target is specified type.
     * @method is
     * @param target {Object} The target object to be checked.
     * @param type {String|Function} The type could either be a string or a class object.
     * @returns {Boolean}
     */
    nx.is = function (target, type) {
        if (target && target.__is__) {
            return target.__is__(type);
        } else {
            switch (type) {
            case 'Undefined':
                return target === undefined;
            case 'Null':
                return target === null;
            case 'Object':
                return target && (typeof target === 'object');
            case 'String':
            case 'Boolean':
            case 'Number':
            case 'Function':
                return typeof target === type.toLowerCase();
            case 'Array':
                return isArray(target);
            case 'POJO':
                return isPojo(target);
            default:
                return target instanceof type;
            }
        }
    };

    /**
     * Get the specified property value of target.
     * @method get
     * @param target {Object} The target object.
     * @param name {String} The property name.
     * @returns {*} The value.
     */
    nx.get = function (target, name) {
        if (target) {
            if (target.__get__) {
                return target.__get__(name);
            } else {
                return target[name];
            }
        }
    };

    /**
     * Set the specified property of target with value.
     * @method set
     * @param target {Object} The target object.
     * @param name {String} The property name.
     * @param value {*} The value to be set.
     */
    nx.set = function (target, name, value) {
        if (target) {
            if (target.__set__) {
                target.__set__(name);
            } else {
                target[name] = value;
            }
        }
    };

    /**
     * Get all properties of target.
     * @method gets
     * @param target {Object} The target Object.
     * @returns {Object} An object contains all keys and values of target.
     */
    nx.gets = function (target) {
        if (target) {
            if (target.__gets__) {
                return target.__gets__();
            } else {
                var result = {};
                for (var key in target) {
                    if (target.hasOwnProperty(key)) {
                        result[key] = target[key];
                    }
                }
                return result;
            }
        }
    };

    /**
     * Set a bunch of properties for target.
     * @method sets
     * @param target {Object} The target object.
     * @param dict {Object} An object contains all keys and values to be set.
     */
    nx.sets = function (target, dict) {
        if (target && dict) {
            if (target.__sets__) {
                target.__sets__(dict);
            } else {
                for (var key in dict) {
                    if (dict.hasOwnProperty(key)) {
                        target[key] = dict[key];
                    }
                }
            }
        }
    };

    /**
     * Check whether target has specified property.
     * @method has
     * @param target {Object} The target object.
     * @param name {String} The property name.
     * @returns {Boolean}
     */
    nx.has = function (target, name) {
        if (target) {
            if (target.__has__) {
                return target.__has__(name);
            } else {
                return name in target;
            }
        } else {
            return false;
        }
    };

    /**
     * Compare target and source.
     * @method compare
     * @param target {Object} The target object.
     * @param source {Object} The source object.
     * @returns {Number} The result could be -1,0,1 which indicates the comparison result.
     */
    nx.compare = function (target, source) {
        if (target && target.__compare__) {
            return target.__compare__(source);
        } else {
            if (target === source) {
                return 0;
            } else if (target > source) {
                return 1;
            } else if (target < source) {
                return -1;
            }

            return 1;
        }
    };

    /**
     * Get value from target specified by a path and optionally set a value for it.
     * @method path
     * @param target {Object} The target object.
     * @param path {String} The path.
     * @param [value] {*} The value to be set.
     * @returns {*}
     */
    nx.path = function (target, path, value) {
        var result = target;
        if (path) {
            var tokens, token, length, i = 0;
            if (typeof path === "string") {
                tokens = path.split(".");
            } else if (isArray(path)) {
                tokens = path;
            } else {
                return target;
            }
            length = tokens.length;

            if (value === undefined) {
                for (; result && i < length; i++) {
                    token = tokens[i];
                    if (result.__get__) {
                        result = result.__get__(token);
                    } else {
                        result = result[token];
                    }
                }
            } else {
                length -= 1;
                for (; result && i < length; i++) {
                    token = tokens[i];
                    if (result.__get__) {
                        result = result.__get__(token);
                    } else {
                        result = result[token] = result[token] || {};
                    }
                }

                token = tokens[i];
                if (result) {
                    if (result.__set__) {
                        result.__set__(token, value);
                    } else {
                        result[token] = value;
                    }

                    result = value;
                }
            }
        }

        return result;
    };

    nx.idle = function () {};

    nx.identity = function (i) {
        return i;
    };

    nx.uuid = function () {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            var r = Math.random() * 16 | 0,
                v = c == 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        }).toUpperCase();
    };


})(nx);

(function (nx) {

    var classId = 1,
        instanceId = 1,
        metaPrefix = '@',
        eventPrefix = 'on',
        classes = {},
        global = nx.global;

    /**
     * The base of any Classes defined in nx framework.
     * @class nx.Object
     * @constructor
     */
    function NXObject() {}

    var NXPrototype = NXObject.prototype = {
        constructor: NXObject,
        /**
         * Dispose current object.
         * @method dispose
         */
        dispose: function () {
            this.__listeners__ = {};
        },
        /**
         * Destroy current object.
         * @method destroy
         */
        destroy: function () {
            this.dispose();
        },
        /**
         * Call overridden method from super class
         * @method inherited
         */
        inherited: function () {
            var base = this.inherited.caller.__super__;
            if (base) {
                return base.apply(this, arguments);
            }
        },
        /**
         * Check whether current object is specified type.
         * @method is
         * @param type {String|Function}
         * @returns {Boolean}
         */
        is: function (type) {
            if (typeof type === 'string') {
                type = nx.path(global, type);
            }

            if (type) {
                if (this instanceof type) {
                    return true;
                } else {
                    var mixins = this.__mixins__;
                    for (var i = 0, len = mixins.length; i < len; i++) {
                        var mixin = mixins[i];
                        if (type === mixin) {
                            return true;
                        }
                    }
                }
            }

            return false;
        },
        /**
         * Check whether current object has specified property.
         * @method has
         * @param name {String}
         * @returns {Boolean}
         */
        has: function (name) {
            var member = this[name];
            return member && member.__type__ == 'property';
        },
        /**
         * Get specified property value.
         * @method get
         * @param name {String}
         * @returns {*}
         */
        get: function (name) {
            var member = this[name];
            if (member !== undefined) {
                if (member.__type__ == 'property') {
                    return member.call(this);
                } else {
                    return member;
                }
            }
        },
        /**
         * Set specified property value.
         * @method set
         * @param name {String}
         * @param value {*}
         */
        set: function (name, value) {
            var member = this[name];
            if (member !== undefined) {
                if (member.__type__ == 'property') {
                    return member.call(this, value);
                } else {
                    this[name] = value;
                }
            } else {
                this[name] = value;
            }
        },
        /**
         * Get all properties.
         * @method gets
         * @returns {Object}
         */
        gets: function () {
            var result = {};
            nx.each(this.__properties__, function (name) {
                result[name] = this.get(name);
            }, this);

            return result;
        },
        /**
         * Set a bunch of properties.
         * @method sets
         * @param dict {Object}
         */
        sets: function (dict) {
            if (dict) {
                for (var name in dict) {
                    if (dict.hasOwnProperty(name)) {
                        this.set(name, dict[name]);
                    }
                }
            }
        },
        /**
         * Check whether current object has specified event.
         * @method can
         * @param name {String}
         * @returns {Boolean}
         */
        can: function (name) {
            var member = this[eventPrefix + name];
            return member && member.__type__ == 'event';
        },
        /**
         * Add an event handler.
         * @method on
         * @param name {String}
         * @param handler {Function}
         * @param [context] {Object}
         */
        on: function (name, handler, context) {
            var map = this.__listeners__;
            var listeners = map[name] = map[name] || [{
                owner: null,
                handler: null,
                context: null
            }];
            var listener = {
                owner: this,
                handler: handler,
                context: context || this
            };

            listeners.push(listener);
            return {
                release: function () {
                    var idx = listeners.indexOf(listener);
                    if (idx >= 0) {
                        listeners.splice(idx, 1);
                    }
                }
            };
        },
        /**
         * Remove an event handler.
         * @method off
         * @param name {String}
         * @param [handler] {Function}
         * @param [context] {Object}
         */
        off: function (name, handler, context) {
            var listeners = this.__listeners__[name],
                listener;
            if (listeners) {
                if (handler) {
                    context = context || this;
                    for (var i = 0, length = listeners.length; i < length; i++) {
                        listener = listeners[i];
                        if (listener.handler == handler && listener.context == context) {
                            listeners.splice(i, 1);
                            break;
                        }
                    }
                } else {
                    listeners.length = 1;
                }
            }
        },
        /**
         * Add a single event handler.
         * @method upon
         * @param name {String}
         * @param handler {Function}
         * @param [context] {Object}
         */
        upon: function (name, handler, context) {
            var map = this.__listeners__;
            var listeners = map[name] = map[name] || [{
                owner: null,
                handler: null,
                context: null
            }];

            listeners[0] = {
                owner: this,
                handler: handler,
                context: context
            };
        },
        /**
         * Trigger an event.
         * @method fire
         * @param name {String}
         * @param [data] {*}
         */
        fire: function (name, data) {
            var i, length, listener, result, calling, existing = this.__listeners__[name];
            calling = existing ? existing.slice() : [];
            for (i = 0, length = calling.length; i < length; i++) {
                listener = calling[i];
                if (listener && listener.handler && (existing[i] === listener || existing.indexOf(listener) >= 0)) {
                    result = listener.handler.call(listener.context, listener.owner, data);
                    if (result === false) {
                        return false;
                    }
                }
            }
        },
        __is__: function (type) {
            return this.is(type);
        },
        __has__: function (name) {
            return this.has(name);
        },
        __get__: function (name) {
            return this.get(name);
        },
        __set__: function (name, value) {
            return this.set(name, value);
        },
        __gets__: function () {
            return this.gets();
        },
        __sets__: function (dict) {
            return this.sets(dict);
        }
    };

    NXObject.__classId__ = NXPrototype.__classId__ = 0;
    NXObject.__className__ = NXPrototype.__className__ = 'nx.Object';
    NXObject.__events__ = NXPrototype.__events__ = [];
    NXObject.__properties__ = NXPrototype.__properties__ = [];
    NXObject.__methods__ = NXPrototype.__methods__ = [];
    NXObject.__defaults__ = NXPrototype.__defaults__ = {};
    NXObject.__mixins__ = NXPrototype.__mixins__ = [];
    NXObject.extendEvent = extendEvent;
    NXObject.extendProperty = extendProperty;
    NXObject.extendMethod = extendMethod;

    /**
     * Define an event and attach to target.
     * @method extendEvent
     * @static
     * @param target {Object}
     * @param name {String}
     */
    function extendEvent(target, name) {
        var eventName = eventPrefix + name;
        var exist = target[eventName] && target[eventName].__type__ == 'event';
        var fn = target[eventName] = function (handler, context) {
            var map = this.__listeners__;
            var listeners = map[name] = map[name] || [{
                owner: null,
                handler: null,
                context: null
            }];

            listeners[0] = {
                owner: this,
                handler: handler,
                context: context
            };
        };

        fn.__name__ = name;
        fn.__type__ = 'event';

        if (!exist) {
            target.__events__.push(name);
        }

        return fn;
    }

    /**
     * Define a property and attach to target.
     * @method extendProperty
     * @static
     * @param target {Object}
     * @param name {String}
     * @param meta {Object}
     */
    function extendProperty(target, name, meta) {
        if (nx.is(meta, nx.keyword.internal.Keyword) || !nx.is(meta, "Object")) {
            meta = {
                value: meta
            };
        }
        var defaultValue;
        var exist = target[name] && target[name].__type__ == 'property';
        if (meta.dependencies) {
            if (nx.is(meta.dependencies, "String")) {
                meta.dependencies = meta.dependencies.replace(/\s/g, "").split(",");
            }
            defaultValue = nx.keyword.binding({
                source: meta.dependencies,
                async: true,
                callback: function () {
                    var owner = this.owner;
                    if (meta.update) {
                        meta.update.apply(owner, arguments);
                    }
                    if (nx.is(meta.value, "Function")) {
                        owner.set(name, meta.value.apply(owner, arguments));
                    } else if (!meta.update && !meta.value) {
                        owner.set(name, arguments[0]);
                    }
                }
            });
        } else {
            defaultValue = meta.value;
        }

        if (target[name] && meta.inherits) {
            meta = nx.extend({}, target[name].__meta__, meta);
        }

        var fn = function (value, params) {
            if (value === undefined && arguments.length === 0) {
                return fn.__getter__.call(this, params);
            } else {
                return fn.__setter__.call(this, value, params);
            }
        };

        fn.__name__ = name;
        fn.__type__ = 'property';
        fn.__meta__ = meta;
        fn.__getter__ = meta.get || function () {
            return this['_' + name];
        };

        fn.__setter__ = meta.set || function (value) {
            this['_' + name] = value;
        };

        fn.getMeta = function (key) {
            return key ? fn.__meta__[key] : fn.__meta__;
        };

        if (nx.is(target, "Function") && target.__properties__ && !target.__static__) {
            target.prototype[name] = fn;
        } else {
            target[name] = fn;
        }

        if (defaultValue !== undefined) {
            target.__defaults__[name] = defaultValue;
        }

        if (!exist) {
            if (!nx.is(target, "Function") && target.__properties__ === target.constructor.__properties) {
                target.__properties__ = target.__properties__.slice();
            }
            target.__properties__.push(name);
        }

        return fn;
    }

    /**
     * Define a method and attach to target.
     * @method extendMethod
     * @static
     * @param target {Object}
     * @param name {String}
     * @param method {Function}
     */
    function extendMethod(target, name, method) {
        var exist = target[name] && target[name].__type__ == 'method';

        if (target[name] && target[name] !== method) {
            method.__super__ = target[name];
        }

        method.__name__ = name;
        method.__type__ = 'method';
        method.__meta__ = {};

        target[name] = method;

        if (!exist) {
            target.__methods__.push(name);
        }
    }

    /**
     * Define a class
     * @method define
     * @param [type] {String}
     * @param [parent] {Function}
     * @param [members] {Object}
     * @returns {Function}
     */
    function define(type, parent, members) {
        if (!members) {
            if (nx.is(parent, 'Object')) {
                members = parent;
                parent = null;

                if (nx.is(type, 'Function')) {
                    parent = type;
                    type = null;
                }
            } else if (!parent) {
                if (nx.is(type, 'Object')) {
                    members = type;
                    type = null;
                } else if (nx.is(type, 'Function')) {
                    parent = type;
                    type = null;
                }
            }
        }

        members = members || {};

        var sup = parent || NXObject;
        var mixins = members.mixins || [];
        var events = members.events || [];
        var props = members.properties || {};
        var methods = members.methods || {};
        var static = members.static || false;
        var statics = members.statics || {};
        var prototype;
        var key, i, length;
        var Class, SuperClass;

        if (nx.is(mixins, 'Function')) {
            mixins = [mixins];
        }

        if (sup.__static__) {
            throw new Error('Static class cannot be inherited.');
        }

        if (static) {
            Class = function () {
                throw new Error('Cannot instantiate static class.');
            };

            Class.__classId__ = classId++;
            Class.__className__ = type ? type : 'Anonymous';
            Class.__static__ = true;
            Class.__events__ = [];
            Class.__properties__ = [];
            Class.__methods__ = [];
            Class.__defaults__ = {};

            for (i = 0, length = events.length; i < length; i++) {
                extendEvent(Class, events[i]);
            }

            for (key in props) {
                if (props.hasOwnProperty(key)) {
                    extendProperty(Class, key, props[key]);
                }
            }

            for (key in methods) {
                if (methods.hasOwnProperty(key)) {
                    extendMethod(Class, key, methods[key]);
                }
            }

            for (key in statics) {
                if (statics.hasOwnProperty(key)) {
                    Class[key] = statics[key];
                }
            }

            nx.each(Class.__defaults__, function (value, name) {
                if (nx.is(value, "Function")) {
                    this["_" + name] = value.call(this);
                } else if (nx.is(value, nx.keyword.internal.Keyword)) {
                    switch (value.type) {
                    case "binding":
                        // FIXME memory leak
                        value.apply(this, name);
                        break;
                    }
                } else {
                    this["_" + name] = value;
                }
            }, Class);

            if (methods.init) {
                methods.init.call(Class);
            }
        } else {
            Class = function () {
                // get the real arguments
                var args = arguments[0];
                if (Object.prototype.toString.call(args) !== "[object Arguments]") {
                    args = arguments;
                }

                var mixins = this.__mixins__;
                this.__id__ = instanceId++;
                this.__listeners__ = {};
                this.__bindings__ = this.__bindings__ || {};
                this.__watchers__ = this.__watchers__ || {};
                this.__keyword_bindings__ = this.__keyword_bindings__ || [];
                this.__keyword_watchers__ = this.__keyword_watchers__ || {};
                this.__keyword_init__ = this.__keyword_init__ || [];

                this.__initializing__ = true;

                for (var i = 0, length = mixins.length; i < length; i++) {
                    var ctor = mixins[i].__ctor__;
                    if (ctor) {
                        ctor.call(this);
                    }
                }

                nx.each(Class.__defaults__, function (value, name) {
                    if (nx.is(value, "Function")) {
                        this["_" + name] = value.call(this);
                    } else if (nx.is(value, nx.keyword.internal.Keyword)) {
                        // FIXME memory leak
                        // FIXME bind order
                        this.__keyword_bindings__.push({
                            name: name,
                            definition: value
                        });
                    } else {
                        this["_" + name] = value;
                    }
                }, this);

                nx.each(Class.__properties__, function (name) {
                    var prop = this[name];
                    if (!prop || prop.__type__ !== "property") {
                        return;
                    }
                    var meta = prop.__meta__,
                        watcher = meta.watcher,
                        init = meta.init;
                    if (watcher && this.watch) {
                        if (nx.is(watcher, "String")) {
                            watcher = this[watcher];
                        }
                        this.watch(name, watcher.bind(this));
                        this.__keyword_watchers__[name] = watcher;
                    }
                    if (init) {
                        this.__keyword_init__.push(init);
                    }
                }, this);

                nx.each(this.__keyword_bindings__, function (binding) {
                    binding.instance = binding.definition.apply(this, binding.name);
                }, this);

                nx.each(this.__keyword_init__, function (init) {
                    init.apply(this, args);
                }, this);

                if (this.__ctor__) {
                    this.__ctor__.apply(this, args);
                }

                nx.each(this.__keyword_watchers__, function (watcher, name) {
                    watcher.call(this, name, this[name].call(this));
                }, this);

                nx.each(this.__keyword_bindings__, function (binding) {
                    binding.instance.notify();
                }, this);

                this.__initializing__ = false;
            };

            SuperClass = function () {};

            SuperClass.prototype = sup.prototype;
            prototype = new SuperClass();
            prototype.constructor = Class;
            prototype.__events__ = sup.__events__.slice(0);
            prototype.__properties__ = sup.__properties__.slice(0);
            prototype.__methods__ = sup.__methods__.slice(0);
            prototype.__defaults__ = nx.clone(sup.__defaults__);
            prototype.__mixins__ = sup.__mixins__.concat(mixins);

            Class.__classId__ = classId++;
            Class.__className__ = prototype.__className__ = type ? type : 'Anonymous';
            Class.__super__ = prototype.__super__ = sup;
            Class.prototype = prototype;

            if (methods.init) {
                prototype.__ctor__ = methods.init;
            }

            for (key in members) {
                if (members.hasOwnProperty(key)) {
                    prototype[metaPrefix + key] = Class[metaPrefix + key] = members[key];
                }
            }

            nx.each(mixins, function (mixin) {
                var mixinPrototype = mixin.prototype;

                nx.each(mixin.__events__, function (name) {
                    extendEvent(prototype, name);
                });

                nx.each(mixin.__properties__, function (name) {
                    extendProperty(prototype, name, mixinPrototype[name].__meta__);
                });

                nx.each(mixin.__methods__, function (name) {
                    if (name !== 'init' && name !== 'dispose') {
                        extendMethod(prototype, name, mixinPrototype[name]);
                    }
                });
            });

            for (i = 0, length = events.length; i < length; i++) {
                extendEvent(prototype, events[i]);
            }

            for (key in props) {
                if (props.hasOwnProperty(key)) {
                    extendProperty(prototype, key, props[key]);
                }
            }

            for (key in methods) {
                if (methods.hasOwnProperty(key)) {
                    extendMethod(prototype, key, methods[key]);
                }
            }

            for (key in statics) {
                if (statics.hasOwnProperty(key)) {
                    Class[key] = statics[key];
                }
            }

            Class.__ctor__ = prototype.__ctor__;
            Class.__events__ = prototype.__events__;
            Class.__properties__ = prototype.__properties__;
            Class.__methods__ = prototype.__methods__;
            Class.__defaults__ = prototype.__defaults__;
            Class.__mixins__ = prototype.__mixins__;
        }

        if (type) {
            nx.path(global, type, Class);
        }

        classes[Class.__classId__] = Class;
        return Class;
    }

    nx.Object = NXObject;
    nx.define = define;
    nx.classes = classes;

})(nx);

(function (nx) {
    var keyword = nx.keyword = nx.keyword || {
        binding: function (source, callback, async) {
            var context = false;
            if (typeof source !== "string") {
                context = !! source.context;
                callback = source.callback;
                async = source.async;
                source = source.source;
            }
            return new nx.keyword.internal.Keyword({
                type: "binding",
                context: context,
                source: source,
                async: async,
                callback: callback
            });
        },
        internal: {
            idle: function () {},
            watch: (function () {
                var single = function (o, path, listener, context) {
                    var keys = path.split(".");

                    function level(parent, idx) {
                        if (parent && idx < keys.length) {
                            var key = keys[idx];
                            // watch on the collection changes
                            if (key == "*" || key == "%") {
                                // TODO handler watching on collection changes
                            } else {
                                var child = nx.path(parent, key);
                                if (parent.watch) {
                                    var pathRest = keys.slice(idx + 1).join("."),
                                        childUnwatch = level(child, idx + 1);
                                    var watcher = function (pname, pnewvalue, poldvalue) {
                                        var newvalue = pathRest ? nx.path(pnewvalue, pathRest) : pnewvalue;
                                        var oldvalue = pathRest ? nx.path(poldvalue, pathRest) : poldvalue;
                                        listener.call(context || o, path, newvalue, oldvalue);
                                        if (pnewvalue !== child) {
                                            childUnwatch();
                                            child = pnewvalue;
                                            childUnwatch = level(child, idx + 1);
                                        }
                                    };
                                    parent.watch(key, watcher, parent);
                                    return function () {
                                        childUnwatch();
                                        parent.unwatch(key, watcher, parent);
                                    };
                                } else if (child) {
                                    return level(child, idx + 1);
                                }
                            }
                        }
                        return keyword.internal.idle;
                    }
                    var unwatch = level(o, 0);
                    return {
                        unwatch: unwatch,
                        notify: function () {
                            var value = nx.path(o, path);
                            listener.call(context || o, path, value, value);
                        }
                    };
                };

                var singleWithCollection = function (o, path, listener, context) {
                    var collman = {
                        collection: null,
                        unlistener: null,
                        listener: function (collection, evt) {
                            listener.call(context || o, path, collection, evt);
                        },
                        update: function (value) {
                            if (collman.collection === value) {
                                return;
                            }
                            /* jslint -W030 */
                            collman.unlistener && collman.unlistener();
                            if (value && value.is && value.is(nx.data.ObservableCollection)) {
                                value.on("change", collman.listener, o);
                                collman.unlistener = function () {
                                    value.off("change", collman.listener, o);
                                };
                            } else {
                                collman.unlistener = null;
                            }
                            collman.collection = value;
                        }
                    };
                    collman.update(nx.path(o, path));
                    var unwatcher = single(o, path, function (path, value) {
                        collman.update(value);
                        listener.call(context || o, path, value);
                    }, context);
                    return {
                        unwatch: function () {
                            unwatcher.unwatch();
                            /* jslint -W030 */
                            collman.unlistener && collman.unlistener();
                        },
                        notify: unwatcher.notify
                    };
                };

                return function (target, paths, update) {
                    if (!target || !paths || !update) {
                        return;
                    }
                    // apply the watching
                    var deps;
                    if (nx.is(paths, "String")) {
                        deps = paths.replace(/\s/g, "").split(",");
                    } else {
                        deps = paths;
                    }
                    nx.each(deps, function (v, i) {
                        if (/^\d+$/.test(v)) {
                            deps[i] = v * 1;
                        }
                    });
                    var unwatchers = [],
                        vals = [];
                    var notify = function (key, diff) {
                        var values = vals.slice();
                        values.push(key);
                        /* jslint -W030 */
                        diff && values.push(diff);
                        update.apply(target, values);
                    };
                    for (i = 0; i < deps.length; i++) {
                        /* jslint -W083 */
                        (function (idx) {
                            vals[idx] = nx.path(target, deps[idx]);
                            var unwatcher = singleWithCollection(target, deps[idx], function (path, value, diff) {
                                vals[idx] = value;
                                notify(deps[idx], diff);
                            });
                            unwatchers.push(unwatcher);
                        })(i);
                    }
                    return {
                        notify: notify,
                        release: function () {
                            while (unwatchers.length) {
                                unwatchers.shift().unwatch();
                            }
                        }
                    };
                };
            })(),
            Keyword: (function () {
                var Keyword = function (options) {
                    nx.sets(this, options);
                };
                Keyword.prototype = {
                    apply: function (o, pname) {
                        var binding = {
                            owner: o,
                            property: pname,
                            set: o && pname && function (v) {
                                o.set(pname, v);
                                return o.get(pname);
                            }
                        };
                        var watching = nx.keyword.internal.watch(o, this.source, function () {
                            var rslt;
                            if (this.callback) {
                                rslt = this.callback.apply(this.context ? binding.owner : binding, arguments);
                            } else {
                                rslt = arguments[0];
                            }
                            if (!this.async) {
                                binding.set(rslt);
                            }
                        }.bind(this));
                        return watching;
                    }
                };
                return Keyword;
            })()
        }
    };
})(nx);

(function (nx) {

    /**
     * @class Iterable
     * @namespace nx
     */
    var Iterable = nx.define('nx.Iterable', {
        statics: {
            /**
             * Get the iteration function from an iterable object.
             * @method getIterator
             * @static
             * @param iter {Object|Array|nx.Iterable}
             * @returns {Function}
             */
            getIterator: function (iter) {
                if (nx.is(iter, Iterable)) {
                    return function (callback, context) {
                        iter.each(callback, context);
                    };
                }
                else {
                    return function (callback, context) {
                        nx.each(iter, callback, context);
                    };
                }
            },
            /**
             * Convert the iterable object to an array.
             * @method toArray
             * @static
             * @param iter {Object|Array|nx.Iterable}
             * @returns {Array}
             */
            toArray: function (iter) {
                if (nx.is(iter, Iterable)) {
                    return iter.toArray();
                }
                else if (nx.is(iter, 'Array')) {
                    return iter.slice(0);
                }
                else {
                    var result = [];
                    nx.each(iter, function (item) {
                        result.push(item);
                    });

                    return result;
                }
            }
        },
        properties: {
            /**
             * @property count {Number}
             */
            count: {
                get: function () {
                    return this.toArray().length;
                }
            }
        },
        methods: {
            /**
             * @method each
             * @param callback
             * @param context
             */
            each: function (callback, context) {
                throw new Error('Not Implemented.');
            },
            /**
             * @method toArray
             * @returns {Array}
             */
            toArray: function () {
                var result = [];
                this.each(function (item) {
                    result.push(item);
                });

                return result;
            },
            __each__: function (callback, context) {
                return this.each(callback, context);
            }
        }
    });
})(nx);
(function (nx) {
    /**
     * @class Observable
     * @namespace nx
     */
    var Observable = nx.define('nx.Observable', {
        statics: {
            extendProperty: function extendProperty(target, name, meta) {
                var property = nx.Object.extendProperty(target, name, meta);
                if (property && property.__type__ == 'property') {
                    if (!property._watched) {
                        var setter = property.__setter__;
                        var dependencies = property.getMeta('dependencies');
                        nx.each(dependencies, function (dep) {
                            this.watch(dep, function () {
                                this.notify(name);
                            }, this);
                        }, this);

                        property.__setter__ = function (value, params) {
                            var oldValue = this.get(name);
                            if (oldValue !== value) {
                                if (setter.call(this, value, params) !== false) {
                                    return this.notify(name, oldValue);
                                }
                            }

                            return false;
                        };

                        property._watched = true;
                    }
                }

                return property;
            },
            /**
             * This method in order to watch the change of specified path of specified target.
             * @static
             * @method watch
             * @param target The target observable object.
             * @param path The path to be watched.
             * @param callback The callback function accepting arguments list: (path, newvalue, oldvalue).
             * @param context (Optional) The context which the callback will be called with.
             * @return Resource stub object, with release and affect methods.
             *  <p>release: unwatch the current watching.</p>
             *  <p>affect: invoke the callback with current value immediately.</p>
             */
            watch: function (target, path, callback, context) {
                var keys = (typeof path === "string" ? path.split(".") : path);
                var iterate = function (parent, idx) {
                    if (parent && idx < keys.length) {
                        var key = keys[idx];
                        var child = nx.path(parent, key);
                        if (parent.watch) {
                            var rkeys = keys.slice(idx + 1);
                            var iter = iterate(child, idx + 1);
                            var watch = parent.watch(key, function (pname, pnewvalue, poldvalue) {
                                var newvalue = nx.path(pnewvalue, rkeys);
                                var oldvalue = nx.path(poldvalue, rkeys);
                                callback.call(context || target, path, newvalue, oldvalue);
                                if (pnewvalue !== child) {
                                    iter && iter.release();
                                    child = pnewvalue;
                                    iter = iterate(child, idx + 1);
                                }
                            });
                            return {
                                release: function () {
                                    iter && iter.release();
                                    watch.release();
                                }
                            };
                        } else if (child) {
                            return iterate(child, idx + 1);
                        }
                    }
                    return {
                        release: nx.idle
                    };
                };
                var iter = iterate(target, 0);
                return {
                    release: iter.release,
                    affect: function () {
                        var value = nx.path(target, path);
                        callback.call(context || target, path, value, value);
                    }
                };
            },
            /**
             * Monitor several paths of target at the same time, any value change of any path will trigger the callback with all values of all paths.
             * @static
             * @method monitor
             * @param target The target observable object.
             * @param pathlist The path list to be watched.
             * @param callback The callback function accepting arguments list: (value1, value2, value3, ..., changed_path, changed_old_value).
             * @return Resource stub object, with release and affect methods.
             *  <p>release: release the current monitoring.</p>
             *  <p>affect: invoke the callback with current values immediately.</p>
             */
            monitor: function (target, pathlist, callback) {
                if (!target || !pathlist || !callback) {
                    return;
                }
                // apply the cascading
                var i, paths, resources, values;
                paths = typeof pathlist === "string" ? pathlist.replace(/\s/g, "").split(",") : pathlist;
                resources = [];
                values = [];
                var affect = function (path, oldvalue) {
                    var args = values.slice();
                    args.push(path, oldvalue);
                    callback.apply(target, args);
                };
                for (i = 0; i < paths.length; i++) {
                    (function (idx) {
                        values[idx] = nx.path(target, paths[idx]);
                        var resource = Observable.watch(target, paths[idx], function (path, value) {
                            var oldvalue = values[idx];
                            values[idx] = value;
                            affect(paths[idx], oldvalue);
                        });
                        resources.push(resource);
                    })(i);
                }
                return {
                    affect: affect,
                    release: function () {
                        while (resources.length) {
                            resources.shift().release();
                        }
                    }
                };
            }
        },
        methods: {
            /**
             * @constructor
             */
            init: function () {
                this.__bindings__ = this.__bindings__ || {};
                this.__watchers__ = this.__watchers__ || {};
            },
            /**
             * Dispose current object.
             * @method dispose
             */
            dispose: function () {
                this.inherited();
                nx.each(this.__bindings__, function (binding) {
                    binding.dispose();
                });
                this.__bindings__ = {};
                this.__watchers__ = {};
            },
            /**
             * @method
             * @param names
             * @param handler
             * @param context
             */
            watch: function (names, handler, context) {
                var resources = [];
                nx.each(names == '*' ? this.__properties__ : (nx.is(names, 'Array') ? names : [names]), function (name) {
                    resources.push(this._watch(name, handler, context));
                }, this);
                return {
                    affect: function () {
                        nx.each(resources, function (resource) {
                            resource.affect();
                        });
                    },
                    release: function () {
                        nx.each(resources, function (resource) {
                            resource.release();
                        });
                    }
                };
            },
            /**
             * @method unwatch
             * @param names
             * @param handler
             * @param context
             */
            unwatch: function (names, handler, context) {
                nx.each(names == '*' ? this.__properties__ : (nx.is(names, 'Array') ? names : [names]), function (name) {
                    this._unwatch(name, handler, context);
                }, this);
            },
            /**
             * @method notify
             * @param names
             * @param oldValue
             */
            notify: function (names, oldValue) {
                if (names == '*') {
                    nx.each(this.__watchers__, function (value, name) {
                        this._notify(name, oldValue);
                    }, this);
                } else {
                    nx.each(nx.is(names, 'Array') ? names : [names], function (name) {
                        this._notify(name, oldValue);
                    }, this);
                }

            },
            /**
             * Get existing binding object for specified property.
             * @method getBinding
             * @param prop
             * @returns {*}
             */
            getBinding: function (prop) {
                return this.__bindings__[prop];
            },
            /**
             * Set binding for specified property.
             * @method setBinding
             * @param prop
             * @param expr
             * @param source
             */
            setBinding: function (prop, expr, source) {
                var binding = this.__bindings__[prop];
                var params = {};

                if (nx.is(expr, 'String')) {
                    var tokens = expr.split(',');
                    var path = tokens[0];
                    var i = 1,
                        length = tokens.length;

                    for (; i < length; i++) {
                        var pair = tokens[i].split('=');
                        params[pair[0]] = pair[1];
                    }

                    params.target = this;
                    params.targetPath = prop;
                    params.sourcePath = path;
                    params.source = source;
                    if (params.converter) {
                        params.converter = Binding.converters[params.converter] || nx.path(window, params.converter);
                    }

                } else {
                    params = nx.clone(expr);
                    params.target = this;
                    params.targetPath = prop;
                    params.source = params.source || this;
                }

                if (binding) {
                    binding.destroy();
                }

                this.__bindings__[prop] = new Binding(params);
            },
            /**
             * Clear binding for specified property.
             * @method clearBinding
             * @param prop
             */
            clearBinding: function (prop) {
                var binding = this.__bindings__[prop];
                if (binding) {
                    binding.destroy();
                    this.__bindings__[prop] = null;
                }
            },
            _watch: function (name, handler, context) {
                var map = this.__watchers__;
                var watchers = map[name] = map[name] || [];
                var property = this[name];
                var watcher = {
                    owner: this,
                    handler: handler,
                    context: context
                };

                watchers.push(watcher);

                if (property && property.__type__ == 'property') {
                    if (!property._watched) {
                        var setter = property.__setter__;
                        var dependencies = property.getMeta('dependencies');
                        var equalityCheck = property.getMeta('equalityCheck');
                        nx.each(dependencies, function (dep) {
                            this.watch(dep, function () {
                                this.notify(name);
                            }, this);
                        }, this);

                        property.__setter__ = function (value, params) {
                            var oldValue = this.get(name);
                            if (oldValue !== value || (params && params.force) || equalityCheck === false) {
                                if (setter.call(this, value, params) !== false) {
                                    return this.notify(name, oldValue);
                                }
                            }

                            return false;
                        };

                        property._watched = true;
                    }
                }
                return {
                    affect: function () {
                        var value = watcher.owner.get(name);
                        if (watcher && watcher.handler) {
                            watcher.handler.call(watcher.context || watcher.owner, name, value, value, watcher.owner);
                        }
                    },
                    release: function () {
                        var idx = watchers.indexOf(watcher);
                        if (idx >= 0) {
                            watchers.splice(idx, 1);
                        }
                    }
                };
            },
            _unwatch: function (name, handler, context) {
                var map = this.__watchers__;
                var watchers = map[name],
                    watcher;

                if (watchers) {
                    if (handler) {
                        for (var i = 0, length = watchers.length; i < length; i++) {
                            watcher = watchers[i];
                            if (watcher.handler == handler && watcher.context == context) {
                                watchers.splice(i, 1);
                                break;
                            }
                        }
                    } else {
                        watchers.length = 0;
                    }
                }
            },
            _notify: function (name, oldValue) {
                var i, watcher, calling, existing = this.__watchers__[name];
                calling = existing ? existing.slice() : [];
                for (i = 0; i < calling.length; i++) {
                    watcher = calling[i];
                    if (watcher && watcher.handler && (watcher === existing[i] || existing.indexOf(watcher) >= 0)) {
                        watcher.handler.call(watcher.context || watcher.owner, name, this.get(name), oldValue, watcher.owner);
                    }

                }
            }
        }
    });

    var Binding = nx.define('nx.Binding', Observable, {
        statics: {
            converters: {
                boolean: {
                    convert: function (value) {
                        return !!value;
                    },
                    convertBack: function (value) {
                        return !!value;
                    }
                },
                inverted: {
                    convert: function (value) {
                        return !value;
                    },
                    convertBack: function (value) {
                        return !value;
                    }
                },
                number: {
                    convert: function (value) {
                        return Number(value);
                    },
                    convertBack: function (value) {
                        return value;
                    }
                }
            },
            /**
             * @static
             */
            format: function (expr, target) {
                if (expr) {
                    return expr.replace('{0}', target);
                } else {
                    return '';
                }
            }
        },
        properties: {
            /**
             * Get the target object of current binding.
             */
            target: {
                value: null
            },
            /**
             * Get the target path of current binding.
             */
            targetPath: {
                value: ''
            },
            /**
             * Get the source path of current binding.
             */
            sourcePath: {
                value: ''
            },
            /**
             * Get or set the source of current binding.
             */
            source: {
                get: function () {
                    return this._source;
                },
                set: function (value) {
                    if (this._initialized && this._source !== value) {
                        this._rebind(0, value);
                        if (this._direction[0] == '<') {
                            this._updateTarget();
                        }
                        this._source = value;
                    }
                }
            },
            /**
             * Get or set the binding type.
             */
            bindingType: {
                value: 'auto'
            },
            /**
             * Get the direction for current binding.
             */
            direction: {
                value: 'auto'
            },
            /**
             * Get the trigger for current binding.
             */
            trigger: {
                value: 'auto'
            },
            /**
             * Get the format for current binding.
             */
            format: {
                value: 'auto'
            },
            /**
             * Get the converter for current binding.
             */
            converter: {
                value: 'auto'
            }
        },
        methods: {
            init: function (config) {
                this.sets(config);
                if (config.target) {
                    var target = this.target();
                    var targetPath = this.targetPath();
                    var sourcePath = this.sourcePath();
                    var bindingType = this.bindingType();
                    var direction = this.direction();
                    var format = this.format();
                    var converter = this.converter();
                    var targetMember = target[targetPath];
                    var watchers = this._watchers = [];
                    var keys = this._keys = sourcePath.split('.'),
                        key;
                    var i = 0,
                        length = keys.length;
                    var self = this;

                    if (targetMember) {
                        var bindingMeta = targetMember.__meta__.binding;

                        if (bindingType == 'auto') {
                            bindingType = targetMember.__type__;
                        }

                        if (direction == 'auto') {
                            direction = this._direction = (bindingMeta && bindingMeta.direction) || '<-';
                        }

                        if (format == 'auto') {
                            format = bindingMeta && bindingMeta.format;
                        }

                        if (converter == 'auto') {
                            converter = bindingMeta && bindingMeta.converter;
                        }
                    } else {
                        if (bindingType == 'auto') {
                            bindingType = target.can(targetPath) ? 'event' : 'property';
                        }

                        if (direction == 'auto') {
                            direction = this._direction = '<-';
                        }

                        if (format == 'auto') {
                            format = null;
                        }

                        if (converter == 'auto') {
                            converter = null;
                        }
                    }

                    if (converter) {
                        if (nx.is(converter, 'Function')) {
                            converter = {
                                convert: converter,
                                convertBack: function (value) {
                                    return value;
                                }
                            };
                        }
                    }

                    if (direction[0] == '<') {
                        for (; i < length; i++) {
                            watchers.push({
                                key: keys[i],
                                /*jshint -W083*/
                                handler: (function (index) {
                                    return function (property, value) {
                                        self._rebind(index, value);
                                        self._updateTarget();
                                    };
                                })(i + 1)
                            });
                        }
                    }

                    if (bindingType == 'event') {
                        key = watchers[length - 1].key;
                        watchers.length--;
                        this._updateTarget = function () {
                            var actualValue = this._actualValue;
                            if (actualValue) {
                                target.upon(targetPath, actualValue[key], actualValue);
                            }
                        };
                    } else {
                        this._updateTarget = function () {
                            var actualValue = this._actualValue;
                            if (converter) {
                                actualValue = converter.convert.call(this, actualValue);
                            }

                            if (format) {
                                actualValue = Binding.format(format, actualValue);
                            }

                            nx.path(target, targetPath, actualValue);
                        };
                    }

                    if (direction[1] == '>') {
                        if (target.watch && target.watch.__type__ === 'method') {
                            target.watch(targetPath, this._onTargetChanged = function (property, value) {
                                var actualValue = value;
                                if (converter) {
                                    actualValue = converter.convertBack.call(this, actualValue);
                                }
                                nx.path(this.source(), sourcePath, actualValue);
                            }, this);
                        }
                    }

                    this._initialized = true;
                    this.source(config.source);
                }
            },
            dispose: function () {
                var target = this._target;
                this._rebind(0, null);
            },
            _rebind: function (index, value) {
                var watchers = this._watchers;
                var newSource = value,
                    oldSource;

                for (var i = index, length = watchers.length; i < length; i++) {
                    var watcher = watchers[i];
                    var key = watcher.key;
                    var handler = watcher.handler;

                    oldSource = watcher.source;

                    if (oldSource && oldSource.unwatch && oldSource.unwatch.__type__ === 'method') {
                        oldSource.unwatch(key, handler, this);
                    }

                    watcher.source = newSource;

                    if (newSource) {
                        if (newSource.watch && newSource.watch.__type__ === 'method') {
                            newSource.watch(key, handler, this);
                        }

                        if (newSource.get) {
                            newSource = newSource.get(key);
                        } else {
                            newSource = newSource[key];
                        }
                    }
                }

                this._actualValue = newSource;
            }
        }
    });

})(nx);

(function (nx) {

    /**
     * @class Counter
     * @namespace nx.data
     * @uses nx.Observable
     */
    var EXPORT = nx.define("nx.data.Counter", {
        events: [
            /**
             * An event which notifies the happening of a count change of item.
             * @event change
             * @param {Object} evt The event object with item, count, previousCount.
             */
            'change',
            /**
             * Same as change event but only happens on count increasing.
             * @event increase
             * @param {Object} evt The event object with item, count, previousCount.
             */
            'increase',
            /**
             * Same as change event but only happens on count decreasing.
             * @event decrease
             * @param {Object} evt The event object with item, count, previousCount.
             */
            'decrease'
        ],
        methods: {
            init: function () {
                this._nummap = {};
                this._strmap = {};
                this._objmap = [];
                this._nxomap = {};
                this._null = 0;
                this._true = 0;
                this._false = 0;
                this._undefined = 0;
            },
            /**
             * Get count of specified item.
             *
             * @method getCount
             * @param {Any} item The counting item.
             * @return Count of the item.
             */
            getCount: function (item) {
                // XXX PhantomJS bug
                if (Object.prototype.toString.call(null) !== "[object Null]") {
                    if (item === null) {
                        return this._null;
                    } else if (item === undefined) {
                        return this._undefined;
                    }
                }
                // check the type
                switch (Object.prototype.toString.call(item)) {
                case "[object Null]":
                    return this._null;
                case "[object Boolean]":
                    return item ? this._true : this._false;
                case "[object Undefined]":
                    return this._undefined;
                case "[object Number]":
                    return this._nummap[item] || 0;
                case "[object String]":
                    return this._strmap[item] || 0;
                default:
                    if (item.__id__) {
                        return this._nxomap[item.__id__] || 0;
                    } else {
                        return EXPORT.getArrayMapValue(this._objmap, item) || 0;
                    }
                }
            },
            /**
             * Set count of specified item.
             *
             * @method setCount
             * @param {Any} item The counting item.
             * @param {Number} count The count to be set.
             * @return Set result count.
             */
            setCount: function (item, count) {
                // XXX PhantomJS bug
                if (Object.prototype.toString.call(null) !== "[object Null]") {
                    if (item === null) {
                        this._null = count;
                    } else if (item === undefined) {
                        this._undefined = count;
                    }
                }
                // XXX optimizable for obj-map
                var previousCount = this.getCount(item);
                // check if change happening
                if (previousCount === count) {
                    return count;
                }
                // change count
                switch (Object.prototype.toString.call(item)) {
                case "[object Null]":
                    this._null = count;
                    break;
                case "[object Boolean]":
                    if (item) {
                        this._true = count;
                    } else {
                        this._false = count;
                    }
                    break;
                case "[object Undefined]":
                    this._undefined = count;
                    break;
                case "[object Number]":
                    this._nummap[item] = count;
                    break;
                case "[object String]":
                    this._strmap[item] = count;
                    break;
                default:
                    if (item.__id__) {
                        this._nxomap[item.__id__] = count;
                    } else {
                        EXPORT.setArrayMapValue(this._objmap, item, count);
                    }
                    break;
                }
                // trigger events
                var event = {
                    item: item,
                    previousCount: previousCount,
                    count: count
                };
                if (previousCount > count) {
                    this.fire('decrease', event);
                } else {
                    this.fire('increase', event);
                }
                this.fire('change', event);
                return count;
            },
            /**
             * Increase the count of given item.
             *
             * @method increase
             * @param {Any} item The item to count.
             * @param {Number} increment The increment, default 1.
             * @return The increasing result
             */
            increase: function (inItem, i) {
                i = arguments.length > 1 ? Math.floor(i * 1 || 0) : 1;
                return this.setCount(inItem, this.getCount(inItem) + i);
            },
            /**
             * Decrease the count of given item.
             *
             * @method decrease
             * @param {Any} item The item to count.
             * @param {Number} decrement The decrement, default 1.
             * @return The decreasing result
             */
            decrease: function (inItem, i) {
                i = arguments.length > 1 ? Math.floor(i * 1 || 0) : 1;
                return this.setCount(inItem, this.getCount(inItem) - i);
            },
            __addArrayItem: function (inItem) {
                this._arrcache.push(inItem);
            },
            __removeArrayItem: function (inItem) {
                var index = this._arrcache.indexOf(inItem);
                this._arrcache.splice(index, 1);
            },
            __getArrayCounter: function (inItem) {
                var counter = 0;
                nx.each(this._arrcache, function (item) {
                    if (inItem === item) {
                        counter++;
                    }
                });
                return counter;
            }
        },
        statics: {
            _getArrayMapItem: function (map, key) {
                return map.filter(function (item) {
                    return item.key === key;
                })[0];
            },
            getArrayMapValue: function (map, key) {
                return (EXPORT._getArrayMapItem(map, key) || {}).value;
            },
            setArrayMapValue: function (map, key, value) {
                var item = EXPORT._getArrayMapItem(map, key);
                if (!item) {
                    map.push({
                        key: key,
                        value: value
                    });
                } else {
                    item.value = value;
                }
                return value;
            }
        }
    });

})(nx);

(function (nx) {
    var Iterable = nx.Iterable;

    /**
     * @class Collection
     * @namespace nx.data
     * @extends nx.Iterable
     * @constructor
     * @param iter
     */
    var Collection = nx.define('nx.data.Collection', Iterable, {
        properties: {
            /**
             * @property count
             * @type {Number}
             */
            count: {
                get: function () {
                    return this._data.length;
                },
                set: function () {
                    throw new Error("Unable to set count of Collection");
                }
            },
            /**
             * @property length
             * @type {Number}
             */
            length: {
                get: function () {
                    return this._data.length;
                },
                set: function () {
                    throw new Error("Unable to set length of Collection");
                }
            },
            unique: {
                set: function (unique) {
                    // check if the unique status is change
                    /* jshint -W018 */
                    if ( !! this._unique === !! unique) {
                        return;
                    }
                    this._unique = !! unique;
                    if (unique) {
                        // remove duplicated items
                        var data = this._data;
                        var i, len = data.length;
                        for (i = len - 1; i > 0; i--) {
                            if (this.indexOf(data[i]) < i) {
                                this.removeAt(i);
                            }
                        }
                    }
                }
            }
        },
        methods: {
            init: function (iter) {
                var data = this._data = [];
                if (nx.is(iter, Iterable)) {
                    this._data = iter.toArray();
                } else {
                    Iterable.getIterator(iter)(function (item) {
                        data.push(item);
                    });
                }
            },
            /**
             * Add an item.
             *
             * @method add
             * @param item
             * @return added item. Null if fail to add, e.g. duplicated add into unique collection.
             */
            add: function (item) {
                if (!this._unique || this.indexOf(item) == -1) {
                    this._data.push(item);
                    return item;
                }
                return null;
            },
            /**
             * Add multiple items. Will avoid duplicated items for unique collection.
             *
             * @method addRange
             * @param iter
             * @returns array of added items.
             */
            addRange: function (iter) {
                var data = this._data;
                var i, items = Iterable.toArray(iter).slice();
                // check for unique
                if (this._unique) {
                    for (i = items.length - 1; i >= 0; i--) {
                        if (this.indexOf(items[i]) >= 0 || items.indexOf(items[i]) < i) {
                            items.splice(i, 1);
                        }
                    }
                }
                data.splice.apply(data, [data.length, 0].concat(items));
                return items;
            },
            /**
             * @method remove
             * @param item
             * @returns Removed item's index, -1 if not found.
             */
            remove: function (item) {
                var self = this;
                var remove = function (item) {
                    var index = self.indexOf(item);
                    if (index >= 0) {
                        self._data.splice(index, 1);
                        return index;
                    } else {
                        return -1;
                    }
                };
                if (arguments.length > 1) {
                    var i, indices = [];
                    for (i = arguments.length - 1; i >= 0; i--) {
                        indices.unshift(remove(arguments[i]));
                    }
                    return indices;
                } else {
                    return remove(item);
                }
            },
            /**
             * @method removeAt
             * @param index
             * @returns Removed item.
             */
            removeAt: function (index) {
                return this._data.splice(index, 1)[0];
            },
            /**
             * @method insert
             * @param item
             * @param index
             */
            insert: function (item, index) {
                if (!this._unique || this.indexOf(item) == -1) {
                    this._data.splice(index, 0, item);
                    return item;
                }
                return null;
            },
            /**
             * @method insertRange
             * @param index
             * @param iter
             * @returns {*}
             */
            insertRange: function (iter, index) {
                var data = this._data;
                var i, items = Iterable.toArray(iter).slice();
                // check for unique
                if (this._unique) {
                    for (i = items.length - 1; i >= 0; i--) {
                        if (this.indexOf(items[i]) >= 0 || items.indexOf(items[i]) < i) {
                            items.splice(i, 1);
                        }
                    }
                }
                data.splice.apply(data, [index, 0].concat(items));
                return items;
            },
            /**
             * @method clear
             * @returns {*}
             */
            clear: function () {
                var items = this._data.slice();
                this._data.length = 0;
                return items;
            },
            /**
             * @method getItem
             * @param index
             * @returns {*}
             */
            getItem: function (index) {
                return this._data[index];
            },
            /**
             * @method getRange
             * @param index
             * @param count
             * @returns {Collection}
             */
            getRange: function (index, count) {
                return new Collection(this._data.slice(index, index + count));
            },
            /**
             * Get the first index the given item appears in the collection, -1 if not found.
             *
             * @method indexOf
             * @param item
             * @returns {*}
             */
            indexOf: function (item) {
                var data = this._data;
                if (data.indexOf) {
                    return data.indexOf(item);
                } else {
                    for (var i = 0, length = data.length; i < length; i++) {
                        if (nx.compare(data[i], item) === 0) {
                            return i;
                        }
                    }
                    return -1;
                }
            },
            /**
             * @method lastIndexOf
             * @param item
             * @returns {*}
             */
            lastIndexOf: function (item) {
                var data = this._data;
                if (data.lastIndexOf) {
                    return data.lastIndexOf(item);
                } else {
                    for (var i = data.length - 1; i >= 0; i--) {
                        if (nx.compare(data[i], item) === 0) {
                            return i;
                        }
                    }

                    return -1;
                }
            },
            /**
             * @method contains
             * @param item
             * @returns {boolean}
             */
            contains: function (item) {
                return this.indexOf(item) >= 0;
            },
            /**
             * Toggle item's existence.
             * @method toggle
             * @param item
             */
            toggle: function (item, existence) {
                if (arguments.length <= 1) {
                    if (this.contains(item)) {
                        this.remove(item);
                    } else {
                        this.add(item);
                    }
                } else if (existence) {
                    this.add(item);
                } else {
                    this.remove(item);
                }
            },
            /**
             * @method sort
             * @param comp
             * @returns {Array}
             */
            sort: function (comp) {
                return this._data.sort(comp);
            },
            /**
             * @method each
             * @param callback
             * @param context
             */
            each: function (callback, context) {
                nx.each(this._data, callback, context);
            },
            /**
             * @method  toArray
             * @returns {Array}
             */
            toArray: function () {
                return this._data.slice(0);
            }
        }
    });
})(nx);

(function (nx) {
    var Iterable = nx.Iterable;

    var DictionaryItem = nx.define({
        properties: {
            key: {},
            value: {
                set: function (value) {
                    if (this._dict) {
                        this._dict.setItem(this._key, value);
                    } else {
                        this._value = value;
                    }
                }
            }
        },
        methods: {
            init: function (dict, key) {
                this._dict = dict;
                this._key = key;
            }
        }
    });

    var KeyIterator = nx.define(Iterable, {
        methods: {
            init: function (dict) {
                this._dict = dict;
            },
            each: function (callback, context) {
                this._dict.each(function (item) {
                    callback.call(context, item.key());
                });
            }
        }
    });

    var ValueIterator = nx.define(Iterable, {
        methods: {
            init: function (dict) {
                this._dict = dict;
            },
            each: function (callback, context) {
                this._dict.each(function (item) {
                    callback.call(context, item.value());
                });
            }
        }
    });

    /**
     * @class Dictionary
     * @namespace nx.data
     * @extends nx.Iterable
     * @constructor
     * @param dict
     */
    var Dictionary = nx.define('nx.data.Dictionary', Iterable, {
        properties: {
            /**
             * @property count
             * @type {Number}
             */
            count: {
                get: function () {
                    return this._items.length;
                }
            },
            /**
             * @property keys
             * @type {Iterable}
             */
            keys: {
                get: function () {
                    return this._keys;
                }
            },
            /**
             * @property values
             * @type {Iterable}
             */
            values: {
                get: function () {
                    return this._values;
                }
            }
        },
        methods: {
            init: function (dict) {
                var map = this._map = {};
                var items = this._items = [];
                this.setItems(dict);
                this._keys = new KeyIterator(this);
                this._values = new ValueIterator(this);
            },
            /**
             * @method contains
             * @param key {String}
             * @returns {Boolean}
             */
            contains: function (key) {
                return key in this._map;
            },
            /**
             * @method getItem
             * @param key {String}
             * @returns {*}
             */
            getItem: function (key) {
                var item = this._map[key];
                return item && item._value;
            },
            /**
             * @method setItem
             * @param key {String}
             * @param value {any}
             */
            setItem: function (key, value) {
                var item = this._map[key];
                if (!item) {
                    item = this._map[key] = new DictionaryItem(this, '' + key);
                    this._items.push(item);
                }
                item._value = value;
                return item;
            },
            /**
             * @method setItems
             * @param dict {Dictionary|Object}
             */
            setItems: function (dict) {
                if (dict) {
                    nx.each(dict, function (value, key) {
                        this.setItem(key, value);
                    }, this);
                }
            },
            /**
             * @method removeItem
             * @param key {String}
             */
            removeItem: function (key) {
                var map = this._map;
                if (!(key in map)) {
                    return;
                }
                var item = map[key];
                var idx = this._items.indexOf(item);
                delete map[key];
                if (idx >= 0) {
                    this._items.splice(idx, 1);
                }
                item._dict = null;
                return item;
            },
            /**
             * @method clear
             */
            clear: function () {
                var items = this._items.slice();
                this._map = {};
                this._items = [];
                nx.each(items, function (item) {
                    item._dict = null;
                });
                return items;
            },
            /**
             * @method each
             * @param callback {Function}
             * @param [context] {Object}
             */
            each: function (callback, context) {
                context = context || this;
                nx.each(this._map, function (item, key) {
                    callback.call(context, item, key);
                });
            },
            /**
             * @method toArray
             * @returns {Array}
             */
            toArray: function () {
                return this._items.slice();
            },
            /**
             * @method toObject
             * @returns {Object}
             */
            toObject: function () {
                var result = {};
                this.each(function (item) {
                    result[item.key()] = item.value();
                });
                return result;
            }
        }
    });
})(nx);

(function (nx) {

    /**
     * @class ObservableObject
     * @namespace nx.data
     * @extends nx.Observable
     */
    nx.define('nx.data.ObservableObject', nx.Observable, {
        methods: {
            init: function (data) {
                this.inherited();
                this._data = data || {};
            },
            /**
             * Dispose current object.
             * @method dispose
             */
            dispose: function () {
                this.inherited();
                this._data = null;
            },
            /**
             * Check whether current object has specified property.
             * @method has
             * @param name {String}
             * @returns {Boolean}
             */
            has: function (name) {
                var member = this[name];
                return (member && member.__type__ == 'property') || (name in this._data);
            },
            /**
             * Get specified property value.
             * @method get
             * @param name {String}
             * @returns {*}
             */
            get: function (name) {
                var member = this[name];
                if (member === undefined) {
                    return this._data[name];
                }
                else if (member.__type__ == 'property') {
                    return member.call(this);
                }
            },
            /**
             * Set specified property value.
             * @method set
             * @param name {String}
             * @param value {*}
             */
            set: function (name, value) {
                var member = this[name];
                if (member === undefined) {
                    if (this._data[name] !== value) {
                        this._data[name] = value;
                        this.notify(name);
                        return true;
                    }
                }
                else if (member.__type__ == 'property') {
                    return member.call(this, value);
                }
            },
            /**
             * Get all properties.
             * @method gets
             * @returns {Object}
             */
            gets: function () {
                var result = nx.clone(this._data);
                nx.each(this.__properties__, function (name) {
                    result[name] = this.get(name);
                }, this);

                return result;
            }
        }
    });
})(nx);
(function (nx) {

    var REGEXP_CHECK = /^(&&|\|\||&|\||\^|-|\(|\)|[a-zA-Z\_][a-zA-Z\d\_]*|\s)*$/;
    var REGEXP_TOKENS = /&&|\|\||&|\||\^|-|\(|\)|[a-zA-Z\_][a-zA-Z\d\_]*/g;
    var REGEXP_OPN = /[a-zA-Z\_][a-zA-Z\d\_]*/;
    var REGEXP_OPR = /&&|\|\||&|\||\^|-|\(|\)/;
    var OPERATORNAMES = {
        "-": "complement",
        "&": "cross",
        "^": "delta",
        "|": "union",
        "&&": "and",
        "||": "or"
    };

    /**
     * @class ObservableCollection
     * @namespace nx.data
     * @extends nx.data.Collection
     * @uses nx.Observable
     */
    var EXPORT = nx.define('nx.data.ObservableCollection', nx.data.Collection, {
        mixins: nx.Observable,
        events: ['change'],
        methods: {
            /**
             * Add an item.
             * @method add
             * @param item
             */
            add: function (item) {
                item = this.inherited(item);
                if (!this._unique || item !== null) {
                    this.notify('count');
                    this.notify('length');
                    this.fire('change', {
                        action: 'add',
                        items: [item]
                    });
                }
                return item;
            },
            /**
             * @method addRange
             * @param iter
             */
            addRange: function (iter) {
                var items = this.inherited(iter);
                if (items.length) {
                    this.notify('count');
                    this.notify('length');
                    this.fire('change', {
                        action: 'add',
                        items: items
                    });
                }
                return items;
            },
            /**
             * @method insert
             * @param item
             * @param index
             */
            insert: function (item, index) {
                item = this.inherited(item, index);
                if (!this._unique || item !== null) {
                    this.notify('count');
                    this.notify('length');
                    this.fire('change', {
                        action: 'add',
                        items: [item],
                        index: index
                    });
                }
                return item;
            },
            /**
             * @method insertRange
             * @param iter
             * @param index
             */
            insertRange: function (iter, index) {
                var items = this.inherited(iter, index);
                if (items.length) {
                    this.notify('count');
                    this.notify('length');
                    this.fire('change', {
                        action: 'add',
                        items: items,
                        index: index
                    });
                }
                return items;
            },
            /**
             * @method remove
             * @param item
             */
            remove: function (item) {
                var result;
                if (arguments.length > 1) {
                    item = Array.prototype.slice.call(arguments);
                    result = this.inherited.apply(this, item);
                    if (result.length) {
                        this.notify('count');
                        this.notify('length');
                        this.fire('change', {
                            action: 'remove',
                            items: item,
                            indices: result
                        });
                    }
                    return result;
                }
                result = this.inherited(item);
                if (result >= 0) {
                    this.notify('count');
                    this.notify('length');
                    this.fire('change', {
                        action: 'remove',
                        items: [item],
                        index: result,
                        indices: [result]
                    });
                }
                return result;
            },
            /**
             * @method removeAt
             * @param index
             */
            removeAt: function (index) {
                var result = this.inherited(index);
                if (result !== undefined) {
                    this.notify('count');
                    this.notify('length');
                    this.fire('change', {
                        action: 'remove',
                        items: [result],
                        index: index
                    });
                }
                return result;
            },
            /**
             * @method clear
             */
            clear: function () {
                var result = this.inherited();
                this.notify('count');
                this.notify('length');
                this.fire('change', {
                    action: 'clear',
                    items: result
                });
            },
            /**
             * @method sort
             * @param comp
             */
            sort: function (comp) {
                var result = this.inherited(comp);
                this.notify('count');
                this.notify('length');
                this.fire('change', {
                    action: 'sort',
                    comparator: comp || function (a, b) {
                        if (a > b) {
                            return 1;
                        } else if (a < b) {
                            return -1;
                        } else {
                            return 0;
                        }
                    }
                });
                return result;
            },
            /**
             * Apply a diff watcher, which handles each item in the collection, to the collection.
             *
             * @method monitor
             * @param handler lambda(item) returning a rollback method
             * @return unwatcher A Object with unwatch method.
             */
            monitor: function (handler) {
                var collection = this;
                // resource (aka. rollback-methods) manager
                var resmgr = {
                    // retains item-vs-rollback-method pairs
                    objcache: [],
                    // since NEXT objects have identified ID, map is used more often
                    idcache: {},
                    // find pair index of indicated item in obj-cache
                    findPair: function (item) {
                        var i;
                        for (i = 0; i < resmgr.objcache.length; i++) {
                            if (item === resmgr.objcache[i][0]) {
                                return i;
                            }
                        }
                        return -1;
                    },
                    // get the rollback method of given item
                    get: function (item) {
                        if (item.__id__) {
                            return resmgr.idcache[item.__id__];
                        } else {
                            var pair = resmgr.objcache[resmgr.findPair(item)];
                            return pair && pair[1];
                        }
                    },
                    // set or remove(with null value) rollback method, will call the old rollback method if exists
                    set: function (item, res) {
                        if (item.__id__) {
                            if (resmgr.idcache[item.__id__]) {
                                resmgr.idcache[item.__id__].call(collection);
                            }
                            if (res) {
                                resmgr.idcache[item.__id__] = res;
                            } else {
                                delete resmgr.idcache[item.__id__];
                            }
                        } else {
                            var pairidx = resmgr.findPair(item);
                            var pair = resmgr.objcache[pairidx];
                            if (pair) {
                                if (pair[1] === res) {
                                    return;
                                }
                                pair[1].call(collection);
                                if (!res) {
                                    resmgr.objcache.splice(pairidx, 1);
                                } else {
                                    pair[1] = res;
                                }
                            } else if (res) {
                                pair = [item, res];
                                resmgr.objcache.push(pair);
                            }
                        }
                    },
                    // call all rollback methods
                    release: function () {
                        nx.each(resmgr.idcache, function (res, key) {
                            res();
                        });
                        nx.each(resmgr.objcache, function (pair) {
                            pair[1]();
                        });
                    }
                };
                // watch the further change of the collection
                var listener = collection.on("change", function (sender, evt) {
                    switch (evt.action) {
                    case "add":
                        nx.each(evt.items, function (item) {
                            var res = handler(item);
                            if (res) {
                                resmgr.set(item, res);
                            }
                        });
                        break;
                    case "remove":
                    case "clear":
                        nx.each(evt.items, function (item) {
                            resmgr.set(item, null);
                        });
                        break;
                    }
                });
                // and don't forget the existing items in the collection
                nx.each(collection, function (item) {
                    var res = handler(item);
                    if (res) {
                        resmgr.set(item, res);
                    }
                });
                // return unwatcher
                return {
                    release: function () {
                        resmgr.release();
                        listener.release();
                    }
                };
            },
            /**
             * Select a sub-collection from a source collection.
             * Usage:
             * <pre>
             * // select all items from collection with property active==true
             * resource = subCollection.select(collection, "active")
             * // select all items from collection with path owner.name=="Knly"
             * resource = subCollection.select(collection, "owner.name", function(name){
             *     return name==="Knly";
             * });
             * // select all string item from collection
             * resource = subCollection.select(collection, function(item){
             *     return typeof item === "string";
             * });
             * </pre>
             * 
             * @method select
             * @param {nx.data.ObservableCollection} source
             * @param {String} conditions
             * @param {Function} determinator
             * @return resource for release the binding
             */
            select: function (source, conditions, determinator) {
                if (!nx.is(source, EXPORT)) {
                    return null;
                }
                if (typeof conditions === "function") {
                    determinator = conditions;
                    conditions = null;
                }
                if (!determinator) {
                    determinator = nx.identity;
                }
                var self = this;
                this.clear();
                var resource = source.monitor(function (item) {
                    var resource;
                    if (conditions) {
                        if (nx.is(item, nx.Observable)) {
                            // monitor the specified conditions
                            resource = nx.Observable.monitor(item, conditions, function () {
                                self.toggle(item, determinator.apply(self, arguments));
                            });
                            resource.affect();
                        } else {
                            // determine the specified conditions if unable to monitor
                            self.toggle(item, determinator.call(self, nx.path(item, conditions)));
                        }
                    } else {
                        // no condition specified means determine item itself
                        self.toggle(item, determinator.call(self, item));
                    }
                    return function () {
                        resource && resource.release();
                        self.toggle(item, false);
                    };
                });
                return resource;
            },
            /**
             * Calculate and synchronize collection with a collection calculation.
             *
             * @method calculate
             * @param experssion
             * @param sources
             * @return resource for release the binding
             */
            calculate: function (expression, sources) {
                var calculation = new EXPORT.Calculation(sources);
                return calculation.calculate(this, expression);
            }
        },
        statics: {
            /**
             * Prepare a calculation provider for a map of collections.
             *
             * @class CollectionRelation
             * @namespace nxex.toolkit.collection
             * @constructor
             * @param map {Object/Map} A map indicates names of the collection for calculation.
             */
            Calculation: nx.define({
                properties: {
                    map: {
                        value: function () {
                            return new nx.data.ObservableDictionary();
                        }
                    }
                },
                methods: {
                    init: function (map) {
                        this.map().setItems(map);
                    },
                    /**
                     * Apply a inter-collection releation to a collection.
                     * Supported operators:<br/>
                     * <table>
                     * <tr><th>Operator</th><th>Calculation</th><th>Method</th></tr>
                     * <tr><td>&amp;</td><td>Sets cross</td><td>cross</td></tr>
                     * <tr><td>|</td><td>Sets union</td><td>union</td></tr>
                     * <tr><td>^</td><td>Sets symmetric difference</td><td>delta</td></tr>
                     * <tr><td>-</td><td>Sets complement</td><td>complement</td></tr>
                     * <tr><td>&amp;&amp;</td><td>Sets logical and</td><td>and</td></tr>
                     * <tr><td>||</td><td>Sets logical or</td><td>or</td></tr>
                     * </table>
                     * Tips:
                     * <ul>
                     * <li>Logical and means 'first empty collection or last collection'</li>
                     * <li>Logical or means 'first non-empty collection or last collection'</li>
                     * </ul>
                     *
                     * @method calculate
                     * @param target {Collection} The target collection.
                     * @param expression {String} The relation expression.
                     * @return An object with release method.
                     */
                    calculate: function (target, expression) {
                        // TODO more validation on the expression
                        if (!expression.match(REGEXP_CHECK)) {
                            throw new Error("Bad expression.");
                        }
                        var self = this;
                        var map = this.map();
                        var tokens = expression.match(REGEXP_TOKENS);
                        var requirements = tokens.filter(RegExp.prototype.test.bind(REGEXP_OPN));
                        var tree = EXPORT.buildExpressionTree(tokens);
                        // sync with the collection existence
                        var res, monitor;
                        var reqmgr = {
                            count: 0,
                            map: {},
                            sync: function () {
                                res && (res.release(), res = null);
                                if (reqmgr.count === requirements.length) {
                                    target.clear();
                                    if (typeof tree === "string") {
                                        // need not to calculate
                                        res = self.map().getItem(tree).monitor(EXPORT.getCollectionSyncMonitor(target));
                                    } else {
                                        res = self._calculate(target, tree);
                                    }
                                }
                            },
                            monitor: function (key, value) {
                                if (requirements.indexOf(key) >= 0) {
                                    /*
                                    if (map[key] && !value) {
                                        reqmgr.count--;
                                    } else if (!map[key] && value) {
                                        reqmgr.count++;
                                    }*/
                                    reqmgr.count += ((!reqmgr.map[key]) * 1 + (!!value) * 1 - 1);
                                    reqmgr.map[key] = value;
                                    reqmgr.sync();
                                }
                            }
                        };
                        monitor = map.monitor(reqmgr.monitor);
                        return {
                            release: function () {
                                res && res.release();
                                monitor.release();
                            }
                        };
                    },
                    _calculate: function (target, tree) {
                        var self = this;
                        var res, iterate, opr = tree[0];
                        // short-circuit for logical operatiors (&& and ||)
                        switch (opr) {
                        case "&&":
                            iterate = function (idx) {
                                var coll, calc, watch, itr;
                                if (typeof tree[idx] === "string") {
                                    coll = self.map().getItem(tree[idx]);
                                } else {
                                    coll = new nx.data.ObservableCollection();
                                    calc = self._calculate(coll, tree[idx]);
                                }
                                if (idx >= tree.length - 1) {
                                    watch = coll.monitor(function (item) {
                                        target.add(item);
                                        return function () {
                                            target.remove(item);
                                        };
                                    });
                                } else {
                                    watch = coll.watch("length", function (n, v) {
                                        if (v) {
                                            itr = iterate(idx + 1);
                                        } else if (itr) {
                                            itr.release();
                                            itr = null;
                                        }
                                    });
                                    watch.affect();
                                }
                                return {
                                    release: function () {
                                        itr && itr.release();
                                        watch && watch.release();
                                        calc && calc.release();
                                    }
                                };
                            };
                            res = iterate(1);
                            break;
                        case "||":
                            iterate = function (idx) {
                                var coll, calc, watch, itr;
                                if (typeof tree[idx] === "string") {
                                    coll = self.map().getItem(tree[idx]);
                                } else {
                                    coll = new nx.data.ObservableCollection();
                                    calc = self._calculate(coll, tree[idx]);
                                }
                                if (idx >= tree.length - 1) {
                                    watch = coll.monitor(EXPORT.getCollectionSyncMonitor(target));
                                } else {
                                    watch = coll.watch("length", function (n, v) {
                                        if (itr) {
                                            itr.release();
                                        }
                                        if (!v) {
                                            itr = iterate(idx + 1);
                                        } else {
                                            itr = coll.monitor(EXPORT.getCollectionSyncMonitor(target));
                                        }
                                    });
                                    watch.affect();
                                }
                                return {
                                    release: function () {
                                        itr && itr.release();
                                        watch && watch.release();
                                        calc && calc.release();
                                    }
                                };
                            };
                            res = iterate(1);
                            break;
                        default:
                            iterate = function () {
                                var i, coll, colls = [];
                                var calc, calcs = [];
                                for (i = 1; i < tree.length; i++) {
                                    if (typeof tree[i] === "string") {
                                        coll = self.map().getItem(tree[i]);
                                    } else {
                                        coll = new nx.data.ObservableCollection();
                                        calc = self._calculate(coll, tree[i]);
                                    }
                                    colls.push(coll);
                                    calcs.push(calc);
                                }
                                calc = EXPORT[OPERATORNAMES[opr]](target, colls);
                                return {
                                    release: function () {
                                        nx.each(calcs, function (calc) {
                                            calc && calc.release();
                                        });
                                        calc.release();
                                    }
                                };
                            };
                            res = iterate();
                            break;
                        }
                        return res;
                    }
                }
            }),
            /**
             * This util returns a monitor function of ObservableCollection, which is used to synchronize item existance between 2 collections.
             *
             * @method getCollectionSyncMonitor
             * @param collection The target collection to be synchronized.
             * @param sync
             *  <ul>
             *  <li>If true, make sure target collection will have all items as source collection has;</li>
             *  <li>If false, make sure target collection will not have any item as source collection has.</li>
             *  </ul>
             *  Default true.
             * @return {function&lt;item&gt;}
             *  The monitor function.
             */
            getCollectionSyncMonitor: function (coll, sync) {
                if (sync !== false) {
                    return function (item) {
                        coll.add(item);
                        return function () {
                            coll.remove(item);
                        };
                    };
                } else {
                    return function (item) {
                        coll.remove(item);
                        return function () {
                            coll.add(item);
                        };
                    };
                }
            },
            /**
             * Affect target to be the cross collection of sources collections.
             * Release object could stop the dependencies.
             *
             * @method cross
             * @param target {Collection}
             * @param sources {Array of Collection}
             * @return an object with release method
             * @static
             */
            cross: function (target, sources) {
                target.clear();
                var counter = new nx.data.Counter();
                var monitors = [];
                var increaseHandler = counter.on("increase", function (o, evt) {
                    if (evt.count == sources.length) {
                        target.add(evt.item);
                    }
                });
                var decreaseHandler = counter.on("decrease", function (o, evt) {
                    if (evt.count == sources.length - 1) {
                        target.remove(evt.item);
                    }
                });

                nx.each(sources, function (coll) {
                    var monitor = coll.monitor(function (item) {
                        counter.increase(item, 1);
                        return function () {
                            counter.decrease(item, 1);
                        };
                    });
                    monitors.push(monitor);
                });
                return {
                    release: function () {
                        increaseHandler.release();
                        decreaseHandler.release();
                        nx.each(monitors, function (monitor) {
                            monitor.release();
                        });
                    }
                };
            },
            /**
             * Affect target to be the union collection of sources collections.
             * Release object could stop the dependencies.
             *
             * @method union
             * @param target {Collection}
             * @param sources {Array of Collection}
             * @return an object with release method
             * @static
             */
            union: function (target, sources) {
                target.clear();
                var counter = new nx.data.Counter();
                var monitors = [];
                var increaseHandler = counter.on("increase", function (o, evt) {
                    if (evt.count === 1) {
                        target.add(evt.item);
                    }
                });
                var decreaseHandler = counter.on("decrease", function (o, evt) {
                    if (evt.count === 0) {
                        target.remove(evt.item);
                    }
                });

                nx.each(sources, function (coll) {
                    var monitor = coll.monitor(function (item) {
                        counter.increase(item, 1);
                        return function () {
                            counter.decrease(item, 1);
                        };
                    });
                    monitors.push(monitor);
                });
                return {
                    release: function () {
                        increaseHandler.release();
                        decreaseHandler.release();
                        nx.each(monitors, function (monitor) {
                            monitor.release();
                        });
                    }
                };
            },
            /**
             * Affect target to be the complement collection of sources collections.
             * Release object could stop the dependencies.
             *
             * @method complement
             * @param target {Collection}
             * @param sources {Array of Collection}
             * @return an object with release method
             * @static
             */
            complement: function (target, sources) {
                target.clear();
                var counter = new nx.data.Counter();
                var monitors = [];
                var length = sources.length;
                var changeHandler = counter.on("change", function (o, evt) {
                    var previous = evt.previousCount,
                        count = evt.count;
                    if (previous < length && count >= length) {
                        target.add(evt.item);
                    }
                    if (previous >= length && count < length) {
                        target.remove(evt.item);
                    }
                });
                var globalMonitor = sources[0].monitor(function (item) {
                    counter.increase(item, length);
                    return function () {
                        counter.decrease(item, length);
                    };
                });
                monitors.push(globalMonitor);
                nx.each(sources, function (coll, index) {
                    if (index > 0) {
                        var monitor = coll.monitor(function (item) {
                            counter.decrease(item);
                            return function () {
                                counter.increase(item);
                            };
                        });
                        monitors.push(monitor);
                    }
                });
                return {
                    release: function () {
                        changeHandler.release();
                        nx.each(monitors, function (monitor) {
                            monitor.release();
                        });
                    }
                };
            },
            /**
             * Affect target to be the symmetric difference collection of sources collections.
             * Release object could stop the dependencies.
             * The name 'delta' is the symbol of this calculation in mathematics.
             * @reference {http://en.wikipedia.org/wiki/Symmetric_difference}
             * @method delta
             * @param target {Collection}
             * @param sources {Array of Collection}
             * @return an object with release method
             * @static
             */
            delta: function (target, sources) {
                target.clear();
                var bound = true;
                var monitors = [];
                nx.each(sources, function (coll) {
                    var monitor = coll.monitor(function (item) {
                        target.toggle(item);
                        return function () {
                            if (bound) {
                                target.toggle(item);
                            }
                        };
                    });
                    monitors.push(monitor);
                });
                return {
                    release: function () {
                        bound = false;
                        nx.each(monitors, function (monitor) {
                            monitor.release();
                        });
                    }
                };
            },
            /**
             * Affect target to be the equivalent collection of the first non-empty collection.
             * Release object could stop the dependencies.
             *
             * @method or
             * @param target {Collection}
             * @param sources {Array of Collection}
             * @return an object with release method
             * @static
             */
            or: function (target, sources) {
                target.clear();
                var res, bound = true;
                var iterator = function (index) {
                    var watch, res, coll = sources[index];
                    watch = coll.watch('length', function (name, value) {
                        res && res.release();
                        if (index < sources.length - 1 && !value) {
                            res = iterator(index + 1);
                        } else {
                            res = coll.monitor(function (item) {
                                target.add(item);
                                return function () {
                                    if (bound) {
                                        target.remove(item);
                                    }
                                };
                            });
                        }
                    });
                    watch.affect();
                    return {
                        release: function () {
                            res && res.release();
                            watch && watch.release();
                        }
                    };
                };
                res = iterator(0);
                return {
                    release: function () {
                        bound = false;
                        res.release();
                    }
                };
            },
            /**
             * Affect target to be the equivalent collection of the first empty collection or the last collection.
             * Release object could stop the dependencies.
             *
             * @method and
             * @param target {Collection}
             * @param sources {Array of Collection}
             * @return an object with release method
             * @static
             */
            and: function (target, sources) {
                target.clear();
                var bound = true;
                var iterate = function (idx) {
                    var watcher, resource, coll = sources[idx];
                    if (idx === sources.length - 1) {
                        return coll.monitor(function (item) {
                            target.add(item);
                            return function () {
                                if (bound) {
                                    target.remove(item);
                                }
                            };
                        });
                    }
                    watcher = coll.watch("length", function (n, v) {
                        if (v) {
                            resource = iterate(idx + 1);
                        } else if (resource) {
                            resource.release();
                            resource = null;
                        }
                    });
                    watcher.affect();
                    return {
                        release: function () {
                            if (resource) {
                                resource.release();
                            }
                            watcher.release();
                        }
                    };
                };
                var resource = iterate(0);
                return {
                    release: function () {
                        bound = false;
                        resource.release();
                    }
                };
            },
            /**
             * Build a tree of expresson syntax with the expression tokens.
             * e.g. tokens ["A", "|", "B", "&", "(", "C", "&", "D", ")"], which was separated from expression "A | B & (C | D)",
             * will be separated into [|, A, [&, B, [|, C, D]]], because '&' has higher priority than '|',
             * and braced "C | D" has higher priority than &. <br/>
             * <br/>
             * Similar to the priorities in JavaScript:<br/>
             * <table>
             * <tr><th>operator</th><th>functionality</th></tr>
             * <tr><td>()</td><td>braces</td></tr>
             * <tr><td>-</td><td>complement</td></tr>
             * <tr><td>&</td><td>cross</td></tr>
             * <tr><td>^</td><td>symmetric difference</td></tr>
             * <tr><td>|</td><td>union</td></tr>
             * <tr><td>&&</td><td>and (the first empty collection or the last collection)</td></tr>
             * <tr><td>||</td><td>or (the first non-empty collection)</td></tr>
             * </table>
             *
             * @method buildExpressionTree
             * @param {Array of token} tokens
             * @return {Array tree} Parsed syntax tree of the expression tokens.
             * @static
             */
            buildExpressionTree: (function () {
                var PRIORITIES = [
                    ["-"],
                    ["&"],
                    ["^"],
                    ["|"],
                    ["&&"],
                    ["||"]
                ];
                var getPriority = function (opr) {
                    for (var i = 0; i < PRIORITIES.length; i++) {
                        if (PRIORITIES[i].indexOf(opr) >= 0) {
                            return i;
                        }
                    }
                };
                var buildExpressionNode = function (opr, opn1, opn2) {
                    if (Object.prototype.toString.call(opn1) === "[object Array]" && opn1[0] === opr) {
                        opn1.push(opn2);
                        return opn1;
                    }
                    return [opr, opn1, opn2];
                };
                return function (tokens) {
                    if (typeof tokens === "string") {
                        tokens = tokens.match(REGEXP_TOKENS);
                    }
                    tokens = tokens.concat([")"]);
                    var token, opr, oprstack = [];
                    var opn, opnstack = [];
                    var operands = [];
                    while (tokens.length) {
                        token = tokens.shift();
                        if (token === ")") {
                            while ((opr = oprstack.pop())) {
                                if (opr === "(") {
                                    break;
                                }
                                opn = opnstack.pop();
                                opnstack.push(buildExpressionNode(opr, opnstack.pop(), opn));
                            }
                        } else if (token === "(") {
                            oprstack.push(token);
                        } else if (token.match(REGEXP_OPN)) {
                            opnstack.push(token);
                            if (operands.indexOf(token) == -1) {
                                operands.push(token);
                            }
                        } else if (token.match(REGEXP_OPR)) {
                            while (oprstack.length) {
                                opr = oprstack.pop();
                                if (opr === "(" || getPriority(opr) > getPriority(token)) {
                                    oprstack.push(opr);
                                    break;
                                }
                                opn = opnstack.pop();
                                opnstack.push(buildExpressionNode(opr, opnstack.pop(), opn));
                            }
                            oprstack.push(token);
                        }
                    }
                    if (opnstack[0]) {
                        opnstack[0].operands = operands;
                    }
                    return opnstack[0];
                };
            })()
        }
    });
})(nx);

(function (nx) {

    var Observable = nx.Observable;
    var Dictionary = nx.data.Dictionary;

    var ObservableDictionaryItem = nx.define(Observable, {
        properties: {
            key: {},
            value: {
                set: function (value) {
                    if (this._dict) {
                        this._dict.setItem(this._key, value);
                    } else {
                        this._value = value;
                    }
                }
            }
        },
        methods: {
            init: function (dict, key) {
                this._dict = dict;
                this._key = key;
            }
        }
    });

    /**
     * @class ObservableDictionary
     * @namespace nx.data
     * @extends nx.data.Dictionary
     * @constructor
     * @param dict
     */
    nx.define('nx.data.ObservableDictionary', Dictionary, {
        mixins: Observable,
        events: ['change'],
        methods: {
            /**
             * @method setItem
             * @param key {String}
             * @param value {any}
             */
            setItem: function (key, value) {
                var map = this._map,
                    items = this._items;
                var item = map[key],
                    ov;
                if (item) {
                    ov = item.value;
                    item._value = value;
                    item.notify("value");
                    this.fire('change', {
                        action: 'replace',
                        items: [item],
                        oldValue: ov,
                        newValue: value,
                        // FIXME actually unnecessary
                        oldItem: item,
                        newItem: item
                    });
                } else {
                    item = map[key] = new ObservableDictionaryItem(this, key);
                    items.push(item);
                    item._dict = this;
                    item._value = value;
                    this.notify('count');
                    this.fire('change', {
                        action: 'add',
                        index: items.length - 1,
                        items: [item]
                    });
                }
            },
            /**
             * @method removeItem
             * @param key {String}
             */
            removeItem: function (key) {
                var map = this._map;
                if (!(key in map)) {
                    return;
                }
                var item = map[key];
                var idx = this._items.indexOf(item);
                delete map[key];
                if (idx >= 0) {
                    this._items.splice(idx, 1);
                }
                item._dict = null;
                this.notify('count');
                this.fire('change', {
                    action: 'remove',
                    items: [item]
                });
                return item;
            },
            /**
             * @method clear
             */
            clear: function () {
                var items = this.inherited();
                this.notify('count');
                this.fire('change', {
                    action: 'clear',
                    items: items
                });
            },
            /**
             * Apply a diff watcher, which handles each key-item-pair in the collection, to the dictionary.
             *
             * @method monitor
             * @param handler lambda(key, item) returning a rollback method
             * @return unwatcher A Object with unwatch method.
             */
            monitor: function (keys, callback) {
                // check parameter list
                if (typeof keys === "string" && keys.indexOf(",") >= 0 || Object.prototype.toString.call(keys) === "[object Array]") {
                    if (typeof keys === "string") {
                        keys = keys.replace(/\s/g, "").split(",");
                    }
                    return this._monitor(keys, callback);
                }
                if (typeof keys === "function") {
                    callback = keys;
                    keys = null;
                }
                var dict = this;
                var resmgr = {
                    map: {},
                    get: function (key) {
                        return resmgr.map[key];
                    },
                    set: function (key, res) {
                        if (keys && keys !== key) {
                            return;
                        }
                        var old = resmgr.get(key);
                        old && old();
                        if (res) {
                            resmgr.map[key] = res;
                        } else {
                            delete resmgr.map[key];
                        }
                    },
                    release: function () {
                        var key, map = resmgr.map;
                        for (key in map) {
                            map[key]();
                        }
                    },
                    callback: function (key, value) {
                        if (keys) {
                            if (keys === key) {
                                return callback(value);
                            }
                        } else {
                            return callback(key, value);
                        }
                    }
                };
                var listener = dict.on("change", function (target, evt) {
                    var i, item, key, res;
                    switch (evt.action) {
                    case "replace":
                    case "add":
                        for (i = 0; i < evt.items.length; i++) {
                            item = evt.items[i];
                            key = item.key();
                            res = resmgr.callback(key, item.value());
                            resmgr.set(key, res);
                        }
                        break;
                    case "remove":
                    case "clear":
                        for (i = 0; i < evt.items.length; i++) {
                            resmgr.set(evt.items[i].key(), null);
                        }
                        break;
                    }
                });
                dict.each(function (item, key) {
                    var res = resmgr.callback(key, item.value());
                    resmgr.set(key, res);
                });
                return {
                    release: function () {
                        resmgr.release();
                        listener.release();
                    }
                };
            },
            _monitor: function (keys, callback) {
                var self = this;
                var resmgr = {
                    values: keys.map(function (key) {
                        return self.getItem(key);
                    }),
                    affect: function () {
                        callback.apply(self, resmgr.values);
                    }
                };
                var listener = this.on("change", function (dict, evt) {
                    var idx, key, item, hasValue, affect = false;
                    switch (evt.action) {
                    case "replace":
                    case "add":
                        hasValue = true;
                        break;
                    case "remove":
                    case "clear":
                        hasValue = false;
                        break;
                    }
                    for (i = 0; i < evt.items.length; i++) {
                        item = evt.items[i];
                        key = item.key();
                        idx = keys.indexOf(key);
                        if (idx >= 0) {
                            resmgr.values[idx] = hasValue ? item.value() : undefined;
                            affect = true;
                        }
                    }
                    affect && resmgr.affect();
                });
                return {
                    affect: resmgr.affect,
                    release: listener.release
                };
            }
        }
    });
})(nx);

(function (nx) {
    var Iterable = nx.Iterable;
    var ArrayPrototype = Array.prototype;
    var every = ArrayPrototype.every;
    var some = ArrayPrototype.some;
    var filter = ArrayPrototype.filter;
    var map = ArrayPrototype.map;
    var reduce = ArrayPrototype.reduce;

    /**
     * @class Query
     * @namespace nx.data
     * @extend nx.Iterable
     */
    var Query = nx.define('nx.data.Query', nx.Iterable, {
        methods: {
            /**
             * @constructor
             * @param iter
             */
            init: function (iter) {
                this._iter = iter;
                this.reset();
            },
            /**
             * Reset the query.
             * @method reset
             */
            reset: function () {
                this._where = null;
                this._orderBy = null;
                this._unions = [];
                this._joins = [];
                this._begin = 0;
                this._end = null;
            },
            /**
             * @method where
             * @param expr
             * @chainable
             */
            where: function (expr) {
                this._where = expr;
                return this;
            },
            /**
             * method orderBy
             * @param expr
             * @param desc
             * @chainable
             */
            orderBy: function (expr, desc) {
                if (nx.is(expr, 'Function')) {
                    this._orderBy = desc ? function (a, b) {
                        return expr(b, a);
                    } : expr;
                }
                else {
                    this._orderBy = desc ? function (a, b) {
                        return nx.compare(nx.path(b, expr), nx.path(a, expr));
                    } : function (a, b) {
                        return nx.compare(nx.path(a, expr), nx.path(b, expr));
                    };
                }

                return this;
            },
            /**
             * @method groupBy
             * @param expr
             * @chainable
             */
            groupBy: function (expr) {
                throw new Error('Not Implemented');
            },
            /**
             * @method distinct
             * @param expr
             * @chainable
             */
            distinct: function (expr) {
                throw new Error('Not Implemented');
            },
            /**
             * @method skip
             * @param count
             * @chainable
             */
            skip: function (count) {
                this._begin = count;

                if (this._end) {
                    this._end += count;
                }

                return this;
            },
            /**
             * @method take
             * @param count
             * @chainable
             */
            take: function (count) {
                this._end = this._begin + count;

                return this;
            },
            /**
             * @method join
             * @param iter
             * @param on
             * @chainable
             */
            join: function (iter, on) {
                this._join = function () {

                };
                throw new Error('Not Implemented');
            },
            /**
             * @method select
             * @param expr
             * @returns {Array}
             */
            select: function (expr) {
                var arr = this.toArray();
                if (nx.is(expr, 'Function')) {
                    return map.call(arr, expr);
                }
                else if (nx.is(expr, 'String')) {
                    return map.call(arr, function (item) {
                        return nx.path(item, expr);
                    });
                }
                else if (nx.is(expr, 'Array')) {
                    return map.call(arr, function (item) {
                        var result = {};
                        nx.each(expr, function (path) {
                            nx.path(result, path, nx.path(item, path));
                        });

                        return result;
                    });
                }
                else {
                    return arr;
                }
            },
            /**
             * @method first
             * @param expr
             * @returns {any}
             */
            first: function (expr) {
                var arr = this.toArray();
                if (expr) {
                    for (var i = 0, length = arr.length; i < length; i++) {
                        var item = arr[i];
                        if (expr(item)) {
                            return item;
                        }
                    }
                }
                else {
                    return arr[0];
                }
            },
            /**
             * @method last
             * @param expr
             * @returns {any}
             */
            last: function (expr) {
                var arr = this.toArray();
                if (expr) {
                    for (var i = arr.length - 1; i >= 0; i--) {
                        var item = arr[i];
                        if (expr(item)) {
                            return item;
                        }
                    }
                }
                else {
                    return arr[arr.length - 1];
                }
            },
            /**
             * @method all
             * @param expr
             * @returns {Boolean}
             */
            all: function (expr) {
                return every.call(this.toArray(), expr);
            },
            /**
             * @method any
             * @param expr
             * @returns {Boolean}
             */
            any: function (expr) {
                return some.call(this.toArray(), expr);
            },
            /**
             * @method max
             * @param expr
             * @returns {Number}
             */
            max: function (expr) {
                return reduce.call(this.toArray(), function (pre, cur, index, arr) {
                    return pre > cur ? pre : cur;
                });
            },
            /**
             * @method min
             * @param expr
             * @returns {Number}
             */
            min: function (expr) {
                return reduce.call(this.toArray(), function (pre, cur, index, arr) {
                    return pre < cur ? pre : cur;
                });
            },
            /**
             * @method sum
             * @param expr
             * @returns {Number}
             */
            sum: function (expr) {
                return reduce.call(this.toArray(), function (pre, cur, index, arr) {
                    return pre + cur;
                });
            },
            /**
             * @method average
             * @param expr
             * @returns {Number}
             */
            average: function (expr) {
                var arr = this.toArray();
                return reduce.call(arr, function (pre, cur, index, arr) {
                    return pre + cur;
                }) / arr.length;
            },
            /**
             * @method toArray
             * @returns {Array}
             */
            toArray: function () {
                var arr = Iterable.toArray(this._iter);

                nx.each(this._unions, function (union) {
                    arr.concat(Iterable.toArray(union));
                });

                if (this._where) {
                    arr = filter.call(arr, this._where);
                }

                if (this._orderBy) {
                    arr = arr.sort(this._orderBy);
                }

                if (this._end > 0) {
                    arr = arr.slice(this._begin, this._end);
                }
                else {
                    arr = arr.slice(this._begin);
                }

                this.reset();
                return arr;
            }
        },
        statics: {
            query: (function () {
                var i, internal = {
                        publics: {
                            select: function (array, selector) {
                                var rslt = [];
                                if (nx.is(array, "Array") && nx.is(selector, "Function")) {
                                    var i, item;
                                    for (i = 0; i < array.length; i++) {
                                        item = array[i];
                                        if (selector(item)) {
                                            rslt.push(item);
                                        }
                                    }
                                }
                                return rslt;
                            },
                            group: function (array, grouper) {
                                var map;
                                if (nx.is(grouper, "Function")) {
                                    map = {};
                                    var i, id, group;
                                    for (i = 0; i < array.length; i++) {
                                        id = grouper(array[i]);
                                        if (!id || typeof id !== "string") {
                                            continue;
                                        }
                                        group = map[id] = map[id] || [];
                                        group.push(array[i]);
                                    }
                                }
                                else {
                                    map = array;
                                }
                                return map;
                            },
                            aggregate: function (array, aggregater) {
                                var rslt = null,
                                    key;
                                if (nx.is(aggregater, "Function")) {
                                    if (nx.is(array, "Array")) {
                                        rslt = aggregater(array);
                                    }
                                    else {
                                        rslt = [];
                                        for (key in array) {
                                            rslt.push(aggregater(array[key], key));
                                        }
                                    }
                                }
                                return rslt;
                            }
                        },
                        privates: {
                            aggregate: function (array, args) {
                                var rslt, grouper = null,
                                    aggregater = null;
                                // get original identfier and aggregater
                                if (nx.is(args, "Array")) {
                                    if (typeof args[args.length - 1] === "function") {
                                        aggregater = args.pop();
                                    }
                                    grouper = (args.length > 1 ? args : args[0]);
                                }
                                else {
                                    grouper = args.map;
                                    aggregater = args.aggregate;
                                }
                                // translate grouper into function if possible
                                if (typeof grouper === "string") {
                                    grouper = grouper.replace(/\s/g, "").split(",");
                                }
                                if (nx.is(grouper, "Array") && grouper[0] && typeof grouper[0] === "string") {
                                    grouper = (function (keys) {
                                        return function (obj) {
                                            var i, o = {};
                                            for (i = 0; i < keys.length; i++) {
                                                o[keys[i]] = obj[keys[i]];
                                            }
                                            return JSON.stringify(o);
                                        };
                                    })(grouper);
                                }
                                // do map aggregate
                                rslt = internal.publics.aggregate(internal.publics.group(array, grouper), aggregater);
                                return rslt;
                            },
                            mapping: function (array, mapper) {
                                var i, rslt;
                                if (mapper === true) {
                                    rslt = EXPORT.clone(array);
                                }
                                else if (nx.is(mapper, "Function")) {
                                    if (nx.is(array, "Array")) {
                                        rslt = [];
                                        for (i = 0; i < array.length; i++) {
                                            rslt.push(mapper(array[i], i));
                                        }
                                    }
                                    else {
                                        rslt = mapper(array, 0);
                                    }
                                }
                                else {
                                    if (nx.is(array, "Array")) {
                                        rslt = array.slice();
                                    }
                                    else {
                                        rslt = array;
                                    }
                                }
                                return rslt;
                            },
                            orderby: function (array, comparer) {
                                if (typeof comparer === "string") {
                                    comparer = comparer.replace(/^\s*(.*)$/, "$1").replace(/\s*$/, "").replace(/\s*,\s*/g, ",").split(",");
                                }
                                if (nx.is(comparer, "Array") && comparer[0] && typeof comparer[0] === "string") {
                                    comparer = (function (keys) {
                                        return function (o1, o2) {
                                            var i, key, desc;
                                            if (!o1 && !o2) {
                                                return 0;
                                            }
                                            for (i = 0; i < keys.length; i++) {
                                                key = keys[i];
                                                desc = /\sdesc$/.test(key);
                                                key = key.replace(/(\s+desc|\s+asc)$/, "");
                                                if (o1[key] > o2[key]) {
                                                    return desc ? -1 : 1;
                                                }
                                                else if (o2[key] > o1[key]) {
                                                    return desc ? 1 : -1;
                                                }
                                            }
                                            return 0;
                                        };
                                    })(comparer);
                                }
                                if (comparer && typeof comparer === "function") {
                                    array.sort(comparer);
                                }
                                return array;
                            }
                        },
                        query: function (array, options) {
                            /**
                             * @doctype MarkDown
                             * options:
                             * - options.array [any*]
                             *   - the target array
                             * - options.select: function(any){return boolean;}
                             *   - *optional*
                             *   - pre-filter of the array
                             * - options.aggregate: {grouper:grouper,aggregater:aggregater} or [proplist, aggregater] or [prop, prop, ..., aggregater]
                             *   - *optional*
                             *   - proplist: "prop,prop,..."
                             *   - prop: property name on array items
                             *   - grouper: map an array item into a string key
                             *   - aggregater: function(mapped){return aggregated}
                             * - options.mapping: function(item){return newitem}
                             *   - *optional*
                             * - options.orderby: proplist or [prop, prop, ...]
                             *   - *optional*
                             */
                            if (arguments.length == 1) {
                                options = array;
                                array = options.array;
                            }
                            if (!array) {
                                return array;
                            }
                            if (options.select) {
                                array = internal.publics.select(array, options.select);
                            }
                            if (options.aggregate) {
                                array = internal.privates.aggregate(array, options.aggregate);
                            }
                            if (options.mapping) {
                                array = internal.privates.mapping(array, options.mapping);
                            }
                            if (options.orderby) {
                                array = internal.privates.orderby(array, options.orderby);
                            }
                            return array;
                        }
                    };
                for (i in internal.publics) {
                    internal.query[i] = internal.publics[i];
                }
                return internal.query;
            })()
        }
    });
})(nx);

(function (nx) {

    /**
     * @class SortedMap
     * @namespace nx.data
     * @uses nx.Observable
     * @param data The initial data of SortedMap, which is an array of objects with properties "key" and "value".
     */
    nx.define('nx.data.SortedMap', {
        mixins: nx.Observable,
        events: ['change'],
        properties: {
            /**
             * The length of SortedMap.
             * @property length
             */
            length: {
                get: function () {
                    return this._data.length;
                }
            }
        },
        methods: {
            init: function (data) {
                data = data || [];
                var b = this.__validateData(data);
                if (b) {
                    this._data = data;
                    this._map = {};

                    //init _map
                    var self = this;
                    nx.each(data, function (item) {
                        var map = self._map;
                        map[item.key] = item;
                    });

                } else {
                    throw Error('init data are invalid!');
                }
            },
            /**
             * validate the init args
             * @param data
             * @returns {boolean}
             * @private
             */
            __validateData: function (data) {
                var b = true;
                if (!nx.is(data, 'Array')) {
                    b = false;
                } else {
                    nx.each(data, function (item) {
                        if (item.key === undefined || item.value === undefined) {
                            b = false;
                            return false;
                        }
                    });
                }

                return b;
            },
            /**
             * Add or insert an value with specified key and index.
             * @method add
             * @param key Specified key.
             * @param value (Optional) The value, default undefined.
             * @param index (Optional) Specified index, default append.
             * @return The created entry.
             */
            add: function (key, value, index) {
                var item = {
                    key: key,
                    value: value
                };
                this._map[key] = item;
                if (index === undefined) {
                    index = this._data.length;
                }
                this._data.splice(index, 0, item);
                this.notify('length');
                this.fire('change', {
                    action: "add",
                    index: index,
                    key: key,
                    value: value
                });
                return value;
            },
            /**
             * Remove value(s) from SortedMap by key(s).
             * @method remove
             * @param key The key of value attempt to be removed.
             * @return Removed value.
             */
            remove: function (key) {
                var value, item;

                item = this._map[key];
                if (item !== undefined) {
                    var idx = this._data.indexOf(item);
                    if (idx > -1) {
                        value = item.value;
                        this._data.splice(idx, 1);
                        delete this._map[key];
                        this.notify('length');
                        this.fire('change', {
                            action: "remove",
                            index: idx,
                            key: key,
                            value: value
                        });
                    } else {
                        throw 'key:"' + key + '" has been found in the _map but not exists in the _data!';
                    }
                }

                return value;
            },
            /**
             * Remove value from SortedMap by index.
             * @method removeAt
             * @param index The index of value attempt to be removed.
             * @return Removed value.
             */
            removeAt: function (index) {
                var value, item = this.__getItemAt(index);

                if (item !== undefined) {
                    value = item.value;
                    this._data.splice(index, 1);
                    delete this._map[item.key];
                    this.notify('length');
                    this.fire('change', {
                        action: "remove",
                        index: index,
                        key: item.key,
                        value: value
                    });
                }

                return value;
            },
            /**
             * get the item of this._data by index
             * @param index Support negative number
             * @returns {Object} item
             * @private
             */
            __getItemAt: function (index) {
                var item = this._data[index > -1 ? index : this._data.length + index];

                return item;
            },
            /**
             * Get the key at specified index.
             * @method getKeyAt
             * @param index The index.
             * @return The key, null if not exists.
             */
            getKeyAt: function (index) {
                var item = this.__getItemAt(index), key;
                if (item) {
                    key = item.key;
                }
                return key;
            },
            /**
             * Get the index of specified key.
             * @method indexOf
             * @param key The key.
             * @return The index, -1 if not exists.
             */
            indexOf: function (key) {
                var item = this._map[key], idx = -1;
                if (item !== undefined) {
                    idx = this._data.indexOf(item);
                }
                return idx;
            },
            /**
             * Get a value with specified key.
             * @method getValue
             * @param key The value's key.
             * @return The value.
             */
            getValue: function (key) {
                var item = this._map[key], value;
                if (item !== undefined) {
                    value = item.value;
                }
                return value;
            },
            /**
             * Change value of specified key.
             * @method setValue
             * @param key The key attempt to be changed.
             * @param value The new value.
             * @return The new value.
             */
            setValue: function (key, value) {
                var item = this._map[key];
                if (item !== undefined) {
                    var oldValue = item.value;
                    var idx = this._data.indexOf(item);
                    item.value = value;
                    this.fire('change', {
                        action: "set",
                        index: idx,
                        key: key,
                        value: value,
                        oldValue: oldValue
                    });
                } else {
                    throw Error('the key:"' + key + '" dos not exists!');
                }

                return value;
            },
            /**
             * Get a value with speicifed index.
             * @method getValueAt
             * @param index The value's index.
             * @return The value.
             */
            getValueAt: function (index) {
                var value, item = this.__getItemAt(index);

                if (item !== undefined) {
                    value = item.value;
                }

                return value;
            },
            /**
             * Change value of speicifed index.
             * @method setValueAt
             * @param index The index attempt to be changed.
             * @param value The new value.
             * @return The new value.
             */
            setValueAt: function (index, value) {
                var item = this.__getItemAt(index);
                if (item !== undefined) {
                    var oldValue = item.value;
                    item.value = value;
                    this.fire('change', {
                        action: "set",
                        index: index,
                        key: item.key,
                        value: value,
                        oldValue: oldValue
                    });
                }
                return value;
            },
            /**
             * change the order of specific Item by key
             * @param key
             * @param index
             */
            setIndex: function (key, index) {
                var idx = this.indexOf(key), result = true;
                if (idx != -1 && index !== idx) {
                    var rtn = this._data.splice(idx, 1);
                    this._data.splice(index, 0, rtn[0]);
                    this.fire('change', {
                        action: 'reorder',
                        index: index,
                        oldIndex: idx,
                        key: key
                    });
                } else {
                    result = false;
                }

                return result;
            },
            /**
             * Sort the SortedMap with a comparer function.
             * @method sort
             * @param comparer A function expecting arguments: key1, value1, key2, value2
             */
            sort: function (comparer) {
                this._data.sort(function (item1, item2) {
                    return comparer.call(null, item1.key, item1.value, item2.key, item2.value);
                });
            },
            /**
             * Get array of key-value pairs of all entries.
             * @method toArray
             * @return An array, each item of which is an object with key and value property.
             */
            toArray: function () {
                var arr = this._data.slice(0);
                for (var i = 0, len = arr.length; i < len; i++) {
                    arr[i] = nx.clone(arr[i]);
                }
                return arr;
            },
            /**
             * support iterator for the callback which has three params:k,v,index
             * @param callback
             */
            each: function (callback) {
                var arr = this.toArray();
                for (var i = 0, len = arr.length; i < len; i++) {
                    var item = arr[i];
                    callback.call(this, item.key, item.value, i);
                }
            },
            /**
             * adapt to the nx.each, which has two params for the callback:k,v
             * @param callback
             * @private
             */
            __each__: function (callback) {
                var arr = this.toArray();
                for (var i = 0, len = arr.length; i < len; i++) {
                    var item = arr[i];
                    callback.call(this, item.key, item.value);
                }
            }
        }
    });
})(nx);

(function (nx) {
    //@https://github.com/yui/yui3/blob/master/src/yui/js/yui-ua.js
    var window = nx.global,
        document = window.document,
        documentMode = document.documentMode || 0,
        compatMode = document.compatMode,
        navigator = window.navigator,
        location = window.location,
        userAgent = navigator.userAgent.toLowerCase(),
        protocol = location.protocol.toLowerCase();
    var tempElement = document.createElement('div'),
        tempStyle = tempElement.style,
        result,
        ie = (result = userAgent.match(/msie (\d+)\./)) && result[1];

    //test opacity:
    tempStyle.cssText = "opacity:.55";

    var vendorPrefixMap = {
        'webkit': ['webkit', '-webkit-'],
        'gecko': ['Moz', '-moz-'],
        'presto': ['O', '-o-'],
        'trident': ['ms', '-ms-']
    };

    var osPatternMap = {
        'windows': /windows|win32/,
        'macintosh': /macintosh|mac_powerpc/,
        'linux': /linux/
    };

    var supportMap = {
        addEventListener: !! document.addEventListener,
        dispatchEvent: !! document.dispatchEvent,
        getBoundingClientRect: !! document.documentElement.getBoundingClientRect,
        onmousewheel: 'onmousewheel' in document,
        XDomainRequest: !! window.XDomainRequest,
        crossDomain: !! (window.XDomainRequest || window.XMLHttpRequest),
        getComputedStyle: 'getComputedStyle' in window,
        iePropertyChange: !! (ie && ie < 9),
        w3cChange: !ie || ie > 8,
        w3cFocus: !ie || ie > 8,
        w3cInput: !ie || ie > 9,
        innerText: 'innerText' in tempElement,
        firstElementChild: 'firstElementChild' in tempElement,
        cssFloat: 'cssFloat' in tempStyle,
        opacity: (/^0.55$/).test(tempStyle.opacity),
        filter: 'filter' in tempStyle,
        classList: !! tempElement.classList,
        removeProperty: 'removeProperty' in tempStyle,
        touch:'ontouchstart' in document.documentElement
    };

    var engineMap = {
        firefox: function () {
            return {
                name: 'gecko',
                version: getVersion('rv:')
            };
        },
        opera: function () {
            var version = getVersion('presto\\/');
            var engineName = 'presto';
            if (!version) {
                engineName = 'webkit';
                version = getVersion('webkit\\/');
            }
            return {
                name: engineName,
                version: version
            };
        },
        ie: function () {
            return {
                name: 'trident',
                version: getVersion('trident\\/') || 4
            };
        },
        'default': function () {
            return {
                name: 'webkit',
                version: getVersion('webkit\\/')
            };
        }
    };

    function getVersion(pattern) {
        var regexp = new RegExp(pattern + '(\\d+\\.\\d+)');
        var regexResult;
        return (regexResult = regexp.exec(userAgent)) ? parseFloat(regexResult[1]) : 0;
    }

    var os = (function () {
        var osName;
        for (osName in osPatternMap) {
            if (osPatternMap[osName].test(userAgent)) {
                break;
            }
        }
        return {
            name: osName
        };
    })();

    var browser = (function () {
        var browserName,
            item,
            checkIs,
            checkExclude,
            browserVersion = 0;

        for (browserName in browserPatternMap) {
            item = browserPatternMap[browserName];
            checkIs = (new RegExp(item.is)).test(userAgent);
            checkExclude = (new RegExp(item.exclude)).test(userAgent);
            if (checkIs && !checkExclude) {
                if (userAgent.indexOf('opr/') > -1) {
                    browserName = 'opera';
                    item.version = '\\bopr\/';
                }
                browserVersion = getVersion(item.version);
                break;
            }
        }

        return {
            name: browserName,
            version: browserVersion
        };
    })();

    var browserPatternMap = {
        ie: {
            is: 'msie',
            exclude: 'opera',
            version: 'msie '
        },
        firefox: {
            is: 'gecko',
            exclude: 'webkit',
            version: '\\bfirefox\/'
        },
        chrome: {
            is: '\\bchrome\\b',
            exclude: null,
            version: '\\bchrome\/'
        },
        safari: {
            is: 'safari',
            exclude: '\\bchrome\\b',
            version: 'version\/'
        },
        opera: {
            is: 'opera',
            exclude: null,
            version: 'version\/'
        }
    };


    var keyMap = {
        BACKSPACE: 8,
        TAB: 9,
        CLEAR: 12,
        ENTER: 13,
        SHIFT: 16,
        CTRL: 17,
        ALT: 18,
        META: (browser.name === "chrome" || browser.name === "webkit" || browser.name === "safari") ? 91 : 224, // the apple key on macs
        PATURKEYE: 19,
        CAPS_LOCK: 20,
        ESCAPE: 27,
        SPACE: 32,
        PAGE_UP: 33,
        PAGE_DOWN: 34,
        END: 35,
        HOME: 36,
        LEFT_ARROW: 37,
        UP_ARROW: 38,
        RIGHT_ARROW: 39,
        DOWN_ARROW: 40,
        INSERT: 45,
        DELETE: 46,
        HELP: 47,
        LEFT_WINDOW: 91,
        RIGHT_WINDOW: 92,
        SELECT: 93,
        NUMPAD_0: 96,
        NUMPAD_1: 97,
        NUMPAD_2: 98,
        NUMPAD_3: 99,
        NUMPAD_4: 100,
        NUMPAD_5: 101,
        NUMPAD_6: 102,
        NUMPAD_7: 103,
        NUMPAD_8: 104,
        NUMPAD_9: 105,
        NUMPAD_MULTIPLY: 106,
        NUMPAD_PLTURKEY: 107,
        NUMPAD_ENTER: 108,
        NUMPAD_MINTURKEY: 109,
        NUMPAD_PERIOD: 110,
        NUMPAD_DIVIDE: 111,
        F1: 112,
        F2: 113,
        F3: 114,
        F4: 115,
        F5: 116,
        F6: 117,
        F7: 118,
        F8: 119,
        F9: 120,
        F10: 121,
        F11: 122,
        F12: 123,
        F13: 124,
        F14: 125,
        F15: 126,
        NUM_LOCK: 144,
        SCROLL_LOCK: 145
    };


    var engine = (engineMap[browser] || engineMap['default'])();

    /**
     * Environment and check behavior support
     * @class nx.Env
     * @constructor
     */
    nx.define('nx.Env', {
        static: true,
        properties: {
            /**
             * Document mode
             * @property documentMode
             * @type {Number}
             * @default 0
             */
            documentMode: {
                value: documentMode
            },
            /**
             * Document compatMode
             * @property compatMode
             * @type {String}
             * @default "CSS1Compat"
             */
            compatMode: {
                value: compatMode
            },
            /**
             * User agent string
             * @property userAgent
             * @type {String}
             * @default ""
             */
            userAgent: {
                value: userAgent
            },
            /**
             * Browser render model CSS1Compat
             * @property strict
             * @type {Boolean}
             * @default true
             */
            strict: {
                value: compatMode === 'CSS1Compat'
            },
            /**
             * If it is secure
             * @property strict
             * @type {Boolean}
             * @default false
             */
            secure: {
                value: protocol.indexOf('https') === 0
            },
            /**
             * Get operating system information
             * @property os
             * @type {Object}
             * @default {}
             */
            os: {
                value: os
            },
            /**
             * Get specific prefix
             * @property prefix
             * @type {Array}
             * @default ['webkit','-webkit-']
             */
            prefix: {
                value: vendorPrefixMap[engine.name]
            },
            /**
             * Get browser's render engine information
             * @property engine
             * @type {Object}
             * @default {}
             */
            engine: {
                value: engine
            },
            /**
             * Get basic browser information
             * @property browser
             * @type {Object}
             * @default {}
             */
            browser: {
                value: browser
            },
            /**
             * Get keyboard key code map.
             * @property keyMap
             * @type {Object}
             * @default {}
             */
            keyMap: {
                value: keyMap
            }
        },
        methods: {
            /**
             * Whether the property is support
             * @method support
             * @param inName
             * @returns {*}
             */
            support: function (inName) {
                return supportMap[inName];
            },
            /**
             * Support map for debug
             * @method getSupportMap
             * @returns {{addEventListener: boolean, dispatchEvent: boolean, getBoundingClientRect: boolean, onmousewheel: boolean, XDomainRequest: boolean, crossDomain: boolean, getComputedStyle: boolean, iePropertyChange: boolean, w3cChange: boolean, w3cFocus: boolean, w3cInput: boolean, innerText: boolean, firstElementChild: boolean, cssFloat: boolean, opacity: boolean, filter: boolean, removeProperty: boolean}}
             */
            getSupportMap: function () {
                return supportMap;
            },
            /**
             * Register a support item
             * @method registerSupport
             * @param inName
             * @param inValue
             */
            registerSupport: function (inName, inValue) {
                if (!(inName in supportMap)) {
                    supportMap[inName] = inValue;
                }
            }
        }
    });

})(nx);

(function (nx) {
    var global = nx.global,
        document = global.document,
        env = nx.Env;

    var tempElement = document.createElement('div'),
        tempStyle = tempElement.style;
    var rsizeElement = /width|height|top|right|bottom|left|size|margin|padding/i,
        rHasUnit = /[c-x%]/,
        PX = 'px',
        rUpperCameCase = /(?:^|-)([a-z])/g,
        rDeCameCase = /([A-Z])/g;

    var cssNumber = {
        'lineHeight': true,
        'zIndex': true,
        'zoom': true
    };


    var styleHooks = {
        float: 'cssFloat'
    };

    var stylePropCache = {};
    var styleNameCache = {};

    nx.ready = function (clz) {
        var callback;
        if (typeof clz === "string") {
            clz = nx.path(global, clz);
        }
        if (typeof clz === "function") {
            if (clz.__classId__) {
                var App = nx.define(nx.ui.Application, {
                    properties: {
                        comp: {
                            value: function () {
                                return new clz();
                            }
                        }
                    },
                    methods: {
                        start: function () {
                            this.comp().attach(this);
                        },
                        stop: function () {
                            this.comp().detach(this);
                        }
                    }
                });
                callback = function () {
                    var app = new App();
                    app.start();
                };
            } else {
                callback = clz;
            }
            window.addEventListener("load", callback);
        }
    };

    /**
     * This is Util
     * @class nx.Util
     * @constructor
     */
    var util = nx.define('nx.Util', {
        static: true,
        methods: {
            /**
             * Get a string which is join by an style object.
             * @method getCssText
             * @param inStyles
             * @returns {string}
             */
            getCssText: function (inStyles) {
                var cssText = [''];
                nx.each(inStyles, function (styleValue, styleName) {
                    cssText.push(this.getStyleProperty(styleName, true) + ':' + this.getStyleValue(styleName, styleValue));
                }, this);
                return cssText.join(';');
            },
            /**
             * Get real value of the style name.
             * @method getStyleValue
             * @param inName
             * @param inValue
             * @returns {*}
             */
            getStyleValue: function (inName, inValue) {
                var property = this.getStyleProperty(inName);
                var value = inValue;
                if (rsizeElement.test(property)) {
                    if (!rHasUnit.test(inValue) && !cssNumber[property]) {
                        value += PX;
                    }
                }
                return value;
            },
            /**
             * Get compatible css property.
             * @method getStyleProperty
             * @param inName
             * @param isLowerCase
             * @returns {*}
             */
            getStyleProperty: function (inName, isLowerCase) {
                if (isLowerCase) {
                    if (inName in styleNameCache) {
                        return styleNameCache[inName];
                    }
                } else {
                    if (inName in stylePropCache) {
                        return stylePropCache[inName];
                    }
                }

                var property = styleHooks[inName] || this.lowerCamelCase(inName);
                if (property in tempStyle) {
                    if (isLowerCase) {
                        property = this.deCamelCase(inName);
                        styleNameCache[inName] = property;
                    }
                } else {
                    if (isLowerCase) {
                        property = env.prefix()[1] + inName;
                        styleNameCache[inName] = property;
                    } else {
                        property = env.prefix()[0] + this.upperCamelCase(inName);
                        stylePropCache[inName] = property;
                    }
                }
                return property;
            },
            /**
             * Lower camel case.
             * @method lowerCamelCase
             * @param inName
             * @returns {string}
             */
            lowerCamelCase: function (inName) {
                var _camelizeString = this.upperCamelCase(inName);
                return _camelizeString.charAt(0).toLowerCase() + _camelizeString.substring(1);
            },
            /**
             * Upper camel case.
             * @method upperCamelCase
             * @param inName
             * @returns {*|string|void}
             */
            upperCamelCase: function (inName) {
                return inName.replace(rUpperCameCase, function (match, group1) {
                    return group1.toUpperCase();
                });
            },
            /**
             * Decode camel case to '-' model.
             * @method deCamelCase
             * @param inName
             * @returns {*|string|void}
             */
            deCamelCase: function (inName) {
                return inName.replace(rDeCameCase, function (match, group1) {
                    return '-' + group1.toLowerCase();
                });
            },
            /**
             * Upper first word of a string.
             * @method capitalize
             * @param inString
             * @returns {string}
             */
            capitalize: function (inString) {
                return inString.charAt(0).toUpperCase() + inString.slice(1);
            }
        }
    });
})(nx);

(function (nx) {
    var Collection = nx.data.Collection;
    /**
     * Dom Node
     * @class nx.dom.Node
     * @constructor
     */
    var Node = nx.define('nx.dom.Node',nx.Comparable,{
        methods: {
            /**
             * Set $dom as an attribute for node
             * @param node
             */
            init: function (node) {
                this.$dom = node;
            },
            /**
             * Whether target is current dom element
             * @param target
             * @returns {number}
             */
            compare: function (target) {
                if (target && this.$dom === target.$dom) {
                    return 0;
                }
                else {
                    return -1;
                }
            },
            /**
             * Whether target is a element
             * @returns {boolean}
             */
            isElement: function () {
                return this.$dom.nodeType === 1;
            },
            /**
             * Get current element's index
             * @returns {number}
             */
            index: function () {
                var node,
                    index = 0;
                if (this.parentNode() !== null) {
                    while ((node = this.previousSibling()) !== null) {
                        ++index;
                    }
                } else {
                    index = -1;
                }
                return index;
            },
            /**
             * Get the index child element
             * @param inIndex
             * @returns {null}
             */
            childAt: function (inIndex) {
                var node = null;
                if (inIndex >= 0) {
                    node = this.firstChild();
                    while (node && --inIndex >= 0) {
                        node = node.nextSibling();
                        break;
                    }
                }
                return node;
            },
            /**
             * Compare dom element position
             * @param inTarget
             * @returns {*}
             */
            contains: function (inTarget) {
                return this.$dom && this.$dom.contains(inTarget.$dom);
            },
            /**
             * Get first element child
             * @returns {this.constructor}
             */
            firstChild: function () {
                return new this.constructor(this.$dom.firstElementChild);
            },
            /**
             * Get last element child
             * @returns {this.constructor}
             */
            lastChild: function () {
                return new this.constructor(this.$dom.lastElementChild);
            },
            /**
             * Get previous element
             * @returns {this.constructor}
             */
            previousSibling: function () {
                return new this.constructor(this.$dom.previousElementSibling);
            },
            /**
             * Get next element
             * @returns {this.constructor}
             */
            nextSibling: function () {
                return new this.constructor(this.$dom.nextElementSibling);
            },
            /**
             * Get parent element
             * @returns {this.constructor}
             */
            parentNode: function () {
                return new this.constructor(this.$dom.parentNode);
            },
            /**
             * Get element children
             * @returns {nx.data.Collection}
             */
            children: function () {
                var result = new Collection();
                nx.each(this.$dom.children, function (child) {
                    result.add(new this.constructor(child));
                }, this);
                return result;
            },
            /**
             * Clone an element node
             * @param deep
             * @returns {this.constructor}
             */
            cloneNode: function (deep) {
                return new this.constructor(this.$dom.cloneNode(deep));
            },
            /**
             * Whether the element has child.
             * @param child
             * @returns {boolean}
             */
            hasChild: function (child) {
                return child.$dom.parentNode == this.$dom;
            },
            /**
             * Adds a node to the end of the list of children of a specified parent node
             * @param child
             */
            appendChild: function (child) {
                this.$dom.appendChild(child.$dom);
            },
            /**
             * Inserts the specified node before a reference element as a child of the current node
             * @param child
             * @param ref
             */
            insertBefore: function (child,ref) {
                this.$dom.insertBefore(child.$dom,ref.$dom);
            },
            /**
             * Removes a child node from the DOM
             * @param child
             */
            removeChild: function (child) {
                if (this.hasChild(child)) {
                    this.$dom.removeChild(child.$dom);
                }
            },
            /**
             * Remove all child nodes
             */
            empty: function () {
                this.children().each(function (child) {
                    this.removeChild(child);
                },this);
            }
        }
    });
})(nx);
(function (nx) {
    /**
     * Text Node
     * @class nx.dom.Text
     * @constructor
     */
    nx.define('nx.dom.Text', nx.dom.Node);
})(nx);
(function (nx) {
    var global = nx.global,
        document = global.document,
        env = nx.Env,
        util = nx.Util;
    var rTableElement = /^t(?:able|d|h)$/i,
        rBlank = /\s+/,
        borderMap = {
            thin: '2px',
            medium: '4px',
            thick: '6px'
        },
        isGecko = env.engine().name === 'gecko';
    var MARGIN = 'margin',
        PADDING = 'padding',
        BORDER = 'border',
        POSITION = 'position',
        FIXED = 'fixed';

    var Collection = nx.data.Collection;
    //======attrHooks start======//
    var attrHooks = {
        value: {
            set: function (inElement, inValue) {
                var type = inElement.type;
                switch (type) {
                case 'checkbox':
                case 'radio':
                    inElement.checked = !!inValue;
                    break;
                default:
                    inElement.value = inValue;
                }
            },
            get: function (inElement) {
                var type = inElement.type;
                var value = inElement.value;
                switch (type) {
                case 'checkbox':
                case 'radio':
                    value = !!inElement.checked;
                    break;
                default:
                    value = inElement.value;
                }
                return value;
            }
        }
    };
    var baseAttrHooks = {
        'class': 'className',
        'for': 'htmlFor'
    };
    var booleanAttrHooks = {
        disabled: 'disabled',
        readonly: 'readonly',
        checked: 'checked'
    };
    //registerAttrHooks for Element
    (function registerAttrHooks() {

        //baseAttrHooks
        nx.each(baseAttrHooks, function (hookValue, hookKey) {
            attrHooks[hookKey] = {
                set: function (inElement, inValue) {
                    inElement[hookValue] = inValue;
                },
                get: function (inElement) {
                    return inElement[hookValue];
                }
            };
        });

        //booleanAttrHooks
        nx.each(booleanAttrHooks, function (hookValue, hookKey) {
            attrHooks[hookKey] = {
                set: function (inElement, inValue) {
                    if (!inValue) {
                        inElement.removeAttribute(hookKey);
                    } else {
                        inElement.setAttribute(hookKey, hookKey);
                    }
                    inElement[hookValue] = !!inValue;
                },
                get: function (inElement) {
                    return !!inElement[hookValue];
                }
            };
        });
    }());


    function getClsPos(inElement, inClassName) {
        return (' ' + inElement.className + ' ').indexOf(' ' + inClassName + ' ');
    }

    //======attrHooks end ======//
    /**
     * Dom Element
     * @class nx.dom.Element
     * @constructor
     */
    var Element = nx.define('nx.dom.Element', nx.dom.Node, {
        methods: {
            /**
             * Get an attribute from element
             * @method get
             * @param name
             * @returns {*}
             */
            get: function (name) {
                if (name === 'text') {
                    return this.getText();
                } else
                if (name == 'html') {
                    return this.getHtml();
                } else {
                    return this.getAttribute(name);
                }
            },
            /**
             * Set an attribute for an element
             * @method set
             * @param name
             * @param value
             */
            set: function (name, value) {
                if (name === 'text') {
                    this.setText(value);
                } else
                if (name == 'html') {
                    this.setHtml(value);
                } else {
                    this.setAttribute(name, value);
                }
            },
            /**
             * Get an element by selector.
             * @method get
             * @param inSelector
             * @returns {HTMLElement}
             */
            select: function (inSelector) {
                var element = this.$dom.querySelector(inSelector);
                return new Element(element);
            },
            /**
             * Get a collection by selector
             * @method selectAll
             * @param inSelector
             * @returns {nx.data.Collection}
             */
            selectAll: function (inSelector) {
                var elements = this.$dom.querySelectorAll(inSelector),
                    i = 0,
                    element = elements[i];
                var nxElements = new Collection();
                for (; element; i++) {
                    element = elements[i];
                    nxElements.add(new Element(element));
                }
                return nxElements;
            },
            /**
             * Focus an element
             * @method focus
             */
            focus: function () {
                this.$dom.focus();
            },
            /**
             * Blur form an element
             * @method blur
             */
            blur: function () {
                this.$dom.blur();
            },
            /**
             * Show an element
             * @method show
             */
            show: function () {
                this.setAttribute('nx-status', '');
            },
            /**
             * Hide an element
             * @method hide
             */
            hide: function () {
                this.setAttribute('nx-status', 'hidden');
            },
            /**
             * Whether the element has the class
             * @method hasClass
             * @param inClassName
             * @returns {boolean}
             */
            hasClass: function (inClassName) {
                var element = this.$dom;
                if (nx.Env.support('classList')) {
                    return this.$dom.classList.contains(inClassName);
                } else {
                    return getClsPos(element, inClassName) > -1;
                }
            },
            /**
             * Set css class existence for element
             * @method setClass
             * @param className the class name
             * @param has existence
             * @returns {*}
             */
            setClass: function (inClassName, inHas) {
                if (!inHas) {
                    this.removeClass(inClassName);
                } else {
                    this.addClass(inClassName);
                }
            },
            /**
             * Add class for element
             * @method addClass
             * @returns {*}
             */
            addClass: function () {
                var element = this.$dom;
                var args = arguments,
                    classList = element.classList;
                if (nx.Env.support('classList')) {
                    if (args.length === 1 && args[0].search(rBlank) > -1) {
                        args = args[0].split(rBlank);
                    }
                    return classList.add.apply(classList, args);
                } else if (!this.hasClass(args[0])) {
                    var curCls = element.className;
                    /* jslint -W093 */
                    return element.className = curCls ? (curCls + ' ' + args[0]) : args[0];
                }
            },
            /**
             * Remove class from element
             * @method removeClass
             * @returns {*}
             */
            removeClass: function () {
                var element = this.$dom;
                if (!element) {
                    return;
                }
                if (nx.Env.support('classList')) {
                    var classList = this.$dom.classList;
                    if (classList) {
                        return classList.remove.apply(classList, arguments);
                    }
                } else {
                    var curCls = element.className,
                        index = getClsPos(element, arguments[0]),
                        className = arguments[0];
                    if (index > -1) {
                        if (index === 0) {
                            if (curCls !== className) {
                                className = className + ' ';
                            }
                        } else {
                            className = ' ' + className;
                        }
                        element.className = curCls.replace(className, '');
                    }
                }
            },
            /**
             * Toggle a class on element
             * @method toggleClass
             * @param inClassName
             * @returns {*}
             */
            toggleClass: function (inClassName) {
                var element = this.$dom;
                if (nx.Env.support('classList')) {
                    return this.$dom.classList.toggle(inClassName);
                } else {
                    if (this.hasClass(inClassName)) {
                        this.removeClass(inClassName);
                    } else {
                        this.addClass(inClassName);
                    }
                }
            },
            /**
             * Get document
             * @method getDocument
             * @returns {*}
             */
            getDocument: function () {
                var element = this.$dom;
                var doc = document;
                if (element) {
                    doc = (element.nodeType === 9) ? element : // element === document
                        element.ownerDocument || // element === DOM node
                        element.document; // element === window
                }
                return doc;
            },
            /**
             * Get window
             * @method getWindow
             * @returns {DocumentView|window|*}
             */
            getWindow: function () {
                var doc = this.getDocument();
                return doc.defaultView || doc.parentWindow || global;
            },
            /**
             * Get root element
             * @method getRoot
             * @returns {Element}
             */
            getRoot: function () {
                return env.strict() ? document.documentElement : document.body;
            },
            /**
             * Get element position information
             * @method getBound
             * @returns {{top: number, right: Number, bottom: Number, left: number, width: Number, height: Number}}
             */
            getBound: function () {
                var box = this.$dom.getBoundingClientRect(),
                    root = this.getRoot(),
                    clientTop = root.clientTop || 0,
                    clientLeft = root.clientLeft || 0;
                return {
                    top: box.top - clientTop,
                    right: box.right,
                    bottom: box.bottom,
                    left: box.left - clientLeft,
                    width: box.width,
                    height: box.height
                };
            },
            /**
             * Get margin distance information
             * @method margin
             * @param inDirection
             * @returns {*}
             */
            margin: function (inDirection) {
                return this._getBoxWidth(MARGIN, inDirection);
            },
            /**
             * Get padding distance information
             * @method padding
             * @param inDirection
             * @returns {*}
             */
            padding: function (inDirection) {
                return this._getBoxWidth(PADDING, inDirection);
            },
            /**
             * Get border width information
             * @method border
             * @param inDirection
             * @returns {*}
             */
            border: function (inDirection) {
                return this._getBoxWidth(BORDER, inDirection);
            },
            /**
             * Get offset information
             * @method getOffset
             * @returns {{top: number, left: number}}
             */
            getOffset: function () {
                var box = this.$dom.getBoundingClientRect(),
                    root = this.getRoot(),
                    clientTop = root.clientTop || 0,
                    clientLeft = root.clientLeft || 0;
                return {
                    'top': box.top + (global.pageYOffset || root.scrollTop) - clientTop,
                    'left': box.left + (global.pageXOffset || root.scrollLeft) - clientLeft
                };
            },
            /**
             * Set offset style
             * @method setOffset
             * @param inStyleObj
             */
            setOffset: function (inStyleObj) {
                var elPosition = this.getStyle(POSITION),
                    styleObj = inStyleObj;
                var scrollXY = {
                    left: Math.max((global.pageXOffset || 0), root.scrollLeft),
                    top: Math.max((global.pageYOffset || 0), root.scrollTop)
                };
                if (elPosition === FIXED) {
                    styleObj = {
                        left: parseFloat(styleObj) + scrollXY.scrollX,
                        top: parseFloat(styleObj) + scrollXY.scrollY
                    };
                }
                this.setStyles(styleObj);
            },
            /**
             * Has in line style
             * @method hasStyle
             * @param inName
             * @returns {boolean}
             */
            hasStyle: function (inName) {
                var cssText = this.$dom.style.cssText;
                return cssText.indexOf(inName + ':') > -1;
            },
            /**
             * Get computed style
             * @method getStyle
             * @param inName
             * @param isInline
             * @returns {*}
             */
            getStyle: function (inName, isInline) {
                var property = util.getStyleProperty(inName);
                if (isInline) {
                    return this.$dom.style[property];
                } else {
                    var styles = getComputedStyle(this.$dom, null);
                    return styles[property] || '';
                }
            },
            /**
             * Set style for element
             * @method setStyle
             * @param inName
             * @param inValue
             */
            setStyle: function (inName, inValue) {
                var property = util.getStyleProperty(inName);
                this.$dom.style[property] = util.getStyleValue(inName, inValue);
            },
            /**
             * Remove inline style
             * @method removeStyle
             * @param inName
             */
            removeStyle: function (inName) {
                var property = util.getStyleProperty(inName, true);
                this.$dom.style.removeProperty(property);
            },
            /**
             * Set style by style object
             * @method setStyles
             * @param inStyles
             */
            setStyles: function (inStyles) {
                this.$dom.style.cssText += util.getCssText(inStyles);
            },
            /**
             * Get attribute
             * @method getAttribute
             * @param inName
             * @returns {*}
             */
            getAttribute: function (inName) {
                var hook = attrHooks[inName];
                if (hook) {
                    if (hook.get) {
                        return hook.get(this.$dom);
                    } else {
                        return this.$dom.getAttribute(hook);
                    }
                }
                return this.$dom.getAttribute(inName);
            },
            /**
             * Set attribute
             * @method setAttribute
             * @param inName
             * @param inValue
             * @returns {*}
             */
            setAttribute: function (inName, inValue) {
                if (inValue !== null && inValue !== undefined) {
                    var hook = attrHooks[inName];
                    if (hook) {
                        if (hook.set) {
                            return hook.set(this.$dom, inValue);
                        } else {
                            return this.$dom.setAttribute(hook, inValue);
                        }
                    }
                    return this.$dom.setAttribute(inName, inValue);
                }
            },
            /**
             * Remove attribute
             * @method removeAttribute
             * @param inName
             */
            removeAttribute: function (inName) {
                this.$dom.removeAttribute(baseAttrHooks[inName] || inName);
            },
            /**
             * Get all attributes
             * @method getAttributes
             * @returns {{}}
             */
            getAttributes: function () {
                var attrs = {};
                nx.each(this.$dom.attributes, function (attr) {
                    attrs[attr.name] = attr.value;
                });
                return attrs;
            },
            /**
             * Set attributes
             * @method setAttributes
             * @param attrs
             */
            setAttributes: function (attrs) {
                nx.each(attrs, function (value, key) {
                    this.setAttribute(key, value);
                }, this);
            },
            /**
             * Get inner text
             * @method getText
             * @returns {*}
             */
            getText: function () {
                return this.$dom.textContent;
            },
            /**
             * Set inner text
             * @method setText
             * @param text
             */
            setText: function (text) {
                this.$dom.textContent = text;
            },
            /**
             * Get inner html
             * @method getHtml
             * @returns {*|string}
             */
            getHtml: function () {
                return this.$dom.innerHTML;
            },
            /**
             * Set inner html
             * @method setHtml
             * @param html
             */
            setHtml: function (html) {
                this.$dom.innerHTML = html;
            },
            /**
             * Add event listener
             * @method addEventListener
             * @param name
             * @param listener
             * @param useCapture
             */
            addEventListener: function (name, listener, useCapture) {
                this.$dom.addEventListener(name, listener, useCapture || false);
            },
            /**
             * Remove event listener
             * @method removeEventListener
             * @param name
             * @param listener
             * @param useCapture
             */
            removeEventListener: function (name, listener, useCapture) {
                this.$dom.removeEventListener(name, listener, useCapture || false);
            },
            _getBoxWidth: function (inBox, inDirection) {
                var boxWidth, styleResult;
                var element = this.$dom;
                switch (inBox) {
                case PADDING:
                case MARGIN:
                    styleResult = this.getStyle(inBox + "-" + inDirection);
                    boxWidth = parseFloat(styleResult);
                    break;
                default:
                    styleResult = this.getStyle('border-' + inDirection + '-width');
                    if (isGecko) {
                        if (rTableElement.test(element.tagName)) {
                            styleResult = 0;
                        }
                    }
                    boxWidth = parseFloat(styleResult) || borderMap[styleResult];
                }
                return boxWidth || 0;
            }
        }
    });
})
(nx);

(function (nx) {

    var Collection = nx.data.Collection;
    /**
     * Dom Fragment
     * @class nx.dom.Fragment
     * @constructor
     */
    nx.define('nx.dom.Fragment', nx.dom.Node, {
        methods: {
            /**
             * Get collection child nodes.
             * @returns {nx.data.Collection}
             */
            children: function () {
                var result = new Collection();
                nx.each(this.$dom.childNodes, function (child) {
                    result.add(new this.constructor(child));
                }, this);
                return result;
            }
        }
    });
})(nx);
(function(nx) {
    var Element = nx.dom.Element;
    var Fragment = nx.dom.Fragment;
    var Text = nx.dom.Text,
        global = nx.global,
        document = global.document,
        util = nx.Util;

    var readyModel = {
        topFrame: null,
        hasReady: false,
        queue: [],
    };

    var readyService = {
        setHasReady: function(inValue) {
            readyModel.hasReady = inValue;
        },
        getHasReady: function() {
            return readyModel.hasReady;
        },
        addQueue: function(inHandler) {
            readyModel.queue.push(inHandler);
        },
        clearQueue: function() {
            readyModel.queue.length = 0;
        },
        execQueue: function() {
            var i = 0,
                length = readyModel.queue.length;
            for (; i < length; i++) {
                readyModel.queue[i]();
            }
        },
        setTopFrame: function(inValue) {
            readyModel.topFrame = inValue;
        },
        getTopFrame: function() {
            return readyModel.topFrame;
        }
    };

    var readyController = {
        initReady: function(inHandler) {
            readyService.addQueue(inHandler); //save the event
            return readyController.isReady();
        },
        fireReady: function() {
            readyService.execQueue();
            readyService.clearQueue();
        },
        setTopFrame: function() {
            // If IE and not a frame
            // continually check to see if the document is ready
            try {
                readyService.setTopFrame(global.frameElement === null && document.documentElement);
            } catch (e) {}
        },
        doScrollCheck: function() {
            var topFrame = readyService.getTopFrame();
            if (topFrame && topFrame.doScroll) {
                try {
                    // Use the trick by Diego Perini
                    // http://javascript.nwbox.com/IEContentLoaded/
                    topFrame.doScroll("left");
                } catch (e) {
                    return setTimeout(readyController.doScrollCheck, 50);
                }

                // and execute any waiting functions
                readyController.fireReady();
            }
        },
        isOnLoad: function(inEvent) {
            return (inEvent || global.event).type === 'load';
        },
        isReady: function() {
            return readyService.getHasReady() || document.readyState === "complete";
        },
        detach: function() {
            if (document.addEventListener) {
                document.removeEventListener("DOMContentLoaded", readyController.completed, false);
                global.removeEventListener("load", readyController.completed, false);
            } else {
                document.detachEvent("onreadystatechange", readyController.completed);
                global.detachEvent("onload", readyController.completed);
            }
        },
        w3cReady: function() {
            document.addEventListener('DOMContentLoaded', readyController.completed, false);
            global.addEventListener('load', readyController.completed, false);
        },
        ieReady: function() {
            document.attachEvent("onreadystatechange", readyController.completed);
            global.attachEvent("onload", readyController.completed);
            readyController.setTopFrame();
            readyController.doScrollCheck();
        },
        readyMain: function() {
            if (document.readyState === "complete") {
                return setTimeout(readyController.readyMain);
            } else {
                if (document.addEventListener) {
                    //w3c
                    readyController.w3cReady();
                } else {
                    //old ie
                    readyController.ieReady();
                }
            }
        },
        completed: function(inEvent) {
            if (readyController.isReady() || readyController.isOnLoad(inEvent)) {
                readyService.setHasReady(true);
                readyController.detach();
                readyController.fireReady();
            }
        }
    };

    var nsMap = {
        svg: "http://www.w3.org/2000/svg",
        xlink: "http://www.w3.org/1999/xlink",
        xhtml: "http://www.w3.org/1999/xhtml"
    };

    /**
     * Document Element
     * @class nx.dom.Document
     * @constructor
     */
    var Document = nx.define('nx.dom.Document', {
        static: true,
        properties: {
            /**
             * Get/set next cssStyle sheet
             * @property cssStyleSheet
             * @type {Object}
             * @default {}
             */
            cssStyleSheet: {
                get: function() {
                    var nxCssStyleSheet = this._cssStyleSheet;
                    if (!nxCssStyleSheet) {
                        var styleNode = document.getElementById('nx-style') || this._createStyleNode();
                        nxCssStyleSheet = this._cssStyleSheet = this._getCSSStyleSheetInstance(styleNode);
                    }
                    return nxCssStyleSheet;
                }
            },
            /**
             * Get document root element
             * @property root
             * @type {Object}
             * @default {}
             */
            root: {
                get: function() {
                    return document.documentElement;
                }
            },
            /**
             * Get next body element
             * @property body
             * @type {Object}
             * @default {}
             */
            body: {
                get: function() {
                    return new Element(document.body);
                }
            },
            html: {
                get: function() {
                    return new Element(document.getElementsByTagName('html')[0]);
                }
            }
        },
        methods: {
            init: function() {
                this.__listeners__ = {};
                this._documentListeners = {};
            },
            /**
             * Add an event handler.
             * @method on
             * @param name {String}
             * @param handler {Function}
             * @param [context] {Object}
             */
            on: function(name, handler, context) {
                var map = this.__listeners__;
                var listeners = map[name] = map[name] || [{
                    owner: null,
                    handler: null,
                    context: null
                }];

                listeners.push({
                    owner: this,
                    handler: handler,
                    context: context || this
                });

                this._attachDocumentListeners(name);

                var self;
                return {
                    release: function() {
                        self.off(name, handler, context);
                    }
                };
            },
            /**
             * Remove an event handler.
             * @method off
             * @param name {String}
             * @param [handler] {Function}
             * @param [context] {Object}
             */
            off: function(name, handler, context) {
                var listeners = this.__listeners__[name],
                    listener;
                if (listeners) {
                    if (handler) {
                        context = context || this;
                        for (var i = 0, length = listeners.length; i < length; i++) {
                            listener = listeners[i];
                            if (listener.handler == handler && listener.context == context) {
                                listeners.splice(i, 1);
                                break;
                            }
                        }
                    } else {
                        listeners.length = 1;
                    }
                }
            },
            /**
             * Add a single event handler.
             * @method upon
             * @param name {String}
             * @param handler {Function}
             * @param [context] {Object}
             */
            upon: function(name, handler, context) {
                var map = this.__listeners__;
                var listeners = map[name] = map[name] || [{
                    owner: null,
                    handler: null,
                    context: null
                }];

                listeners[0] = {
                    owner: this,
                    handler: handler,
                    context: context
                };

                this._attachDocumentListeners(name);
            },
            /**
             * Trigger an event.
             * @method fire
             * @param name {String}
             * @param [data] {*}
             */
            fire: function(name, data) {
                var listeners = this.__listeners__[name],
                    listener, result;
                if (listeners) {
                    listeners = listeners.slice();
                    for (var i = 0, length = listeners.length; i < length; i++) {
                        listener = listeners[i];
                        if (listener && listener.handler) {
                            result = listener.handler.call(listener.context, listener.owner, data);
                            if (result === false) {
                                return false;
                            }
                        }
                    }
                }
            },
            /**
             * Register html tag namespace
             * @method registerNS
             * @param key
             * @param value
             */
            registerNS: function(key, value) {
                nsMap[key] = value;
            },
            /**
             * Get a tag namespace value
             * @method resolveNS
             * @param key
             * @returns {*}
             */
            resolveNS: function(key) {
                return nsMap[key];
            },
            /**
             * Create document fragment
             * @method createFragment
             * @returns {nx.dom.Fragment}
             */
            createFragment: function() {
                return new Fragment(document.createDocumentFragment());
            },
            /**
             * Create element
             * @method createElement
             * @param tag
             * @returns {nx.dom.Element}
             */
            createElement: function(tag) {
                return new Element(document.createElement(tag));
            },
            /**
             * Create text node.
             * @method createText
             * @param text
             * @returns {nx.dom.Text}
             */
            createText: function(text) {
                return new Text(document.createTextNode(text));
            },
            /**
             * Create element by namespace
             * @method createElementNS
             * @param ns
             * @param tag
             * @returns {nx.dom.Element}
             */
            createElementNS: function(ns, tag) {
                var uri = Document.resolveNS(ns);
                if (uri) {
                    return new Element(document.createElementNS(uri, tag));
                } else {
                    throw new Error('The namespace ' + ns + ' is not registered.');
                }
            },
            /**
             * Wrap dom element to next element
             * @method wrap
             * @param dom
             * @returns {*}
             */
            wrap: function(dom) {
                if (nx.is(dom, Node)) {
                    return dom;
                } else {

                }
            },
            /**
             * Get document position information
             * @method docRect
             * @returns {{width: (Function|number), height: (Function|number), scrollWidth: *, scrollHeight: *, scrollX: *, scrollY: *}}
             */
            docRect: function() {
                var root = this.root(),
                    height = global.innerHeight || 0,
                    width = global.innerWidth || 0,
                    scrollW = root.scrollWidth,
                    scrollH = root.scrollHeight,
                    scrollXY = {
                        left: Math.max((global.pageXOffset || 0), root.scrollLeft),
                        top: Math.max((global.pageYOffset || 0), root.scrollTop)
                    };
                scrollW = Math.max(scrollW, width);
                scrollH = Math.max(scrollH, height);
                return {
                    width: width,
                    height: height,
                    scrollWidth: scrollW,
                    scrollHeight: scrollH,
                    scrollX: scrollXY.left,
                    scrollY: scrollXY.top
                };
            },
            /**
             * Dom ready
             * @method ready
             * @param inHandler
             */
            ready: function(inHandler) {
                //add handler to queue:
                if (readyController.initReady(inHandler)) {
                    setTimeout(readyController.fireReady, 1);
                } else {
                    readyController.readyMain();
                }
            },
            /**
             * Add a rule to next style sheet
             * @method addRule
             * @param inSelector
             * @param inCssText
             * @param inIndex
             * @returns {*}
             */
            addRule: function(inSelector, inCssText, inIndex) {
                var cssText = inSelector + "{" + inCssText + "}";
                return this._ruleAction('insert', [cssText, inIndex]);
            },
            /**
             * insert a rule to next style sheet
             * @method insertRule
             * @param inFullCssText
             * @param inIndex
             * @returns {*}
             */
            insertRule: function(inFullCssText, inIndex) {
                return this._ruleAction('insert', [inFullCssText, inIndex]);
            },
            /**
             * Delete a rule from next style sheet at last line
             * @method deleteRule
             * @param inIndex
             * @returns {*}
             */
            deleteRule: function(inIndex) {
                return this._ruleAction('delete', [inIndex]);
            },
            /**
             * Remove a rule from next style sheet
             * @method removeRule
             * @param inSelector
             * @param inIndex
             * @returns {*}
             */
            removeRule: function(inSelector, inIndex) {
                return this._ruleAction('remove', [inSelector, inIndex]);
            },
            /**
             * Add multi rules
             * @method addRules
             * @param inRules
             */
            addRules: function(inRules) {
                nx.each(inRules, function(rule, selector) {
                    this.addRule(selector, util.getCssText(rule), null);
                }, this);
            },
            /**
             * Delete all rules
             * @method deleteRules
             */
            deleteRules: function() {
                var defLength = this.cssStyleSheet().rules.length;
                while (defLength--) {
                    this.deleteRule(0);
                }
            },
            _ruleAction: function(inAction, inArgs) {
                var styleSheet = this.cssStyleSheet();
                var lastIndex = inArgs.length - 1;
                //set default index
                inArgs[lastIndex] = this._defRuleIndex(styleSheet, inArgs[lastIndex]);
                styleSheet[inAction + 'Rule'].apply(styleSheet, inArgs);
                return this._defRuleIndex(styleSheet, null);
            },
            _defRuleIndex: function(inStyleSheet, inIndex) {
                var rules = inStyleSheet.rules ||inStyleSheet.cssRules;
                return inIndex == null ? rules.length : inIndex;
            },
            _createStyleNode: function() {
                var styleNode = document.createElement("style");
                styleNode.type = "text/css";
                styleNode.id = "nx-style";
                (document.head || document.getElementsByTagName("head")[0] || document.documentElement).appendChild(styleNode);
                return styleNode;
            },
            _getCSSStyleSheetInstance: function(inStyleNode) {
                var styleSheets = document.styleSheets,
                    key,
                    sheet = null;
                for (key in styleSheets) {
                    sheet = styleSheets[key];
                    if (sheet.ownerNode === inStyleNode) {
                        break;
                    }
                }
                return sheet;
            },
            _attachDocumentListeners: function(name) {
                var documentListeners = this._documentListeners;
                if (!(name in documentListeners)) {
                    var self = this;
                    var listener = documentListeners[name] = function(event) {
                        self.fire(name, event);
                    };

                    document.addEventListener(name, listener);
                }
            }
        }
    });
})(nx);
(function (nx) {
    var global = nx.global;
    var Binding = nx.Binding;
    var Collection = nx.data.Collection;
    var Document = nx.dom.Document;

    function extractBindingExpression(value) {
        if (nx.is(value, 'String')) {
            var start = value.indexOf('{');
            var end = value.indexOf('}');

            if (start >= 0 && end > start) {
                return value.slice(start + 1, end);
            }
        }

        return null;
    }

    function setProperty(target, name, value, source, owner) {
        if (nx.is(value, Binding)) {
            target.setBinding(name, nx.extend(value.gets(), {
                bindingType: 'property'
            }));
        } else {
            var expr = extractBindingExpression(value);
            if (expr !== null) {
                if (expr[0] === '#') {
                    target.setBinding(name, expr.slice(1) + ',bindingType=property', owner || target);
                } else {
                    target.setBinding(name, (expr ? 'model.' + expr : 'model') + ',bindingType=property', source || target);
                }
            } else {
                target.set(name, value);
            }
        }
    }

    function setEvent(target, name, value, source, owner) {
        if (nx.is(value, Binding)) {
            target.setBinding(name, value.gets());
        } else {
            var expr = extractBindingExpression(value);
            if (expr !== null) {
                if (expr[0] === '#') {
                    target.setBinding(name, expr.slice(1) + ',bindingType=event', owner || target);
                } else {
                    target.setBinding(name, (expr ? 'model.' + expr : 'model') + ',bindingType=event', source || target);
                }
            } else {
                target.on(name, value, owner || target);
            }
        }
    }

    function createComponent(view, owner) {
        if (view || view === 0) {
            var comp;
            if (nx.is(view, 'Array')) {
                comp = new DOMComponent('fragment');

                nx.each(view, function (child) {
                    createComponent(child, owner).attach(comp);
                });
            } else if (nx.is(view, 'Object')) {
                var type = view.type;
                if (type) {
                    var clazz = nx.is(type, 'String') ? nx.path(global, type) : type;
                    if (nx.is(clazz, 'Function')) {
                        comp = new clazz();
                    } else {
                        throw new Error('Component "' + type + '" is not defined.');
                    }
                } else {
                    comp = new DOMComponent(view.tag || 'div');
                }

                var name = view.name;
                var props = view.props;
                var events = view.events;
                var content = view.content;

                if (name) {
                    comp.register('@name', name);
                }

                if (owner) {
                    comp.owner(owner);
                }

                nx.each(events, function (value, name) {
                    setEvent(comp, name, value, comp, owner);
                });

                nx.each(props, function (value, name) {
                    if (nx.is(value, 'Array')) {
                        nx.each(value, function (item) {
                            if (nx.is(item, 'Object')) {
                                item.__owner__ = owner;
                            }
                        });
                    }

                    if (nx.is(value, 'Object')) {
                        value.__owner__ = owner;
                    }

                    setProperty(comp, name, value, comp, owner);
                });

                if (content !== undefined) {
                    setProperty(comp, 'content', content, comp, owner);
                }
            } else {
                comp = new DOMComponent('text', view);
            }

            return comp;
        }

        return null;
    }

    /**
     * @class Collection
     * @namespace nx.ui
     * @extends nx.Observable
     */
    var AbstractComponent = nx.define('nx.ui.AbstractComponent', nx.Observable, {
        abstract: true,
        statics: {
            /**
             * Create component by json view.
             * @method createComponent
             * @static
             */
            createComponent: createComponent
        },
        events: ['enter', 'leave', 'contententer', 'contentleave'],
        properties: {
            /**
             * @property count
             * @type {nx.data.Collection}
             */
            content: {
                get: function () {
                    return this._content;
                },
                set: function (value) {
                    nx.each(this._content.toArray(), function (c) {
                        c.destroy();
                    });
                    if (nx.is(value, AbstractComponent)) {
                        value.attach(this);
                    } else if (nx.is(value, 'Array')) {
                        nx.each(value, function (v) {
                            createComponent(v, this.owner()).attach(this);
                        }, this);
                    } else if (value || value === 0) {
                        createComponent(value, this.owner()).attach(this);
                    }
                }
            },
            /**
             * @property model
             * @type {Any}
             */
            model: {
                get: function () {
                    return this._model_was_set ? this._model : this._inheritedModel;
                },
                set: function (value, inherited) {
                    if (inherited && this._model_was_set) {
                        return false;
                    }

                    if (inherited) {
                        this._inheritedModel = value;
                    } else {
                        this._model = value;
                        this._model_was_set = true;
                    }

                    this._content.each(function (c) {
                        if (!nx.is(c, 'String')) {
                            c.model(value, true);
                        }
                    });
                }
            },
            /**
             * @property owner
             * @type {nx.ui.AbstractComponent}
             */
            owner: {
                value: null
            },
            /**
             * @property parent
             * @type {nx.ui.AbstractComponent}
             */
            parent: {
                value: null
            }
        },
        methods: {
            init: function () {
                this.inherited();
                this._resources = {};
                this._content = new Collection();
            },
            /**
             * Attach the component to parent.
             * @method attach
             * @param parent
             * @param index
             */
            attach: function (parent, index) {
                this.detach();

                if (nx.is(parent, AbstractComponent)) {
                    var name = this.resolve('@name');
                    var owner = this.owner() || parent;

                    if (name) {
                        owner.register(name, this);
                    }

                    this.onAttach(parent, index);
                    parent.onChildAttach(this, index);

                    if (index >= 0) {
                        parent.content().insert(this, index);
                    } else {
                        parent.content().add(this);
                    }

                    this.parent(parent);
                    this.owner(owner);
                    parent.fire('contententer', {
                        content: this,
                        owner: owner
                    });
                    this.fire('enter', {
                        parent: parent,
                        owner: owner
                    });

                    this._attached = true;
                }
            },
            /**
             * Detach the component from parent.
             * @method detach
             */
            detach: function () {
                if (this._attached) {
                    var name = this.resolve('@name');
                    var owner = this.owner();
                    var parent = this.parent();

                    if (name) {
                        owner.unregister(name);
                    }

                    this.onDetach(parent);
                    parent.onChildDetach(this);
                    parent.content().remove(this);
                    this.parent(null);
                    this.owner(null);
                    parent.fire('contentleave', {
                        content: this,
                        owner: owner
                    });
                    this.fire('leave', {
                        parent: parent,
                        owner: owner
                    });
                    this._attached = false;
                }
            },
            /**
             * Register a resource.
             * @method register
             * @param name
             * @param value
             * @param force
             */
            register: function (name, value, force) {
                var resources = this._resources;
                if (resources && !(name in resources) || force) {
                    resources[name] = value;
                }
            },
            /**
             * Unregister a resource.
             * @method unregister
             * @param name
             */
            unregister: function (name) {
                var resources = this._resources;
                if (resources && name in resources) {
                    delete resources[name];
                }
            },
            /**
             * Resolve a resource.
             * @method resolve
             * @param name
             * @returns {Any}
             */
            resolve: function (name) {
                var resources = this._resources;
                if (resources && name in resources) {
                    return resources[name];
                }
            },
            /**
             * Get the container for component.
             * @method getContainer
             * @param comp
             * @returns {nx.dom.Element}
             */
            getContainer: function (comp) {
                if (this.resolve('@tag') === 'fragment') {
                    var parent = this.parent();
                    if (parent) {
                        return parent.getContainer(comp);
                    }
                }

                return this.resolve('@root');
            },
            /**
             * Dispose the component.
             * @method dispose
             */
            dispose: function () {
                this.inherited();
                if (this._content) {
                    this._content.each(function (content) {
                        content.dispose();
                    });
                }

                this._resources = null;
                this._content = null;
                this._model = null;
                this._inheritedModel = null;
                this.dispose = function () {};
            },
            /**
             * Destroy the component.
             * @method destroy
             */
            destroy: function () {
                this.detach();
                this.inherited();
            },
            /**
             * Template method for component attach.
             * @method onAttach
             */
            onAttach: function (parent, index) {},
            /**
             * Template method for component detach.
             * @method onDetach
             */
            onDetach: function (parent) {},
            /**
             * Template method for child component attach.
             * @method onChildAttach
             */
            onChildAttach: function (child, index) {},
            /**
             * Template method for child component detach.
             * @method onChildDetach
             */
            onChildDetach: function (child) {}
        }
    });

    /**
     * @class CssClass
     * @extends nx.Observable
     * @internal
     */
    var CssClass = nx.define(nx.Observable, {
        methods: {
            init: function (comp) {
                this.inherited();
                this._comp = comp;
                this._classList = [];
            },
            has: function (name) {
                return name in this._classList;
            },
            get: function (name) {
                return this._classList[name];
            },
            set: function (name, value) {
                this._classList[name] = value;
                this._comp.resolve('@root').set('class', this._classList.join(' '));
            },
            hasClass: function (name) {
                return this._classList.indexOf(name) >= 0;
            },
            addClass: function (name) {
                if (!this.hasClass(name)) {
                    this._classList.push(name);
                    this._comp.resolve('@root').set('class', this._classList.join(' '));
                }
            },
            removeClass: function (name) {
                var index = this._classList.indexOf(name);
                if (index >= 0) {
                    this._classList.splice(index, 1);
                    this._comp.resolve('@root').set('class', this._classList.join(' '));
                }
            },
            toggleClass: function (name) {
                var index = this._classList.indexOf(name);
                if (index >= 0) {
                    this._classList.splice(index, 1);
                } else {
                    this._classList.push(name);
                }

                this._comp.resolve('@root').set('class', this._classList.join(' '));
            },
            dispose: function () {
                this.inherited();
                this._comp = null;
                this._classList = null;
            }
        }
    });

    /**
     * @class CssStyle
     * @extends nx.Observable
     * @internal
     */
    var CssStyle = nx.define(nx.Observable, {
        methods: {
            init: function (comp) {
                this.inherited();
                this._comp = comp;
            },
            get: function (name) {
                return this._comp.resolve('@root').getStyle(name);
            },
            set: function (name, value) {
                this._comp.resolve('@root').setStyle(name, value);
            },
            dispose: function () {
                this.inherited();
                this._comp = null;
            }
        }
    });

    /**
     * @class DOMComponent
     * @extends nx.ui.AbstractComponent
     * @internal
     */
    var DOMComponent = nx.define(AbstractComponent, {
        final: true,
        events: ['generated'],
        properties: {
            /**
             * @property class
             * @type {CssClass}
             */
            'class': {
                get: function () {
                    return this._class;
                },
                set: function (value) {
                    var cssClass = this._class;
                    if (nx.is(value, 'Array')) {
                        nx.each(value, function (item, index) {
                            setProperty(cssClass, '' + index, item, this, value.__owner__ || this.owner());
                        }, this);
                    } else if (nx.is(value, 'Object')) {
                        if (value.add) {
                            this._class.addClass(value.add);
                        }
                        if (value.remove) {
                            this._class.addClass(value.remove);
                        }
                        if (value.toggle) {
                            this._class.addClass(value.toggle);
                        }
                    } else {
                        this.resolve('@root').set('class', value);
                    }
                }
            },
            /**
             * @property style
             * @type {CssStyle}
             */
            style: {
                get: function () {
                    return this._style;
                },
                set: function (value) {
                    if (nx.is(value, 'Object')) {
                        var cssStyle = this._style;
                        nx.each(value, function (v, k) {
                            setProperty(cssStyle, k, v, this, value.__owner__ || this.owner());
                        }, this);
                    } else {
                        this.resolve('@root').set('style', value);
                    }
                }
            },
            /**
             * @property template
             */
            template: {
                get: function () {
                    return this._template;
                },
                set: function (value) {
                    this._template = value;
                    this._generateContent();
                }
            },
            /**
             * @property items
             */
            items: {
                get: function () {
                    return this._items;
                },
                set: function (value) {
                    var items = this._items;
                    if (items && items.off) {
                        items.off('change', this._onItemsChange, this);
                    }
                    items = this._items = value;
                    if (items && items.on) {
                        items.on('change', this._onItemsChange, this);
                    }

                    this._generateContent();
                }
            },
            /**
             * @property value
             */
            value: {
                get: function () {
                    return this.resolve('@root').get('value');
                },
                set: function (value) {
                    return this.resolve('@root').set('value', value);
                },
                binding: {
                    direction: '<>'
                }
            },
            /**
             * @property states
             */
            states: {
                value: null
            },
            /**
             * @property dom
             */
            dom: {
                get: function () {
                    return this.resolve('@root');
                }
            }
        },
        methods: {
            init: function (tag, text) {
                this.inherited();
                this._domListeners = {};
                this._resources = {};
                this._content = new Collection();
                this._class = new CssClass(this);
                this._style = new CssStyle(this);

                if (tag) {
                    var tokens = tag.split(':');
                    if (tokens.length === 2) {
                        var ns = tokens[0];
                        tag = tokens[1];
                        this.register('@ns', ns);
                        this.register('@root', Document.createElementNS(ns, tag));
                    } else if (tag === 'text') {
                        this.register('@root', Document.createText(text));
                    } else if (tag === 'fragment') {
                        this.register('@root', Document.createFragment());
                    } else {
                        this.register('@root', Document.createElement(tag));
                    }

                    this.register('@tag', tag);
                }

                //Temp
                switch (tag) {
                case 'input':
                case 'textarea':
                    this.on('change', function (sender, event) {
                        switch (event.target.type) {
                        case 'checkbox':
                        case 'radio':
                            this.notify('checked');
                            break;
                        default:
                            this.notify('value');
                            break;
                        }
                    }, this);
                    this.on('input', function (sender, event) {
                        this.notify('value');
                    }, this);
                    break;
                case 'select':
                    this.on('change', function (sender, event) {
                        this.notify('selectedIndex');
                        this.notify('value');
                    }, this);
                    break;
                }
            },
            get: function (name) {
                if (this.has(name) || name.indexOf(':') >= 0) {
                    return this.inherited(name);
                } else {
                    return this.resolve('@root').get(name);
                }
            },
            set: function (name, value) {
                if (this.has(name) || name.indexOf(':') >= 0) {
                    this.inherited(name, value);
                } else {
                    this.resolve('@root').set(name, value);
                    this.notify(name);
                }
            },
            on: function (name, handler, context) {
                this._attachDomListener(name);
                return this.inherited(name, handler, context);
            },
            upon: function (name, handler, context) {
                this._attachDomListener(name);
                return this.inherited(name, handler, context);
            },
            dispose: function () {
                var root = this.resolve('@root');
                if (root) {
                    nx.each(this._domListeners, function (listener, name) {
                        if (name.charAt(0) === ':') {
                            root.removeEventListener(name.slice(1), listener, true);
                        } else {
                            root.removeEventListener(name, listener);
                        }
                    });
                }
                this.items(null);
                this._class.dispose();
                this._style.dispose();
                this.inherited();
                this._domListeners = null;
            },
            onAttach: function (parent, index) {
                var root = this.resolve('@root');
                if (root) {
                    var container = parent.getContainer(this);

                    if (index >= 0) {
                        var ref = parent.content().getItem(index);

                        if (ref && ref.resolve('@tag') === 'fragment') {
                            ref = ref.content().getItem(0);
                        }

                        if (ref) {
                            container.insertBefore(root, ref.resolve('@root'));
                        } else {
                            container.appendChild(root);
                        }
                    } else {
                        container.appendChild(root);
                    }

                    var states = this.states();
                    var enterState = null;
                    if (states) {
                        enterState = states.enter;
                    }

                    if (enterState) {
                        var cssText = root.$dom.style.cssText;
                        var transition = 'all ' + (enterState.duration || 500) + 'ms';
                        root.setStyles(nx.extend({
                            transition: transition
                        }, enterState));
                        this.upon('transitionend', function () {
                            root.removeStyle('transition');
                        });
                        setTimeout(function () {
                            root.$dom.style.cssText = cssText + ';transition: ' + transition;
                        }, 10);
                    }
                }
            },
            onDetach: function (parent) {
                var root = this.resolve('@root');
                if (root) {
                    var tag = this.resolve('@tag');
                    var self = this;

                    if (tag === 'fragment') {
                        nx.each(self.content(), function (child) {
                            root.appendChild(child.resolve('@root'));
                        });
                    } else {
                        var states = this.states();
                        var leaveState = null;
                        if (states) {
                            leaveState = states.leave;
                        }

                        if (leaveState) {
                            var cssText = root.$dom.style.cssText;
                            var transition = 'all ' + (leaveState.duration || 500) + 'ms';
                            root.setStyle('transition', transition);
                            setTimeout(function () {
                                root.setStyles(leaveState);
                            }, 10);
                            this.upon('transitionend', function () {
                                root.$dom.style.cssText = cssText;
                                parent.getContainer(this).removeChild(root);
                            });
                        } else {
                            parent.getContainer(this).removeChild(root);
                        }
                    }
                }
            },
            _attachDomListener: function (name) {
                var domListeners = this._domListeners;
                if (!(name in domListeners)) {
                    var self = this;
                    var root = this.resolve('@root');
                    var listener = domListeners[name] = function (event) {
                        self.fire(name, event);
                    };

                    if (name.charAt(0) === ':') {
                        root.addEventListener(name.slice(1), listener, true);
                    } else {
                        root.addEventListener(name, listener);
                    }
                }
            },
            _generateContent: function () {
                var template = this._template;
                var items = this._items;
                nx.each(this._content.toArray(), function (c) {
                    c.detach();
                    setTimeout(function () {
                        c.dispose();
                    }, 600);
                });

                if (template && items) {
                    nx.each(items, function (item) {
                        var comp = createComponent(template, this.owner());
                        comp.model(item);
                        comp.attach(this);
                    }, this);

                    this.fire('generated');
                }
            },
            _onItemsChange: function (sender, event) {
                var template = this._template;
                var action = event.action;
                var index = event.index;
                index = index >= 0 ? index : -1;
                if (action === 'add') {
                    nx.each(event.items, function (item, i) {
                        var comp = createComponent(template, this.owner());
                        comp.model(item);
                        comp.attach(this, index + i);
                    }, this);
                } else if (action === 'remove') {
                    nx.each(event.items, function (item) {
                        nx.each(this.content().toArray(), function (comp) {
                            if (comp.model() === item) {
                                comp.detach();
                            }
                        }, this);
                    }, this);
                } else if (action === 'replace') {
                    // XXX no need to handle if bind to model.value
                } else if (action === 'sort') {
                    var comparator = event.comparator;
                    var sortedContent = this.content().toArray().sort(function (a, b) {
                        return comparator(a.model(), b.model());
                    });

                    nx.each(sortedContent, function (comp) {
                        comp.attach(this);
                    }, this);
                } else {
                    this._generateContent();
                }
            }
        }
    });
})(nx);

(function (nx) {
    var AbstractComponent = nx.ui.AbstractComponent;

    /**
     * @class Component
     * @namespace nx.ui
     * @extends nx.ui.AbstractComponent
     */
    nx.define('nx.ui.Component', AbstractComponent, {
        properties: {
            model: {
                get: function () {
                    return this._model === undefined ? this._inheritedModel : this._model;
                },
                set: function (value, inherited) {
                    if (inherited) {
                        this._inheritedModel = value;
                    } else {
                        this._model = value;
                    }

                    var view = this.view();
                    if (view) {
                        view.model(value, true);
                    }

                    var content = this._content;
                    if (content) {
                        content.each(function (c) {
                            if (!nx.is(c, 'String')) {
                                c.model(value, true);
                            }
                        });
                    }
                }
            },
            'class': {
                get: function () {
                    return this.view().get('class');
                },
                set: function (value) {
                    this.view().set('class', value);
                }
            },
            style: {
                get: function () {
                    return this.view().style();
                },
                set: function (value) {
                    this.view().style(value);
                }
            },
            dom: {
                get: function () {
                    return this.resolve('@root');
                }
            }
        },
        methods: {
            init: function () {
                this.inherited();
                var view = this['@view'];
                if (nx.is(view, 'Function')) {
                    var cls = this.constructor;
                    var superView;
                    while (cls) {
                        cls = cls.__super__;
                        superView = cls['@view'];
                        if (superView) {
                            break;
                        }
                    }
                    view = view.call(this, nx.clone(superView, true));
                }

                if (view) {
                    var comp = AbstractComponent.createComponent(view, this);
                    this.register('@root', comp.resolve('@root'));
                    this.register('@tag', comp.resolve('@tag'));
                    this.register('@comp', comp);
                }
            },
            view: function (name) {
                return this.resolve(name || '@comp');
            },
            get: function (name) {
                if (this.has(name)) {
                    return this.inherited(name);
                } else {
                    return this.view().get(name);
                }
            },
            set: function (name, value) {
                if (this.has(name)) {
                    this.inherited(name, value);
                } else {
                    this.view().set(name, value);
                    this.notify(name);
                }
            },
            onAttach: function (parent, index) {
                this.view().onAttach(parent, index);
            },
            onDetach: function () {
                this.view().onDetach(this.parent());
            },
            on: function (name, handler, context) {
                if (this.can(name)) {
                    return this.inherited(name, handler, context);
                } else {
                    return this.view().on(name, handler, context);
                }
            },
            upon: function (name, handler, context) {
                if (this.can(name)) {
                    this.inherited(name, handler, context);
                } else {
                    this.view().upon(name, handler, context);
                }
            },
            off: function (name, handler, context) {
                if (this.can(name)) {
                    this.inherited(name, handler, context);
                } else {
                    this.view().off(name, handler, context);
                }
            },
            dispose: function () {
                var comp = this.view();
                if (comp) {
                    comp.dispose();
                }

                this.inherited();
            }
        }
    });
})(nx);

(function (nx) {
    var global = nx.global;
    var Document = nx.dom.Document;

    /**
     * @class Application
     * @namespace nx.ui
     * @extends nx.ui.AbstractComponent
     */
    nx.define('nx.ui.Application', nx.ui.AbstractComponent, {
        properties: {
            container: {}
        },
        methods: {
            init: function () {
                this.inherited();
                var startFn = this.start;
                var stopFn = this.stop;
                var self = this;
                this.start = function (options) {
                    Document.ready(function () {
                        nx.app = self;
                        startFn.call(self, options);
                    });
                    return this;
                };

                this.stop = function () {
                    nx.app = null;
                    stopFn.call(self);
                };

                this._globalListeners = {};
            },
            /**
             * Start the application.
             * @method start
             */
            start: function () {
                throw new Error('Method "start" is not implemented');
            },
            /**
             * Stop the application.
             * @method stop
             */
            stop: function () {
                throw new Error('Method "stop" is not implemented');
            },
            getContainer: function () {
                if (this.container()) {
                    return new nx.dom.Element(this.container());
                } else {
                    return Document.body();
                }

            },
            on: function (name, handler, context) {
                if (!this.can(name)) {
                    this._attachGlobalListeners(name);
                }

                return this.inherited(name, handler, context);
            },
            upon: function (name, handler, context) {
                if (!this.can(name)) {
                    this._attachGlobalListeners(name);
                }

                this.inherited(name, handler, context);
            },
            _attachGlobalListeners: function (name) {
                var globalListeners = this._globalListeners;
                if (!(name in globalListeners)) {
                    var self = this;
                    var listener = globalListeners[name] = function (event) {
                        self.fire(name, event);
                    };

                    window.addEventListener(name, listener);
                }
            }
        }
    });
})(nx);

(function (nx, global) {

    nx.define("nx.util", {
        static: true,
        methods: {
            uuid: function () {
                return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                    var r = Math.random() * 16 | 0,
                        v = c == 'x' ? r : (r & 0x3 | 0x8);
                    return v.toString(16);
                }).toUpperCase();
            },
            without: function (array, item) {
                var index;
                while ((index = array.indexOf(item)) != -1) {
                    array.splice(index, 1);
                }
                return array;
            },
            find: function (array, iterator, context) {
                var result;
                array.some(function (value, index, list) {
                    if (iterator.call(context || this, value, index, list)) {
                        result = value;
                        return true;
                    }
                });
                return result;
            },
            uniq: function (array, iterator, context) {
                var initial = iterator ? array.map(iterator.bind(context || this)) : array;
                var results = [];
                nx.each(initial, function (value, index) {
                    if (results.indexOf(value) == -1) {
                        results.push(array[index]);
                    }
                });
                return results;
            },
            indexOf: function (array, item) {
                return array.indexOf(item);
            },
            setProperty: function (source, key, value, owner) {
                if (value !== undefined) {
                    if (nx.is(value, 'String')) {
                        if (value.substr(0, 5) == 'model') { // directly target'bind model
                            source.setBinding(key, value + ',direction=<>', source);
                        } else if (value.substr(0, 2) == '{#') { // bind owner's property
                            source.setBinding(key, 'owner.' + value.substring(2, value.length - 1) + ',direction=<>', owner);
                        } else if (value.substr(0, 1) == '{') { // bind owner's model
                            source.setBinding(key, 'owner.model.' + value.substring(1, value.length - 1), owner);
                        } else {
                            source.set(key, value);
                        }
                    } else {
                        source.set(key, value);
                    }
                }
            },
            loadScript: function (url, callback) {
                var script = document.createElement("script");
                script.type = "text/javascript";

                if (script.readyState) { //IE
                    script.onreadystatechange = function () {
                        if (script.readyState == "loaded" ||
                            script.readyState == "complete") {
                            script.onreadystatechange = null;
                            callback();
                        }
                    };
                } else { //Others
                    script.onload = function () {
                        callback();
                    };
                }
                script.src = url;
                document.getElementsByTagName("head")[0].appendChild(script);
            },
            parseURL: function (url) {
                var a = document.createElement('a');
                a.href = url;
                return {
                    source: url,
                    protocol: a.protocol.replace(':', ''),
                    host: a.hostname,
                    port: a.port,
                    query: a.search,
                    params: (function () {
                        var ret = {},
                            seg = a.search.replace(/^\?/, '').split('&'),
                            len = seg.length,
                            i = 0,
                            s;
                        for (; i < len; i++) {
                            if (!seg[i]) {
                                continue;
                            }
                            s = seg[i].split('=');
                            ret[s[0]] = s[1];
                        }
                        return ret;
                    })(),
                    file: (a.pathname.match(/\/([^\/?#]+)$/i) || [, ''])[1],
                    hash: a.hash.replace('#', ''),
                    path: a.pathname.replace(/^([^\/])/, '/$1'),
                    relative: (a.href.match(/tps?:\/\/[^\/]+(.+)/) || [, ''])[1],
                    segments: a.pathname.replace(/^\//, '').split('/')
                };
            },
            keys: function (obj) {
                return Object.keys(obj);
            },
            values: function (obj) {
                var values = [];
                for (var key in obj) {
                    if (obj.hasOwnProperty(key)) {
                        values.push(obj[key]);
                    }
                }
                return values;
            },
            boundHitTest: function (sourceBound, targetBound) {
                var t = targetBound.top >= sourceBound.top && targetBound.top <= ((sourceBound.top + sourceBound.height)),
                    l = targetBound.left >= sourceBound.left && targetBound.left <= (sourceBound.left + sourceBound.width),
                    b = (sourceBound.top + sourceBound.height) >= (targetBound.top + targetBound.height) && (targetBound.top + targetBound.height) >= sourceBound.top,
                    r = (sourceBound.left + sourceBound.width) >= (targetBound.left + targetBound.width) && (targetBound.left + targetBound.width) >= sourceBound.left,
                    hm = sourceBound.top >= targetBound.top && (sourceBound.top + sourceBound.height) <= (targetBound.top + targetBound.height),
                    vm = sourceBound.left >= targetBound.left && (sourceBound.left + sourceBound.width) <= (targetBound.left + targetBound.width);

                return (t && l) || (b && r) || (t && r) || (b && l) || (t && vm) || (b && vm) || (l && hm) || (r && hm);
            },
            isFirefox: function () {
                return navigator.userAgent.indexOf("Firefox") > 0;
            }
        }
    });


})(nx, nx.global);

(function (nx, global) {

    nx.util.query = (function () {
        var i,
            internal = {
                publics: {
                    select: function (array, selector) {
                        var rslt = [];
                        if ($.isArray(array) && $.isFunction(selector)) {
                            var i, item;
                            for (i = 0; i < array.length; i++) {
                                item = array[i];
                                if (selector(item)) {
                                    rslt.push(item);
                                }
                            }
                        }
                        return rslt;
                    },
                    group: function (array, grouper) {
                        var map;
                        if ($.isFunction(grouper)) {
                            map = {};
                            var i, id, group;
                            for (i = 0; i < array.length; i++) {
                                id = grouper(array[i]);
                                if (!id || typeof id !== "string") {
                                    continue;
                                }
                                group = map[id] = map[id] || [];
                                group.push(array[i]);
                            }
                        } else {
                            map = array;
                        }
                        return map;
                    },
                    aggregate: function (array, aggregater) {
                        var rslt = null, key;
                        if ($.isFunction(aggregater)) {
                            if ($.isArray(array)) {
                                rslt = aggregater(array);
                            } else {
                                rslt = [];
                                for (key in array) {
                                    rslt.push(aggregater(array[key], key));
                                }
                            }
                        }
                        return rslt;
                    }
                },
                privates: {
                    aggregate: function (array, args) {
                        var rslt, grouper = null, aggregater = null;
                        // get original identfier and aggregater
                        if ($.isArray(args)) {
                            if (typeof args[args.length - 1] === "function") {
                                aggregater = args.pop();
                            }
                            grouper = (args.length > 1 ? args : args[0]);
                        } else {
                            grouper = args.map;
                            aggregater = args.aggregate;
                        }
                        // translate grouper into function if possible
                        if (typeof grouper === "string") {
                            grouper = grouper.replace(/\s/g, "").split(",");
                        }
                        if ($.isArray(grouper) && grouper[0] && typeof grouper[0] === "string") {
                            grouper = (function (keys) {
                                return function (obj) {
                                    var i, o = {};
                                    for (i = 0; i < keys.length; i++) {
                                        o[keys[i]] = obj[keys[i]];
                                    }
                                    return JSON.stringify(o);
                                };
                            })(grouper);
                        }
                        // do map aggregate
                        rslt = internal.publics.aggregate(internal.publics.group(array, grouper), aggregater);
                        return rslt;
                    },
                    mapping: function (array, mapper) {
                        var i, rslt;
                        if (mapper === true) {
                            rslt = EXPORT.clone(array);
                        } else if ($.isFunction(mapper)) {
                            if ($.isArray(array)) {
                                rslt = [];
                                for (i = 0; i < array.length; i++) {
                                    rslt.push(mapper(array[i], i));
                                }
                            } else {
                                rslt = mapper(array, 0);
                            }
                        } else {
                            if ($.isArray(array)) {
                                rslt = array.slice();
                            } else {
                                rslt = array;
                            }
                        }
                        return rslt;
                    },
                    orderby: function (array, comparer) {
                        if (typeof comparer === "string") {
                            comparer = comparer.replace(/^\s*(.*)$/, "$1").replace(/\s*$/, "").replace(/\s*,\s*/g, ",").split(",");
                        }
                        if ($.isArray(comparer) && comparer[0] && typeof comparer[0] === "string") {
                            comparer = (function (keys) {
                                return function (o1, o2) {
                                    var i, key, desc;
                                    if (!o1 && !o2) {
                                        return 0;
                                    }
                                    for (i = 0; i < keys.length; i++) {
                                        key = keys[i];
                                        desc = /\sdesc$/.test(key);
                                        key = key.replace(/(\s+desc|\s+asc)$/, "");
                                        if (o1[key] > o2[key]) {
                                            return desc ? -1 : 1;
                                        } else if (o2[key] > o1[key]) {
                                            return desc ? 1 : -1;
                                        }
                                    }
                                    return 0;
                                };
                            })(comparer);
                        }
                        if (comparer && typeof comparer === "function") {
                            array.sort(comparer);
                        }
                        return array;
                    }
                },
                query: function (array, options) {
                    /**
                     * @doctype MarkDown
                     * options:
                     * - options.array [any*]
                     *   - the target array
                     * - options.select: function(any){return boolean;}
                     *   - *optional*
                     *   - pre-filter of the array
                     * - options.aggregate: {grouper:grouper,aggregater:aggregater} or [proplist, aggregater] or [prop, prop, ..., aggregater]
                     *   - *optional*
                     *   - proplist: "prop,prop,..."
                     *   - prop: property name on array items
                     *   - grouper: map an array item into a string key
                     *   - aggregater: function(mapped){return aggregated}
                     * - options.mapping: function(item){return newitem}
                     *   - *optional*
                     * - options.orderby: proplist or [prop, prop, ...]
                     *   - *optional*
                     */
                    if (arguments.length == 1) {
                        options = array;
                        array = options.array;
                    }
                    if (!array) {
                        return array;
                    }
                    if (options.select) {
                        array = internal.publics.select(array, options.select);
                    }
                    if (options.aggregate) {
                        array = internal.privates.aggregate(array, options.aggregate);
                    }
                    if (options.mapping) {
                        array = internal.privates.mapping(array, options.mapping);
                    }
                    if (options.orderby) {
                        array = internal.privates.orderby(array, options.orderby);
                    }
                    return array;
                }
            };
        for (i in internal.publics) {
            internal.query[i] = internal.publics[i];
        }
        return internal.query;
    })();
})(nx, nx.global);
(function (nx, util) {
    /**
     * @link http://webstuff.nfshost.com/anim-timing/Overview.html
     * @link https://developer.mozilla.org/en/DOM/window.requestAnimationFrame
     * @link http://dev.chromium.org/developers/design-documents/requestanimationframe-implementation
     */
    var requestAnimationFrame = (function () {
        return window.requestAnimationFrame ||
            window.webkitRequestAnimationFrame ||
            window.mozRequestAnimationFrame ||
            window.oRequestAnimationFrame ||
            window.msRequestAnimationFrame ||
            function (callback) {
                return window.setTimeout(callback, 1000 / 60);
            };
    })(), cancelAnimationFrame = (function () {
        return window.cancelAnimationFrame ||
            window.cancelRequestAnimationFrame ||
            window.webkitCancelAnimationFrame ||
            window.webkitCancelRequestAnimationFrame ||
            window.mozCancelAnimationFrame ||
            window.mozCancelRequestAnimationFrame ||
            window.msCancelAnimationFrame ||
            window.msCancelRequestAnimationFrame ||
            window.oCancelAnimationFrame ||
            window.oCancelRequestAnimationFrame ||
            window.clearTimeout;
    })();

    nx.define('nx.graphic.Animation', {
        statics: {
            requestAnimationFrame: requestAnimationFrame,
            cancelAnimationFrame: cancelAnimationFrame
        },
        events: ['complete'],
        properties: {
            callback: {
                set: function (value) {
                    this._callback = value;
                    this.createAnimation();
                    if (this.autoStart()) {
                        this.start();
                    }
                },
                get: function () {
                    return this._callback || function () {
                    };
                }
            },
            duration: {
                value: 1000
            },
            interval: {
                value: 1000 / 60
            },
            autoStart: {
                value: false
            },
            complete: {
                value: function () {
                    return function () {
                    };
                }
            },
            context: {
                value: this
            }
        },
        methods: {
            init: function (opts, args) {
                this.inherited(arguments);
                this.sets(opts);
            },

            createAnimation: function () {
                var self = this;
                var callback = this.callback();
                var duration = this.duration();
                var interval = this.interval();
                var startTime, progress, id, timestamp, lastTime = 0;
                this.fn = function () {
                    timestamp = +new Date();
                    if (!startTime) {
                        startTime = +new Date();
                        progress = 0;
                    } else {
                        if (!duration) {
                            progress = 0;
                        } else {
                            progress = (timestamp - startTime) / duration;
                        }
                    }
                    if (progress >= 1 || (timestamp - lastTime) >= interval) {
                        lastTime = timestamp;
                        if (progress > 1) {
                            progress = 1;
                        }
                        if (callback.call(self.context(), progress) === false) {
                            //break  when user return false
                            duration = 1;
                            self._completeFN();
                        }

                    }
                    if (progress < 1) {
                        self.ani_id = requestAnimationFrame(self.fn);
                    } else if (progress == 1) {
                        self._completeFN();
                    }
                };
            },

            start: function () {
                this.ani_id = requestAnimationFrame(this.fn);
            },
            stop: function () {
                cancelAnimationFrame(this.ani_id);
            },
            _completeFN: function () {
                this.complete().call(this.context());
                this.stop();
                this.fire("complete");
            }
        }
    });
})(nx, nx.util);



(function (nx,global) {
    var zIndex = 1000;
    /**
     * Popup z-index mamager
     * @class nx.widget.ZIndexManager
     * @static
     */
    nx.define('nx.widget.ZIndexManager',null,{
        static: true,
        methods: {
            getIndex: function () {
                return zIndex++;
            }
        }
    });
}(nx,nx.global));
(function(nx, global) {
    var Container;
    (function() {
        if (nx && nx.ui && !Container) {
            Container = nx.define(nx.ui.Component, {
                view: {
                    props: {
                        'class': 'nx n-popupContainer',
                        style: {
                            'position': 'absolute',
                            'top': '0px',
                            'left': '0px'

                        }
                    }
                }
            });

            /**
             * Popup container
             * @class nx.ui.PopupContainer
             * @static
             */

            nx.define("nx.ui.PopupContainer", {
                static: true,
                properties: {
                    container: {
                        value: function() {
                            return new Container();
                        }
                    }
                },
                methods: {
                    addPopup: function(popup) {
                        this.container().view().dom().appendChild(popup.view().dom());
                    }
                }
            });
        }

        if (document.body && nx && nx.ui) {
            if (document.body.firstChild) {
                document.body.insertBefore(nx.ui.PopupContainer.container().view().dom().$dom, document.body.firstChild);
            } else {
                document.body.appendChild(nx.ui.PopupContainer.container().view().dom().$dom);
            }
        } else {
            setTimeout(arguments.callee, 10);
        }
    })();


})(nx, nx.global);
(function (nx, global) {

    var Container = nx.ui.PopupContainer;

    /**
     * Base popup class
     * @class nx.ui.Popup
     * @extend nx.ui.Component
     */
    nx.define("nx.ui.Popup", nx.ui.Component, {
        events: ['open', 'close'],
        view: {
            props: {
                style: "position:absolute",
                tabindex: -1
            },
            events: {
                blur: function (sender, evt) {
                    // this.close();
                }
            }
        },
        properties: {
            /**
             * @property target
             */
            target: {
                value: document
            },
            /**
             * [bottom,top,left,right]
             * @property direction
             */
            direction: {
                value: "auto" //[bottom,top,left,right]
            },
            /**
             * @property width
             */
            width: {
                value: null
            },
            /**
             * @property height
             */
            height: {
                value: null
            },
            /**
             * @property offset
             */
            offset: {
                value: 0
            },
            /**
             * @property offsetX
             */
            offsetX: {
                value: 0
            },
            /**
             * @property offsetY
             */
            offsetY: {
                value: 0
            },
            /**
             * @property align
             */
            align: {
                value: false
            },
            /**
             * @property position
             */
            position: {
                value: 'absolute'
            },
            /**
             * @property location
             */
            location: {
                value: "outer" // outer inner
            },
            /**
             * @property listenResize
             */
            listenResize: {
                value: false
            },
            /**
             * @property lazyClose
             */
            lazyClose: {
                value: false
            },
            /**
             * @property pin
             */
            pin: {
                value: false
            },
            /**
             * @property registeredPositionMap
             */
            registeredPositionMap: {
                value: function () {
                    return {};
                }
            },
            scrollClose: {
                value: false
            }
        },
        methods: {

            init: function (inPros) {
                this.inherited(inPros);
                this.sets(inPros);
                this._defaultConfig = this.gets();
            },
            attach: function (args) {
                this.inherited(args);
                this.appendToPopupContainer();
            },
            appendToPopupContainer: function () {
                if (!this._appended) {
                    Container.addPopup(this);
                    this._delayCloseEvent();
                    this._listenResizeEvent();
                    this._appended = true;
                    this._closed = false;
                }
            },
            /**
             * Open popup
             * @method open
             * @param args {Object} config
             */
            open: function (args) {
                this._clearTimeout();


                var left = 0;
                var top = 0;

                var root = this.view().dom();

                this.sets(args || {});


                this._resetOffset(args);
                var prevPosition = root.get("data-nx-popup-direction");
                if (prevPosition) {
                    root.removeClass(prevPosition);
                }
                this.appendToPopupContainer();


                //process target

                var target = this.target();
                var targetSize = {
                    width: 0,
                    height: 0
                };

                if (target.resolve && target.view) {
                    target = target.view();
                }

                // if target is a point {x:Number,y:Number}
                if (target.x !== undefined && target.y !== undefined) {
                    left = target.x;
                    top = target.y;
                } else if (target != document) {
                    var elOffset = target.getOffset();
                    left = elOffset.left;
                    top = elOffset.top;
                    targetSize = target.getBound();
                } else {
                    left = 0;
                    top = 0;
                }


                //process
                var width = this.width();
                var height = this.height();
                if (this.align()) {
                    width = targetSize.width || 0;
                }

                if (width) {
                    root.setStyle('width', width);
                    root.setStyle("max-width", width);
                    this.width(width);
                }

                if (height) {
                    root.setStyle('height', height);
                }

                root.setStyle("display", "block");


                //process position

                left += this.offsetX();
                top += this.offsetY();


                var popupSize = this._popupSize = root.getBound();
                var offset = this.offset();
                var innerPositionMap = {
                    "outer": {
                        bottom: {
                            left: left,
                            top: top + targetSize.height + offset
                        },
                        top: {
                            left: left,
                            top: top - popupSize.height - offset
                        },
                        right: {
                            left: left + targetSize.width + offset,
                            top: top
                        },
                        left: {
                            left: left - popupSize.width - offset,
                            top: top
                        }

                    },
                    "inner": {
                        bottom: {
                            left: left + targetSize.width / 2 - popupSize.width / 2 + offset,
                            top: top
                        },
                        top: {
                            left: left + targetSize.width / 2 - popupSize.width / 2,
                            top: top + targetSize.height - popupSize.height - offset
                        },
                        left: {
                            left: left + targetSize.width - popupSize.width - offset,
                            top: top + targetSize.height / 2 - popupSize.height / 2
                        },
                        right: {
                            left: left + offset,
                            top: top + targetSize.height / 2 - popupSize.height / 2
                        }

                    },
                    "tooltip": {
                        "bottom": {
                            left: left + targetSize.width / 2 - popupSize.width / 2,
                            top: top + targetSize.height + offset + 2
                        },
                        "bottom-left": {
                            left: left - 22,
                            top: top + targetSize.height + offset + 2
                        },
                        "bottom-right": {
                            left: left + targetSize.width - popupSize.width + 22,
                            top: top + targetSize.height + offset + 2
                        },
                        "top": {
                            left: left + targetSize.width / 2 - popupSize.width / 2,
                            top: top - popupSize.height - offset - 2
                        },
                        "top-left": {
                            left: left - 22,
                            top: top - popupSize.height - offset - 2
                        },
                        "top-right": {
                            left: left + targetSize.width / 2 - popupSize.width / 2 + 22,
                            top: top - popupSize.height - offset - 2
                        },
                        "right": {
                            left: left + targetSize.width + offset + 2,
                            top: top + targetSize.height / 2 - popupSize.height / 2
                        },
                        "right-top": {
                            left: left + targetSize.width + offset + 2,
                            top: top <= 0 ? 0 : top - 22
                        },
                        "right-bottom": {
                            left: left + targetSize.width + offset + 2,
                            top: top + targetSize.height - popupSize.height
                        },
                        "left": {
                            left: left - popupSize.width - offset - 2,
                            top: top + targetSize.height / 2 - popupSize.height / 2
                        },
                        "left-top": {
                            left: left - popupSize.width - offset - 2,
                            top: top <= 0 ? 0 : top - 22
                        },
                        "left-bottom": {
                            left: left - popupSize.width - offset - 2,
                            top: top + targetSize.height - popupSize.height
                        }
                    }
                };


                var location = this.location();
                this._directionMap = innerPositionMap[location];


                var direction = this.direction();
                if (direction === null || direction == "auto") {
                    direction = this._hitTest();
                }
                if (!direction) {
                    direction = "bottom";
                }
                var positionObj = this._directionMap[direction];
                root.setStyles({
                    "top": positionObj.top,
                    "left": positionObj.left,
                    "position": "position",
                    "z-index": nx.widget.ZIndexManager.getIndex(),
                    'display': 'block'

                });
                //position.setSize(this,popupSize);

                root.set("data-nx-popup-direction", direction);
                root.addClass("popup");
                root.addClass(direction);
                root.addClass("in");
                this.fire("open");
                this.dom().$dom.focus();
            },
            /**
             * close popup
             * @method close
             * @param force
             */
            close: function (force) {

                this._clearTimeout();

                var root = this.view().dom();

                if (this.pin()) {
                    return;
                }

                if (force || !this.lazyClose()) {
                    this._closed = true;
                    root.removeClass('in');
                    root.setStyle("display", "none");
                    this.fire("close");
                } else {
                    this._delayClose();
                }
            },
            _clearTimeout: function () {
                if (this.timer) {
                    clearTimeout(this.timer);
                }
            },
            _delayClose: function () {
                var self = this;
                this._clearTimeout();
                this.timer = setTimeout(function () {
                    self.close(true);
                }, 500);
            },
            _delayCloseEvent: function () {

                if (this.lazyClose()) {
                    //                    this.on("mouseover", function () {
                    //                        var element = this.view().dom().$dom;
                    //                        var target = event.target;
                    //                        var related = event.relatedTarget;
                    //                        if (target && !element.contains(related) && target !== related) {
                    //                            if (this.timer) {
                    //                                clearTimeout(this.timer);
                    //                            }
                    //                        }
                    //                    }, this);
                    //
                    //                    this.on("mouseout", function () {
                    //                        var element = this.view().dom().$dom;
                    //                        var target = event.target;
                    //                        var related = event.relatedTarget;
                    //                        if (!element.contains(related) && target !== related) {
                    //                            clearTimeout(this.timer);
                    //                            this.close(true);
                    //                        }
                    //                    }, this);


                    this.on("mouseenter", function () {
                        if (this.timer) {
                            clearTimeout(this.timer);
                        }
                    }, this);

                    this.on("mouseleave", function () {
                        clearTimeout(this.timer);
                        this.close(true);
                    }, this);
                }
            },
            _listenResizeEvent: function () {
                var self = this;
                var timer;
                if (this.listenResize()) {
                    //                    nx.app.on('resize', function () {
                    //                        if (!this._closed) {
                    //                            if (timer) {
                    //                                clearTimeout(timer)
                    //                            }
                    //                            timer = setTimeout(function () {
                    //                                self.open();
                    //                            }, 22);
                    //                        }
                    //
                    //                    }, this);
                    //
                    //
                    //                    nx.app.on('scroll', function () {
                    //                        if (timer) {
                    //                            clearTimeout(timer)
                    //                        }
                    //                        if (!this._closed) {
                    //                            timer = setTimeout(function () {
                    //                                self.open();
                    //                            }, 22);
                    //                        }
                    //                    }, this);

                }


                if (this.scrollClose()) {
                    //                    nx.app.on('scroll', function () {
                    //                        if (timer) {
                    //                            clearTimeout(timer)
                    //                        }
                    //                        self.close(true);
                    //                    }, this);
                }
            },
            _hitTest: function () {
                var docRect = nx.dom.Document.docRect();

                var keys = Object.keys(this._directionMap);
                var testDirection = keys[0];
                keys.some(function (direction) {
                    var elementRect = {
                        left: this._directionMap[direction].left,
                        top: this._directionMap[direction].top,
                        width: this._popupSize.width,
                        height: this._popupSize.height

                    };
                    //make sure it visible
                    var resulte = elementRect.left >= docRect.scrollX &&
                        elementRect.top >= docRect.scrollY &&
                        elementRect.left + elementRect.width <= docRect.width + docRect.scrollX &&
                        elementRect.top + elementRect.height <= docRect.height + docRect.scrollY;

                    if (resulte) {
                        testDirection = direction;
                        return true;
                    }
                }, this);
                return testDirection;
            },
            _resetOffset: function (args) {
                if (args) {
                    //                    if (!args.offset) {
                    //                        this.offset(this.offset.defaultValue);
                    //                    }
                    //
                    //
                    //                    if (!args.offsetX) {
                    //                        this.offsetX(this.offsetX.defaultValue);
                    //                    }
                    //
                    //
                    //                    if (!args.offsetY) {
                    //                        this.offsetY(this.offsetY.defaultValue);
                    //                    }
                }
            }
        }
    });


})(nx, nx.global);

(function (nx, global) {

    /**
     * UI popover class
     * @class nx.ui.Popover
     * @extend nx.ui.Popup
     */
    nx.define("nx.ui.Popover", nx.ui.Popup, {
        properties: {
            /**
             * Popover's title
             */
            title: {
                get: function () {
                    return this._title;
                },
                set: function (value) {
                    if (value) {
                        this.view("title").dom().setStyle("display", "block");

                    } else {
                        this.view("title").dom().setStyle("display", "none");
                    }
                    if (this._title != value) {
                        this._title = value;
                        return true;
                    } else {
                        return false;
                    }
                }
            },
            location: {
                value: "tooltip"
            }
        },
        view: {
            props: {
                'class': 'popover fade',
                style: {
                    outline: "none"
                },
                tabindex: -1
            },
            events: {
                blur: function (sender, evt) {
                    // this.close();
                }
            },
            content: [{
                props: {
                    'class': 'arrow'
                }
            }, {
                tag: 'h3',
                name: 'title',
                props: {
                    'class': 'popover-title',
                    style: {
                        display: 'none'
                    }
                },
                content: "{#title}"
            }, {
                name: 'body',
                props: {
                    'class': 'popover-content'
                }
            }]
        },
        methods: {
            getContainer: function () {
                return this.view('body').dom();
            }
        }
    });


})(nx, nx.global);

(function(nx, global) {
    /**
     * Global drag manager

     var Component = nx.define(nx.ui.Component, {
        view: {
            content: {
                name: "stage",
                type: 'nx.graphic.TopologyStage',
                props: {
                    width: 600,
                    height: 600
                },
                content: {
                    name: 'a',
                    type: 'nx.graphic.Rect',
                    props: {
                        x: 100,
                        y: 10,
                        width: 100,
                        height: 100,
                        fill: '#f0f'
                    },
                    events: {
                        'mousedown': '{#_mousedown}',
                        'dragmove': '{#_dragmove}'
                    }
                }
            }
        },
        properties: {
            positionX: {
                value: 150
            }
        },
        methods: {
            _mousedown: function (sender, event) {
                event.captureDrag(sender.owner());
            },
            _dragmove: function (sender, event) {
                sender.set("x", sender.get("x") * 1 + event.drag.delta[0]);
                sender.set("y", sender.get("y") * 1 + event.drag.delta[1]);
            }

        }
     });


     var app = new nx.ui.Application();
     var comp = new Component();
     comp.attach(app);


     * @class nx.graphic.DragManager
     * @static
     * @extend nx.Observable
     */

    nx.define("nx.graphic.DragManager", nx.Observable, {
        static: true,
        properties: {
            /**
             * activated component.
             * @property node {nx.graphic.Component}
             */
            node: {},
            /**
             * All coordinate will reference to this element.
             * @property referrer {DOMELement}
             */
            referrer: {},
            /**
             * drag track
             * @property track {Array}
             */
            track: {},
            /**
             * Dragging indicator
             * @property dragging
             * @type Boolean
             */
            dragging: {
                value: false
            }
        },
        methods: {
            init: function() {
                window.addEventListener('mousedown', this._capture_mousedown.bind(this), true);
                window.addEventListener('mousemove', this._capture_mousemove.bind(this), true);
                window.addEventListener('mouseup', this._capture_mouseup.bind(this), true);
                window.addEventListener('touchstart', this._capture_mousedown.bind(this), true);
                window.addEventListener('touchmove', this._capture_mousemove.bind(this), true);
                window.addEventListener('touchend', this._capture_mouseup.bind(this), true);

            },
            /**
             * Start drag event capture
             * @method start
             * @param evt {Event} original dom event
             * @returns {function(this:nx.graphic.DragManager)}
             */
            start: function(evt) {
                return function(node, referrer) {
                    // make sure only one node can capture the "drag" event
                    if (node && !this.node()) {
                        // FIXME may not be right on global
                        referrer = (referrer === window || referrer === document || referrer === document.body) ? document.body : (referrer || node);
                        referrer = (typeof referrer.dom === "function") ? referrer.dom().$dom : referrer;
                        this.node(node);
                        this.referrer(referrer);
                        // track and data
                        var bound, track = [];
                        bound = referrer.getBoundingClientRect();
                        this.track(track);
                        var pageX = (evt.touches && evt.touches.length) ? evt.touches[0].pageX : evt.pageX;
                        var pageY = (evt.touches && evt.touches.length) ? evt.touches[0].pageY : evt.pageY;
                        var current = [pageX - document.body.scrollLeft - bound.left, pageY - document.body.scrollTop - bound.top];
                        track.push(current);
                        track[0].time = evt.timeStamp;
                        evt.dragCapture = function() {};
                        return true;
                    }
                }.bind(this);
            },
            /**
             * Drag move handler
             * @method move
             * @param evt {Event} original dom event
             */
            move: function(evt) {
                var node = this.node();
                if (node) {
                    // attach to the event
                    evt.drag = this._makeDragData(evt);
                    if (!this.dragging()) {
                        this.dragging(true);
                        node.fire("dragstart", evt);
                    }
                    // fire events
                    node.fire("dragmove", evt);
                }
            },
            /**
             * Drag end
             * @method end
             * @param evt {Event} original dom event
             */
            end: function(evt) {
                var node = this.node();
                if (node) {
                    // attach to the event
                    evt.drag = this._makeDragData(evt);
                    // fire events
                    if (this.dragging()) {
                        node.fire("dragend", evt);
                    }
                    // clear status
                    this.node(null);
                    this.track(null);
                    this.dragging(false);
                }
            },
            _makeDragData: function(evt) {
                var track = this.track();
                var bound = this.referrer().getBoundingClientRect();
                var pageX = (evt.touches && evt.touches.length) ? evt.touches[0].pageX : evt.pageX;
                var pageY = (evt.touches && evt.touches.length) ? evt.touches[0].pageY : evt.pageY;
                var current = [pageX - document.body.scrollLeft - bound.left, pageY - document.body.scrollTop - bound.top],
                    origin = track[0],
                    last = track[track.length - 1];
                current.time = evt.timeStamp;
                track.push(current);
                // FIXME optimize if track too large
                if (track.length > 20) {
                    track.splice(1, track.length - 20);
                }
                // TODO make sure the data is correct when target applied a matrix
                return {
                    target: this.node(),
                    accord: this.referrer(),
                    origin: origin,
                    current: current,
                    offset: [current[0] - origin[0], current[1] - origin[1]],
                    delta: [current[0] - last[0], current[1] - last[1]],
                    track: track
                };
            },
            _capture_mousedown: function(evt) {
                if (evt.captureDrag) {
                    this._lastDragCapture = evt.captureDrag;
                }
                if (evt.type === "mousedown" || evt.type === "touchstart") {
                    evt.captureDrag = this.start(evt);
                } else {
                    evt.captureDrag = function() {};
                }
            },
            _capture_mousemove: function(evt) {
                this.move(evt);
                var node = this.node();
                if (node) {
                    evt.stopPropagation();
                    evt.preventDefault();
                    return false;
                }
            },
            _capture_mouseup: function(evt) {
                this.end(evt);
            }
        }
    });

})(nx, nx.global);
(function (nx, global) {

    nx.Object.delegateEvent = function (source, sourceEvent, target, targetEvent) {
        if (!target.can(targetEvent)) {
            source.on(sourceEvent, function (sender, event) {
                target.fire(targetEvent, event);
            });
            nx.Object.extendEvent(target, targetEvent);
        }
    };


    //http://www.timotheegroleau.com/Flash/experiments/easing_function_generator.htm

    var ease = function (t, b, c, d) {
        var ts = (t /= d) * t;
        var tc = ts * t;
        return b + c * (-0.6475 * tc * ts + 0.7975 * ts * ts + -2.3 * tc + 3.2 * ts + -0.05 * t);
    };

    var cssHook = {
        transform: 'webkitTransform'
    };


    /**
     * Base class of graphic component
     * @class nx.graphic.Component
     * @extend nx.ui.Component
     * @module nx.graphic
     */

    nx.define('nx.graphic.Component', nx.ui.Component, {
        /**
         * Fire when drag start
         * @event dragstart
         * @param sender {Object}  Trigger instance
         * @param event {Object} original event object
         */
        /**
         * Fire when drag move
         * @event dragmove
         * @param sender {Object}  Trigger instance
         * @param event {Object} original event object , include delta[x,y] for the shift
         */
        /**
         * Fire when drag end
         * @event dragend
         * @param sender {Object}  Trigger instance
         * @param event {Object} original event object
         */
        events: ['dragstart', 'dragmove', 'dragend'],
        properties: {
            /**
             * Set/get x translate
             * @property translateX
             */
            translateX: {
                set: function (value) {
                    this.setTransform(value);
                }
            },
            /**
             * Set/get y translate
             * @property translateY
             */
            translateY: {
                set: function (value) {
                    this.setTransform(null, value);
                }
            },
            /**
             * Set/get scale
             * @property scale
             */
            scale: {
                set: function (value) {
                    this.setTransform(null, null, value);
                }
            },
            /**
             * Set/get translate, it set/get as {x:number,y:number}
             * @property translate
             */
            translate: {
                get: function () {
                    return {
                        x: this._translateX || 0,
                        y: this._translateY || 0
                    };
                },
                set: function (value) {
                    this.setTransform(value.x, value.y);
                }
            },
            /**
             * Set/get element's visibility
             * @property visible
             */
            visible: {
                get: function () {
                    return this._visible !== undefined ? this._visible : true;
                },
                set: function (value) {
                    if (this.view()) {
                        if (value) {
                            this.view().dom().removeClass('n-hidden');
                        } else {
                            this.view().dom().addClass('n-hidden');
                        }

                    }
                    this._visible = value;
                }
            },
            /**
             * Set/get css class
             * @property class
             */
            'class': {
                get: function () {
                    return this._class !== undefined ? this._class : '';
                },
                set: function (value) {
                    if (this._class !== value) {
                        this._class = value;
                        this.dom().addClass(value);
                        return true;
                    } else {
                        return false;
                    }
                }
            }
        },
        view: {},
        methods: {
            init: function (args) {
                this.inherited(args);
                this.sets(args);
            },
            /**
             * Set component's transform
             * @method setTransform
             * @param [translateX] {Number} x axle translate
             * @param [translateY] {Number} y axle translate
             * @param [scale] {Number} element's scale
             * @param [duration=0] {Number} transition time, unite is second
             */
            setTransform: function (translateX, translateY, scale, duration) {

                var tx = parseFloat(translateX != null ? translateX : this._translateX || 0);
                var ty = parseFloat(translateY != null ? translateY : this._translateY || 0);
                var scl = parseFloat(scale != null ? scale : this._scale || 1);

                this.setStyle('transform', ' matrix(' + scl + ',' + 0 + ',' + 0 + ',' + scl + ',' + tx + ', ' + ty + ')', duration);
                //this.setStyle('transform', ' translate(' + tx + 'px, ' + ty + 'px) scale(' + scl + ')', duration);

                this.dom().$dom.setAttribute('transform', ' translate(' + tx + ', ' + ty + ') scale(' + scl + ')');

                this._translateX = tx;
                this._translateY = ty;
                this._scale = scl;
            },
            /**
             * Set component's css style
             * @method setStyle
             * @param key {String} css key
             * @param value {*} css value
             * @param [duration=0] {Number} set transition time
             * @param [callback]
             * @param [context]
             */
            setStyle: function (key, value, duration, callback, context) {
                if (duration) {
                    this.setTransition(callback, context, duration);
                } else if (callback) {
                    setTimeout(function () {
                        callback.call(context || this);
                    }, 0);
                }


                //todo optimize
                var dom = this.dom().$dom;
                dom.style[key] = value;

                if (cssHook[key]) {
                    dom.style[cssHook[key]] = value;
                }
            },
            setTransition: function (callback, context, duration) {
                var el = this.dom();
                if (duration) {
                    el.setStyle('transition', 'all ' + duration + 's ease');
                    this.on('transitionend', function fn() {
                        if (callback) {
                            callback.call(context || this);
                        }
                        el.setStyle('transition', '');
                        this.off('transitionend', fn, this);
                    }, this);
                } else {
                    el.setStyle('transition', '');
                    if (callback) {
                        setTimeout(function () {
                            callback.call(context || this);
                        }, 0);
                    }
                }
            },
            /**
             * Append component's element to parent node or other dom element
             * @param [parent] {nx.graphic.Component}
             * @method append
             */
            append: function (parent) {
                var parentElement;
                if (parent) {
                    parentElement = this._parentElement = parent.view().dom();
                } else {
                    parentElement = this._parentElement = this._parentElement || this.view().dom().parentNode(); //|| this.parent().view();
                }
                if (parentElement && parentElement.$dom && this._resources && this.view() && !parentElement.contains(this.view().dom())) {
                    parentElement.appendChild(this.view().dom());
                }
            },
            /**
             * Remove component's element from dom tree
             * @method remove
             */
            remove: function () {
                var parentElement = this._parentElement = this._parentElement || this.view().dom().parentNode();
                if (parentElement && this._resources && this.view()) {
                    parentElement.removeChild(this.view().dom());
                }
            },
            /**
             * Get component's bound, delegate element's getBoundingClientRect function
             * @method getBound
             * @returns {*|ClientRect}
             */
            getBound: function () {

                //console.log(this.dom().$dom.getBoundingClientRect())
                //debugger;
                return this.dom().$dom.getBoundingClientRect();
            },
            /**
             * Hide component
             * @method hide
             */
            hide: function () {
                this.visible(false);
            },
            /**
             * Show component
             * @method show
             */
            show: function () {
                this.visible(true);
            },
            /**
             * Set animation for element,pass a config to this function
             * {
             *      to :{
             *          attr1:value,
             *          attr2:value,
             *          ...
             *      },
             *      duration:Number,
             *      complete:Function
             * }
             * @method animate
             * @param config {JSON}
             */
            animate: function (config) {
                var self = this;
                var aniMap = [];
                var el = this.view();
                nx.each(config.to, function (value, key) {
                    var oldValue = this.has(key) ? this.get(key) : el.getStyle(key);
                    aniMap.push({
                        key: key,
                        oldValue: oldValue,
                        newValue: value
                    });
                }, this);

                if (this._ani) {
                    this._ani.stop();
                    this._ani.dispose();
                    delete this._ani;
                }

                var ani = this._ani = new nx.graphic.Animation({
                    duration: config.duration || 1000,
                    context: config.context || this
                });
                ani.callback(function (progress) {
                    nx.each(aniMap, function (item) {
                        var value = item.oldValue + (item.newValue - item.oldValue) * progress;
                        //                        var value = ease(progress, item.oldValue, item.newValue - item.oldValue, 1);
                        self.set(item.key, value);
                    });
                    //console.log(progress);
                });

                if (config.complete) {
                    ani.complete(config.complete);
                }
                ani.on("complete", function fn() {
                    /**
                     * Fired when animation completed
                     * @event animationCompleted
                     * @param sender {Object}  Trigger instance
                     * @param event {Object} original event object
                     */
                    this.fire("animationCompleted");
                    ani.dispose();
                    delete this._ani;
                }, this);
                ani.start();
            },
            _processPropertyValue: function (propertyValue) {
                var value = propertyValue;
                if (nx.is(propertyValue, 'Function')) {
                    value = propertyValue.call(this, this.model(), this);
                }
                return value;
            },
            dispose: function () {
                if (this._resources && this._resources['@root']) {
                    this.view().dom().$dom.remove();
                }
                this.inherited();
            }
        }
    });

})(nx, nx.global);

(function(nx, global) {
    /**
     * SVG Arc component
     * @class nx.graphic.Arc
     * @extend nx.graphic.Component
     * @module nx.graphic
     */
    nx.define("nx.graphic.Arc", nx.graphic.Component, {
        view: {
            name: 'path',
            tag: 'svg:path',
            props: {
                'class': 'n-svg-arc'
            }

        },
        properties: {
            innerRadius: 0,
            outerRadius: 0,
            startAngle: 0,
            endAngle: 0,
            clockwies: false,
            stoke: {
                set: function(inValue) {
                    var value = this._processPropertyValue(inValue);
                    if (value !== this._stoke) {
                        this._stoke = value;
                        this.view().dom().setStyle('stroke', value);
                        return true;
                    } else {
                        return false;
                    }
                }
            },
            fill: {
                set: function(inValue) {
                    var value = this._processPropertyValue(inValue);
                    if (value !== this._stoke) {
                        this._fill = value;
                        this.view().dom().setStyle('fill', value);
                        return true;
                    } else {
                        return false;
                    }
                }
            },
            innerStartPoint: {
                value: function() {
                    return {
                        x: 0,
                        y: 0
                    };
                }
            },
            outerStartPoint: {
                value: function() {
                    return {
                        x: 0,
                        y: 0
                    };
                }
            },
            innerEndPoint: {
                value: function() {
                    return {
                        x: 0,
                        y: 0
                    };
                }
            },
            outerEndPoint: {
                value: function() {
                    return {
                        x: 0,
                        y: 0
                    };
                }
            },
            innerCenterPoint: {
                value: function() {
                    return {
                        x: 0,
                        y: 0
                    };
                }
            },
            outerCenterPoint: {
                value: function() {
                    return {
                        x: 0,
                        y: 0
                    };
                }
            },
            thickness: {
                value: null
            },
            centerPoint: {
                value: function() {
                    return {
                        x: 0,
                        y: 0
                    };
                }
            }
        },
        methods: {
            init: function(args) {
                this.inherited(args);
                this.watch(['innerRadius', 'outerRadius', 'startAngle', 'endAngle', 'clockwies', 'thickness'], function(prop, value) {
                    if (this._outerRadius && (this._startAngle || this._endAngle)) {
                        this._updates();
                    }
                }, this);
            },
            _updates: function() {
                var delta = Math.PI / 180 * (this._clockwies ? -1 : 1);
                var thickness = this._thickness;
                var innerRadius = this._innerRadius;
                var outerRadius = this._outerRadius || innerRadius + thickness;
                var startAngle = Math.min(this._startAngle, this._endAngle) * delta;
                var endAngle = Math.max(this._startAngle, this._endAngle) * delta;
                var gapRadius = outerRadius - innerRadius;
                var gapAngle = Math.abs(this._endAngle - this._startAngle);

                if (gapAngle >= 360) {

                    return;
                    //startAngle = 0;
                    //endAngle = (Math.PI * 2 + startAngle) * (this._clockwies ? -1 : 1);
                    //gapAngle = 360;
                }


                var i_s_x = innerRadius * Math.cos(startAngle);
                var i_s_y = innerRadius * Math.sin(startAngle);

                var o_s_x = outerRadius * Math.cos(startAngle);
                var o_s_y = outerRadius * Math.sin(startAngle);


                var i_e_x = innerRadius * Math.cos(endAngle);
                var i_e_y = innerRadius * Math.sin(endAngle);

                var o_e_x = outerRadius * Math.cos(endAngle);
                var o_e_y = outerRadius * Math.sin(endAngle);

                var d = [];

                d.push('M', o_s_x, o_s_y);
                d.push('A', outerRadius, outerRadius, '0,');
                d.push(gapAngle > 180 ? '1' : '0', ',');
                d.push(this._clockwies ? '0' : '1');
                d.push(o_e_x, o_e_y);
                d.push('L', i_e_x, i_e_y);
                d.push('A', innerRadius, innerRadius, '0,');
                d.push(gapAngle > 180 ? '1' : '0', ',');
                d.push(this._clockwies ? '1' : '0');
                d.push(i_s_x, i_s_y);

                d.push('Z');

                this.view().set('d', d.join(' '));


                this.innerStartPoint({
                    x: i_s_x,
                    y: i_s_y
                });

                this.outerStartPoint({
                    x: o_s_x,
                    y: o_s_y
                });

                this.innerEndPoint({
                    x: i_e_x,
                    y: i_e_y
                });


                this.outerEndPoint({
                    x: o_e_x,
                    y: o_e_y
                });

                var absGap = endAngle - startAngle;

                this.innerCenterPoint({
                    x: innerRadius * Math.cos(startAngle + absGap / 2),
                    y: innerRadius * Math.sin(startAngle + absGap / 2)
                });

                this.outerCenterPoint({
                    x: outerRadius * Math.cos(startAngle + absGap / 2),
                    y: outerRadius * Math.sin(startAngle + absGap / 2)
                });


                this.centerPoint({
                    x: (innerRadius + gapRadius / 2) * Math.cos(startAngle + absGap / 2),
                    y: (innerRadius + gapRadius / 2) * Math.sin(startAngle + absGap / 2)
                });

            }
        }
    });
})(nx, nx.global);
(function (nx, global) {

    /**
     * SVG group component
     * @class nx.graphic.Group
     * @extend nx.graphic.Component
     * @module nx.graphic
     */
    nx.define("nx.graphic.Group", nx.graphic.Component, {
        properties: {
            'data-id': {
                set: function (value) {
                    nx.each(this.content(), function (item) {
                        item.set('data-id', value);
                    });
                    this.view().set('data-id', value);
                    this['_data-id'] = value;
                }
            }
        },
        view: {
            tag: 'svg:g'
        },
        methods: {
            move: function (x, y) {
                var translate = this.translate();
                this.setTransform(x + translate.x, y + translate.y);
            }
        }
    });
})(nx, nx.global);
(function (nx, global) {
    var xlink = 'http://www.w3.org/1999/xlink';
    /**
     * SVG icon component, which icon's define in nx framework
     * @class nx.graphic.Icon
     * @extend nx.graphic.Component
     * @module nx.graphic
     */
    nx.define("nx.graphic.Icon", nx.graphic.Component, {
        view: {
            tag: 'svg:g',
            content: [{
                name: 'bgtext',
                tag: 'svg:text'
            }, {
                name: 'text',
                tag: 'svg:text'
            }, {
                tag: 'svg:g',
                name: 'image',
                content: {
                    name: 'use',
                    tag: 'svg:use'
                }
            }]
        },
        properties: {
            imageType: {
                value: "font"
            },
            /**
             * set/get icon's type
             * @property iconType
             */
            iconType: {
                get: function () {
                    return this._iconType;
                },
                set: function (value) {
                    var icon = nx.graphic.Icons.get(value.toLowerCase());
                    var size = icon.size;
                    var img = this.view('image').dom();
                    var shapeEL = this.view('text').dom();
                    var bgEL = this.view('bgtext').dom();
                    var useEL = this.view('use').dom();


                    if (icon.font) {

                        shapeEL.setStyle('display', 'block');
                        useEL.setStyle('display', 'none');

                        // front font
                        if (shapeEL.$dom.firstChild) {
                            shapeEL.$dom.removeChild(shapeEL.$dom.firstChild);
                        }
                        shapeEL.$dom.appendChild(document.createTextNode(icon.font[0]));
                        shapeEL.addClass('fontIcon iconShape');
                        //

                        //background font

                        if (bgEL.$dom.firstChild) {
                            bgEL.$dom.removeChild(bgEL.$dom.firstChild);
                        }
                        bgEL.$dom.appendChild(document.createTextNode(icon.font[1]));
                        bgEL.addClass('fontIcon iconBG');


                        this.imageType('font');

                    } else {

                        shapeEL.setStyle('display', 'none');
                        useEL.setStyle('display', 'block');

                        if (bgEL.$dom.firstChild) {
                            bgEL.$dom.removeChild(bgEL.$dom.firstChild);
                        }
                        bgEL.$dom.appendChild(document.createTextNode('\ue61d'));
                        bgEL.addClass('fontIcon iconBG');

                        //compatible with before
                        useEL.$dom.setAttributeNS(xlink, 'xlink:href', '#' + value);
                        img.setStyle('transform', 'translate(' + size.width / -2 + 'px, ' + size.height / -2 + 'px)');

                        this.imageType('image');
                    }


                    this.view().set('icontype', value);
                    this.view().dom().addClass('n-topology-icon');


                    this.size(size);
                    this._iconType = icon.name;


                }
            },
            /**
             * set/get icon size
             * @property size
             */
            size: {
                value: function () {
                    return {
                        width: 36,
                        height: 36
                    };
                }
            },
            color: {
                set: function (value) {
                    if (this.imageType() == 'font') {
                        this.view('text').dom().setStyle('fill', value);
                    }
                    this.view('bgtext').dom().setStyle('fill', this.showIcon() ? '' : value);
                    this.view('image').dom().set('color', value);
                    this._color = value;
                }
            },
            scale: {
                set: function (value) {
                    var shapeEL = this.view('text').dom();
                    var bgEL = this.view('bgtext').dom();
                    var img = this.view('image').dom();
                    var size = this.size();
                    var fontSize = Math.max(size.width, size.height);
                    var _size = this.showIcon() ? fontSize * value : 4 + value * 8;
                    shapeEL.setStyle('font-size', _size);
                    bgEL.setStyle('font-size', _size);

                    if (this.imageType() == 'image' && value) {
                        img.setStyle('transform', 'translate(' + size.width / -2 + 'px, ' + size.height / -2 + 'px) scale(' + value + ')');
                    }

                    // FIXME for firefox bug with g.getBoundingClientRect
                    if (nx.util.isFirefox()) {
                        shapeEL.$dom.setAttribute('transform', ' translate(0, ' + _size / 2 + ')');
                        bgEL.$dom.setAttribute('transform', ' translate(0, ' + _size / 2 + ')');
                    }


                    this._scale = value;
                }
            },
            showIcon: {
                get: function () {
                    return this._showIcon !== undefined ? this._showIcon : true;
                },
                set: function (value) {
                    var shapeEL = this.view('text').dom();
                    var bgEL = this.view('bgtext').dom();
                    var img = this.view('image').dom();
                    if (value) {
                        if (this.imageType() == 'font') {
                            shapeEL.setStyle('display', 'block');
                            bgEL.setStyle('display', 'block');
                        } else {
                            img.setStyle('display', 'block');
                            bgEL.setStyle('display', 'none');
                        }

                        bgEL.removeClass('iconBGActive');

                        this.view().dom().addClass('showIcon');

                    } else {
                        if (this.imageType() == 'font') {
                            shapeEL.setStyle('display', 'none');
                        } else {
                            img.setStyle('display', 'none');
                        }
                        bgEL.setStyle('display', 'block');
                        bgEL.addClass('iconBGActive');

                        this.view().dom().removeClass('showIcon');
                    }

                    this._showIcon = value;

                    if (this._color) {
                        this.color(this._color, {
                            force: true
                        });
                    }

                    if (this._scale) {
                        this.scale(this._scale, {
                            force: true
                        });
                    }
                }
            }
        }
    });
})(nx, nx.global);

(function(nx, global) {
    var xlink = "http://www.w3.org/1999/xlink";
    /**
     * Topology device icons collection
     * @class nx.graphic.Icons
     * @static
     */
    var ICONS = nx.define("nx.graphic.Icons", {
        static: true,
        statics: {
            /**
             * Get icons collection
             * @static
             * @property icons
             */
            icons: {}
        },
        methods: {
            /**
             * Get icon by type
             * @param type {String}
             * @returns {element}
             * @method get
             */
            get: function(type) {
                return ICONS.icons[type] || ICONS.icons.switch;
            },
            /**
             * Get icon"s svg string
             * @param type {String}
             * @returns {element}
             * @method getSVGString
             */
            getSVGString: function(type) {
                return topology_icon[type].icon;
            },
            /**
             * Get all types list
             * @returns {Array}
             * @method getTypeList
             */
            getTypeList: function() {
                return Object.keys(topology_icon);
            },
            /**
             * Register a new icon to this collection
             * @method registerIcon
             * @param name {String} icon"s name
             * @param url {URL} icon"s url
             * @param width {Number} icon"s width
             * @param height {Number} icon"s height
             */
            registerIcon: function(name, url, width, height) {
                var icon1 = document.createElementNS(NS, "image");
                icon1.setAttributeNS(XLINK, "href", url);
                ICONS.icons[name] = {
                    size: {
                        width: width,
                        height: height
                    },
                    icon: icon1.cloneNode(true),
                    name: name
                };
            },
            /**
             * Register a fontIcon to this collection
             * @method registerFontIcon
             * @param name {String} icon's name
             * @param fontfamily {String} icon's font family
             * @param fontCharacter {String} font icon's character, start with \u, like \uf108
             * @param fontSize
             */
            registerFontIcon: function(name, fontfamily, fontCharacter, fontSize) {
                ICONS.icons[name] = {
                    size: {
                        width: fontSize,
                        height: fontSize
                    },
                    name: name
                };

                ICONS.icons[name].font = [fontCharacter, fontCharacter];

                nx.dom.Document.addRule(".n-topology g[icontype=" + name + "] .fontIcon", "font-family: " + fontfamily + " !important;");


            },
            /**
             * Iterate all icons
             * @param inCallback {Function}
             * @param [inContext] {Object}
             * @private
             */
            __each__: function(inCallback, inContext) {
                var callback = inCallback || function() {};
                nx.each(topology_icon, function(obj, name) {
                    var icon = obj.icon;
                    callback.call(inContext || this, icon, name, topology_icon);
                });
            }
        }
    });


    var XLINK = "http://www.w3.org/1999/xlink";
    var NS = "http://www.w3.org/2000/svg";


    var topology_icon = {
        switch: {
            width: 32,
            height: 32,
            name: "Switch",
            font: ["\ue618", "\ue619"]
        },
        router: {
            width: 32,
            height: 32,
            name: "Router",
            font: ["\ue61c", "\ue61d"]
        },
        wlc: {
            width: 32,
            height: 32,
            font: ["\ue60f", "\ue610"]
        },
        unknown: {
            width: 32,
            height: 32,
            font: ["\ue612", "\ue611"]
        },
        server: {
            width: 32,
            height: 32,
            font: ["\ue61b", "\ue61a"]
        },
        phone: {
            width: 32,
            height: 32,
            font: ["\ue61e", "\ue61f"]
        },
        nexus5000: {
            width: 32,
            height: 32,
            font: ["\ue620", "\ue621"]
        },
        ipphone: {
            width: 32,
            height: 32,
            font: ["\ue622", "\ue623"]
        },
        host: {
            width: 32,
            height: 32,
            font: ["\ue624", "\ue625"]
        },
        camera: {
            width: 32,
            height: 32,
            font: ["\ue626", "\ue627"]
        },
        accesspoint: {
            width: 32,
            height: 32,
            font: ["\ue628", "\ue629"]
        },
        groups: {
            width: 32,
            height: 32,
            font: ["\ue615", "\ue62f"]
        },
        groupm: {
            width: 32,
            height: 32,
            font: ["\ue616", "\ue630"]
        },
        groupl: {
            width: 32,
            height: 32,
            font: ["\ue617", "\ue631"]
        },
        collapse: {
            width: 16,
            height: 16,
            font: ["\ue62e", "\ue61d"]
        },
        expand: {
            width: 14,
            height: 14,
            font: ["\ue62d", "\ue61d"]
        },
        //nodeset: {
        //    width: 32,
        //    height: 32,
        //    font: ["\ue617", "\ue63a"]
        //},
        cloud: {
            width: 48,
            height: 48,
            font: ["\ue633", "\ue633"]
        },
        unlinked: {
            width: 32,
            height: 32,
            font: ["\ue646", "\ue61d"]
        },
        firewall: {
            width: 32,
            height: 32,
            font: ["\ue647", "\ue648"]
        },
        hostgroup: {
            width: 32,
            height: 32,
            font: ["\ue64d", "\ue64c"]
        },
        wirelesshost: {
            width: 32,
            height: 32,
            font: ["\ue64e", "\ue64c"]
        }
    };


    nx.each(topology_icon, function(icon, key) {
        var i = ICONS.icons[key] = {
            size: {
                width: icon.width,
                height: icon.height
            },
            name: key
        };

        if (icon.font) {
            i.font = icon.font;
        } else if (icon.icon) {
            i.icon = new DOMParser().parseFromString(icon.icon, "text/xml").documentElement.cloneNode(true);
        }
    });

})(nx, nx.global);
(function (nx,global) {
    /**
     * SVG circle component
     * @class nx.graphic.Circle
     * @extend nx.graphic.Component
     * @module nx.graphic
     */
    nx.define("nx.graphic.Circle", nx.graphic.Component, {
        view: {
            tag: 'svg:circle'

        }
    });
})(nx, nx.global);
(function (nx,global) {

    var xlink = 'http://www.w3.org/1999/xlink';

    /**
     * SVG image component
     * @class nx.graphic.Image
     * @extend nx.graphic.Component
     * @module nx.graphic
     */
    nx.define("nx.graphic.Image", nx.graphic.Component, {
        properties: {
            /**
             * Set/get image src
             * @property src
             */
            src: {
                get: function () {
                    return this._src !== undefined ? this._src : 0;
                },
                set: function (value) {
                    if (this._src !== value) {
                        this._src = value;
                        if (this.view() && value !== undefined) {
                            var el = this.view().dom().$dom;
                            el.setAttributeNS(xlink, 'href', value);
                        }
                        return true;
                    } else {
                        return false;
                    }
                }
            }
        },
        view: {
            tag: 'svg:image'
        }
    });
})(nx, nx.global);
(function (nx,global) {
    /**
     * SVG line component
     * @class nx.graphic.Line
     * @extend nx.graphic.Component
     * @module nx.graphic
     */
    nx.define("nx.graphic.Line", nx.graphic.Component, {
        view: {
            tag: 'svg:line'
        }
    });
})(nx, nx.global);
(function (nx,global) {
    /**
     * SVG path component
     * @class nx.graphic.Path
     * @extend nx.graphic.Component
     * @module nx.graphic
     */

    nx.define("nx.graphic.Path", nx.graphic.Component, {
        view: {
            tag: 'svg:path'
        }
    });
})(nx, nx.global);
(function (nx,global) {
    /**
     * SVG polygon component
     * @class nx.graphic.Polygon
     * @extend nx.graphic.Path
     * @module nx.graphic
     */

    nx.define("nx.graphic.Polygon", nx.graphic.Path, {
        properties: {
            nodes: {
                /**
                 * Set/get point array to generate a polygon shape
                 * @property nodes
                 */
                get: function () {
                    return this._nodes || [];
                },
                set: function (value) {
                    this._nodes = value;
                    var vertices = value;
                    if (vertices.length !== 0) {
                        if (vertices.length == 1) {
                            var point = vertices[0];
                            vertices.push({x: point.x - 1, y: point.y - 1});
                            vertices.push({x: point.x + 1, y: point.y - 1});
                        } else if (vertices.length == 2) {
                            vertices.push([vertices[0].x + 1, vertices[0].y + 1]);
                            vertices.push(vertices[1]);
                        }

                        var nodes = nx.data.Convex.process(vertices);
                        var path = [];
                        path.push('M ', nodes[0].x, ' ', nodes[0].y);
                        for (var i = 1; i < nodes.length; i++) {
                            if (!nx.is(nodes[i], 'Array')) {
                                path.push(' L ', nodes[i].x, ' ', nodes[i].y);
                            }

                        }
                        path.push(' Z');
                        this.set("d", path.join(''));
                    }

                }
            }
        }
    });
})(nx, nx.global);
(function (nx,global) {
    /**
     * SVG rect component
     * @class nx.graphic.Rect
     * @extend nx.graphic.Component
     * @module nx.graphic
     */

    nx.define("nx.graphic.Rect", nx.graphic.Component, {
        view: {
            tag: 'svg:rect'
        }
    });
})(nx, nx.global);
(function (nx, global) {

    /**
     * SVG root component
     * @class nx.graphic.Stage
     * @extend nx.ui.Component
     * @module nx.graphic
     */
    nx.define("nx.graphic.Stage", nx.ui.Component, {
        events: ['dragStageStart', 'dragStage', 'dragStageEnd', 'stageTransitionEnd'],
        view: {
            tag: 'svg:svg',
            props: {
                'class': 'n-svg',
                version: '1.1',
                xmlns: "http://www.w3.org/2000/svg",
                'xmlns:xlink': 'http://www.w3.org/1999/xlink',
                style: {
                    width: '{#width}',
                    height: '{#height}'
                }
            },
            content: [{
                name: 'defs',
                tag: 'svg:defs'
            }, {
                name: 'scalingLayer',
                type: 'nx.graphic.Group',
                props: {
                    'class': 'stage'
                },
                events: {
                    'transitionend': '{#_transitionend}'
                }
            }, {
                name: 'staticLayer',
                type: 'nx.graphic.Group'
            }],
            events: {
                'mousedown': '{#_mousedown}',
                'touchstart': '{#_mousedown}',
                'dragstart': '{#_dragstart}',
                'dragmove': '{#_drag}',
                'dragend': '{#_dragend}'
            }
        },
        properties: {
            /**
             * Is an animation in progress?
             * @property animating {Boolean}
             * @readOnly
             */
            animating: {},
            /**
             * Set/get topology's scalability
             * @property scalable {Boolean}
             */
            scalable: {
                value: true
            },
            /**
             * Get the viewbox of current stage position.
             * @property scalable {Boolean}
             * @readOnly
             */
            viewbox: {
                dependencies: "width, height, matrix",
                value: function (width, height, matrix) {
                    var inversion = nx.geometry.Matrix.inverse(matrix);
                    return [nx.geometry.Vector.transform([0, 0], inversion), nx.geometry.Vector.transform([width, height], inversion)];
                }
            },
            /**
             * set/get stage's width
             * @property width
             */
            width: {
                value: 300
            },
            /**
             * set/get stage's height
             * @property height
             */
            height: {
                value: 300
            },
            /**
             * Stage scale
             * @property stageScale {Number}
             */
            stageScale: {
                value: 1
            },
            /**
             * Stage padding
             * @property padding {number} 0
             */
            padding: {
                value: 0
            },
            /**
             * Topology max scaling
             * @property maxScale {Number}
             */
            maxZoomLevel: {
                value: 12
            },
            /**
             * Topology min scaling
             * @property minScale {Number}
             */
            minZoomLevel: {
                value: 0.25
            },
            zoomLevel: {
                value: 1
            },
            /**
             * Disable notify stageScale
             * @property disableUpdateStageScale {Boolean} false
             */
            disableUpdateStageScale: {
                value: false
            },
            /**
             * Stage transform matrix
             * @property matrix {nx.geometry.Math} nx.geometry.Matrix.I
             */
            matrix: {
                get: function () {
                    return this._matrix || nx.geometry.Matrix.I;
                },
                set: function (matrix) {
                    //dom.style.webkitTransform = matrixString;
                    var matrixObject = this.matrixObject();
                    var dom = this.scalingLayer().dom().$dom;
                    var matrixString = "matrix(" + nx.geometry.Matrix.stringify(matrix) + ")";
                    dom.style.transform = matrixString;
                    dom.setAttribute('transform', ' translate(' + matrixObject.x() + ', ' + matrixObject.y() + ') scale(' + matrixObject.scale() + ')');
                    this._matrix = matrix;
                }
            },
            /**
             * Matrix Object
             * @property matrixObject
             */
            matrixObject: {},
            /**
             * get content group element
             * @property stage
             */
            stage: {
                get: function () {
                    return this.view("scalingLayer");
                }
            },
            staticLayer: {
                get: function () {
                    return this.view("staticLayer");
                }
            },
            scalingLayer: {
                get: function () {
                    return this.view("scalingLayer");
                }
            },
            fitMatrixObject: {
                set: function (matrix) {
                    if (matrix) {
                        this.zoomLevel(this.stage().scale() / matrix.scale());
                    }
                    this._fitMatrixObject = matrix;
                }
            }
        },
        methods: {
            getContainer: function () {
                return this.view('scalingLayer').view().dom();
            },
            /**
             * Add svg def element into the stage
             * @method addDef
             * @param el {SVGDOM}
             */
            addDef: function (el) {
                this.view("defs").dom().$dom.appendChild(el);
            },
            /**
             * Add svg def element into the stage in string format
             * @method addDefString
             * @param str {String}
             */
            addDefString: function (str) {
                this.view("defs").dom().$dom.appendChild(new DOMParser().parseFromString(str, "text/xml").documentElement);
            },
            /**
             * Get content's relative bound
             * @method getContentBound
             * @returns {{left: number, top: number, width: Number, height: Number}}
             */
            getContentBound: function () {
                var stageBound = this.scalingLayer().getBound();
                var topoBound = this.view().dom().getBound();

                if (stageBound.left === 0 && stageBound.top === 0 && stageBound.width === 0 && stageBound.height === 0) {
                    var padding = this.padding();
                    return {
                        left: padding,
                        top: padding,
                        height: this.height() - padding * 2,
                        width: this.width() - padding * 2
                    };
                } else {
                    var bound = {
                        left: stageBound.left - topoBound.left,
                        top: stageBound.top - topoBound.top,
                        width: stageBound.width,
                        height: stageBound.height
                    };

                    if (bound.width < 300) {
                        bound.left -= (300 - bound.width) / 2;
                        bound.width = 300;
                    }

                    if (bound.height < 300) {
                        bound.top -= (300 - bound.height) / 2;
                        bound.height = 300;
                    }

                    return bound;

                }
            },
            fit: function (callback, context, isAnimated) {
                var watching = nx.keyword.internal.watch(this, "animating", function (animating) {
                    if (!animating) {
                        watching.release();
                        if (isAnimated) {
                            this.scalingLayer().on('transitionend', function fn() {
                                this.scalingLayer().dom().removeClass('n-topology-fit');
                                this.scalingLayer().off('transitionend', fn, this);
                                /* jslint -W030 */
                                callback && callback.call(context || this);
                                this.animating(false);
                            }, this);
                            var originalMatrix = this.matrix();
                            var newMatrix = this.fitMatrixObject().matrix();
                            if (!nx.geometry.Matrix.approximate(originalMatrix, newMatrix)) {
                                this.animating(true);
                                this.scalingLayer().dom().addClass('n-topology-fit');
                                this._setStageMatrix(this.fitMatrixObject().matrix());
                            } else {
                                /* jslint -W030 */
                                callback && callback.call(context || this);
                            }
                            this.zoomLevel(1);
                        } else {
                            this._setStageMatrix(this.fitMatrixObject().matrix());
                            this.zoomLevel(1);
                            /* jslint -W030 */
                            callback && callback.call(context || this);
                        }
                    }
                }.bind(this));
                watching.notify();
            },
            actualSize: function () {
                this.scalingLayer().setTransition(null, null, 0.6);
                this._setStageMatrix(nx.geometry.Matrix.I);
            },
            zoom: function (value, callback, context) {
                this.scalingLayer().setTransition(callback, context, 0.6);
                this.applyStageScale(value);
            },
            zoomByBound: function (inBound, callback, context, duration) {
                var padding = this.padding();
                var stageBound = {
                    left: padding,
                    top: padding,
                    height: this.height() - padding * 2,
                    width: this.width() - padding * 2
                };
                this.scalingLayer().setTransition(callback, context, duration);
                this.applyStageMatrix(this.calcRectZoomMatrix(stageBound, inBound));
            },
            calcRectZoomMatrix: function (graph, rect) {
                var s = (!rect.width && !rect.height) ? 1 : Math.min(graph.height / Math.abs(rect.height), graph.width / Math.abs(rect.width));
                var dx = (graph.left + graph.width / 2) - s * (rect.left + rect.width / 2);
                var dy = (graph.top + graph.height / 2) - s * (rect.top + rect.height / 2);
                return [
                    [s, 0, 0], [0, s, 0], [dx, dy, 1]
                ];
            },
            applyTranslate: function (x, y, duration) {
                var matrix = this.matrixObject();
                matrix.applyTranslate(x, y);
                if (duration) {
                    this.scalingLayer().setTransition(null, null, duration);
                }
                this.matrix(matrix.matrix());
                this.matrixObject(matrix);
                return matrix;
            },
            applyStageMatrix: function (matrix, according) {
                return this._setStageMatrix(nx.geometry.Matrix.multiply(this.matrix(), matrix), according);
            },
            applyStageScale: function (scale, according) {
                var _scale = scale || 1,
                    _according = according || [this.width() / 2, this.height() / 2];
                var matrix = nx.geometry.Matrix.multiply([
                    [1, 0, 0],
                    [0, 1, 0],
                    [-_according[0], -_according[1], 1]
                ], [
                    [_scale, 0, 0],
                    [0, _scale, 0],
                    [0, 0, 1]
                ], [
                    [1, 0, 0],
                    [0, 1, 0],
                    [_according[0], _according[1], 1]
                ]);
                return this.applyStageMatrix(matrix, _according);
            },
            resetStageMatrix: function () {
                var m = new nx.geometry.Matrix(this.matrix());
                this.disableUpdateStageScale(false);
                this.matrix(m.matrix());
                this.matrixObject(m);
                this.stageScale(1 / m.scale());
            },
            resetFitMatrix: function () {
                var watching = nx.keyword.internal.watch(this, "animating", function (animating) {
                    if (!animating) {
                        watching.release();
                        var contentBound, padding, stageBound, matrix;
                        // get transform matrix
                        contentBound = this.getContentBound();
                        padding = this.padding();
                        stageBound = {
                            left: padding,
                            top: padding,
                            height: this.height() - padding * 2,
                            width: this.width() - padding * 2
                        };
                        matrix = new nx.geometry.Matrix(this.calcRectZoomMatrix(stageBound, contentBound));
                        matrix.matrix(nx.geometry.Matrix.multiply(this.matrix(), matrix.matrix()));
                        this.fitMatrixObject(matrix);

                    }
                }.bind(this));
                watching.notify();
            },
            _setStageMatrix: function (matrix, according) {
                according = according || [this.width() / 2, this.height() / 2];
                var m = new nx.geometry.Matrix(matrix);
                var matrixFit = this.fitMatrixObject();
                var scaleFit = matrixFit.scale();
                var zoomMax = this.maxZoomLevel(),
                    zoomMin = this.minZoomLevel();
                if (m.scale() / scaleFit > zoomMax) {
                    m.applyScale(zoomMax * scaleFit / m.scale(), according);
                }
                if (m.scale() / scaleFit < zoomMin) {
                    m.applyScale(zoomMin * scaleFit / m.scale(), according);
                }
                if (!nx.geometry.Matrix.approximate(this.matrix(), m.matrix())) {
                    this.matrixObject(m);
                    this.matrix(m.matrix());
                    if (!this.disableUpdateStageScale()) {
                        this.stageScale(1 / m.scale());
                    }
                    this.zoomLevel(m.scale() / scaleFit);
                    return m;
                } else {
                    return this.matrixObject();
                }
            },
            hide: function () {
                this.view('scalingLayer').dom().setStyle('opacity', 0);
                this.view('staticLayer').dom().setStyle('opacity', 0);
            },
            show: function () {
                this.view('scalingLayer').dom().setStyle('opacity', 1);
                this.view('staticLayer').dom().setStyle('opacity', 1);
            },
            _transitionend: function (sender, event) {
                this.fire('stageTransitionEnd', event);
            },
            _mousedown: function (sender, event) {
                event.captureDrag(sender);
            },
            _dragstart: function (sender, event) {
                this.view("scalingLayer").dom().setStyle('pointer-events', 'none');
                this.fire('dragStageStart', event);
            },
            _drag: function (sender, event) {
                this.fire('dragStage', event);
            },
            _dragend: function (sender, event) {
                this.fire('dragStageEnd', event);
                this.view("scalingLayer").dom().setStyle('pointer-events', 'all');
            }
        }
    });


})(nx, nx.global);

(function (nx, global) {
    /**
     * SVG text component
     * @class nx.graphic.Text
     * @extend nx.graphic.Component
     * @module nx.graphic
     */
    nx.define("nx.graphic.Text", nx.graphic.Component, {
        properties: {
            /**
             * Set/get text
             * @property text
             */
            text: {
                get: function () {
                    return this._text !== undefined ? this._text : 0;
                },
                set: function (value) {
                    if (this._text !== value && value !== undefined) {
                        this._text = value;
                        var el = this.view().dom().$dom;
                        if (el.firstChild) {
                            el.removeChild(el.firstChild);
                        }
                        el.appendChild(document.createTextNode(value));
                        return true;
                    } else {
                        return false;
                    }
                }
            }
        },
        view: {
            tag: 'svg:text'
        }
    });
})(nx, nx.global);
(function (nx,global) {
    /**
     * SVG triangle component
     * @class nx.graphic.Triangle
     * @extend nx.graphic.Path
     * @module nx.graphic
     */
    nx.define("nx.graphic.Triangle", nx.graphic.Path, {
        properties: {
            width: {
                get: function () {
                    return this._width !== undefined ? this._width : 0;
                },
                set: function (value) {
                    if (this._width !== value) {
                        this._width = value;
                        this._draw();
                        return true;
                    } else {
                        return false;
                    }
                }
            },
            height: {
                get: function () {
                    return this._height !== undefined ? this._height : 0;
                },
                set: function (value) {
                    if (this._height !== value) {
                        this._height = value;
                        this._draw();
                        return true;
                    } else {
                        return false;
                    }
                }
            }
        },
        methods: {
            _draw: function () {
                if (this._width && this._height) {
                    var path = [];
                    path.push('M ', this._width / 2, ' ', 0);
                    path.push(' L ', this._width, ' ', this._height);
                    path.push(' L ', 0, ' ', this._height);
                    path.push(' Z');
                    this.set("d", path.join(''));
                }


            }
        }
    });
})(nx, nx.global);
(function (nx,global) {

    /**
     * SVG BezierCurves component
     * @class nx.graphic.BezierCurves
     * @extend nx.graphic.Path
     * @module nx.graphic
     */

    nx.define("nx.graphic.BezierCurves", nx.graphic.Path, {
        properties: {
            /**
             * set/get start point'x
             * @property x1
             */
            x1: {
                set: function (value) {
                    this._x1 = value;
                    this._buildPath();
                },
                get: function () {
                    return this._x1 || 0;
                }
            },
            /**
             * set/get start point'y
             * @property y1
             */
            y1: {
                set: function (value) {
                    this._y1 = value;
                    this._buildPath();
                },
                get: function () {
                    return this._y1 || 0;
                }
            },
            /**
             * set/get end point'x
             * @property x2
             */
            x2: {
                set: function (value) {
                    this._x2 = value;
                    this._buildPath();
                },
                get: function () {
                    return this._x2 || 0;
                }
            },
            /**
             * set/get end point'x
             * @property y2
             */
            y2: {
                set: function (value) {
                    this._y2 = value;
                    this._buildPath();
                },
                get: function () {
                    return this._y2 || 0;
                }
            },
            isClockwise: {
                value: true
            },
            straight: {
                value: false
            }
        },
        methods: {
            _buildPath: function () {
                var x1 = this.x1();
                var x2 = this.x2();
                var y1 = this.y1();
                var y2 = this.y2();

                var d;

                if (x1 !== null && x2 !== null && y1 !== null && y2 !== null) {
                    var dx = (x1 - x2);
                    var dy = (y2 - y1);
                    var dr = Math.sqrt((dx * dx + dy * dy));


                    if (this.straight()) {
                        d = "M" + x1 + "," + y1 + " " + x2 + "," + y2;
                    } else if (this.isClockwise()) {
                        d = "M" + x2 + "," + y2 +
                            "A " + dr + " " + dr + ", 0, 0, 1, " + x1 + "," + y1 +
                            "A " + (dr - 0) + " " + (dr - 0) + ", 0, 0, 0, " + x2 + "," + y2;
                    } else {
                        d = "M" + x2 + "," + y2 +
                            "A " + dr + " " + dr + ", 0, 0, 0, " + x1 + "," + y1 +
                            "A " + (dr - 0) + " " + (dr - 0) + ", 0, 0, 1, " + x2 + "," + y2;
                    }

                    return this.set("d", d);

                } else {
                    return null;
                }
            }
        }
    });

})(nx, nx.global);
(function (nx, ui, global) {
    nx.define("nx.geometry.MatrixSupport", {
        properties: {
            matrix: {
                value: function () {
                    return nx.geometry.Matrix.I;
                }
            },
            /**
             * @property matrixInversion
             * @type {Number[3][3]}
             * @readOnly
             */
            matrixInversion: {
                dependencies: ["matrix"],
                value: function (matrix) {
                    if (!matrix) {
                        return null;
                    }
                    return nx.geometry.Matrix.inverse(matrix);
                }
            },
            transform_internal_: {
                dependencies: ["matrix"],
                value: function (matrix) {
                    if (matrix) {
                        var scale = NaN,
                            rotate = NaN;
                        if (nx.geometry.Matrix.isometric(matrix)) {
                            scale = Math.sqrt(matrix[0][0] * matrix[0][0] + matrix[0][1] * matrix[0][1]);
                            rotate = matrix[0][1] > 0 ? Math.acos(matrix[0][0] / scale) : -Math.acos(matrix[0][0] / scale);
                        }
                        return {
                            x: matrix[2][0],
                            y: matrix[2][1],
                            scale: scale,
                            rotate: rotate
                        };
                    } else {
                        return {
                            x: 0,
                            y: 0,
                            scale: 1,
                            rotate: 0
                        };
                    }
                }
            },
            x: {
                get: function () {
                    return this._x !== undefined ? this._x : this.transform_internal_().x;
                },
                set: function (value) {
                    this._applyTransform("x", value);
                    if (!isNaN(this.transform_internal_().x) && this._x !== this.transform_internal_().x) {
                        this._x = this.transform_internal_().x;
                        return true;
                    }
                    return false;
                }
            },
            y: {
                get: function () {
                    return this._y !== undefined ? this._y : this.transform_internal_().y;
                },
                set: function (value) {
                    this._applyTransform("y", value);
                    if (!isNaN(this.transform_internal_().y) && this._y !== this.transform_internal_().y) {
                        this._y = this.transform_internal_().y;
                        return true;
                    }
                    return false;
                }
            },
            scale: {
                get: function () {
                    return this._scale !== undefined ? this._scale : this.transform_internal_().scale;
                },
                set: function (v) {
                    this._applyTransform("scale", v);
                    if (!isNaN(this.transform_internal_().scale) && this._scale !== this.transform_internal_().scale) {
                        this._scale = this.transform_internal_().scale;
                        return true;
                    }
                    return false;
                }
            },
            rotate: {
                get: function () {
                    return this._rotate !== undefined ? this._rotate : this.transform_internal_().rotate;
                },
                set: function (v) {
                    this._applyTransform("rotate", v);
                    if (!isNaN(this.transform_internal_().rotate) && this._rotate !== this.transform_internal_().rotate) {
                        this._rotate = this.transform_internal_().rotate;
                        return true;
                    }
                    return false;
                }
            }
        },
        methods: {
            applyTranslate: function (x, y) {
                this.matrix(nx.geometry.Matrix.multiply(this.matrix(), [
                    [1, 0, 0],
                    [0, 1, 0],
                    [x, y, 1]
                ]));
            },
            applyScale: function (s, accord) {
                if (accord) {
                    this.matrix(nx.geometry.Matrix.multiply(this.matrix(), [
                        [1, 0, 0],
                        [0, 1, 0],
                        [-accord[0], -accord[1], 1]
                    ], [
                        [s, 0, 0],
                        [0, s, 0],
                        [0, 0, 1]
                    ], [
                        [1, 0, 0],
                        [0, 1, 0],
                        [accord[0], accord[1], 1]
                    ]));
                } else {
                    this.matrix(nx.geometry.Matrix.multiply(this.matrix(), [
                        [s, 0, 0],
                        [0, s, 0],
                        [0, 0, 1]
                    ]));
                }
            },
            applyRotate: function (r, accord) {
                var x = this.x(),
                    y = this.y(),
                    sinr = sin(r),
                    cosr = cos(r);
                if (accord) {
                    this.matrix(nx.geometry.Matrix.multiply(this.matrix(), [
                        [1, 0, 0],
                        [0, 1, 0],
                        [-accord[0], -accord[1], 1]
                    ], [
                        [cos, sin, 0],
                        [-sin, cos, 0],
                        [0, 0, 1]
                    ], [
                        [1, 0, 0],
                        [0, 1, 0],
                        [accord[0], accord[1], 1]
                    ]));
                } else {
                    this.matrix(nx.geometry.Matrix.multiply(this.matrix(), [
                        [cos, sin, 0],
                        [-sin, cos, 0],
                        [0, 0, 1]
                    ]));
                }
            },
            applyMatrix: function () {
                var matrices = Array.prototype.slice.call(arguments);
                matrices = nx.util.query({
                    array: matrices,
                    mapping: function (matrix) {
                        return nx.is(matrix, nx.geometry.Matrix) ? matrix.matrix() : matrix;
                    }
                });
                matrices.unshift(this.matrix());
                this.matrix(nx.geometry.Matrix.multiply.apply(this, matrices));
            },
            _applyTransform: function (key, value) {
                if (this["_" + key] === value || isNaN(value)) {
                    return;
                }
                if (value === this.transform_internal_()[key]) {
                    this["_" + key] = value;
                    this.notify(key);
                } else {
                    switch (key) {
                    case "x":
                        this.applyTranslate(value - this.transform_internal_().x, 0);
                        break;
                    case "y":
                        this.applyTranslate(0, value - this.transform_internal_().y);
                        break;
                    case "scale":
                        this.applyScale(value / this.transform_internal_().scale, [this.transform_internal_().x, this.transform_internal_().y]);
                        break;
                    case "rotate":
                        this.applyRotate(value - this.transform_internal_().rotate, [this.transform_internal_().x, this.transform_internal_().y]);
                        break;
                    }
                }
            },
            toString: function () {
                return nx.geometry.Matrix.stringify(this.matrix());
            }
        }
    });
})(nx, nx.ui, window);

(function (nx, ui, global) {
    /**
     * @class Matrix
     * @namespace nx.geometry
     */
    var EXPORT = nx.define("nx.geometry.Matrix", nx.Observable, {
        mixins: [nx.geometry.MatrixSupport],
        methods: {
            init: function (matrix) {
                this.inherited();
                this.matrix(matrix);
            },
            equal: function (matrix) {
                return EXPORT.equal(this.matrix(), (nx.is(matrix, EXPORT) ? matrix.matrix() : matrix));
            }
        },
        statics: {
            I: [
                [1, 0, 0],
                [0, 1, 0],
                [0, 0, 1]
            ],
            isometric: function (m) {
                return m && (m[0][0] || m[0][1]) && m[0][0] === m[1][1] && m[0][1] === -m[1][0];
            },
            approximate: function (m1, m2) {
                if (!m1 || !m2 || m1.length != m2.length) {
                    return false;
                }
                var i;
                for (i = 0; i < m1.length; i++) {
                    if (!nx.geometry.Vector.approximate(m1[i], m2[i])) {
                        return false;
                    }
                }
                return true;
            },
            equal: function (m1, m2) {
                if (!m1 || !m2 || m1.length != m2.length) {
                    return false;
                }
                var i;
                for (i = 0; i < m1.length; i++) {
                    if (!nx.geometry.Vector.equal(m1[i], m2[i])) {
                        return false;
                    }
                }
                return true;
            },
            multiply: function () {
                var matrixes = Array.prototype.slice.call(arguments);
                var m1, m2, m, mr, mc, r, c, n, row, col, num;
                var i, j, k;
                while (matrixes.length > 1) {
                    /* jshint -W030 */
                    m1 = matrixes[0], m2 = matrixes[1];
                    if (m1[0].length != m2.length) {
                        return null;
                    }
                    /* jshint -W030 */
                    row = m1.length, col = m2[0].length, num = m2.length;
                    m = [];
                    for (r = 0; r < row; r++) {
                        mr = [];
                        for (c = 0; c < col; c++) {
                            mc = 0;
                            for (n = 0; n < num; n++) {
                                mc += m1[r][n] * m2[n][c];
                            }
                            mr.push(mc);
                        }
                        m.push(mr);
                    }
                    matrixes.splice(0, 2, m);
                }
                return matrixes[0];
            },
            transpose: function (m) {
                var t = [],
                    r, c, row = m.length,
                    col = m[0].length;
                for (c = 0; c < col; c++) {
                    t[c] = [];
                    for (r = 0; r < row; r++) {
                        t[c].push(m[r][c]);
                    }
                }
                return t;
            },
            inverse: function (m) {
                // FIXME just for 2D 3x3 Matrix
                var a = m[0][0],
                    b = m[0][1],
                    c = m[1][0],
                    d = m[1][1],
                    e = m[2][0],
                    f = m[2][1];
                var rslt = [],
                    deno = a * d - b * c;
                if (deno === 0) {
                    return null;
                }
                return [
                    [d / deno, -b / deno, 0], [-c / deno, a / deno, 0], [(c * f - d * e) / deno, (b * e - a * f) / deno, 1]
                ];
            },
            stringify: function (matrix) {
                return [matrix[0][0], matrix[0][1], matrix[1][0], matrix[1][1], matrix[2][0], matrix[2][1]].join(",").replace(/-?\d+e[+-]?\d+/g, "0");
            }
        }
    });
})(nx, nx.ui, window);

(function (nx, ui, global) {
    /**
     * @class Math
     * @namespace nx.geometry
     */
    var EXPORT = nx.define("nx.geometry.Math", nx.Observable, {
        statics: (function () {
            function precised(f) {
                return function (param) {
                    var v = f(param);
                    return EXPORT.approximate(v, 0) ? 0 : v;
                };
            }

            return {
                approximate: function (a, b) {
                    var v = a - b;
                    return v < 1e-10 && v > -1e-10;
                },
                sin: precised(Math.sin),
                cos: precised(Math.cos),
                tan: precised(Math.tan),
                cot: function (a) {
                    var tan = Math.tan(a);
                    if (tan > 1e10 || tan < -1e10) {
                        return 0;
                    }
                    return 1 / tan;
                }
            };
        })()
    });
})(nx, nx.ui, window);

(function(nx, ui, global) {
    /**
     * @class BezierCurve
     * @namespace nx.geometry
     */
    var EXPORT = nx.define("nx.geometry.BezierCurve", nx.Observable, {
        statics: (function() {
            function transformBezierToPolyline(bezier) {
                var i, polyline = [];
                for (i = 0; i < bezier.length - 1; i++) {
                    polyline.push([bezier[i], bezier[i + 1]]);
                }
                return polyline;
            }

            function transformPolylineToBezier(polyline) {
                var i, bezier = [polyline[0][0]];
                for (i = 0; i < polyline.length; i++) {
                    bezier.push(polyline[i][1]);
                }
                return bezier;
            }

            function transformRecursiveSeparatePoints(points) {
                var i = 0,
                    last = 0,
                    result = [];
                for (i = 0; i < points.length; i++) {
                    if (typeof points[i] !== "number" || points[i] <= last || points[i] > 1) {
                        throw "Invalid bread point list: " + points.join(",");
                    }
                    result.push((points[i] - last) / (1 - last));
                    last = points[i];
                }
                return result;
            }

            function quadLength(t, start, control_1, control_2, end) {
                /* Formula from Wikipedia article on Bezier curves. */
                return start * (1.0 - t) * (1.0 - t) * (1.0 - t) + 3.0 * control_1 * (1.0 - t) * (1.0 - t) * t + 3.0 * control_2 * (1.0 - t) * t * t + end * t * t * t;
            }


            return {
                slice: function(bezier, from, to) {
                    if (from === 0) {
                        if (to === 0) {
                            return null;
                        }
                        return EXPORT.breakdown(bezier, to).beziers[0];
                    } else if (!to) {
                        return EXPORT.breakdown(bezier, from).beziers[1];
                    } else {
                        return EXPORT.breakdown(bezier, from, to).beziers[1];
                    }
                },
                breakdown: function(bezier) {
                    // get the rest arguments
                    var rates = Array.prototype.slice.call(arguments, 1);
                    if (!rates.length) {
                        throw "Invalid argument length: " + arguments.length;
                    }
                    rates = transformRecursiveSeparatePoints(rates);
                    var rate, polyline, sep, points = [bezier[0]],
                        beziers = [];
                    // transform bezier points into lines
                    polyline = transformBezierToPolyline(bezier);
                    // iterate all rates
                    while (rates.length) {
                        // get the separate ratio
                        rate = rates.shift();
                        // separate the rest bezier
                        sep = EXPORT.separate(polyline, rate);
                        // mark the points and beziers
                        points.push(sep.point);
                        beziers.push(transformPolylineToBezier(sep.left));
                        // get the rest
                        polyline = sep.right;
                    }
                    // append the rest bezier
                    points.push(bezier[bezier.length - 1]);
                    beziers.push(transformPolylineToBezier(polyline));
                    return {
                        points: points,
                        beziers: beziers
                    };
                },
                /**
                 * @method separate
                 * @param polyline List of intervals (interval=[point-from, point-to], point=[x, y]).
                 * @param rate The rate to separate.
                 * @return {point:[x, y], left: leftPolyline, right: rightPolyline}
                 */
                separate: function separate(polyline, rate) {
                    var rest = 1 - rate;
                    var intervalSeparatePoint = function(interval) {
                        return [interval[0][0] * rest + interval[1][0] * rate, interval[0][1] * rest + interval[1][1] * rate];
                    };
                    var intervalInter = function(i1, i2) {
                        return [intervalSeparatePoint([i1[0], i2[0]]), intervalSeparatePoint([i1[1], i2[1]])];
                    };
                    var polylineLower = function(polyline) {
                        var i, rslt = [];
                        for (i = 0; i < polyline.length - 1; i++) {
                            rslt.push(intervalInter(polyline[i], polyline[i + 1]));
                        }
                        return rslt;
                    };
                    // start iterate
                    var point, left = [],
                        right = [];
                    var intervals = polyline,
                        interval;
                    while (intervals.length) {
                        interval = intervals[0];
                        left.push([interval[0], intervalSeparatePoint(interval)]);
                        interval = intervals[intervals.length - 1];
                        right.unshift([intervalSeparatePoint(interval), interval[1]]);
                        if (intervals.length == 1) {
                            point = intervalSeparatePoint(intervals[0]);
                        }
                        intervals = polylineLower(intervals);
                    }
                    return {
                        point: point,
                        left: left,
                        right: right
                    };
                },
                through: function(points, grade) {
                    // get default grade
                    if (grade === undefined) {
                        grade = points.length - 1;
                    }
                    // check if grade is too low
                    if (grade < 2) {
                        return null;
                    }
                    // TODO generalized algorithm for all grade
                    var anchors = [];
                    if (grade === 2) {
                        var A = points[0];
                        var B = points[2];
                        var X = points[1];
                        var O = [(A[0] + B[0]) / 2, (A[1] + B[1]) / 2];
                        var XX = [X[0] * 2 - O[0], X[1] * 2 - O[1]];
                        anchors.push(A, XX, B);
                    }
                    return anchors;
                },
                locationAlongCurve: function(bezier, distance) {
                    var t;
                    var steps = 1000;
                    var length = 0.0;
                    var previous_dot = [];
                    var start = bezier[0];
                    if (!distance) {
                        return 0;
                    }
                    for (var i = 0; i <= steps; i++) {
                        t = i / steps;
                        var x = quadLength(t, start[0], bezier[1][0], bezier[2][0], bezier[3][0]);
                        var y = quadLength(t, start[1], bezier[1][1], bezier[2][1], bezier[3][1]);
                        if (i > 0) {
                            var x_diff = x - previous_dot[0];
                            var y_diff = y - previous_dot[1];
                            var gap = Math.sqrt(x_diff * x_diff + y_diff * y_diff);
                            if (length < distance && distance < length + gap) {
                                return i / steps;
                            } else {
                                length += gap;
                            }
                        }
                        previous_dot = [x, y];
                    }
                    return NaN;
                },
                positionAlongCurve: function(bezier, distance) {
                    var t;
                    var steps = 1000;
                    var length = 0.0;
                    var previous_dot = null;
                    var start = bezier[0];
                    if (!distance) {
                        return 0;
                    }
                    for (var i = 0; i <= steps; i++) {
                        t = i / steps;
                        var x = quadLength(t, start[0], bezier[1][0], bezier[2][0], bezier[3][0]);
                        var y = quadLength(t, start[1], bezier[1][1], bezier[2][1], bezier[3][1]);
                        if (i > 0) {
                            var x_diff = x - previous_dot[0];
                            var y_diff = y - previous_dot[1];
                            var gap = Math.sqrt(x_diff * x_diff + y_diff * y_diff);
                            if (length < distance && distance < length + gap) {
                                return  [x, y];
                            } else {
                                length += gap;
                            }
                        }
                        previous_dot = [x, y];
                    }
                    return NaN;
                },
                getLength: function(bezier) {
                    var t;
                    var steps = 1000;
                    var length = 0.0;
                    var previous_dot = [];
                    var start = bezier[0];
                    for (var i = 0; i <= steps; i++) {
                        t = i / steps;
                        var x = quadLength(t, start[0], bezier[1][0], bezier[2][0], bezier[3][0]);
                        var y = quadLength(t, start[1], bezier[1][1], bezier[2][1], bezier[3][1]);
                        if (i > 0) {
                            var x_diff = x - previous_dot[0];
                            var y_diff = y - previous_dot[1];

                            length += Math.sqrt(x_diff * x_diff + y_diff * y_diff);
                        }
                        previous_dot = [x, y];
                    }
                    return length;
                }
            };
        })()
    });
})(nx, nx.ui, window);
(function (nx, global) {
    /**
     * @class Vector
     * @namespace nx.geometry
     */
    var Vector = nx.define("nx.geometry.Vector", nx.Observable, {
        statics: {
            approximate: function (v1, v2) {
                if (!v1 || !v2 || v1.length != v2.length) {
                    return false;
                }
                var i;
                for (i = 0; i < v1.length; i++) {
                    if (!nx.geometry.Math.approximate(v1[i], v2[i])) {
                        return false;
                    }
                }
                return true;
            },
            equal: function (v1, v2) {
                if (!v1 || !v2 || v1.length != v2.length) {
                    return false;
                }
                var i;
                for (i = 0; i < v1.length; i++) {
                    if (v1[i] !== v2[i]) {
                        return false;
                    }
                }
                return true;
            },
            plus: function (v1, v2) {
                return [v1[0] + v2[0], v1[1] + v2[1]];
            },
            transform: function (v, m) {
                var matrices = [
                    [v.concat([1])]
                ].concat(Array.prototype.slice.call(arguments, 1));
                return nx.geometry.Matrix.multiply.apply(nx.geometry.Matrix, matrices)[0].slice(0, 2);
            },
            multiply: function (v, k) {
                return Vector.transform(v, [
                    [k, 0, 0],
                    [0, k, 0],
                    [0, 0, 1]
                ]);
            },
            abs: function (v, len) {
                if (arguments.length == 1) {
                    return Math.sqrt(v[0] * v[0] + v[1] * v[1]);
                }
                var weight = len / Vector.abs(v);
                return Vector.transform(v, [
                    [weight, 0, 0],
                    [0, weight, 0],
                    [0, 0, 1]
                ]);
            },
            reverse: function (v) {
                return Vector.transform(v, [
                    [-1, 0, 0],
                    [0, -1, 0],
                    [0, 0, 1]
                ]);
            },
            rotate: function (v, a) {
                var sin = nx.geometry.Math.sin(a),
                    cos = nx.geometry.Math.cos(a);
                return Vector.transform(v, [
                    [cos, sin, 0],
                    [-sin, cos, 0],
                    [0, 0, 1]
                ]);
            },
            length: function (v) {
                return Math.sqrt(v[0] * v[0] + v[1] * v[1]);
            },
            angleCosine: function (v1, v2) {
                return (v1[0] * v2[0] + v1[1] * v2[1]) / Vector.length(v1) / Vector.length(v2);
            }
        },
        methods: {
            init: function (x, y) {
                this.x = x || 0;
                this.y = y || 0;
            },
            /**
             * @method equals
             * @param v {nx.geometry.Vector}
             * @returns {boolean}
             */
            equals: function (v) {
                return this.x === v.x && this.y === v.y;
            },
            /**
             * @method length
             * @returns {number}
             */
            length: function () {
                return Math.sqrt(this.squaredLength());
            },
            /**
             * @method squaredLength
             * @returns {number}
             */
            squaredLength: function () {
                var x = this.x,
                    y = this.y;

                return x * x + y * y;
            },
            /**
             * @method angle
             * @returns {number}
             */
            angle: function () {
                var l = this.length(),
                    a = l && Math.acos(this.x / l);
                a = a * 180 / Math.PI;
                a = this.y > 0 ? a : -a;

                return a;
            },
            /**
             * @method circumferentialAngle
             * @returns {number}
             */
            circumferentialAngle: function () {
                var angle = this.angle();
                if (angle < 0) {
                    angle += 360;
                }
                return angle;

            },
            /**
             * @method slope
             * @returns {number}
             */
            slope: function () {
                return this.y / this.x;
            },
            /**
             * @method add
             * @param v {nx.geometry.Vector}
             * @returns {nx.geometry.Vector}
             */
            add: function (v) {
                return new Vector(this.x + v.x, this.y + v.y);
            },
            /**
             * @method subtract
             * @param v {nx.geometry.Vector}
             * @returns {nx.geometry.Vector}
             */
            subtract: function (v) {
                return new Vector(this.x - v.x, this.y - v.y);
            },
            /**
             * @method multiply
             * @param k {Number}
             * @returns {nx.geometry.Vector}
             */
            multiply: function (k) {
                return new Vector(this.x * k, this.y * k);
            },
            /**
             * @method divide
             * @param k {Number}
             * @returns {nx.geometry.Vector}
             */
            divide: function (k) {
                return new Vector(this.x / k, this.y / k);
            },
            /**
             * @method rotate
             * @param a {Number}
             * @returns {nx.geometry.Vector}
             */
            rotate: function (a) {
                var x = this.x,
                    y = this.y,
                    sinA = Math.sin(a / 180 * Math.PI),
                    cosA = Math.cos(a / 180 * Math.PI);

                return new Vector(x * cosA - y * sinA, x * sinA + y * cosA);
            },
            /**
             * @method negate
             * @returns {nx.geometry.Vector}
             */
            negate: function () {
                return new Vector(-this.x, -this.y);
            },
            /**
             * @method normal
             * @returns {nx.geometry.Vector}
             */
            normal: function () {
                var l = this.length() || 1;
                return new Vector(-this.y / l, this.x / l);
            },
            /**
             * @method normalize
             * @returns {nx.geometry.Vector}
             */
            normalize: function () {
                var l = this.length() || 1;
                return new Vector(this.x / l, this.y / l);
            },
            /**
             * @method clone
             * @returns {nx.geometry.Vector}
             */
            clone: function () {
                return new Vector(this.x, this.y);
            }
        }
    });
})(nx, window);

(function (nx) {
    var Vector = nx.geometry.Vector;

    /**
     * Mathematics Line class
     * @class nx.geometry.Line
     * @module nx.geometry
     */
    var Line = nx.define('nx.geometry.Line', nx.Observable, {
        methods: {
            init: function (start, end) {
                this.start = start || new Vector();
                this.end = end || new Vector();
                this.dir = this.end.subtract(this.start);
            },
            /**
             * @method length
             * @returns {*}
             */
            length: function () {
                return this.dir.length();
            },
            /**
             * @method squaredLength
             * @returns {*}
             */
            squaredLength: function () {
                return this.dir.squaredLength();
            },
            /**
             * @method angle
             * @returns {*}
             */
            angle: function () {
                return this.dir.angle();
            },
            /**
             * @methid intersection
             * @returns {*}
             */
            circumferentialAngle: function () {
                var angle = this.angle();
                if (angle < 0) {
                    angle += 360;
                }
                return angle;
            },
            /**
             * @method center
             * @returns {nx.geometry.Vector}
             */
            center: function () {
                return this.start.add(this.end).divide(2);
            },
            /**
             * @method slope
             * @returns {*}
             */
            slope: function () {
                return this.dir.slope();
            },
            /**
             * @method general
             * @returns {Array}
             */
            general: function () {
                var k = this.slope(),
                    start = this.start;
                if (isFinite(k)) {
                    return [k, -1, start.y - k * start.x];
                }
                else {
                    return [1, 0, -start.x];
                }
            },
            /**
             * @method intersection
             * @param l {nx.geometry.Line}
             * @returns {nx.geometry.Vector}
             */
            intersection: function (l) {
                var g0 = this.general(),
                    g1 = l.general();

                return new Vector(
                        (g0[1] * g1[2] - g1[1] * g0[2]) / (g0[0] * g1[1] - g1[0] * g0[1]),
                        (g0[0] * g1[2] - g1[0] * g0[2]) / (g1[0] * g0[1] - g0[0] * g1[1]));
            },
            /**
             * @method pedal
             * @param v {nx.geometry.Vector}
             * @returns {nx.geometry.Vector}
             */
            pedal: function (v) {
                var dir = this.dir,
                    g0 = this.general(),
                    g1 = [dir.x, dir.y, -v.x * dir.x - v.y * dir.y];

                return new Vector(
                        (g0[1] * g1[2] - g1[1] * g0[2]) / (g0[0] * g1[1] - g1[0] * g0[1]),
                        (g0[0] * g1[2] - g1[0] * g0[2]) / (g1[0] * g0[1] - g0[0] * g1[1]));
            },
            /**
             * @method translate
             * @param v {nx.geometry.Vector}
             * @returns {mx.math.Line}
             */
            translate: function (v) {
                v = v.rotate(this.angle());
                return new Line(this.start.add(v), this.end.add(v));
            },
            /**
             * @method rotate
             * @param a {Number}
             * @returns {nx.geometry.Line}
             */
            rotate: function (a) {
                return new Line(this.start.rotate(a), this.end.rotate(a));
            },
            /**
             * @method negate
             * @returns {nx.geometry.Line}
             */
            negate: function () {
                return new Line(this.end, this.start);
            },
            /**
             * @method normal
             * @returns {nx.geometry.Vector}
             */
            normal: function () {
                var dir = this.dir, l = this.dir.length();
                return new Vector(-dir.y / l, dir.x / l);
            },
            /**
             * @method pad
             * @param a {nx.geometry.Vector}
             * @param b {nx.geometry.Vector}
             * @returns {nx.geometry.Line}
             */
            pad: function (a, b) {
                var n = this.dir.normalize();
                return new Line(this.start.add(n.multiply(a)), this.end.add(n.multiply(-b)));
            },
            /**
             * @method clone
             * @returns {nx.geometry.Line}
             */
            clone: function () {
                return new Line(this.start, this.end);
            }
        }
    });
})(nx);
(function (nx, global) {


    /*
     0|1
     ---
     2|3
     */

    nx.data.QuadTree = function (inPoints, inWidth, inHeight, inCharge) {
        var width = inWidth || 800;
        var height = inHeight || 600;
        var charge = inCharge || 200;
        var points = inPoints;
        var x1 = 0, y1 = 0, x2 = 0, y2 = 0;
        this.root = null;
        this.alpha = 0;

        if (points) {
            var i = 0, length = points.length;
            var point, px, py;
            for (; i < length; i++) {
                point = points[i];
                point.dx = 0;
                point.dy = 0;
                px = point.x;
                py = point.y;
                if (isNaN(px)) {
                    px = point.x = Math.random() * width;
                }
                if (isNaN(py)) {
                    py = point.y = Math.random() * height;
                }
                if (px < x1) {
                    x1 = px;
                } else if (px > x2) {
                    x2 = px;
                }
                if (py < y1) {
                    y1 = py;
                } else if (py > y2) {
                    y2 = py;
                }
            }

            //square
            var dx = x2 - x1, dy = y2 - y1;
            if (dx > dy) {
                y2 = y1 + dx;
            } else {
                x2 = x1 + dy;
            }

            var root = this.root = new QuadTreeNode(this, x1, y1, x2, y2);
            for (i = 0; i < length; i++) {
                root.insert(points[i]);
            }
        }
    };

    var QuadTreeNode = function (inQuadTree, inX1, inY1, inX2, inY2) {
        var x1 = this.x1 = inX1, y1 = this.y1 = inY1, x2 = this.x2 = inX2, y2 = this.y2 = inY2;
        var cx = (x1 + x2) * 0.5, cy = (y1 + y2) * 0.5;
        var dx = (inX2 - inX1) * 0.5;
        var dy = (inY2 - inY1) * 0.5;
        this.point = null;
        this.nodes = null;
        this.insert = function (inPoint) {
            var point = this.point;
            var nodes = this.nodes;
            if (!point && !nodes) {
                this.point = inPoint;
                return;
            }
            if (point) {
                if (Math.abs(point.x - inPoint.x) + Math.abs(point.y - inPoint.y) < 0.01) {
                    this._insert(inPoint);
                } else {
                    this.point = null;
                    this._insert(point);
                    this._insert(inPoint);
                }
            } else {
                this._insert(inPoint);
            }
        };

        this._insert = function (inPoint) {
            var right = inPoint.x >= cx, bottom = inPoint.y >= cy, i = (bottom << 1) + right;
            var index = (bottom << 1) + right;
            var x = x1 + dx * right;
            var y = y1 + dy * bottom;
            var nodes = this.nodes || (this.nodes = []);
            var node = nodes[index] || (nodes[index] = new QuadTreeNode(inQuadTree, x, y, x + dx, y + dy));
            node.insert(inPoint);
        };
    };

})(nx, nx.global);
(function (nx, global) {

    /**
     * NeXt force layout algorithm class
     * @class nx.data.Force
     */

    /**
     * Force layout algorithm class constructor function
     * @param inWidth {Number} force stage width, default 800
     * @param inHeight {Number} force stage height, default 800
     * @constructor
     */

    nx.data.NextForce = function (inWidth, inHeight) {
        var width = inWidth || 800;
        var height = inHeight || 800;
        var strength = 4;
        var distance = 100;
        var gravity = 0.1;
        this.charge = 1200;
        this.alpha = 1;

        this.totalEnergy = Infinity;
        this.maxEnergy = Infinity;

        var threshold = 2;
        var theta = 0.8;
        this.nodes = null;
        this.links = null;
        this.quadTree = null;
        /**
         * Set data to this algorithm
         * @method setData
         * @param inJson {Object} Follow Common Topology Data Definition
         */
        this.setData = function (inJson) {
            var nodes = this.nodes = inJson.nodes;
            var links = this.links = inJson.links;
            var nodeMap = this.nodeMap = {};
            var weightMap = this.weightMap = {};
            var maxWeight = this.maxWeight = 1;
            var node, link, i = 0, length = nodes.length, id, weight;
            for (; i < length; i++) {
                node = nodes[i];
                id = node.id;
                nodeMap[id] = node;
                weightMap[id] = 0;
            }
            if (links) {
                length = links.length;
                for (i = 0; i < length; ++i) {
                    link = links[i];
                    id = link.source;
                    weight = ++weightMap[id];
                    if (weight > maxWeight) {
                        this.maxWeight = weight;
                    }
                    id = link.target;
                    weight = ++weightMap[id];
                    if (weight > maxWeight) {
                        this.maxWeight = weight;
                    }
                }
            }
        };
        /**
         * Start processing
         * @method start
         */
        this.start = function () {
            var totalEnergyThreshold = threshold * this.nodes.length;
            while (true) {
                this.tick();
                if (this.maxEnergy < threshold * 5 && this.totalEnergy < totalEnergyThreshold) {
                    break;
                }
            }
        };
        /**
         * Tick whole force stage
         * @method tick
         */
        this.tick = function () {
            var nodes = this.nodes;
            var quadTree = this.quadTree = new nx.data.QuadTree(nodes, width, height);
            this._calculateLinkEffect();
            this._calculateCenterGravitation();

            var root = quadTree.root;
            this._calculateQuadTreeCharge(root);
//            var chargeCallback = this.chargeCallback;
//            if (chargeCallback) {
//                chargeCallback.call(scope, root);
//            }
            var i, length = nodes.length, node;
            for (i = 0; i < length; i++) {
                node = nodes[i];
                this._calculateChargeEffect(root, node);
            }
            this._changePosition();
        };
        this._changePosition = function () {
            var totalEnergy = 0;
            var maxEnergy = 0;
            var nodes = this.nodes;
            var i, node, length = nodes.length, x1 = 0, y1 = 0, x2 = 0, y2 = 0, x, y, energy, dx, dy, allFixed = true;
            for (i = 0; i < length; i++) {
                node = nodes[i];
                dx = node.dx * 0.5;
                dy = node.dy * 0.5;
                energy = Math.abs(dx) + Math.abs(dy);

                if (!node.fixed) {

                    totalEnergy += energy;

                    if (energy > maxEnergy) {
                        maxEnergy = energy;
                    }
                }


                if (!node.fixed) {
                    x = node.x += dx;
                    y = node.y += dy;
                    allFixed = false;
                } else {
                    x = node.x;
                    y = node.y;
                }
                if (x < x1) {
                    x1 = x;
                } else if (x > x2) {
                    x2 = x;
                }
                if (y < y1) {
                    y1 = y;
                } else if (y > y2) {
                    y2 = y;
                }
            }
            this.totalEnergy = allFixed ? 0 : totalEnergy;
            this.maxEnergy = allFixed ? 0 : maxEnergy;
            this.x1 = x1;
            this.y1 = y1;
            this.x2 = x2;
            this.y2 = y2;
        };
        this._calculateCenterGravitation = function () {
            var nodes = this.nodes;
            var node, x, y;
            var length = nodes.length;

            var k = 0.5 * gravity;
            x = width / 2;
            y = height / 2;
            for (var i = 0; i < length; i++) {
                node = nodes[i];
                node.dx += (x - node.x) * k;
                node.dy += (y - node.y) * k;
            }
        };
        this._calculateLinkEffect = function () {
            var links = this.links;
            var nodeMap = this.nodeMap;
            var weightMap = this.weightMap;
            var i, length , link, source, target, dx, dy, d2, d, dk, k, sWeight, tWeight, totalWeight;
            if (links) {
                length = links.length;
                for (i = 0; i < length; ++i) {
                    link = links[i];
                    source = nodeMap[link.source];
                    target = nodeMap[link.target];
                    dx = target.x - source.x;
                    dy = target.y - source.y;
                    if (dx === 0 && dy === 0) {
                        target.x += Math.random() * 5;
                        target.y += Math.random() * 5;
                        dx = target.x - source.x;
                        dy = target.y - source.y;
                    }
                    d2 = dx * dx + dy * dy;
                    d = Math.sqrt(d2);
                    if (d2) {
                        var maxWeight = this.maxWeight;
                        dk = strength * (d - distance) / d;
                        dx *= dk;
                        dy *= dk;
                        sWeight = weightMap[source.id];
                        tWeight = weightMap[target.id];
                        totalWeight = sWeight + tWeight;
                        k = sWeight / totalWeight;
                        target.dx -= (dx * k) / maxWeight;
                        target.dy -= (dy * k) / maxWeight;
                        k = 1 - k;
                        source.dx += (dx * k) / maxWeight;
                        source.dy += (dy * k) / maxWeight;
                    }
                }
            }
        };
        this._calculateQuadTreeCharge = function (inNode) {
            if (inNode.fixed) {
                return;
            }
            var nodes = inNode.nodes;
            var point = inNode.point;
            var chargeX = 0, chargeY = 0, charge = 0;
            if (!nodes) {
                inNode.charge = inNode.pointCharge = this.charge;
                inNode.chargeX = point.x;
                inNode.chargeY = point.y;
                return;
            }
            if (nodes) {
                var i = 0, length = nodes.length, node, nodeCharge;
                for (; i < length; i++) {
                    node = nodes[i];
                    if (node) {
                        this._calculateQuadTreeCharge(node);
                        nodeCharge = node.charge;
                        charge += nodeCharge;
                        chargeX += nodeCharge * node.chargeX;
                        chargeY += nodeCharge * node.chargeY;
                    }
                }
            }
            if (point) {
                var thisCharge = this.charge;
                charge += thisCharge;
                chargeX += thisCharge * point.x;
                chargeY += thisCharge * point.y;
            }
            inNode.charge = charge;
            inNode.chargeX = chargeX / charge;
            inNode.chargeY = chargeY / charge;
        };
        this._calculateChargeEffect = function (inNode, inPoint) {
            if (this.__calculateChargeEffect(inNode, inPoint)) {
                var nodes = inNode.nodes;
                if (nodes) {
                    var node, i = 0, length = nodes.length;
                    for (; i < length; i++) {
                        node = nodes[i];
                        if (node) {
                            this._calculateChargeEffect(node, inPoint);
                        }
                    }
                }

            }
        };

        this.__calculateChargeEffect = function (inNode, inPoint) {
            if (inNode.point != inPoint) {
                var dx = inNode.chargeX - inPoint.x;
                var dy = inNode.chargeY - inPoint.y;
                var d2 = dx * dx + dy * dy;
                var d = Math.sqrt(d2);
                var dk = 1 / d;
                var k;
                if ((inNode.x2 - inNode.x1) * dk < theta) {
                    k = inNode.charge * dk * dk;
                    inPoint.dx -= dx * k;
                    inPoint.dy -= dy * k;
                    return false;
                } else {
                    if (inNode.point) {
                        if (!isFinite(dk)) {
                            inPoint.dx -= Math.random() * 10;
                            inPoint.dy -= Math.random() * 10;
                        } else if (inNode.pointCharge) {
                            k = inNode.pointCharge * dk * dk;
                            inPoint.dx -= dx * k;
                            inPoint.dy -= dy * k;
                        }
                    }
                }
            }
            return true;
        };
    };
})(nx, nx.global);
(function (nx, global) {
    nx.data.Force = function () {
        var force = {};
        var size = [100, 100];
        var alpha = 0,
            friction = 0.9;
        var linkDistance = function () {
            return 100;
        };
        var linkStrength = function () {
            return 1;
        };
        var charge = -1200,
            gravity = 0.1,
            theta = 0.8,
            nodes = [],
            links = [],
            distances, strengths, charges;

        function repulse(node) {
            return function (quad, x1, _, x2) {
                if (quad.point !== node) {
                    var dx = quad.cx - node.x,
                        dy = quad.cy - node.y,
                        dn = 1 / Math.sqrt(dx * dx + dy * dy),
                        k;
                    if ((x2 - x1) * dn < theta) {
                        k = quad.charge * dn * dn;
                        node.px -= dx * k;
                        node.py -= dy * k;
                        return true;
                    }
                    if (quad.point && isFinite(dn)) {
                        k = quad.pointCharge * dn * dn;
                        node.px -= dx * k;
                        node.py -= dy * k;
                    }
                }
                return !quad.charge;
            };
        }

        force.tick = function () {
            if ((alpha *= 0.99) < 0.005) {
                alpha = 0;
                return true;
            }
            var n = nodes.length,
                m = links.length,
                q, i, o, s, t, l, k, x, y;
            for (i = 0; i < m; ++i) {
                o = links[i];
                s = o.source;
                t = o.target;
                x = t.x - s.x;
                y = t.y - s.y;
                if ((l = x * x + y * y)) {
                    l = alpha * strengths[i] * ((l = Math.sqrt(l)) - distances[i]) / l;
                    x *= l;
                    y *= l;
                    t.x -= x * (k = s.weight / (t.weight + s.weight));
                    t.y -= y * k;
                    s.x += x * (k = 1 - k);
                    s.y += y * k;
                }
            }
            if ((k = alpha * gravity)) {
                x = size[0] / 2;
                y = size[1] / 2;
                i = -1;
                if (k)
                    while (++i < n) {
                        o = nodes[i];
                        o.x += (x - o.x) * k;
                        o.y += (y - o.y) * k;
                    }
            }
            if (charge) {
                forceAccumulate(q = quadtree(nodes), alpha, charges);
                i = -1;
                while (++i < n) {
                    if (!(o = nodes[i]).fixed) {
                        q.visit(repulse(o));
                    }
                }
            }
            i = -1;
            while (++i < n) {
                o = nodes[i];
                if (o.fixed) {
                    o.x = o.px;
                    o.y = o.py;
                } else {
                    o.x -= (o.px - (o.px = o.x)) * friction;
                    o.y -= (o.py - (o.py = o.y)) * friction;
                }
            }
        };
        force.nodes = function (x) {
            if (!arguments.length) return nodes;
            nodes = x;
            return force;
        };
        force.links = function (x) {
            if (!arguments.length) return links;
            links = x;
            return force;
        };
        force.distance = linkDistance;
        force.charge = function (x) {
            if (!arguments.length) return charge;
            charge = typeof x === "function" ? x : +x;
            return force;
        };
        force.size = function (x) {
            if (!arguments.length) return size;
            size = x;
            return force;
        };
        force.alpha = function (x) {
            if (!arguments.length) return alpha;
            if (alpha) {
                if (x > 0) alpha = x;
                else alpha = 0;
            } else if (x > 0) {
                alpha = x;
                force.tick();
            }
            return force;
        };
        force.start = function () {
            var i, j, n = nodes.length,
                m = links.length,
                w = size[0],
                h = size[1],
                neighbors, o;
            for (i = 0; i < n; ++i) {
                (o = nodes[i]).index = i;
                o.weight = 0;
            }
            distances = [];
            strengths = [];
            for (i = 0; i < m; ++i) {
                o = links[i];
                if (typeof o.source == "number") o.source = nodes[o.source];
                if (typeof o.target == "number") o.target = nodes[o.target];
                distances[i] = linkDistance.call(this, o, i);
                strengths[i] = linkStrength.call(this, o, i);
                ++o.source.weight;
                ++o.target.weight;
            }
            for (i = 0; i < n; ++i) {
                o = nodes[i];
                if (isNaN(o.x)) o.x = position("x", w);
                if (isNaN(o.y)) o.y = position("y", h);
                if (isNaN(o.px)) o.px = o.x;
                if (isNaN(o.py)) o.py = o.y;
            }
            charges = [];
            if (typeof charge === "function") {
                for (i = 0; i < n; ++i) {
                    charges[i] = +charge.call(this, nodes[i], i);
                }
            } else {
                for (i = 0; i < n; ++i) {
                    charges[i] = charge;
                }
            }

            function position(dimension, size) {
                var neighbors = neighbor(i),
                    j = -1,
                    m = neighbors.length,
                    x;
                while (++j < m)
                    if (!isNaN(x = neighbors[j][dimension])) return x;
                return Math.random() * size;
            }

            function neighbor() {
                if (!neighbors) {
                    neighbors = [];
                    for (j = 0; j < n; ++j) {
                        neighbors[j] = [];
                    }
                    for (j = 0; j < m; ++j) {
                        var o = links[j];
                        neighbors[o.source.index].push(o.target);
                        neighbors[o.target.index].push(o.source);
                    }
                }
                return neighbors[i];
            }

            return force.resume();
        };
        force.resume = function () {
            return force.alpha(0.1);
        };
        force.stop = function () {
            return force.alpha(0);
        };

        return force;
    };


    var forceAccumulate = function (quad, alpha, charges) {
        var cx = 0,
            cy = 0;
        quad.charge = 0;
        if (!quad.leaf) {
            var nodes = quad.nodes,
                n = nodes.length,
                i = -1,
                c;
            while (++i < n) {
                c = nodes[i];
                if (c == null) continue;
                forceAccumulate(c, alpha, charges);
                quad.charge += c.charge;
                cx += c.charge * c.cx;
                cy += c.charge * c.cy;
            }
        }
        if (quad.point) {
            if (!quad.leaf) {
                quad.point.x += Math.random() - 0.5;
                quad.point.y += Math.random() - 0.5;
            }
            var k = alpha * charges[quad.point.index];
            quad.charge += quad.pointCharge = k;
            cx += k * quad.point.x;
            cy += k * quad.point.y;
        }
        quad.cx = cx / quad.charge;
        quad.cy = cy / quad.charge;
    };

    var quadtree = function (points, x1, y1, x2, y2) {
        var p, i = -1,
            n = points.length;
        if (arguments.length < 5) {
            if (arguments.length === 3) {
                y2 = y1;
                x2 = x1;
                y1 = x1 = 0;
            } else {
                x1 = y1 = Infinity;
                x2 = y2 = -Infinity;
                while (++i < n) {
                    p = points[i];
                    if (p.x < x1) x1 = p.x;
                    if (p.y < y1) y1 = p.y;
                    if (p.x > x2) x2 = p.x;
                    if (p.y > y2) y2 = p.y;
                }
            }
        }
        var dx = x2 - x1,
            dy = y2 - y1;
        if (dx > dy) y2 = y1 + dx;
        else x2 = x1 + dy;

        function insert(n, p, x1, y1, x2, y2) {
            if (isNaN(p.x) || isNaN(p.y)) return;
            if (n.leaf) {
                var v = n.point;
                if (v) {
                    if (Math.abs(v.x - p.x) + Math.abs(v.y - p.y) < 0.01) {
                        insertChild(n, p, x1, y1, x2, y2);
                    } else {
                        n.point = null;
                        insertChild(n, v, x1, y1, x2, y2);
                        insertChild(n, p, x1, y1, x2, y2);
                    }
                } else {
                    n.point = p;
                }
            } else {
                insertChild(n, p, x1, y1, x2, y2);
            }
        }

        function insertChild(n, p, x1, y1, x2, y2) {
            var sx = x1 * 0.5 + x2 * 0.5,
                sy = y1 * 0.5 + y2 * 0.5,
                right = p.x >= sx,
                bottom = p.y >= sy,
                i = (bottom << 1) + right;
            n.leaf = false;
            n = n.nodes[i] || (n.nodes[i] = quadtreeNode());
            if (right) x1 = sx;
            else x2 = sx;
            if (bottom) y1 = sy;
            else y2 = sy;
            insert(n, p, x1, y1, x2, y2);
        }

        var root = quadtreeNode();
        root.add = function (p) {
            insert(root, p, x1, y1, x2, y2);
        };
        root.visit = function (f) {
            quadtreeVisit(f, root, x1, y1, x2, y2);
        };
        points.forEach(root.add);
        return root;
    };

    var quadtreeNode = function () {
        return {
            leaf: true,
            nodes: [],
            point: null
        };
    };

    var quadtreeVisit = function (f, node, x1, y1, x2, y2) {
        if (!f(node, x1, y1, x2, y2)) {
            var sx = (x1 + x2) * 0.5,
                sy = (y1 + y2) * 0.5,
                children = node.nodes;
            if (children[0]) quadtreeVisit(f, children[0], x1, y1, sx, sy);
            if (children[1]) quadtreeVisit(f, children[1], sx, y1, x2, sy);
            if (children[2]) quadtreeVisit(f, children[2], x1, sy, sx, y2);
            if (children[3]) quadtreeVisit(f, children[3], sx, sy, x2, y2);
        }
    };
})(nx, nx.global);

(function (nx, global) {
    /**
     * Convex algorithm
     * @class nx.data.Convex
     * @static
     */
    nx.define('nx.data.Convex', {
        static: true,
        methods: {
            multiply: function (p1, p2, p0) {
                return((p1.x - p0.x) * (p2.y - p0.y) - (p2.x - p0.x) * (p1.y - p0.y));
            },
            dis: function (p1, p2) {
                return(Math.sqrt((p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y)));
            },
            /**
             * Process given node array
             * @method process
             * @param inPointArray {Array} Each item should be a object, which include x&y attribute
             * @returns {Array}
             */
            process: function (inPointArray) {
                var stack = [];
                var count = inPointArray.length;
                var i, j, k = 0, top = 2;
                var tmp;

                //找到最下且偏左的那个点
                for (i = 1; i < count; i++) {
                    if ((inPointArray[i].y < inPointArray[k].y) || ((inPointArray[i].y === inPointArray[k].y) && (inPointArray[i].x < inPointArray[k].x))) {
                        k = i;
                    }
                }
                //将这个点指定为PointSet[0]
                tmp = inPointArray[0];
                inPointArray[0] = inPointArray[k];
                inPointArray[k] = tmp;

                //按极角从小到大,距离偏短进行排序
                for (i = 1; i < count - 1; i++) {
                    k = i;
                    for (j = i + 1; j < count; j++)
                        if ((this.multiply(inPointArray[j], inPointArray[k], inPointArray[0]) > 0) ||
                            ((this.multiply(inPointArray[j], inPointArray[k], inPointArray[0]) === 0) &&
                                (this.dis(inPointArray[0], inPointArray[j]) < this.dis(inPointArray[0], inPointArray[k]))))
                            k = j;//k保存极角最小的那个点,或者相同距离原点最近
                    tmp = inPointArray[i];
                    inPointArray[i] = inPointArray[k];
                    inPointArray[k] = tmp;
                }
                //第三个点先入栈
                stack[0] = inPointArray[0];
                stack[1] = inPointArray[1];
                stack[2] = inPointArray[2];
                //判断与其余所有点的关系
                for (i = 3; i < count; i++) {
                    //不满足向左转的关系,栈顶元素出栈
                    while (top > 0 && this.multiply(inPointArray[i], stack[top], stack[top - 1]) >= 0) {
                        top--;
                        stack.pop();
                    }
                    //当前点与栈内所有点满足向左关系,因此入栈.
                    stack[++top] = inPointArray[i];
                }
                return stack;
            }
        }
    });


})(nx, nx.global);
(function (nx, global) {

    /**
     * Vertex class
     * @class nx.data.Vertex
     * @extend nx.data.ObservableObject
     * @module nx.data
     */

    var Vector = nx.geometry.Vector;

    nx.define('nx.data.Vertex', nx.data.ObservableObject, {
        events: ['updateCoordinate'],
        properties: {
            /**
             * Vertex id
             * @property id {String|Number}
             */
            id: {},
            /**
             * @property positionGetter
             */
            positionGetter: {
                value: function () {
                    return function () {
                        return {
                            x: nx.path(this._data, 'x') || 0,
                            y: nx.path(this._data, 'y') || 0
                        };
                    };
                }
            },
            /**
             * @property positionSetter
             */
            positionSetter: {
                value: function () {
                    return function (position) {
                        if (this._data) {
                            var x = nx.path(this._data, 'x');
                            var y = nx.path(this._data, 'y');
                            if (position.x !== x || position.y !== y) {
                                nx.path(this._data, 'x', position.x);
                                nx.path(this._data, 'y', position.y);
                                return true;
                            } else {
                                return false;
                            }
                        }
                    };
                }
            },
            /**
             * Get/set vertex position.
             * @property position
             */
            position: {
                get: function () {
                    return{
                        x: this._x || 0,
                        y: this._y || 0
                    };
                },
                set: function (obj) {
                    var isModified = false;
                    var _position = {
                        x: this._x,
                        y: this._y
                    };
                    if (obj.x !== undefined && this._x !== obj.x) {
                        this._x = obj.x;
                        isModified = true;
                    }

                    if (obj.y !== undefined && this._y !== obj.y) {
                        this._y = obj.y;
                        isModified = true;
                    }


                    if (isModified) {

                        this.positionSetter().call(this, {x: this._x, y: this._y});

                        this.fire("updateCoordinate", {
                            oldPosition: _position,
                            newPosition: {
                                x: this._x,
                                y: this._y
                            }
                        });
                        this.notify("vector");
                    }
                }
            },
            /**
             * Get/set x coordination, suggest use position property
             * @property x
             */
            x: {
                get: function () {
                    return this._x || 0;
                },
                set: function (value) {
                    this.position({x: parseFloat(value)});
                }
            },
            /**
             * Get/set y coordination, suggest use position property
             * @property y
             */
            y: {
                get: function () {
                    return this._y || 0;
                },
                set: function (value) {
                    this.position({y: parseFloat(value)});
                }
            },
            /**
             * Get vertex's Vector object
             * @readOnly
             */
            vector: {
                get: function () {
                    var position = this.position();
                    return new Vector(position.x, position.y);
                }
            },
            restricted: {
                value: false
            },
            /**
             * Set/get vertex's visibility, and this property related to all connect edge set
             * @property visible {Boolean}
             * @default true
             */
            visible: {
                get: function () {
                    return this._visible !== undefined ? this._visible : true;
                },
                set: function (value) {
                    this._visible = value;

                    var graph = this.graph();

                    if (value === false) {
                        if (this.generated()) {
                            nx.each(this.edgeSetCollections(), function (esc, linkKey) {
                                graph.deleteEdgeSetCollection(linkKey);
                            }, this);
                            graph.removeVertex(this.id());
                        }
                    } else {
                        if (!this.restricted() && !this.generated()) {
                            graph.generateVertex(this);

                            nx.each(this.edgeSets(), function (edgeSet) {
                                graph._generateConnection(edgeSet);
                            });
                        }
                    }
                    var parentVertexSet = this.parentVertexSet();
                    if (parentVertexSet) {
                        graph.updateVertexSet(parentVertexSet);
                    }
                }
            },
            /**
             * Status property,tag is this vertex generated
             * @property generated {Boolean}
             * @default false
             */
            generated: {
                value: false
            },
            /**
             * Status property,tag is this vertex updated
             * @property updated {Boolean}
             * @default false
             */
            updated: {
                value: false
            },
            /**
             * Vertex's type
             * @property type {String}
             * @default 'vertex'
             */
            type: {
                value: 'vertex'
            },
            /**
             * connected edgeSets
             * @property edgeSets
             */
            edgeSets: {
                value: function () {
                    return {};
                }
            },
            /**
             * connected edgeSetCollections
             * @property edgeSetCollections
             */
            edgeSetCollections: {
                value: function () {
                    return {};
                }
            },
            /**
             * Get connected edges
             * @property edges
             */
            edges: {
                get: function () {
                    var edges = {};
                    nx.each(this.edgeSets(), function (edgeSet) {
                        nx.extend(edges, edgeSet.edges());
                    });
                    return edges;
                }
            },
            /**
             * Get connected vertices
             * @property connectedVertices
             */
            connectedVertices: {
                get: function () {
                    var vertices = {};
                    this.eachConnectedVertex(function (vertex, id) {
                        vertices[id] = vertex;
                    }, this);
                    return vertices;
                }
            },
            /**
             * Graph instance
             * @property graph {nx.data.ObservableGraph}
             */
            graph: {

            },
            /**
             * Vertex parent vertex set, if exist
             * @property parentVertexSet {nx.data.VertexSet}
             */
            parentVertexSet: {},
            /**
             * Vertex root vertexSet
             * @property rootVertexSet
             */
            rootVertexSet: {
                get: function () {
                    var parentVertexSet = this.parentVertexSet();
                    while (parentVertexSet && parentVertexSet.parentVertexSet()) {
                        parentVertexSet = parentVertexSet.parentVertexSet();
                    }
                    return parentVertexSet;
                }
            },
            /**
             * Generated Root VertexSet
             * @property generatedRootVertexSet
             */
            generatedRootVertexSet: {
                get: function () {
                    var _parentVertexSet;
                    var parentVertexSet = this.parentVertexSet();

                    while (parentVertexSet) {
                        if (parentVertexSet.generated() && parentVertexSet.activated()) {
                            _parentVertexSet = parentVertexSet;
                        }
                        parentVertexSet = parentVertexSet.parentVertexSet();
                    }
                    return _parentVertexSet;
                }
            },
            selected: {
                value: false
            }
        },
        methods: {

            set: function (key, value) {
                if (this.has(key)) {
                    this[key].call(this, value);
                } else {
                    nx.path(this._data, key, value);
                    this.notify(key);
                }
            },
            get: function (key) {
                if (this.has(key)) {
                    return this[key].call(this);
                } else {
                    return nx.path(this._data, key);
                }
            },
            has: function (name) {
                var member = this[name];
                return (member && member.__type__ == 'property');
            },

            /**
             * Get original data
             * @method getData
             * @returns {Object}
             */
            getData: function () {
                return this._data;
            },
            /**
             * Add connected edgeSet, which source vertex is this vertex
             * @method addEdgeSet
             * @param edgeSet {nx.data.EdgeSet}
             * @param linkKey {String}
             */
            addEdgeSet: function (edgeSet, linkKey) {
                var _edgeSets = this.edgeSets();
                _edgeSets[linkKey] = edgeSet;
            },
            /**
             * Remove edgeSet from connected edges array
             * @method removeEdgeSet
             * @param linkKey {String}
             */
            removeEdgeSet: function (linkKey) {
                var _edgeSets = this.edgeSets();
                delete  _edgeSets[linkKey];
            },
            addEdgeSetCollection: function (esc, linkKey) {
                var edgeSetCollections = this.edgeSetCollections();
                edgeSetCollections[linkKey] = esc;
            },
            removeEdgeSetCollection: function (linkKey) {
                var edgeSetCollections = this.edgeSetCollections();
                delete edgeSetCollections[linkKey];
            },
            /**
             * Iterate all connected vertices
             * @method eachConnectedVertex
             * @param callback {Function}
             * @param context {Object}
             */
            eachConnectedVertex: function (callback, context) {
                var id = this.id();
                nx.each(this.edgeSets(), function (edgeSet) {
                    var vertex = edgeSet.sourceID() == id ? edgeSet.target() : edgeSet.source();
                    if (vertex.visible() && !vertex.restricted()) {
                        callback.call(context || this, vertex, vertex.id());
                    }
                }, this);

                nx.each(this.edgeSetCollections(), function (esc) {
                    var vertex = esc.sourceID() == id ? esc.target() : esc.source();
                    if (vertex.visible() && !vertex.restricted()) {
                        callback.call(context || this, vertex, vertex.id());
                    }
                }, this);
            },
            /**
             * Move vertex
             * @method translate
             * @param x
             * @param y
             */
            translate: function (x, y) {
                var _position = this.position();
                if (x != null) {
                    _position.x += x;
                }

                if (y != null) {
                    _position.y += y;
                }

                this.position(_position);
            }
        }
    });
})
(nx, nx.global);

(function (nx, global) {


    /**
     * Edge
     * @class nx.data.Edge
     * @extend nx.data.ObservableObject
     * @module nx.data
     */

    var Line = nx.geometry.Line;
    nx.define('nx.data.Edge', nx.data.ObservableObject, {
        events: ['updateCoordinate'],
        properties: {
            /**
             * Source vertex
             * @property source {nx.data.Vertex}
             */
            source: {
                value: null
            },
            /**
             * Target vertex
             * @property target {nx.data.Vertex}
             */
            target: {
                value: null
            },
            /**
             * Source vertex id
             * @property sourceID {String|Number}
             */
            sourceID: {
                value: null
            },
            /**
             * Target vertex id
             * @property targetID {String|Number}
             */
            targetID: {
                value: null
            },
            /**
             * Edge's linkkey, linkkey = sourceID-targetID
             * @property linkKey {String}
             */
            linkKey: {

            },
            /**
             * Edge's reverse linkkey,reverseLinkKey = targetID + '_' + sourceID
             * @property reverseLinkKey {String}
             */
            reverseLinkKey: {

            },

            /**
             * Status property,tag is this edge generated
             * @property generated {Boolean}
             * @default false
             */
            generated: {
                value: false
            },
            /**
             * Status property,tag is this edge updated
             * @property updated {Boolean}
             * @default false
             */
            updated: {
                value: false
            },
            /**
             * Edge's type
             * @property type {String}
             * @default edge
             */
            type: {
                value: 'edge'
            },
            /**
             * Edge's id
             * @property id {String|Number}
             */
            id: {},
            /**
             * Edge's parent edge set
             * @property parentEdgeSet {nx.data.edgeSet}
             */
            parentEdgeSet: {},
            /**
             * Edge line object
             * @property line {nx.geometry.Line}
             * @readOnly
             */
            line: {
                get: function () {
                    return new Line(this.source().vector(), this.target().vector());
                }
            },
            /**
             * Edge position object
             * {{x1: (Number), y1: (Number), x2: (Number), y2: (Number)}}
             * @property position {Object}
             * @readOnly
             */
            position: {
                get: function () {
                    return {
                        x1: this.source().get("x"),
                        y1: this.source().get("y"),
                        x2: this.target().get("x"),
                        y2: this.target().get("y")
                    };
                }
            },
            /**
             * Is this link is a reverse link
             * @property reverse {Boolean}
             * @readOnly
             */
            reverse: {
                value: false
            },
            /**
             * Graph instance
             * @property graph {nx.data.ObservableGraph}
             */
            graph: {

            }
        },
        methods: {
            /**
             * Get original data
             * @method getData
             * @returns {Object}
             */
            getData: function () {
                return this._data;
            },
            attachEvent: function () {
                this.source().on('updateCoordinate', this._updateCoordinate, this);
                this.target().on('updateCoordinate', this._updateCoordinate, this);
            },
            _updateCoordinate: function () {
                this.fire('updateCoordinate');
            },
            dispose: function () {
                this.source().off('updateCoordinate', this._updateCoordinate, this);
                this.target().off('updateCoordinate', this._updateCoordinate, this);
                this.inherited();
            }
        }
    });

})(nx, nx.global);
(function (nx, global) {
    var util = nx.util;
    /**
     * Vertex set ckass
     * @class nx.data.VertexSet
     * @extend nx.data.Vertex
     * @module nx.data
     */
    nx.define('nx.data.VertexSet', nx.data.Vertex, {
        properties: {
            position: {
                get: function () {
                    return{
                        x: this._x || 0,
                        y: this._y || 0
                    };
                },
                set: function (obj) {
                    var isModified = false;
                    var _position = {
                        x: this._x,
                        y: this._y
                    };
                    if (obj.x !== undefined && this._x !== obj.x) {
                        this._x = obj.x;
                        isModified = true;
                    }

                    if (obj.y !== undefined && this._y !== obj.y) {
                        this._y = obj.y;
                        isModified = true;
                    }


                    if (isModified) {

                        this.positionSetter().call(this, {x: this._x, y: this._y});


                        var _xDelta = this._x - _position.x;
                        var _yDelta = this._y - _position.y;

                        nx.each(this.vertices(), function (vertex) {
                            vertex.translate(_xDelta, _yDelta);
                        });
                        nx.each(this.vertexSet(), function (vertexSet) {
                            vertexSet.translate(_xDelta, _yDelta);
                        });

                        /**
                         * @event updateVertexSetCoordinate
                         * @param sender {Object}  Trigger instance
                         * @param {Object} {oldPosition:Point,newPosition:Point}
                         */

                        this.fire("updateCoordinate", {
                            oldPosition: _position,
                            newPosition: {
                                x: this._x,
                                y: this._y
                            }
                        });
                        this.notify("vector");
                    }
                }
            },
            /**
             * All child vertices
             * @property vertices {Object}
             * @default {}
             */
            vertices: {
                value: function () {
                    return {};
                }
            },
            vertexSet: {
                value: function () {
                    return {};
                }
            },
            subVertices: {
                get: function () {
                    var vertices = {};
                    this.eachSubVertex(function (vertex, id) {
                        vertices[id] = vertex;
                    });
                    return vertices;
                }
            },
            subVertexSet: {
                get: function () {
                    var vertexSets = {};
                    this.eachSubVertexSet(function (vertexSet, id) {
                        vertexSets[id] = vertexSet;
                    });
                    return vertexSets;
                }
            },
            visible: {
                value: true
            },
            inheritedVisible: {
                get: function () {
                    // all sub vertex is in visible
                    var invisible = true;
                    nx.each(this.vertices(), function (vertex) {
                        if (vertex.visible()) {
                            invisible = false;
                        }
                    });
                    nx.each(this.vertexSet(), function (vertexSet) {
                        if (vertexSet.visible()) {
                            invisible = false;
                        }
                    }, this);
                    return !invisible;
                }
            },
            /**
             * VertexSet's type
             * @property type {String}
             * @default 'vertexset'
             */
            type: {
                value: 'vertexSet'
            },
            activated: {
                get: function () {
                    return this._activated !== undefined ? this._activated : true;
                },
                set: function (value) {
                    if (this._activated !== value) {
                        if (value) {
                            this._collapse();
                        } else {
                            this._expand();
                        }
                        return true;
                    } else {
                        return false;
                    }
                }
            }
        },
        methods: {
            initNodes: function () {
                var graph = this.graph();
                var nodes = this.get('nodes');
                nx.each(nodes, function (id) {
                    var vertex = graph.vertices().getItem(id) || graph.vertexSets().getItem(id);
                    if (vertex && !vertex.restricted()) {
                        var _map = vertex.type() == 'vertex' ? this.vertices() : this.vertexSet();
                        _map[id] = vertex;
                        vertex.restricted(true);
                        vertex.parentVertexSet(this);
                    } else {
                        if (console) {
                            console.warn('NodeSet data error', this.id(), id);
                        }
                    }
                }, this);

            },
            /***
             * Add child vertex
             * @method addVertex
             * @param vertex
             */
            addVertex: function (vertex) {
                var nodes = this.get('nodes');
                if (vertex) { //&& !vertex.restricted()
                    var id = vertex.id();
                    var _map = vertex.type() == 'vertex' ? this.vertices() : this.vertexSet();
                    _map[id] = vertex;
                    vertex.restricted(true);

                    var parentVertexSet = vertex.parentVertexSet();
                    if (parentVertexSet) {
                        parentVertexSet.removeVertex(id);
                        parentVertexSet.updated(true);
                    }

                    vertex.parentVertexSet(this);
                    nodes.push(vertex.id());
                    this.updated(true);
                }
            },
            /**
             * Remove vertex
             * @param id {String}
             * @returns {Array}
             */
            removeVertex: function (id) {
                var nodes = this.get('nodes');
                var vertex = this.vertices()[id] || this.vertexSet()[id];
                if (vertex) {
                    vertex.parentVertexSet(null);
                    delete this.vertices()[id];
                    delete this.vertexSet()[id];
                    nodes.splice(nodes.indexOf(id), 1);
                    this.updated(true);
                }
            },
            eachSubVertex: function (callback, context) {
                nx.each(this.vertices(), callback, context || this);
                nx.each(this.vertexSet(), function (vertex) {
                    vertex.eachSubVertex(callback, context);
                }, this);
            },
            eachSubVertexSet: function (callback, context) {
                nx.each(this.vertexSet(), callback, context || this);
                nx.each(this.vertexSet(), function (vertex) {
                    vertex.eachSubVertexSet(callback, context);
                }, this);
            },
            getSubEdgeSets: function () {
                var subEdgeSetMap = {};
                // get all sub vertex and edgeSet
                this.eachSubVertex(function (vertex) {
                    nx.each(vertex.edgeSets(), function (edgeSet, linkKey) {
                        subEdgeSetMap[linkKey] = edgeSet;
                    });
                }, this);
                return subEdgeSetMap;
            },
            _expand: function () {
                var graph = this.graph();

                var parentVertexSet = this.parentVertexSet();
                if (parentVertexSet) {
                    parentVertexSet.activated(false);
                }

                this._activated = false;

                // remove created edgeSet collection
                nx.each(this.edgeSetCollections(), function (esc, linkKey) {
                    graph.deleteEdgeSetCollection(linkKey);
                }, this);


                nx.each(this.vertices(), function (vertex, id) {
                    vertex.restricted(false);
                    if (vertex.visible()) {
                        graph.generateVertex(vertex);
                    }
                }, this);

                nx.each(this.vertexSet(), function (vertexSet) {
                    vertexSet.restricted(false);
                    if (vertexSet.visible()) {
                        graph.generateVertexSet(vertexSet);
                    }
                }, this);

                this.visible(false);

                this._generateConnection();
            },
            _collapse: function () {
                var graph = this.graph();

                this._activated = true;


                this.eachSubVertex(function (vertex) {
                    vertex.restricted(true);
                    if (vertex.generated()) {
                        nx.each(vertex.edgeSetCollections(), function (esc, linkKey) {
                            graph.deleteEdgeSetCollection(linkKey);
                        });
                    }
                }, this);


                nx.each(this.vertexSet(), function (vertexSet, id) {
                    vertexSet.restricted(true);
                    if (vertexSet.generated()) {
                        graph.removeVertexSet(id, false);
                    }
                }, this);

                nx.each(this.vertices(), function (vertex, id) {
                    vertex.restricted(true);
                    if (vertex.generated()) {
                        graph.removeVertex(id);
                    }
                }, this);

                this.visible(true);

                this._generateConnection();

            },
            _generateConnection: function () {
                //
                var graph = this.graph();

                nx.each(this.getSubEdgeSets(), function (edgeSet) {
                    graph._generateConnection(edgeSet);
                }, this);
            }
        }
    });


})
(nx, nx.global);
(function (nx, global) {

    /**
     * Edge set clas
     * @class nx.data.EdgeSet
     * @extend nx.data.Edge
     * @module nx.data
     */

    nx.define('nx.data.EdgeSet', nx.data.Edge, {
        properties: {
            /**
             * All child edges
             * @property edges {Object}
             */
            edges: {
                value: function () {
                    return {};
                }
            },
            /**
             * Edge's type
             * @property type {String}
             * @default 'edgeSet'
             */
            type: {
                value: 'edgeSet'
            },
            activated: {
                get: function () {
                    return this._activated !== undefined ? this._activated : true;
                },
                set: function (value) {
                    var graph = this.graph();
                    nx.each(this.edges(), function (edge,id) {
                        if (value) {
                            graph.removeEdge(id, false);
                        } else {
                            graph.generateEdge(edge);
                        }
                    }, this);
                    this._activated = value;
                }
            }
        },
        methods: {
            /**
             * Add child edge
             * @method addEdge
             * @param edge {nx.data.Edge}
             */
            addEdge: function (edge) {
                var edges = this.edges();
                edges[edge.id()] = edge;
            },
            /**
             * Remove child edge
             * @method removeEdge
             * @param id {String}
             */
            removeEdge: function (id) {
                var edges = this.edges();
                delete  edges[id];
            }
        }

    });
})(nx, nx.global);
(function (nx, global) {
    /**
     * Edge set collection class
     * @class nx.data.EdgeSetCollection
     * @extend nx.data.Edge
     * @module nx.data
     */

    nx.define('nx.data.EdgeSetCollection', nx.data.Edge, {
        properties: {
            /**
             * All child edgeset
             * @property edgeSets {Object}
             */
            edgeSets: {
                value: function () {
                    return {};
                }
            },
            edges: {
                get: function () {
                    var edges = {};
                    nx.each(this.edgeSets(), function (edgeSet) {
                        nx.extend(edges, edgeSet.edges());
                    });
                    return edges;
                }
            },
            /**
             * Edge's type
             * @property type {String}
             * @default 'edgeSet'
             */
            type: {
                value: 'edgeSetCollection'
            },
            activated: {
                get: function () {
                    return this._activated !== undefined ? this._activated : true;
                },
                set: function (value) {
                    var graph = this.graph();
                    nx.each(this.edgeSets(),function(edgeSet){
                        edgeSet.activated(value, {
                            force: true
                        });
                    });
                    //this.eachEdge(function (edge) {
                    //    if (edge.type() == 'edge') {
                    //        if (value) {
                    //            graph.fire('removeEdge', edge);
                    //        } else {
                    //            graph.fire('addEdge', edge);
                    //        }
                    //    } else if (edge.type() == 'edgeSet') {
                    //        if (value) {
                    //            graph.fire('removeEdgeSet', edge);
                    //        } else {
                    //            graph.fire('addEdgeSet', edge);
                    //        }
                    //    }
                    //}, this);
                    this._activated = value;
                }
            }
        },
        methods: {
            /**
             * Add child edgeSet
             * @method addEdgeSet
             * @param edgeSet {nx.data.EdgeSet}
             */
            addEdgeSet: function (edgeSet) {
                var edgeSets = this.edgeSets();
                edgeSets[edgeSet.linkKey()] = edgeSet;
            },
            /**
             * Remove child edgeSet
             * @method removeEdgeSet
             * @param linkKey {String}
             */
            removeEdgeSet: function (linkKey) {
                var edgeSets = this.edgeSets();
                delete  edgeSets[linkKey];
            }
        }

    });
})(nx, nx.global);
(function(nx, global) {
    var util = nx.util;
    nx.define('nx.data.ObservableGraph.Vertices', nx.data.ObservableObject, {
        events: ['addVertex', 'removeVertex', 'deleteVertex', 'updateVertex', 'updateVertexCoordinate'],
        properties: {

            nodes: {
                get: function() {
                    return this._nodes || [];
                },
                set: function(value) {

                    // off previous ObservableCollection event
                    if (this._nodes && nx.is(this._nodes, nx.data.ObservableCollection)) {
                        this._nodes.off('change', this._nodesCollectionProcessor, this);
                    }

                    this.vertices().clear();

                    if (nx.is(value, nx.data.ObservableCollection)) {
                        value.on('change', this._nodesCollectionProcessor, this);
                        value.each(function(value) {
                            this._addVertex(value);
                        }, this);
                        this._nodes = value;
                    } else if (value) {
                        nx.each(value, this._addVertex, this);
                        this._nodes = value.slice();
                    }
                }
            },

            vertexFilter: {},
            vertices: {
                value: function() {
                    var vertices = new nx.data.ObservableDictionary();
                    vertices.on('change', function(sender, args) {
                        var action = args.action;
                        var items = args.items;
                        if (action == 'clear') {
                            nx.each(items, function(item) {
                                this.deleteVertex(item.key());
                            }, this);
                        }
                    }, this);
                    return vertices;
                }
            },
            visibleVertices: {
                get: function() {
                    var vertices = {};
                    this.eachVertex(function(vertex, id) {
                        if (vertex.visible()) {
                            vertices[id] = vertex;
                        }
                    });
                    return vertices;
                }
            },
            vertexPositionGetter: {},
            vertexPositionSetter: {}
        },
        methods: {
            /**
             * Add vertex to Graph
             * @method addVertex
             * @param {JSON} data Vertex original data
             * @param {Object} [config] Config object
             * @returns {nx.data.Vertex}
             */
            addVertex: function(data, config) {
                var vertex;
                var nodes = this.nodes();
                var vertices = this.vertices();
                var identityKey = this.identityKey();
                if (nx.is(nodes, nx.data.ObservableCollection)) {
                    nodes.add(data);
                    //todo will has issue when data is not current
                    vertex = vertices.getItem(vertices.count() - 1);
                } else {
                    vertex = this._addVertex(data, config);
                    if (vertex) {
                        nodes.push(data);
                    }
                }

                if (!vertex) {
                    return null;
                }

                if (config) {
                    vertex.sets(config);
                }
                this.generateVertex(vertex);


                return vertex;
            },
            _addVertex: function(data) {
                var vertices = this.vertices();
                var identityKey = this.identityKey();

                if (typeof(data) == 'string' || typeof(data) == 'number') {
                    data = {
                        data: data
                    };
                }

                var id = nx.path(data, identityKey);
                id = id !== undefined ? id : (this.vertexSets().count() + this.vertices().count());

                if (vertices.getItem(id)) {
                    return null;
                }

                var vertex = new nx.data.Vertex(data);

                var vertexPositionGetter = this.vertexPositionGetter();
                if (vertexPositionGetter) {
                    vertex.positionGetter(vertexPositionGetter);
                }

                var vertexPositionSetter = this.vertexPositionSetter();
                if (vertexPositionSetter) {
                    vertex.positionSetter(vertexPositionSetter);
                }


                vertex.sets({
                    graph: this,
                    id: id
                });


                //delegate synchronize
                if (nx.is(data, nx.data.ObservableObject)) {
                    var fn = data.set;
                    data.set = function(key, value) {
                        fn.call(data, key, value);
                        //
                        if (vertex.__properties__.indexOf(key) == -1) {
                            if (vertex.has(key)) {
                                vertex[key].call(vertex, value);
                            } else {
                                vertex.notify(key);
                            }
                        }
                    };
                }


                // init position
                vertex.position(vertex.positionGetter().call(vertex, vertex));

                vertices.setItem(id, vertex);


                var vertexFilter = this.vertexFilter();
                if (vertexFilter && nx.is(vertexFilter, Function)) {
                    var result = vertexFilter.call(this, data, vertex);
                    vertex.visible(result === false);
                }

                return vertex;
            },
            generateVertex: function(vertex) {
                if (vertex.visible() && !vertex.generated() && !vertex.restricted()) {

                    vertex.on('updateCoordinate', this._updateVertexCoordinateFN, this);
                    /**
                     * @event addVertex
                     * @param sender {Object}  Trigger instance
                     * @param {nx.data.Vertex} vertex Vertex object
                     */
                    this.fire('addVertex', vertex);
                    vertex.generated(true);
                }
            },
            _updateVertexCoordinateFN: function(vertex) {
                /**
                 * @event updateVertexCoordinate
                 * @param sender {Object}  Trigger instance
                 * @param {nx.data.Vertex} vertex Vertex object
                 */
                this.fire('updateVertexCoordinate', vertex);
            },


            /**
             * Remove a vertex from Graph
             * @method removeVertex
             * @param {String} id
             * @returns {Boolean}
             */
            removeVertex: function(id) {
                var vertex = this.vertices().getItem(id);
                if (!vertex) {
                    return false;
                }

                nx.each(vertex.edgeSets(), function(edgeSet, linkKey) {
                    this.removeEdgeSet(linkKey);
                }, this);

                nx.each(vertex.edgeSetCollections(), function(esc, linkKey) {
                    this.deleteEdgeSetCollection(linkKey);
                }, this);


                vertex.off('updateCoordinate', this._updateVertexCoordinateFN, this);
                vertex.generated(false);
                /**
                 * @event removeVertex
                 * @param sender {Object}  Trigger instance
                 * @param {nx.data.Vertex} vertex Vertex object
                 */
                this.fire('removeVertex', vertex);
                return vertex;
            },
            /**
             * Delete a vertex from Graph
             * @method removeVertex
             * @param {id} id
             * @returns {Boolean}
             */
            deleteVertex: function(id) {
                var nodes = this.nodes();
                var vertex = this.getVertex(id);
                if (vertex) {
                    if (nx.is(nodes, nx.data.ObservableCollection)) {
                        var data = vertex.getData();
                        nodes.remove(data);
                    } else {
                        var index = this.nodes().indexOf(vertex.getData());
                        if (index != -1) {
                            this.nodes().splice(index, 1);
                        }
                        this._deleteVertex(id);
                    }
                }
            },
            _deleteVertex: function(id) {
                var vertex = this.vertices().getItem(id);
                if (!vertex) {
                    return false;
                }

                nx.each(vertex.edgeSets(), function(edgeSet) {
                    this.deleteEdgeSet(edgeSet.linkKey());
                }, this);

                nx.each(vertex.edgeSetCollections(), function(esc) {
                    this.deleteEdgeSetCollection(esc.linkKey());
                }, this);

                var vertexSet = vertex.parentVertexSet();
                if (vertexSet) {
                    vertexSet.removeVertex(id);
                }

                vertex.off('updateCoordinate', this._updateVertexCoordinateFN, this);
                vertex.generated(false);
                this.fire('deleteVertex', vertex);

                this.vertices().removeItem(id);

                vertex.dispose();
            },
            eachVertex: function(callback, context) {
                this.vertices().each(function(item, id) {
                    callback.call(context || this, item.value(), id);
                });
            },
            getVertex: function(id) {
                return this.vertices().getItem(id);
            },
            _nodesCollectionProcessor: function(sender, args) {
                var items = args.items;
                var action = args.action;
                var identityKey = this.identityKey();
                if (action == 'add') {
                    nx.each(items, function(data) {
                        var vertex = this._addVertex(data);
                        this.generateVertex(vertex);
                    }, this);
                } else if (action == 'remove') {
                    nx.each(items, function(data) {
                        var id = nx.path(data, identityKey);
                        this._deleteVertex(id);
                    }, this);
                } else if (action == 'clear') {
                    this.vertices().clear();
                }
            }
        }
    });


})(nx, nx.global);
(function(nx, global) {

    nx.define('nx.data.ObservableGraph.VertexSets', nx.data.ObservableObject, {
        events: ['addVertexSet', 'removeVertexSet', 'updateVertexSet', 'updateVertexSetCoordinate'],
        properties: {
            nodeSet: {
                get: function() {
                    return this._nodeSet || [];
                },
                set: function(value) {

                    if (this._nodeSet && nx.is(this._nodeSet, nx.data.ObservableCollection)) {
                        this._nodeSet.off('change', this._nodeSetCollectionProcessor, this);
                    }

                    this.vertexSets().clear();

                    if (nx.is(value, nx.data.ObservableCollection)) {
                        value.on('change', this._nodeSetCollectionProcessor, this);
                        value.each(function(value) {
                            this._addVertexSet(value);
                        }, this);
                        this._nodeSet = value;
                    } else if (value) {
                        nx.each(value, this._addVertexSet, this);
                        this._nodeSet = value.slice();
                    }

                    this.eachVertexSet(this.initVertexSet, this);


                }
            },
            vertexSets: {
                value: function() {
                    var vertexSets = new nx.data.ObservableDictionary();
                    vertexSets.on('change', function(sender, args) {
                        var action = args.action;
                        var items = args.items;
                        if (action == 'clear') {
                            nx.each(items, function(item) {
                                this.removeVertexSet(item.key());
                            }, this);
                        }
                    }, this);
                    return vertexSets;
                }
            },
            visibleVertexSets: {
                get: function() {
                    var vertexSets = {};
                    this.eachVertexSet(function(vertexSet, id) {
                        if (vertexSet.visible()) {
                            vertexSets[id] = vertexSet;
                        }
                    });
                    return vertexSets;
                }
            }
        },
        methods: {
            /**
             * Add vertex set to Graph
             * @method addVertexSet
             * @param {JSON} data Vertex set original data, which include nodes(Array) attribute. That is node's ID collection.  e.g. {nodes:[id1,id2,id3]}
             * @param {Object} [config] Config object
             * @returns {nx.data.VertexSet}
             */
            addVertexSet: function(data, cfg) {
                var vertexSet;
                var config = cfg || {};
                var nodeSet = this.nodeSet();
                var vertexSets = this.vertexSets();
                if (nx.is(nodeSet, nx.data.ObservableCollection)) {
                    nodeSet.add(data);
                    vertexSet = vertexSets.getItem(vertexSets.count() - 1);
                } else {
                    nodeSet.push(data);
                    vertexSet = this._addVertexSet(data);
                }

                if (!vertexSet) {
                    return null;
                }

                if (config) {
                    vertexSet.sets(config);
                }


                if (config.parentVertexSetID != null) {
                    var parentVertexSet = this.getVertexSet(config.parentVertexSetID);
                    if (parentVertexSet) {
                        parentVertexSet.addVertex(vertexSet);
                    }
                }

                this.initVertexSet(vertexSet);


                this.generateVertexSet(vertexSet);

                vertexSet.activated(true, {
                    force: true
                });
                this.updateVertexSet(vertexSet);

                return vertexSet;
            },
            _addVertexSet: function(data) {
                var identityKey = this.identityKey();
                var vertexSets = this.vertexSets();
                //
                if (typeof(data) == 'string' || typeof(data) == 'number') {
                    data = {
                        data: data
                    };
                }
                var id = nx.path(data, identityKey);
                id = id !== undefined ? id : this.vertexSets().count() + this.vertices().count();

                if (vertexSets.getItem(id)) {
                    return null;
                }

                var vertexSet = new nx.data.VertexSet(data);


                var vertexPositionGetter = this.vertexPositionGetter();
                if (vertexPositionGetter) {
                    vertexSet.positionGetter(vertexPositionGetter);
                }

                var vertexPositionSetter = this.vertexPositionSetter();
                if (vertexPositionSetter) {
                    vertexSet.positionSetter(vertexPositionSetter);
                }

                //
                vertexSet.sets({
                    graph: this,
                    type: 'vertexSet',
                    id: id
                });


                //delegate synchronize
                if (nx.is(data, nx.data.ObservableObject)) {
                    var fn = data.set;
                    data.set = function(key, value) {
                        fn.call(data, key, value);
                        //
                        if (vertexSet.__properties__.indexOf(key) == -1) {
                            if (vertexSet.has(key)) {
                                vertexSet[key].call(vertexSet, value);
                            } else {
                                vertexSet.notify(key);
                            }
                        }
                    };
                }


                vertexSet.position(vertexSet.positionGetter().call(vertexSet, vertexSet));

                this.vertexSets().setItem(id, vertexSet);

                return vertexSet;
            },
            initVertexSet: function(vertexSet) {
                vertexSet.initNodes();
            },
            generateVertexSet: function(vertexSet) {
                if (vertexSet.visible() && !vertexSet.generated()) {
                    vertexSet.generated(true);
                    vertexSet.on('updateCoordinate', this._updateVertexSetCoordinateFN, this);
                    this.fire('addVertexSet', vertexSet);
                }
            },
            _updateVertexSetCoordinateFN: function(vertexSet, args) {
                /**
                 * @event updateVertexSetCoordinate
                 * @param sender {Object}  Trigger instance
                 * @param {nx.data.VertexSet} vertexSet VertexSet object
                 */
                this.fire('updateVertexSetCoordinate', vertexSet);
            },
            updateVertexSet: function(vertexSet) {
                if (vertexSet.generated()) {
                    vertexSet.updated(false);
                    /**
                     * @event updateVertexSet
                     * @param sender {Object}  Trigger instance
                     * @param {nx.data.VertexSet} vertexSet VertexSet object
                     */
                    this.fire('updateVertexSet', vertexSet);
                }
            },

            /**
             * Remove a vertex set from Graph
             * @method removeVertexSet
             * @param {String} id
             * @returns {Boolean}
             */
            removeVertexSet: function(id) {

                var vertexSet = this.vertexSets().getItem(id);
                if (!vertexSet) {
                    return false;
                }


                vertexSet.activated(true);

                nx.each(vertexSet.edgeSets(), function(edgeSet, linkKey) {
                    this.removeEdgeSet(linkKey);
                }, this);

                nx.each(vertexSet.edgeSetCollections(), function(esc, linkKey) {
                    this.deleteEdgeSetCollection(linkKey);
                }, this);

                vertexSet.generated(false);
                vertexSet.off('updateCoordinate', this._updateVertexSetCoordinateFN, this);
                this.fire('removeVertexSet', vertexSet);

            },
            deleteVertexSet: function(id) {
                var nodeSet = this.nodeSet();
                var vertexSet = this.getVertexSet(id);
                if (vertexSet) {
                    if (nx.is(nodeSet, nx.data.ObservableCollection)) {
                        var data = vertexSet.getData();
                        nodeSet.remove(data);
                    } else {
                        var index = this.nodeSet().indexOf(vertexSet.getData());
                        if (index != -1) {
                            this.nodeSet().splice(index, 1);
                        }
                        this._deleteVertexSet(id);
                    }
                }
            },
            _deleteVertexSet: function(id) {
                var vertexSet = this.vertexSets().getItem(id);
                if (!vertexSet) {
                    return false;
                }
                if (vertexSet.generated()) {
                    vertexSet.activated(false);
                }


                var parentVertexSet = vertexSet.parentVertexSet();
                if (parentVertexSet) {
                    parentVertexSet.removeVertex(id);

                }

                nx.each(vertexSet.vertices(), function(vertex) {
                    if (parentVertexSet) {
                        parentVertexSet.addVertex(vertex);
                    } else {
                        vertex.parentVertexSet(null);
                    }
                });
                nx.each(vertexSet.vertexSet(), function(vertexSet) {
                    if (parentVertexSet) {
                        parentVertexSet.addVertex(vertexSet);
                    } else {
                        vertexSet.parentVertexSet(null);
                    }
                });

                vertexSet.off('updateCoordinate', this._updateVertexCoordinateFN, this);
                vertexSet.generated(false);
                this.vertexSets().removeItem(id);
                this.fire('deleteVertexSet', vertexSet);

                vertexSet.dispose();
            },

            eachVertexSet: function(callback, context) {
                this.vertexSets().each(function(item, id) {
                    callback.call(context || this, item.value(), id);
                });
            },
            getVertexSet: function(id) {
                return this.vertexSets().getItem(id);
            },
            _nodeSetCollectionProcessor: function(sender, args) {
                var items = args.items;
                var action = args.action;
                var identityKey = this.identityKey();
                if (action == 'add') {
                    nx.each(items, function(data) {
                        var vertexSet = this._addVertexSet(data);
                        this.generateVertexSet(vertexSet);

                    }, this);
                } else if (action == 'remove') {
                    nx.each(items, function(data) {
                        var id = nx.path(data, identityKey);
                        this._deleteVertexSet(id);
                    }, this);
                } else if (action == 'clear') {
                    this.vertexSets().clear();
                }
            }
        }
    });


})(nx, nx.global);
(function (nx, global) {

    nx.define('nx.data.ObservableGraph.Edges', nx.data.ObservableObject, {
        events: ['addEdge', 'removeEdge', 'deleteEdge', 'updateEdge', 'updateEdgeCoordinate'],
        properties: {
            links: {
                get: function () {
                    return this._links || [];
                },
                set: function (value) {

                    if (this._links && nx.is(this._links, nx.data.ObservableCollection)) {
                        this._links.off('change', this._linksCollectionProcessor, this);
                    }

                    this.edgeSetCollections().clear();

                    this.edgeSets().clear();

                    this.edges().clear();


                    if (nx.is(value, nx.data.ObservableCollection)) {
                        value.on('change', this._linksCollectionProcessor, this);
                        value.each(function (value) {
                            this._addEdge(value);
                        }, this);
                        this._links = value;
                    } else if (value) {
                        nx.each(value, this._addEdge, this);
                        this._links = value.slice();
                    }


                }
            },
            edgeFilter: {},
            edges: {
                value: function () {
                    var edges = new nx.data.ObservableDictionary();
                    edges.on('change', function (sender, args) {
                        var action = args.action;
                        var items = args.items;
                        if (action == 'clear') {
                            nx.each(items, function (item) {
                                this.deleteEdge(item.key());
                            }, this);
                        }
                    }, this);
                    return edges;
                }
            }
        },
        methods: {
            /**
             * Add edge to Graph
             * @method addEdge
             * @param {JSON} data Vertex original data
             * @param {Object} [config] Config object
             * @returns {nx.data.Edge}
             */
            addEdge: function (data, config) {
                var links = this.links();
                var edges = this.edges();
                var edge;

                if (data.source == null || data.target == null) {
                    return undefined;
                }


                if (nx.is(links, nx.data.ObservableCollection)) {
                    links.add(data);
                    // todo, handler when the data error,
                    edge = edges.getItem(edges.count() - 1);
                }
                else {
                    edge = this._addEdge(data);
                    if (edge) {
                        links.push(data);
                    }
                }

                if (!edge) {
                    return null;
                }

                if (config) {
                    edge.sets(config);
                }

                //update edgeSet
                var edgeSet = edge.parentEdgeSet();
                if (!edgeSet.generated()) {
                    this.generateEdgeSet(edgeSet);
                }
                else {
                    this.updateEdgeSet(edgeSet);
                }

                return edge;
            },
            _addEdge: function (data) {
                var edges = this.edges();
                var identityKey = this.identityKey();
                var source, target, sourceID, targetID;


                if (data.source == null || data.target == null) {
                    return undefined;
                }


                sourceID = nx.path(data, 'source') != null ? nx.path(data, 'source') : data.source;
                source = this.vertices().getItem(sourceID); // || this.vertexSets().getItem(sourceID);


                targetID = nx.path(data, 'target') != null ? nx.path(data, 'target') : data.source;
                target = this.vertices().getItem(targetID); // || this.vertexSets().getItem(targetID);


                if (source && target) {
                    var edge = new nx.data.Edge(data);
                    var id = nx.path(data, 'id') != null ? nx.path(data, 'id') : edge.__id__;

                    if (edges.getItem(id)) {
                        return null;
                    }


                    edge.sets({
                        id: id,
                        source: source,
                        target: target,
                        sourceID: sourceID,
                        targetID: targetID,
                        graph: this
                    });

                    edge.attachEvent();

                    edges.setItem(id, edge);

                    var edgeSet = this.getEdgeSetBySourceAndTarget(sourceID, targetID);
                    if (!edgeSet) {
                        edgeSet = this._addEdgeSet({
                            source: source,
                            target: target,
                            sourceID: sourceID,
                            targetID: targetID
                        });
                    }
                    else {
                        edgeSet.updated(true);
                    }

                    edge.sets({
                        linkKey: edgeSet.linkKey(),
                        reverseLinkKey: edgeSet.reverseLinkKey()
                    });

                    edgeSet.addEdge(edge);
                    edge.parentEdgeSet(edgeSet);
                    edge.reverse(sourceID !== edgeSet.sourceID());


                    var edgeFilter = this.edgeFilter();
                    if (edgeFilter && nx.is(edgeFilter, Function)) {
                        var result = edgeFilter.call(this, data, edge);
                        edge.visible(result === false);
                    }

                    return edge;

                }
                else {
                    if (console) {
                        console.warn('source node or target node is not defined, or linkMappingKey value error', data, source, target);
                    }
                    return undefined;
                }
            },
            generateEdge: function (edge) {
                if (!edge.generated()) { //&& edge.source().generated() && edge.target().generated()
                    edge.on('updateCoordinate', this._updateEdgeCoordinate, this);

                    /**
                     * @event addEdge
                     * @param sender {Object}  Trigger instance
                     * @param {nx.data.Edge} edge Edge object
                     */
                    this.fire('addEdge', edge);
                    edge.generated(true);
                }
            },
            /**
             * Remove edge from Graph
             * @method removeEdge
             * @param id {String} edge id
             * @param isUpdateEdgeSet {Boolean}
             */
            removeEdge: function (id, isUpdateEdgeSet) {
                var edge = this.edges().getItem(id);
                if (!edge) {
                    return false;
                }
                edge.generated(false);
                edge.off('updateCoordinate', this._updateEdgeCoordinate, this);
                /**
                 * @event removeEdge
                 * @param sender {Object}  Trigger instance
                 * @param {nx.data.Edge} edge Edge object
                 */
                this.fire('removeEdge', edge);

                if (isUpdateEdgeSet !== false) {
                    var edgeSet = edge.parentEdgeSet();
                    this.updateEdgeSet(edgeSet);
                }
            },
            deleteEdge: function (id, isUpdateEdgeSet) {

                var edge = this.getEdge(id);
                if (!edge) {
                    return false;
                }

                var links = this.links();
                if (nx.is(links, nx.data.ObservableCollection)) {
                    links.removeAt(edge.getData());
                }
                else {
                    var index = links.indexOf(edge.getData());
                    if (index != -1) {
                        links.splice(index, 1);
                    }
                    this._deleteEdge(id, isUpdateEdgeSet);
                }

            },
            _deleteEdge: function (id, isUpdateEdgeSet) {
                var edge = this.getEdge(id);
                if (!edge) {
                    return false;
                }
                edge.off('updateCoordinate', this._updateEdgeCoordinate, this);

                //update parent
                if (isUpdateEdgeSet !== false) {
                    var edgeSet = edge.parentEdgeSet();
                    edgeSet.removeEdge(id);
                    this.updateEdgeSet(edgeSet);
                }

                /**
                 * @event deleteEdge
                 * @param sender {Object} Trigger instance
                 * @param {nx.data.Edge} edge Edge object
                 */
                this.fire('deleteEdge', edge);

                this.edges().removeItem(id);

                edge.dispose();

            },
            _updateEdgeCoordinate: function (sender, args) {
                this.fire('updateEdgeCoordinate', sender);
            },
            getEdge: function (id) {
                return this.edges().getItem(id);
            },
            /**
             * Get edges by source vertex id and target vertex id
             * @method getEdgesBySourceAndTarget
             * @param source {nx.data.Vertex|Number|String} could be vertex object or id
             * @param target {nx.data.Vertex|Number|String} could be vertex object or id
             * @returns {Array}
             */
            getEdgesBySourceAndTarget: function (source, target) {
                var edgeSet = this.getEdgeSetBySourceAndTarget(source, target);
                return edgeSet && edgeSet.getEdges();
            },
            /**
             * Get edges which are connected to passed vertices
             * @method getEdgesByVertices
             * @param inVertices
             * @returns {Array}
             */
            getEdgesByVertices: function (inVertices) {
                //                var edges = [];
                //                nx.each(inVertices, function (vertex) {
                //                    edges = edges.concat(vertex.edges);
                //                    edges = edges.concat(vertex.reverseEdges);
                //                });
                //
                //
                //                return util.uniq(edges);
            },

            /**
             * Get edges which's source and target vertex are both in the passed vertices
             * @method getInternalEdgesByVertices
             * @param inVertices
             * @returns {Array}
             */

            getInternalEdgesByVertices: function (inVertices) {
                //                var edges = [];
                //                var verticesMap = {};
                //                var internalEdges = [];
                //                nx.each(inVertices, function (vertex) {
                //                    edges = edges.concat(vertex.edges);
                //                    edges = edges.concat(vertex.reverseEdges);
                //                    verticesMap[vertex.id()] = vertex;
                //                });
                //
                //                nx.each(edges, function (edge) {
                //                    if (verticesMap[edge.sourceID()] !== undefined && verticesMap[edge.targetID()] !== undefined) {
                //                        internalEdges.push(edge);
                //                    }
                //                });
                //
                //
                //                return internalEdges;

            },
            /**
             * Get edges which's  just one of source or target vertex in the passed vertices. All edges connected ourside of passed vertices
             * @method getInternalEdgesByVertices
             * @param inVertices
             * @returns {Array}
             */
            getExternalEdgesByVertices: function (inVertices) {
                //                var edges = [];
                //                var verticesMap = {};
                //                var externalEdges = [];
                //                nx.each(inVertices, function (vertex) {
                //                    edges = edges.concat(vertex.edges);
                //                    edges = edges.concat(vertex.reverseEdges);
                //                    verticesMap[vertex.id()] = vertex;
                //                });
                //
                //                nx.each(edges, function (edge) {
                //                    if (verticesMap[edge.sourceID()] === undefined || verticesMap[edge.targetID()] === undefined) {
                //                        externalEdges.push(edge);
                //                    }
                //                });
                //
                //
                //                return externalEdges;

            },
            _linksCollectionProcessor: function (sender, args) {
                var items = args.items;
                var action = args.action;
                if (action == 'add') {
                    nx.each(items, function (data) {
                        var edge = this._addEdge(data);
                        //update edgeSet
                        var edgeSet = edge.parentEdgeSet();
                        if (!edgeSet.generated()) {
                            this.generateEdgeSet(edgeSet);
                        }
                        else {
                            this.updateEdgeSet(edgeSet);
                        }
                    }, this);
                }
                else if (action == 'remove') {
                    var ids = [];
                    // get all edges should be delete
                    this.edges().each(function (item, id) {
                        var edge = item.value();
                        if (items.indexOf(edge.getData()) != -1) {
                            ids.push(edge.id());
                        }
                    }, this);
                    nx.each(ids, function (id) {
                        this._deleteEdge(id);
                    }, this);

                }
                else if (action == 'clear') {
                    this.edges().clear();
                }
            }
        }
    });


})(nx, nx.global);

(function (nx, global) {

    nx.define('nx.data.ObservableGraph.EdgeSets', nx.data.ObservableObject, {
        events: ['addEdgeSet', 'updateEdgeSet', 'removeEdgeSet', 'deleteEdgeSet', 'updateEdgeSetCoordinate'],
        properties: {
            edgeSets: {
                value: function () {
                    var edgeSets = new nx.data.ObservableDictionary();
                    edgeSets.on('change', function (sender, args) {
                        var action = args.action;
                        var items = args.items;
                        if (action == 'clear') {
                            nx.each(items, function (item) {
                                this.deleteEdgeSet(item.key());
                            }, this);
                        }
                    }, this);
                    return edgeSets;
                }
            }
        },
        methods: {
            _addEdgeSet: function (data) {
                var edgeSet = new nx.data.EdgeSet();
                var id = edgeSet.__id__;
                var linkKey = data.sourceID + '_' + data.targetID;
                var reverseLinkKey = data.targetID + '_' + data.sourceID;


                edgeSet.sets(data);
                edgeSet.sets({
                    graph: this,
                    linkKey: linkKey,
                    reverseLinkKey: reverseLinkKey,
                    id: id
                });

                edgeSet.source().addEdgeSet(edgeSet, linkKey);
                edgeSet.target().addEdgeSet(edgeSet, linkKey);

                edgeSet.attachEvent();

                this.edgeSets().setItem(linkKey, edgeSet);
                return edgeSet;
            },
            generateEdgeSet: function (edgeSet) {
                if (!edgeSet.generated() && edgeSet.source().generated() && edgeSet.target().generated()) {
                    edgeSet.generated(true);
                    edgeSet.on('updateCoordinate', this._updateEdgeSetCoordinate, this);
                    /**
                     * @event addEdgeSet
                     * @param sender {Object}  Trigger instance
                     * @param {nx.data.EdgeSet} edgeSet EdgeSet object
                     */
                    this.fire('addEdgeSet', edgeSet);
                }
            },
            updateEdgeSet: function (edgeSet) {
                if (edgeSet.generated() && edgeSet.source().generated() && edgeSet.target().generated()) {
                    edgeSet.updated(false);
                    /**
                     * @event updateEdgeSet
                     * @param sender {Object}  Trigger instance
                     * @param {nx.data.EdgeSet} edgeSet EdgeSet object
                     */
                    this.fire('updateEdgeSet', edgeSet);
                }
            },
            removeEdgeSet: function (linkKey) {

                var edgeSet = this.edgeSets().getItem(linkKey);
                if (!edgeSet) {
                    return false;
                }

                edgeSet.off('updateCoordinate', this._updateEdgeSetCoordinate, this);

                nx.each(edgeSet.edges(), function (edge, id) {
                    this.removeEdge(id, false);
                }, this);
                edgeSet.generated(false);
                edgeSet._activated = true;
                /**
                 * @event removeEdgeSet
                 * @param sender {Object}  Trigger instance
                 * @param {nx.data.EdgeSet} edgeSet EdgeSet object
                 */
                this.fire('removeEdgeSet', edgeSet);
            },
            deleteEdgeSet: function (linkKey) {
                var edgeSet = this.edgeSets().getItem(linkKey);
                if (!edgeSet) {
                    return false;
                }

                edgeSet.off('updateCoordinate', this._updateEdgeSetCoordinate, this);

                nx.each(edgeSet.edges(), function (edge, id) {
                    this.deleteEdge(id, false);
                }, this);

                edgeSet.source().removeEdgeSet(linkKey);
                edgeSet.target().removeEdgeSet(linkKey);

                /**
                 * @event removeEdgeSet
                 * @param sender {Object}  Trigger instance
                 * @param {nx.data.EdgeSet} edgeSet EdgeSet object
                 */
                this.fire('deleteEdgeSet', edgeSet);

                this.edgeSets().removeItem(linkKey);

                edgeSet.dispose();
            },
            _updateEdgeSetCoordinate: function (sender, args) {
                this.fire('updateEdgeSetCoordinate', sender);
            },
            /**
             * Get edgeSet by source vertex id and target vertex id
             * @method getEdgeSetBySourceAndTarget
             * @param source {nx.data.Vertex|Number|String} could be vertex object or id
             * @param target {nx.data.Vertex|Number|String} could be vertex object or id
             * @returns {nx.data.EdgeSet}
             */
            getEdgeSetBySourceAndTarget: function (source, target) {
                var edgeSets = this.edgeSets();

                var sourceID = nx.is(source, nx.data.Vertex) ? source.id() : source;
                var targetID = nx.is(target, nx.data.Vertex) ? target.id() : target;

                var linkKey = sourceID + '_' + targetID;
                var reverseLinkKey = targetID + '_' + sourceID;

                return edgeSets.getItem(linkKey) || edgeSets.getItem(reverseLinkKey);
            },
            eachEdgeSet: function (callback, context) {
                this.edgeSets().each(function (item, id) {
                    callback.call(context || this, item.value(), id);
                });
            }
        }
    });


})(nx, nx.global);
(function (nx, global) {

    nx.define('nx.data.ObservableGraph.EdgeSetCollections', nx.data.ObservableObject, {
        events: ['addEdgeSetCollection', 'removeEdgeSetCollection', 'deleteEdgeSetCollection', 'updateEdgeSetCollection', 'updateEdgeSetCollectionCoordinate'],
        properties: {
            edgeSetCollections: {
                value: function () {
                    var edgeSetCollections = new nx.data.ObservableDictionary();
                    edgeSetCollections.on('change', function (sender, args) {
                        var action = args.action;
                        var items = args.items;
                        if (action == 'clear') {
                            nx.each(items, function (item) {
                                //[TODO] DEBUG
                                if(item.value()){
                                    this.deleteEdgeSetCollection(item.value().linkKey());
                                }
                            }, this);
                        }
                    }, this);
                    return edgeSetCollections;
                }
            }
        },
        methods: {
            _addEdgeSetCollection: function (data) {
                var esc = new nx.data.EdgeSetCollection();
                var id = esc.__id__;
                var linkKey = data.sourceID + '_' + data.targetID;
                var reverseLinkKey = data.targetID + '_' + data.sourceID;


                esc.sets(data);
                esc.sets({
                    graph: this,
                    linkKey: linkKey,
                    reverseLinkKey: reverseLinkKey,
                    id: id
                });

                esc.source().addEdgeSetCollection(esc, linkKey);
                esc.target().addEdgeSetCollection(esc, linkKey);

                esc.attachEvent();

                this.edgeSetCollections().setItem(linkKey, esc);
                return esc;
            },
            generateEdgeSetCollection: function (esc) {
                esc.generated(true);
                esc.on('updateCoordinate', this._updateEdgeSetCollectionCoordinate, this);
                this.fire('addEdgeSetCollection', esc);
            },
            updateEdgeSetCollection: function (esc) {
                esc.updated(true);
                this.fire('updateEdgeSetCollection', esc);
            },
            removeEdgeSetCollection: function (linkKey) {

                var esc = this.edgeSetCollections().getItem(linkKey);
                if (!esc) {
                    return false;
                }

                esc.generated(false);
                esc.off('updateCoordinate', this._updateEdgeSetCollectionCoordinate, this);

                /**
                 * @event removeEdgeSet
                 * @param sender {Object}  Trigger instance
                 * @param {nx.data.EdgeSet} edgeSet EdgeSet object
                 */
                this.fire('removeEdgeSetCollection', esc);
            },

            deleteEdgeSetCollection: function (linkKey) {

                var esc = this.edgeSetCollections().getItem(linkKey);
                if (!esc) {
                    return false;
                }
                esc.off('updateCoordinate', this._updateEdgeSetCollectionCoordinate, this);
                esc.source().removeEdgeSetCollection(linkKey);
                esc.target().removeEdgeSetCollection(linkKey);

                /**
                 * @event removeEdgeSet
                 * @param sender {Object}  Trigger instance
                 * @param {nx.data.EdgeSet} edgeSet EdgeSet object
                 */
                this.fire('deleteEdgeSetCollection', esc);

                this.edgeSetCollections().removeItem(linkKey);

                esc.dispose();
            },
            getEdgeSetCollectionBySourceAndTarget: function (source, target) {
                var edgeSetCollections = this.edgeSetCollections();

                var sourceID = nx.is(source, nx.data.Vertex) ? source.id() : source;
                var targetID = nx.is(target, nx.data.Vertex) ? target.id() : target;

                var linkKey = sourceID + '_' + targetID;
                var reverseLinkKey = targetID + '_' + sourceID;

                return edgeSetCollections.getItem(linkKey) || edgeSetCollections.getItem(reverseLinkKey);
            },
            _updateEdgeSetCollectionCoordinate: function (sender, args) {
                this.fire('updateEdgeSetCollectionCoordinate', sender);
            },
            eachEdgeCollections: function (callback, context) {
                this.edgeSetCollections().each(function (item, id) {
                    callback.call(context || this, item.value(), id);
                });
            },
            _generateConnection: function (edgeSet) {

                if (!edgeSet.source().visible() || !edgeSet.target().visible()) {
                    return;
                }

                var obj = this._getGeneratedRootVertexSetOfEdgeSet(edgeSet);

                if (!obj.source || !obj.target) {
                    return;
                }

                if (obj.source == obj.target) {
                    return;
                }

                if (!obj.source.visible() || !obj.target.visible()) {
                    return;
                }


                if (obj.source.id() == edgeSet.sourceID() && obj.target.id() == edgeSet.targetID()) {
                    this.generateEdgeSet(edgeSet);
                } else {
                    var esc = this.getEdgeSetCollectionBySourceAndTarget(obj.source.id(), obj.target.id());
                    if (!esc) {
                        esc = this._addEdgeSetCollection({
                            source: obj.source,
                            target: obj.target,
                            sourceID: obj.source.id(),
                            targetID: obj.target.id()
                        });
                        this.generateEdgeSetCollection(esc);
                    }
                    esc.addEdgeSet(edgeSet);
                    this.updateEdgeSetCollection(esc);
                }
            },
            _getGeneratedRootVertexSetOfEdgeSet: function (edgeSet) {
                var source = edgeSet.source();
                if (!source.generated()) {
                    source = source.generatedRootVertexSet();
                }
                var target = edgeSet.target();
                if (!target.generated()) {
                    target = target.generatedRootVertexSet();
                }
                return {
                    source: source,
                    target: target
                };
            }
        }
    });


})(nx, nx.global);
(function (nx, global, logger) {
    /**
     * Force layout processor
     * @class nx.data.ObservableGraph.ForceProcessor
     * @module nx.data
     */
    nx.define("nx.data.ObservableGraph.NeXtForceProcessor", {
        methods: {
            /**
             * Process graph data
             * @param data {JSON} standard graph data
             * @param [key]
             * @param [model]
             * @returns {JSON} {JSON} standard graph data
             */
            process: function (data, key, model) {
                var forceStartDate = new Date();

                var _data = {nodes: data.nodes, links: []};
                var nodeIndexMap = {};
                nx.each(data.nodes, function (node, index) {
                    nodeIndexMap[node[key]] = index;
                });

                _data.links = [];
                nx.each(data.links, function (link) {
                    if (!nx.is(link.source, 'Object') && nodeIndexMap[link.source] !== undefined && !nx.is(link.target, 'Object') && nodeIndexMap[link.target] !== undefined) {
                        _data.links.push({
                            source: nodeIndexMap[link.source],
                            target: nodeIndexMap[link.target]
                        });
                    }
                });

                // force
                var force = new nx.data.NextForce();
                force.setData(data);
                console.log(_data.nodes.length);
                if (_data.nodes.length < 50) {
                    while (true) {
                        force.tick();
                        if (force.maxEnergy < _data.nodes.length * 0.1) {
                            break;
                        }
                    }
                } else {
                    var step = 0;
                    while (++step < 900) {
                        force.tick();
                    }
                }

                console.log(force.maxEnergy);

                return data;
            }
        }
    });

})(nx, nx.global, nx.logger);
(function (nx, global, logger) {
    /**
     * Force layout processor
     * @class nx.data.ObservableGraph.ForceProcessor
     * @module nx.data
     */
    nx.define("nx.data.ObservableGraph.ForceProcessor", {
        methods: {
            /**
             * Process graph data
             * @param data {JSON} standard graph data
             * @param [key]
             * @param [model]
             * @returns {JSON} {JSON} standard graph data
             */
            process: function (data, key, model) {
                var forceStartDate = new Date();
                var _data;

                _data = {nodes: data.nodes, links: []};
                var nodeIndexMap = {};
                nx.each(data.nodes, function (node, index) {
                    nodeIndexMap[node[key]] = index;
                });


                // if source and target is not number, force will search node
                nx.each(data.links, function (link) {
                    if (!nx.is(link.source, 'Object') && nodeIndexMap[link.source] !== undefined && !nx.is(link.target, 'Object') && nodeIndexMap[link.target] !== undefined) {
                        if (key == 'ixd') {
                            _data.links.push({
                                source: link.source,
                                target: link.target
                            });
                        } else {
                            _data.links.push({
                                source: nodeIndexMap[link.source],
                                target: nodeIndexMap[link.target]
                            });
                        }

                    }
                });
                var force = new nx.data.Force();
                force.nodes(_data.nodes);
                force.links(_data.links);
                force.start();
                while (force.alpha()) {
                    force.tick();
                }
                force.stop();

                return data;
            }
        }
    });

})(nx, nx.global, nx.logger);
(function (nx, global) {
    nx.define("nx.data.ObservableGraph.QuickProcessor", {
        methods: {
            process: function (data, key, model) {
                nx.each(data.nodes, function (node) {
                    node.x = Math.floor(Math.random() * model.width());
                    node.y = Math.floor(Math.random() * model.height());
//                    node.x = Math.floor(Math.random() * 100);
//                    node.y = Math.floor(Math.random() * 100);
                });
                return data;
            }
        }
    });

})(nx, nx.global);
(function (nx, global) {
    nx.define("nx.data.ObservableGraph.CircleProcessor", {
        methods: {
            process: function (data) {

            }
        }
    });

})(nx, nx.global);
(function (nx, global) {

    var DataProcessor = nx.define("nx.data.ObservableGraph.DataProcessor", {
        statics: {
            dataProcessor: {
                'nextforce': new nx.data.ObservableGraph.NeXtForceProcessor(),
                'force': new nx.data.ObservableGraph.ForceProcessor(),
                'quick': new nx.data.ObservableGraph.QuickProcessor(),
                'circle': new nx.data.ObservableGraph.CircleProcessor()
            },
            /**
             * Register graph data processor,
             * @static
             * @method registerDataProcessor
             * @param {String} name data processor name
             * @param {Object} cls processor instance, instance should have a process method
             */
            registerDataProcessor: function (name, cls) {
                GRAPH.dataProcessor[name] = cls;
            }
        },
        properties: {
            /**
             * Set pre data processor,it could be 'force'/'quick'
             * @property dataProcessor
             * @default undefined
             */
            dataProcessor: {},
            width: {
                value: 100
            },
            height: {
                value: 100
            }
        },
        methods: {
            processData: function (data) {
                var identityKey = this._identityKey;
                var dataProcessor = this._dataProcessor;

                //TODO data validation

                if (dataProcessor) {
                    var processor = DataProcessor.dataProcessor[dataProcessor];
                    if (processor) {
                        return processor.process(data, identityKey, this);
                    } else {
                        return data;
                    }
                } else {
                    return data;
                }
            }
        }
    });

})(nx, nx.global);
(function(nx, global) {

    /**
     * ObservableGraph class
     * @extend nx.data.ObservableObject
     * @class nx.data.ObservableGraph
     * @module nx.data
     */
    nx.define('nx.data.ObservableGraph', nx.data.ObservableObject, {
        mixins: [
            nx.data.ObservableGraph.DataProcessor,
            nx.data.ObservableGraph.Vertices,
            nx.data.ObservableGraph.VertexSets,
            nx.data.ObservableGraph.Edges,
            nx.data.ObservableGraph.EdgeSets,
            nx.data.ObservableGraph.EdgeSetCollections
        ],
        event: ['setData', 'insertData', 'clear', 'startGenerate', 'endGenerate'],
        properties: {
            /**
             * Use this attribute of original data as vertex's id and link's mapping key
             * default is index, if not set use array's index as id
             * @property identityKey {String}
             * @default 'index'
             */
            identityKey: {
                value: 'index'
            },
            filter: {},
            groupBy: {}
        },
        methods: {
            init: function(args) {
                this.inherited(args);
                this.nodeSet([]);
                this.nodes([]);
                this.links([]);

                this.sets(args);

                if (args && args.data) {
                    this.setData(args.data);
                }

            },
            /**
             * Set data, data should follow Common Topology Data Definition
             * @method setData
             * @param {Object} inData
             */
            setData: function(inData) {

                var data = this.processData(this.getJSON(inData));
                //
                this.clear();

                //generate
                this._generate(inData);
                /**
                 * Trigger when set data to ObservableGraph
                 * @event setData
                 * @param sender {Object}  event trigger
                 * @param {Object} data data, which been processed by data processor
                 */
                this.fire('setData', inData);
            },
            subordinates: function(vertex, callback) {
                // argument type overload
                if (typeof vertex === "function") {
                    callback = vertex;
                    vertex = null;
                }
                // check the vertex children
                var result;
                if (vertex) {
                    result = nx.util.values(vertex.vertices()).concat(nx.util.values(vertex.vertexSet()));
                } else {
                    result = [];
                    nx.each(this.vertices(), function(pair) {
                        var vertex = pair.value();
                        if (!vertex.parentVertexSet()) {
                            result.push(vertex);
                        }
                    }.bind(this));
                    nx.each(this.vertexSets(), function(pair) {
                        var vertex = pair.value();
                        if (!vertex.parentVertexSet()) {
                            result.push(vertex);
                        }
                    }.bind(this));
                }
                // callback if given
                if (callback) {
                    nx.each(result, callback);
                }
                return result;
            },
            /**
             * Insert data, data should follow Common Topology Data Definition
             * @method insertData
             * @param {Object} inData
             */
            insertData: function(inData) {

                //                var data = this.processData(inData);
                var data = inData;
                nx.each(inData.nodes, function(node) {
                    this.addVertex(node);
                }, this);

                nx.each(inData.links, function(link) {
                    this.addEdge(link);
                }, this);

                nx.each(inData.nodeSet, function(nodeSet) {
                    this.addVertexSet(nodeSet);
                }, this);

                /**
                 * Trigger when insert data to ObservableGraph
                 * @event insertData
                 * @param sender {Object}  event trigger
                 * @param {Object} data data, which been processed by data processor
                 */

                this.fire('insertData', data);

            },
            _generate: function(data) {
                //
                this.nodes(data.nodes);
                this.links(data.links);
                this.nodeSet(data.nodeSet);

                var filter = this.filter();
                if (filter) {
                    filter.call(this, this);
                }

                /**
                 * Fired when start generate topology elements
                 * @event startGenerate
                 * @param sender{Object} trigger instance
                 * @param event {Object} original event object
                 */
                this.fire('startGenerate');


                //                console.time('vertex');
                this.eachVertex(this.generateVertex, this);
                //                console.timeEnd('vertex');

                this.eachVertexSet(this.generateVertexSet, this);

                //                console.time('edgeSet');
                this.eachEdgeSet(this.generateEdgeSet, this);
                //                console.timeEnd('edgeSet');


                this.eachVertexSet(function(vertexSet) {
                    vertexSet.activated(true, {
                        force: true
                    });
                    this.updateVertexSet(vertexSet);
                }, this);


                /**
                 * Fired when finish generate topology elements
                 * @event endGenerate
                 * @param sender{Object} trigger instance
                 * @param event {Object} original event object
                 */
                this.fire('endGenerate');

            },


            /**
             * Get original data
             * @method getData
             * @returns {Object}
             */

            getData: function() {
                return {
                    nodes: this.nodes(),
                    links: this.links(),
                    nodeSet: this.nodeSet()
                };
            },

            /**
             * Get original json object
             * @method getJSON
             * @param [inData]
             * @returns {{nodes: Array, links: Array,nodeSet:Array}}
             */
            getJSON: function(inData) {
                var data = inData || this.getData();
                var obj = {
                    nodes: [],
                    links: []
                };


                if (nx.is(data.nodes, nx.data.ObservableCollection)) {
                    nx.each(data.nodes, function(n) {
                        if (nx.is(n, nx.data.ObservableObject)) {
                            obj.nodes.push(n.gets());
                        } else {
                            obj.nodes.push(n);
                        }
                    });
                } else {
                    obj.nodes = data.nodes;
                }


                if (nx.is(data.links, nx.data.ObservableCollection)) {
                    nx.each(data.links, function(n) {
                        if (nx.is(n, nx.data.ObservableObject)) {
                            obj.links.push(n.gets());
                        } else {
                            obj.links.push(n);
                        }
                    });
                } else {
                    obj.links = data.links;
                }

                if (data.nodeSet) {
                    if (nx.is(data.nodeSet, nx.data.ObservableCollection)) {
                        obj.nodeSet = [];
                        nx.each(data.nodeSet, function(n) {
                            if (nx.is(n, nx.data.ObservableObject)) {
                                obj.nodeSet.push(n.gets());
                            } else {
                                obj.nodeSet.push(n);
                            }
                        });
                    } else {
                        obj.nodeSet = data.nodeSet;
                    }
                }

                return obj;

            },
            /**
             * Get visible vertices data bound
             * @method getBound
             * @returns {{x: number, y: number, width: number, height: number, maxX: number, maxY: number}}
             */

            getBound: function(invertices) {

                var min_x, max_x, min_y, max_y;

                var vertices = invertices || nx.util.values(this.visibleVertices()).concat(nx.util.values(this.visibleVertexSets()));
                var firstItem = vertices[0];
                var x, y;

                if (firstItem) {
                    x = firstItem.get ? firstItem.get('x') : firstItem.x;
                    y = firstItem.get ? firstItem.get('y') : firstItem.y;
                    min_x = max_x = x || 0;
                    min_y = max_y = y || 0;
                } else {
                    min_x = max_x = 0;
                    min_y = max_y = 0;
                }


                nx.each(vertices, function(vertex, index) {
                    x = vertex.get ? vertex.get('x') : vertex.x;
                    y = vertex.get ? vertex.get('y') : vertex.y;
                    min_x = Math.min(min_x, x || 0);
                    max_x = Math.max(max_x, x || 0);
                    min_y = Math.min(min_y, y || 0);
                    max_y = Math.max(max_y, y || 0);
                });

                return {
                    x: min_x,
                    y: min_y,
                    left: min_x,
                    top: min_y,
                    width: max_x - min_x,
                    height: max_y - min_y,
                    maxX: max_x,
                    maxY: max_y
                };
            },

            getHierarchicalStructure: function() {
                var json = this.getJSON();
                var tree = {};
                var hierarchical = [];
                var identityKey = this.identityKey();

                nx.each(json.nodes, function(node, index) {
                    var id = nx.path(node, identityKey);
                    var obj = {
                        id: id,
                        data: node,
                        children: []
                    };
                    hierarchical.push(obj);
                    tree[id] = obj;
                });

                var nodeSetData = {};
                nx.each(json.nodeSet, function(ns, index) {
                    var id = nx.path(ns, identityKey);
                    nodeSetData[id] = ns;
                });

                nx.each(json.nodeSet, function(ns, index) {
                    var id = nx.path(ns, identityKey);
                    var obj = {
                        id: id,
                        data: ns,
                        children: []
                    };
                    ns.nodes.forEach(function(nodeID) {
                        if (tree[nodeID]) {
                            if (~(index = hierarchical.indexOf(tree[nodeID]))) {
                                hierarchical.splice(index, 1);
                            }
                            obj.children.push(tree[nodeID]);
                        } else {
                            obj.children.push({
                                id: nodeID,
                                data: nodeSetData[nodeID],
                                children: []
                            });
                        }
                    });

                    hierarchical.push(obj);
                    tree[id] = obj;
                });
                return hierarchical;
            },

            /**
             * Clear graph data
             * @method clear
             */
            clear: function() {

                this.nodeSet([]);
                this.links([]);
                this.nodes([]);

                this.fire('clear');
            },
            dispose: function() {
                this.clear();
                this.inherited();
            }

        }
    });

})(nx, nx.global);
(function (nx, global) {

    nx.define("nx.data.UniqObservableCollection", nx.data.ObservableCollection, {
        methods: {
            add: function (item) {
                if (item == null || this.contains(item)) {
                    return false;
                }
                return this.inherited(item);
            },
            addRange: function (iter) {
                if (nx.is(iter, Array)) {
                    var items = nx.util.uniq(iter.slice());
                    var i = 0;
                    while (i < items.length) {
                        var item = items[i];
                        if (item == null || this.contains(item)) {
                            items.splice(i, 1);
                        }
                        i++;
                    }
                    return this.inherited(items);
                } else {
                    return this.inherited(iter);
                }


            },
            insert: function (item, index) {
                if (item == null || this.contains(item)) {
                    return false;
                }
                return this.inherited(item, index);
            },
            insertRange: function (iter, index) {
                if (nx.is(iter, Array)) {
                    var items = iter.slice();
                    var i = 0;
                    while (i < items.length) {
                        var item = items[i];
                        if (item == null || this.contains(item)) {
                            items.splice(i, 1);
                        }
                        i++;
                    }
                    return this.inherited(items);
                } else {
                    return this.inherited(iter);
                }
            }
        }
    });


})(nx, nx.global);
(function (nx, global) {

    /**
     * Topology's base config
     * @class nx.graphic.Topology.Config
     * @module nx.graphic.Topology
     */
    nx.define("nx.graphic.Topology.Config", {
        events: [],
        properties: {
            /**
             * Topology status, it could be  initializing/appended/ready
             * @property status {String}
             */
            status: {
                value: 'initializing',
                binding: {
                    direction: "<>"
                }
            },
            /**
             * topology's theme, it could be blue/green/dark/slate/yellow
             * @property theme {String}
             */
            theme: {
                get: function () {
                    return this._theme || 'blue';
                },
                set: function (value) {
                    this._theme = value;
                    this.notify('themeClass');
                }
            },
            themeClass: {
                get: function () {
                    return 'n-topology-' + this.theme();
                }
            },
            /**
             * Set the navigation visibility
             * @property showNavigation {Boolean}
             */
            showNavigation: {
                value: true
            },
            showThumbnail: {
                value: false
            },
            /**
             * Get the setting panel component instance for extend user setting
             * @property viewSettingPanel {nx.ui.Component}
             * @readonly
             */
            viewSettingPanel: {
                get: function () {
                    return this.view("nav").view("customize");
                }
            },
            viewSettingPopover: {
                get: function () {
                    return this.view("nav").view("settingPopover");
                }
            }
        },
        methods: {
        }
    });

})(nx, nx.global);
(function (nx, global) {

    /**
     * Topology graph model class
     * @class nx.graphic.Topology.Graph
     * @module nx.graphic.Topology
     */
    nx.define("nx.graphic.Topology.Graph", {
        events: ['beforeSetData', 'afterSetData', 'insertData', 'topologyGenerated'],
        properties: {
            /**
             * Identity the node and link mapping key, default is index
             * @property identityKey {String}
             */
            identityKey: {
                get: function () {
                    return this._identityKey || 'index';
                },
                set: function (value) {
                    this._identityKey = value;
                    this.graph().set('identityKey', value);
                }
            },
            /**
             * set/get the topology' data, data should follow Common Topology Data Definition
             * @property data {JSON}
             */
            data: {
                get: function () {
                    return this.graph().getData();
                },
                set: function (value) {
                    if (value == null || !nx.is(value, Object) || value.nodes == null) {
                        return;
                    }

                    var fn = function (data) {

                        /**
                         * Fired before start process data
                         * @event beforeSetData
                         * @param sender {Object} Trigger instance
                         * @param data {JSON}  event object
                         */
                        this.fire("beforeSetData", data);
                        this.clear();
                        this.graph().sets({
                            width: this.width(),
                            height: this.height()
                        });
                        // set Data;
                        this.graph().setData(data);
                        //
                        /**
                         * Fired after process data
                         * @event afterSetData
                         * @param sender{Object} trigger instance
                         * @param event {Object} original event object
                         */
                        this.fire("afterSetData", data);
                    };


                    if (this.status() === 'appended' || this.status() == 'generated') {
                        fn.call(this, value);
                    } else {
                        this.on('ready', function () {
                            fn.call(this, value);
                        }, this);
                    }
                }
            },
            /**
             * Set the use force layout, recommand use dataProcessor:'force'
             * @property autoLayout {Boolean}
             */
            autoLayout: {
                get: function () {
                    return this._autoLayout || false;
                },
                set: function (value) {
                    this._autoLayout = value;
                    if (value) {
                        this.graph().dataProcessor("force");
                    } else {
                        this.graph().dataProcessor("");
                    }
                }
            },
            vertexPositionGetter: {
                get: function () {
                    return this._vertexPositionGetter;
                },
                set: function (value) {
                    this._vertexPositionGetter = value;
                    this.graph().set('vertexPositionGetter', value);
                }
            },
            vertexPositionSetter: {
                get: function () {
                    return this._vertexPositionSetter;
                },
                set: function (value) {
                    this._vertexPositionSetter = value;
                    this.graph().set('vertexPositionSetter', value);
                }
            },
            /**
             * Pre data processor, it could be 'force'/'quick'. It could also support register a new processor
             * @property dataProcessor {String}
             */
            dataProcessor: {
                get: function () {
                    return this._dataProcessor;
                },
                set: function (value) {
                    this._dataProcessor = value;
                    this.graph().set('dataProcessor', value);
                }
            },
            /**
             * Topology graph object
             * @property graph {nx.data.ObservableGraph}
             * @readonly
             */
            graph: {
                value: function () {
                    return new nx.data.ObservableGraph();
                }
            }
        },
        methods: {
            initGraph: function () {
                var graph = this.graph();
                graph.sets({
                    vertexPositionGetter: this.vertexPositionGetter(),
                    vertexPositionSetter: this.vertexPositionSetter(),
                    identityKey: this.identityKey(),
                    dataProcessor: this.dataProcessor()
                });

                if (this.autoLayout()) {
                    graph.dataProcessor("force");
                }


                var nodesLayer = this.getLayer("nodes");
                var linksLayer = this.getLayer("links");
                var nodeSetLayer = this.getLayer("nodeSet");
                var linkSetLayer = this.getLayer("linkSet");

                /**
                 * Vertex
                 */
                graph.on("addVertex", function (sender, vertex) {
                    nodesLayer.addNode(vertex);
                }, this);

                graph.on("removeVertex", function (sender, vertex) {
                    nodesLayer.removeNode(vertex.id());
                }, this);


                graph.on("deleteVertex", function (sender, vertex) {
                    nodesLayer.removeNode(vertex.id());
                }, this);

                graph.on("updateVertex", function (sender, vertex) {
                    nodesLayer.updateNode(vertex.id());
                }, this);

                graph.on("updateVertexCoordinate", function (sender, vertex) {

                }, this);


                /**
                 * Edge
                 */
                graph.on("addEdge", function (sender, edge) {
                    var link = linksLayer.addLink(edge);
                    // add parent linkset
//                    if (edge.parentEdgeSet()) {
//                        var linkSet = this.getLinkSetByLinkKey(edge.linkKey());
//                        link.set('parentLinkSet', linkSet);
//                    }
                }, this);

                graph.on("removeEdge", function (sender, edge) {
                    linksLayer.removeLink(edge.id());
                }, this);
                graph.on("deleteEdge", function (sender, edge) {
                    linksLayer.removeLink(edge.id());
                }, this);
                graph.on("updateEdge", function (sender, edge) {
                    linksLayer.updateLink(edge.id());
                }, this);
                graph.on("updateEdgeCoordinate", function (sender, edge) {
                    linksLayer.updateLink(edge.id());
                }, this);


                /**
                 * EdgeSet
                 */
                graph.on("addEdgeSet", function (sender, edgeSet) {
                    if (this.supportMultipleLink()) {
                        linkSetLayer.addLinkSet(edgeSet);
                    } else {
                        edgeSet.activated(false);
                    }
                }, this);

                graph.on("removeEdgeSet", function (sender, edgeSet) {
                    linkSetLayer.removeLinkSet(edgeSet.linkKey());
                }, this);

                graph.on("deleteEdgeSet", function (sender, edgeSet) {
                    linkSetLayer.removeLinkSet(edgeSet.linkKey());
                }, this);

                graph.on("updateEdgeSet", function (sender, edgeSet) {
                    linkSetLayer.updateLinkSet(edgeSet.linkKey());
                }, this);
                graph.on("updateEdgeSetCoordinate", function (sender, edgeSet) {
                    if (this.supportMultipleLink()) {
                        linkSetLayer.updateLinkSet(edgeSet.linkKey());
                    }
                }, this);


                /**
                 * VertexSet
                 */
                graph.on("addVertexSet", function (sender, vertexSet) {
                    nodeSetLayer.addNodeSet(vertexSet);
                }, this);

                graph.on("removeVertexSet", function (sender, vertexSet) {
                    nodeSetLayer.removeNodeSet(vertexSet.id());
                }, this);
                graph.on("deleteVertexSet", function (sender, vertexSet) {
                    nodeSetLayer.removeNodeSet(vertexSet.id());
                }, this);

                graph.on("updateVertexSet", function (sender, vertexSet) {
                    nodeSetLayer.updateNodeSet(vertexSet.id());
                }, this);

                graph.on("updateVertexSetCoordinate", function (sender, vertexSet) {

                }, this);

                /**
                 * EdgeSetCollection
                 */
                graph.on("addEdgeSetCollection", function (sender, esc) {
                    linkSetLayer.addLinkSet(esc);
                }, this);

                graph.on("removeEdgeSetCollection", function (sender, esc) {
                    linkSetLayer.removeLinkSet(esc.linkKey());
                }, this);
                graph.on("deleteEdgeSetCollection", function (sender, esc) {
                    linkSetLayer.removeLinkSet(esc.linkKey());
                }, this);
                graph.on("updateEdgeSetCollection", function (sender, esc) {
                    linkSetLayer.updateLinkSet(esc.linkKey());
                }, this);
                graph.on("updateEdgeSetCollectionCoordinate", function (sender, esc) {
                    linkSetLayer.updateLinkSet(esc.linkKey());
                }, this);


                /**
                 * Data
                 */
                graph.on("setData", function (sender, data) {

                }, this);


                graph.on("insertData", function (sender, data) {
                    //this.showLoading();
                }, this);


                graph.on("clear", function (sender, event) {

                }, this);


                graph.on("startGenerate", function (sender, event) {
                    this.showLoading();
                    this.stage().hide();
                }, this);
                graph.on("endGenerate", function (sender, event) {
                    this._endGenerate();
                }, this);


            },
            /**
             * Set data to topology, recommend use topo.data(data)
             * @method setData
             * @param data {JSON} should be {nodes:[],links:[]}
             * @param [callback]
             * @param [context]
             */
            setData: function (data, callback, context) {
                if (callback) {
                    this.on('topologyGenerated', function fn() {
                        callback.call(context || this, this);
                        this.off('topologyGenerated', fn, this);
                    }, this);
                }
                if (data == null || !nx.is(data, Object) || data.nodes == null) {
                    return;
                }
                this.data(data);
            },
            /**
             * Insert data to topology
             * @method insertData
             * @param data {JSON}  should be {nodes:[],links:[]}
             */
            insertData: function (data) {
                if (data == null || !nx.is(data, Object)) {
                    return;
                }
                this.graph().insertData(data);
                /**
                 * Fired after insert data
                 * @event insertData
                 * @param sender{Object} trigger instance
                 * @param event {Object} original event object
                 */
                this.fire("insertData", data);
            },


            /**
             * Get topology data, recommend use topo.data()
             * @method getData
             * @returns {JSON}
             */
            getData: function () {
                return this.data();
            },


            _saveData: function () {
                var data = this.graph().getData();

                if (Object.prototype.toString.call(window.localStorage) === "[object Storage]") {
                    localStorage.setItem("topologyData", JSON.stringify(data));
                }

            },
            _loadLastData: function () {
                if (Object.prototype.toString.call(window.localStorage) === "[object Storage]") {
                    var data = JSON.parse(localStorage.getItem("topologyData"));
                    this.setData(data);
                }
            },
            start: function () {
            },
            _endGenerate: function () {

                this.stage().resetFitMatrix();

                /**
                 * Fired when all topology elements generated
                 * @event topologyGenerated
                 * @param sender{Object} trigger instance
                 * @param event {Object} original event object
                 */
                var layoutType = this.layoutType();
                if (layoutType) {
                    this.activateLayout(layoutType, null, function () {
                        this.__fit();
                        this.status('generated');
                        this.fire('topologyGenerated');
                    });
                } else {
                    this.__fit();
                    this.status('generated');
                    this.fire('topologyGenerated');
                }
            },
            __fit: function () {
                this.stage().show();
                if (this.autoFit()) {
                    this.stage().fit(null, null, false);
                    this.stage().resetFitMatrix();
                    this.stage().fit(null, null, false);
                    this.stage().resetFitMatrix();
                    this.stage().fit(null, null, false);
                }
                this.hideLoading();
            }
        }
    });


})(nx, nx.global);
(function (nx, global) {
    function extractDelta(e) {
        if (e.wheelDelta) {
            return e.wheelDelta;
        }

        if (e.detail) {
            return e.detail * -40;
        }


    }

    /**
     * Topology base events
     * @class nx.graphic.Topology.Event
     * @module nx.graphic.Topology
     */
    nx.define('nx.graphic.Topology.Event', {
        events: ['clickStage', 'pressStage', 'dragStageStart', 'dragStage', 'dragStageEnd', 'stageTransitionEnd', 'zoomstart', 'zooming', 'zoomend', 'resetzooming', 'fitStage', 'up', 'down', 'left', 'right', 'esc', 'space', 'enter', 'pressA', 'pressS', 'pressF', 'pressM', 'pressR'],
        properties: {
            /**
             * Enabling gradual scaling feature when zooming, set to false will improve the performance
             * @property enableGradualScaling {Boolean}
             */
            enableGradualScaling: {
                value: true
            }
        },
        methods: {
            _mousewheel: function (sender, event) {
                if (this.scalable()) {
                    var step = 8000;
                    var data = extractDelta(event);
                    var stage = this.stage();
                    var scale = data / step;

                    if (this._zoomWheelDelta == null) {
                        this._zoomWheelDelta = 0;
                        this.fire('zoomstart');
                    }

                    this._zoomWheelDelta += data / step;

                    if (this._enableGradualScaling) {
                        if (Math.abs(this._zoomWheelDelta) < 0.3) {
                            stage.disableUpdateStageScale(true);
                        } else {
                            this._zoomWheelDelta = 0;
                            stage.disableUpdateStageScale(false);
                        }
                    } else {
                        stage.disableUpdateStageScale(true);
                    }


                    stage.applyStageScale(1 + scale, [event.offsetX === undefined ? event.layerX : event.offsetX, event.offsetY === undefined ? event.layerY : event.offsetY]);

                    if (this._zooomEventTimer) {
                        clearTimeout(this._zooomEventTimer);
                    }

                    this._zooomEventTimer = setTimeout(function () {
                        stage.resetStageMatrix();
                        delete this._zoomWheelDelta;

                        /**
                         * Fired when end zooming
                         * @event zoomend
                         * @param sender{Object} trigger instance
                         * @param event {Object} original event object
                         */
                        this.fire('zoomend');

                    }.bind(this), 200);

                    /**
                     * Fired when zooming stage
                     * @event zooming
                     * @param sender{Object} trigger instance
                     * @param scale {Number} stage current scale
                     */
                    this.fire('zooming');
                }
                event.preventDefault();
                return false;
            },


            _contextmenu: function (sender, event) {
                event.preventDefault();
            },
            _clickStage: function (sender, event) {
                /**
                 * Fired when click the stage
                 * @event clickStage
                 * @param sender {Object}  Trigger instance
                 * @param event {Object} original event object
                 */
                this.fire('clickStage', event);
            },
            _pressStage: function (sender, event) {
                /**
                 * Fired when mouse press stage, this is a capture event
                 * @event pressStage
                 * @param sender {Object}  Trigger instance
                 * @param event {Object} original event object
                 */
                this.fire('pressStage', event);
            },
            _dragStageStart: function (sender, event) {
                /**
                 * Fired when start drag stage
                 * @event dragStageStart
                 * @param sender {Object}  Trigger instance
                 * @param event {Object} original event object
                 */
                this.fire('dragStageStart', event);
            },
            _dragStage: function (sender, event) {
                /**
                 * Fired when dragging stage
                 * @event dragStage
                 * @param sender {Object}  Trigger instance
                 * @param event {Object} original event object
                 */
                this.fire('dragStage', event);
            },
            _dragStageEnd: function (sender, event) {
                /**
                 * Fired when drag end stage
                 * @event dragStageEnd
                 * @param sender {Object}  Trigger instance
                 * @param event {Object} original event object
                 */
                this.fire('dragStageEnd', event);
            },
            _stageTransitionEnd: function (sender, event) {
                window.event = event;
                this.fire('stageTransitionEnd', event);
            },
            _key: function (sender, event) {
                var code = event.keyCode;
                switch (code) {
                case 38:
                    /**
                     * Fired when press up arrow key
                     * @event up
                     * @param sender {Object}  Trigger instance
                     * @param event {Object} original event object
                     */
                    this.fire('up', event);
                    event.preventDefault();
                    break;
                case 40:
                    /**
                     * Fired when press down arrow key
                     * @event down
                     * @param sender {Object}  Trigger instance
                     * @param event {Object} original event object
                     */
                    this.fire('down', event);
                    event.preventDefault();
                    break;
                case 37:
                    /**
                     * Fired when press left arrow key
                     * @event left
                     * @param sender {Object}  Trigger instance
                     * @param event {Object} original event object
                     */
                    this.fire('left', event);
                    event.preventDefault();
                    break;
                case 39:
                    /**
                     * Fired when press right arrow key
                     * @event right
                     * @param sender {Object}  Trigger instance
                     * @param event {Object} original event object
                     */
                    this.fire('right', event);
                    event.preventDefault();
                    break;
                case 13:
                    /**
                     * Fired when press enter key
                     * @event enter
                     * @param sender {Object}  Trigger instance
                     * @param event {Object} original event object
                     */
                    this.fire('enter', event);
                    event.preventDefault();
                    break;
                case 27:
                    /**
                     * Fired when press esc key
                     * @event esc
                     * @param sender {Object}  Trigger instance
                     * @param event {Object} original event object
                     */
                    this.fire('esc', event);
                    event.preventDefault();
                    break;
                case 65:
                    /**
                     * Fired when press a key
                     * @event pressA
                     * @param sender {Object}  Trigger instance
                     * @param event {Object} original event object
                     */
                    this.fire('pressA', event);
                    break;
                case 70:
                    /**
                     * Fired when press f key
                     * @event pressF
                     * @param sender {Object}  Trigger instance
                     * @param event {Object} original event object
                     */
                    this.fire('pressF', event);
                    break;
                case 77:
                    /**
                     * Fired when press m key
                     * @event pressM
                     * @param sender {Object}  Trigger instance
                     * @param event {Object} original event object
                     */
                    this.fire('pressM', event);
                    break;
                case 82:
                    /**
                     * Fired when press r key
                     * @event pressR
                     * @param sender {Object}  Trigger instance
                     * @param event {Object} original event object
                     */
                    this.fire('pressR', event);
                    break;
                case 83:
                    /**
                     * Fired when press s key
                     * @event pressS
                     * @param sender {Object}  Trigger instance
                     * @param event {Object} original event object
                     */
                    this.fire('pressS', event);
                    break;

                case 32:
                    /**
                     * Fired when press space key
                     * @event space
                     * @param sender {Object}  Trigger instance
                     * @param event {Object} original event object
                     */
                    this.fire('space', event);
                    event.preventDefault();
                    break;
                }


                return false;
            },
            blockEvent: function (value) {
                if (value) {
                    nx.dom.Document.body().addClass('n-userselect n-blockEvent');
                } else {
                    nx.dom.Document.body().removeClass('n-userselect');
                    nx.dom.Document.body().removeClass('n-blockEvent');
                }
            }

        }
    });

})(nx, nx.global);

(function(nx, global) {

    var util = nx.util;


    /**
     * Node mixin class
     * @class nx.graphic.Topology.NodeMixin
     * @module nx.graphic.Topology
     */
    nx.define("nx.graphic.Topology.NodeMixin", {
        events: ['addNode', 'deleteNode', 'addNodeSet', 'deleteNodeSet', 'expandAll'],
        properties: {
            /**
             * Node instance class name, support function
             * @property nodeInstanceClass
             */
            nodeInstanceClass: {
                value: 'nx.graphic.Topology.Node'
            },
            /**
             * NodeSet instance class name, support function
             * @property nodeSetInstanceClass
             */
            nodeSetInstanceClass: {
                value: 'nx.graphic.Topology.NodeSet'
            },
            /**
             * Set node's draggable
             * @property nodeDraggable
             */
            nodeDraggable: {
                value: true
            },
            /**
             * Enable smart label
             * @property enableSmartLabel
             */
            enableSmartLabel: {
                value: true
            },
            /**
             * Show or hide node's icon
             * @property showIcon
             */
            showIcon: {
                get: function() {
                    return this._showIcon !== undefined ? this._showIcon : false;
                },
                set: function(value) {
                    if (this._showIcon !== value) {
                        this._showIcon = value;
                        if (this.status() !== "initializing") {
                            this.eachNode(function(node) {
                                node.showIcon(value);
                            });
                        }
                        return true;
                    } else {
                        return false;
                    }
                }
            },
            /**
             * All node's config. key is node's property, support super binding
             * value could be a single string eg: color:'#f00'
             * value could be a an expression eg: label :'{model.id}'
             * value could be a function eg iconType : function (model,instance){ return  'router'}
             * value could be a normal binding expression eg : label :'{#label}'
             * @property {nodeConfig}
             */
            nodeConfig: {},
            /**
             * All nodeSet's config. key is node's property, support super binding
             * value could be a single string eg: color:'#f00'
             * value could be a an expression eg: label :'{model.id}'
             * value could be a function eg iconType : function (model,instance){ return  'router'}
             * value could be a normal binding expression eg : label :'{#label}'
             * @property {nodeSetConfig}
             */
            nodeSetConfig: {},
            /**
             * All selected nodes, could direct add/remove nodes to this collection
             * @property selectedNodes {nx.data.ObservableCollection}
             */
            selectedNodes: {
                value: function() {
                    return new nx.data.UniqObservableCollection();
                }
            },
            activeNodes: {
                set: function(value) {
                    var nodesLayer = this.getLayer("nodes");
                    var nodeSetLayer = this.getLayer("nodeSet");
                    var watcher = this._activeNodesWatcher;
                    if (!watcher) {
                        watcher = this._activeNodesWatcher = new nx.graphic.Topology.NodeWatcher();
                        watcher.topology(this);
                        watcher.updater(function() {
                            var nodes = watcher.getNodes();
                            nx.each(nodes, function(node) {
                                if (node.model().type() == 'vertex') {
                                    nodesLayer.activeElements().add(node);
                                } else {
                                    nodeSetLayer.activeElements().add(node);
                                }
                            }, this);
                        }.bind(this));


                    }
                    nodesLayer.activeElements().clear();
                    nodeSetLayer.activeElements().clear();
                    watcher.nodes(value);
                    this._activeNodes = value;
                }
            },
            highlightedNodes: {
                set: function(value) {
                    var nodesLayer = this.getLayer("nodes");
                    var nodeSetLayer = this.getLayer("nodeSet");
                    var watcher = this._highlightedNodesWatcher;
                    if (!watcher) {
                        watcher = this._highlightedNodesWatcher = new nx.graphic.Topology.NodeWatcher();
                        watcher.topology(this);
                        watcher.updater(function() {
                            nx.each(watcher.getNodes(), function(node) {
                                if (node.model().type() == 'vertex') {
                                    nodesLayer.highlightedElements().add(node);
                                } else {
                                    nodeSetLayer.highlightedElements().add(node);
                                }
                            }, this);
                        }.bind(this));
                    }

                    nodesLayer.highlightedElements().clear();
                    nodeSetLayer.highlightedElements().clear();
                    watcher.nodes(value);
                    this._highlightedNodes = value;
                }
            },
            enableNodeSetAnimation: {
                value: true
            },
            aggregationRule: {}
        },
        methods: {
            initNode: function() {
                var selectedNodes = this.selectedNodes();
                selectedNodes.on('change', function(sender, args) {
                    if (args.action == 'add') {
                        nx.each(args.items, function(node) {
                            node.selected(true);
                            node.on('remove', this._removeSelectedNode = function() {
                                selectedNodes.remove(node);
                            }, this);
                        }, this);
                    } else if (args.action == 'remove') {
                        nx.each(args.items, function(node) {
                            node.selected(false);
                            node.off('remove', this._removeSelectedNode, this);
                        }, this);
                    } else if (args.action == "clear") {
                        nx.each(args.items, function(node) {
                            node.selected(false);
                            node.off('remove', this._removeSelectedNode, this);
                        }, this);
                    }
                });
            },
            /**
             * Add a node to topology
             * @method addNode
             * @param obj
             * @param inOption
             * @returns {*}
             */
            addNode: function(obj, inOption) {
                var vertex = this.graph().addVertex(obj, inOption);
                if (vertex) {
                    var node = this.getNode(vertex.id());
                    this.fire("addNode", node);
                    return node;
                } else {
                    return null;
                }

            },

            /**
             * Remove a node
             * @method removeNode
             * @param arg
             * @returns {boolean}
             */
            removeNode: function(arg, callback, context) {
                this.deleteNode(arg);
            },
            deleteNode: function(arg, callback, context) {
                var id = arg;
                if (nx.is(arg, nx.graphic.Topology.AbstractNode)) {
                    id = arg.id();
                }
                var vertex = this.graph().getVertex(id);
                if (vertex) {
                    var node = this.getNode(id);
                    this.fire("deleteNode", node);
                    this.graph().deleteVertex(id);
                    if (callback) {
                        callback.call(context || this);
                    }
                }
            },
            _getAggregationTargets: function(vertices) {
                var graph = this.graph();
                var mark, marks, markmap = {},
                    NONE = nx.util.uuid();
                var i, v, vp, vpid, changed, vs = vertices.slice();
                // iterate unless the aggregation successful
                do {
                    changed = false;
                    for (i = vs.length - 1; i >= 0; i--) {
                        v = vs[i];
                        // get the parent vertex and its ID
                        vp = v.parentVertexSet();
                        vpid = (vp ? vp.id() : NONE);
                        // check if same parent vertex marked
                        if (!markmap.hasOwnProperty(vpid)) {
                            // create mark for the parent vertex
                            markmap[vpid] = {
                                vertex: vp || graph,
                                finding: graph.subordinates(vp),
                                found: []
                            };
                        }
                        // get parent mark
                        mark = markmap[vpid];
                        // check if child vertex marked already
                        if (mark === false || mark.found.indexOf(v) >= 0) {
                            // duplicated vertex appears, unable to aggregate
                            throw "wrong input";
                        }
                        // mark child vertex to its parent vertex
                        mark.found.push(v);
                        // remove child vertex from the pool
                        vs.splice(i, 1);
                        // set the vertex array changed
                        changed = true;
                        // check if the parent vertex is fully matched
                        if (mark.finding.length === mark.found.length && mark.vertex !== graph) {
                            // add parent vertex from the pool
                            vs.push(mark.vertex);
                            // mark the parent vertex as fully matched
                            markmap[vpid] = false;
                        }
                    }
                } while (changed);
                // clear fully matched marks from mark map
                for (mark in markmap) {
                    if (!markmap[mark]) {
                        delete markmap[mark];
                    }
                }
                // get remain marks of parent vertices
                marks = nx.util.values(markmap);
                // check if the number of parent not fully matched
                if (marks.length !== 1) {
                    // it should be at most & least one
                    throw nx.graphic.Topology.i18n.cantAggregateNodesInDifferentNodeSet;
                }
                // get the only parent's mark
                mark = marks[0];
                return mark.found;
            },
            aggregationNodes: function(inNodes, inConfig) {
                // transform nodes or node ids into vertices
                var nodes = [],
                    vertices = [];
                nx.each(inNodes, function(node) {
                    if (!nx.is(node, nx.graphic.Topology.AbstractNode)) {
                        node = this.getNode(node);
                    }
                    if (!nx.is(node, nx.graphic.Topology.AbstractNode)) {
                        throw "wrong input";
                    }
                    nodes.push(node);
                    vertices.push(node.model());
                }.bind(this));
                // get aggregate target vertices and ids
                var aggregateVertices, aggregateIds;
                // FIXME catch or not
                aggregateVertices = this._getAggregationTargets(vertices);
                if (aggregateVertices.length < 2) {
                    throw "wrong input. unable to aggregate.";
                }
                aggregateIds = [];
                nx.each(aggregateVertices, function(vertex) {
                    aggregateIds.push(vertex.id());
                });
                // check the user rule
                var aggregationRule = this.aggregationRule();
                if (aggregationRule && nx.is(aggregationRule, 'Function')) {
                    var result = aggregationRule.call(this, nodes, inConfig);
                    if (result === false) {
                        return;
                    }
                }
                // make up data, config and parent
                var data, parent, pn = null,
                    config = {};
                data = {
                    nodes: aggregateIds,
                    x: (inConfig && typeof inConfig.x === "number" ? inConfig.x : aggregateVertices[0].x()),
                    y: (inConfig && typeof inConfig.y === "number" ? inConfig.y : aggregateVertices[0].y()),
                    label: (inConfig && inConfig.label || [nodes[0].label(), nodes[nodes.length - 1].label()].sort().join("-"))
                };
                parent = aggregateVertices[0].parentVertexSet();
                if (parent) {
                    config.parentVertexSetID = parent.id();
                    pn = this.getNode(parent.id());
                }
                var nodeSet = this.addNodeSet(data, config, pn);
                this.stage().resetFitMatrix();
                return nodeSet;
            },
            /**
             * Add a nodeSet
             * @method addNodeSet
             * @param obj
             * @param [inOption]
             * @param [parentNodeSet]
             * @returns {*}
             */
            addNodeSet: function(obj, inOption, parentNodeSet) {
                var vertex = this.graph().addVertexSet(obj, inOption);
                if (vertex) {
                    var nodeSet = this.getNode(vertex.id());
                    if (parentNodeSet) {
                        nodeSet.parentNodeSet(parentNodeSet);
                    }
                    this.fire("addNodeSet", nodeSet);
                    return nodeSet;
                } else {
                    return null;
                }

            },
            removeNodeSet: function(arg, callback, context) {
                this.deleteNodeSet(arg);
            },

            deleteNodeSet: function(arg, callback, context) {
                if (!arg) {
                    return;
                }
                var id = arg;
                if (nx.is(arg, nx.graphic.Topology.AbstractNode)) {
                    id = arg.id();
                }
                var nodeSet = this.getLayer("nodeSet").getNodeSet(id);
                if (nodeSet) {
                    if (nodeSet.collapsed()) {
                        nodeSet.activated(false);
                        nodeSet.expandNodes(function() {
                            this.fire("deleteNodeSet", nodeSet);
                            this.graph().deleteVertexSet(id);
                            if (callback) {
                                callback.call(context || this);
                            }
                        }, this);
                    } else {
                        this.fire("deleteNodeSet", nodeSet);
                        this.graph().deleteVertexSet(id);
                        if (callback) {
                            callback.call(context || this);
                        }
                    }

                } else {
                    this.graph().deleteVertexSet(id);
                    if (callback) {
                        callback.call(context || this);
                    }
                }
            },


            /**
             * Traverse each node
             * @method eachNode
             * @param callback
             * @param context
             */
            eachNode: function(callback, context) {
                this.getLayer("nodes").eachNode(callback, context || this);
                this.getLayer("nodeSet").eachNodeSet(callback, context || this);
            },
            /**
             * Get node by node id
             * @method getNode
             * @param id
             * @returns {*}
             */
            getNode: function(id) {
                return this.getLayer("nodes").getNode(id) || this.getLayer("nodeSet").getNodeSet(id);
            },
            /**
             * Get all visible nodes
             * @returns {Array}
             */
            getNodes: function() {
                var nodes = this.getLayer("nodes").nodes();
                var nodeSets = this.getLayer("nodeSet").nodeSets();
                if (nodeSets && nodeSets.length !== 0) {
                    return nodes.concat(nodeSets);
                } else {
                    return nodes;
                }
            },
            /**
             * Register a customize icon
             * @param name {String}
             * @param url {URL}
             * @param width {Number}
             * @param height {Number}
             */
            registerIcon: function(name, url, width, height) {
                var XLINK = 'http://www.w3.org/1999/xlink';
                var NS = "http://www.w3.org/2000/svg";
                var icon1 = document.createElementNS(NS, "image");
                icon1.setAttributeNS(XLINK, 'href', url);
                nx.graphic.Icons.icons[name] = {
                    size: {
                        width: width,
                        height: height
                    },
                    icon: icon1.cloneNode(true),
                    name: name
                };

                var icon = icon1.cloneNode(true);
                icon.setAttribute("height", height);
                icon.setAttribute("width", width);
                icon.setAttribute("data-device-type", name);
                icon.setAttribute("id", name);
                icon.setAttribute("class", 'deviceIcon');
                this.stage().addDef(icon);
            },
            /**
             * Batch action, highlight node and related nodes and connected links.
             * @param inNode
             */
            highlightRelatedNode: function(inNode) {
                var node;
                if (inNode == null) {
                    return;
                }

                if (nx.is(inNode, nx.graphic.Topology.AbstractNode)) {
                    node = inNode;
                } else {
                    node = this.getNode(inNode);
                }
                if (!node) {
                    return;
                }


                var nodeSetLayer = this.getLayer('nodeSet');
                var nodeLayer = this.getLayer('nodes');

                //highlight node
                if (nx.is(node, 'nx.graphic.Topology.NodeSet')) {
                    nodeSetLayer.highlightedElements().add(node);
                } else {
                    nodeLayer.highlightedElements().add(node);
                }


                // highlight connected nodes and nodeSets
                node.eachConnectedNode(function(n) {
                    if (nx.is(n, 'nx.graphic.Topology.NodeSet')) {
                        nodeSetLayer.highlightedElements().add(n);
                    } else {
                        nodeLayer.highlightedElements().add(n);
                    }
                }, this);


                // highlight connected links and linkSets
                this.getLayer('linkSet').highlightLinkSets(util.values(node.linkSets()));
                this.getLayer('links').highlightLinks(util.values(node.links()));

                this.fadeOut(true);

            },
            /**
             * Batch action, highlight node and related nodes and connected links.
             * @param inNode
             */
            activeRelatedNode: function(inNode) {

                var node;
                if (!inNode) {
                    return;
                }

                if (nx.is(inNode, nx.graphic.Topology.AbstractNode)) {
                    node = inNode;
                } else {
                    node = this.getNode(inNode);
                }
                if (!node) {
                    return;
                }


                var nodeSetLayer = this.getLayer('nodeSet');
                var nodeLayer = this.getLayer('nodes');

                // active node
                if (nx.is(node, 'nx.graphic.Topology.NodeSet')) {
                    nodeSetLayer.activeElements().add(node);
                } else {
                    nodeLayer.activeElements().add(node);
                }


                // highlight connected nodes and nodeSets
                node.eachConnectedNode(function(n) {
                    if (nx.is(n, 'nx.graphic.Topology.NodeSet')) {
                        nodeSetLayer.activeElements().add(n);
                    } else {
                        nodeLayer.activeElements().add(n);
                    }
                }, this);


                // highlight connected links and linkSets
                this.getLayer('linkSet').activeLinkSets(util.values(node.linkSets()));
                this.getLayer('links').activeLinks(util.values(node.links()));

                this.fadeOut();

            },
            /**
             * Zoom topology to let the passing nodes just visible at the screen
             * @method zoomByNodes
             * @param [callback] {Function} callback function
             * @param [context] {Object} callback context
             * @param nodes {Array} nodes collection
             */
            zoomByNodes: function(nodes, callback, context, boundScale) {
                // TODO more overload about nodes
                if (!nx.is(nodes, Array)) {
                    nodes = [nodes];
                }
                // get bound of the selected nodes' models
                var stage = this.stage();
                var p0, p1, center, bound = this.getModelBoundByNodes(nodes);
                var delta, limitscale = stage.maxZoomLevel() * stage.fitMatrixObject().scale();

                if (!bound) {
                    return;
                }

                // check if the nodes are too close to zoom
                if (bound.width * limitscale < 1 && bound.height * limitscale < 1) {
                    // just centralize them instead of zoom
                    center = nx.geometry.Vector.transform(bound.center, stage.matrix());
                    delta = [stage.width() / 2 - center[0], stage.height() / 2 - center[1]];
                    stage.scalingLayer().setTransition(function() {
                        this.adjustLayout();
                        /* jshint -W030 */
                        callback && callback.call(context || this);
                        this.fire('zoomend');
                    }, this, 0.6);
                    stage.applyTranslate(delta[0], delta[1]);
                    stage.applyStageScale(stage.maxZoomLevel() / stage.zoomLevel() * boundScale);
                } else {
                    p0 = nx.geometry.Vector.transform([bound.left, bound.top], stage.matrix());
                    p1 = nx.geometry.Vector.transform([bound.right, bound.bottom], stage.matrix());
                    bound = {
                        left: p0[0],
                        top: p0[1],
                        width: Math.max(1, p1[0] - p0[0]),
                        height: Math.max(1, p1[1] - p0[1])
                    };

                    boundScale = 1 / (boundScale || 1);
                    bound.left += bound.width * (1 - boundScale) / 2;
                    bound.top += bound.height * (1 - boundScale) / 2;
                    bound.height *= boundScale;
                    bound.width *= boundScale;

                    this.zoomByBound(bound, function() {
                        this.adjustLayout();
                        /* jshint -W030 */
                        callback && callback.call(context || this);
                        this.fire('zoomend');
                    }, this);
                }
            },
            getModelBoundByNodes: function(nodes, isIncludeInvisibleNodes) {
                var xmin, xmax, ymin, ymax;
                nx.each(nodes, function(inNode) {
                    var vertex;
                    if (nx.is(inNode, nx.graphic.Topology.AbstractNode)) {
                        vertex = inNode.model();
                    } else {
                        if (isIncludeInvisibleNodes) {
                            vertex = this.graph().getVertex(inNode) || this.graph().getVertexSet(inNode);
                        } else {
                            var node = this.getNode(inNode);
                            vertex = node && node.model();
                        }
                    }
                    if (!vertex) {
                        return;
                    }


                    var x = vertex.x(),
                        y = vertex.y();
                    xmin = (xmin < x ? xmin : x);
                    ymin = (ymin < y ? ymin : y);
                    xmax = (xmax > x ? xmax : x);
                    ymax = (ymax > y ? ymax : y);
                }, this);
                if (xmin === undefined || ymin === undefined) {
                    return undefined;
                }
                return {
                    left: xmin,
                    top: ymin,
                    right: xmax,
                    bottom: ymax,
                    center: [(xmax + xmin) / 2, (ymax + ymin) / 2],
                    width: xmax - xmin,
                    height: ymax - ymin
                };
            },
            /**
             * Get the bound of passing node's
             * @param inNodes {Array}
             * @param isNotIncludeLabel {Boolean}
             * @returns {Array}
             */

            getBoundByNodes: function(inNodes, isNotIncludeLabel) {

                if (inNodes == null || inNodes.length === 0) {
                    inNodes = this.getNodes();
                }

                var bound = {
                    left: 0,
                    top: 0,
                    x: 0,
                    y: 0,
                    width: 0,
                    height: 0,
                    maxX: 0,
                    maxY: 0
                };

                var boundAry = [];


                nx.each(inNodes, function(inNode) {
                    var node;
                    if (nx.is(inNode, nx.graphic.Topology.AbstractNode)) {
                        node = inNode;
                    } else {
                        node = this.getNode(inNode);
                    }

                    if (!node) {
                        return;
                    }


                    if (node.visible()) {
                        if (isNotIncludeLabel) {
                            boundAry.push(this.getInsideBound(node.getBound(true)));
                        } else {
                            boundAry.push(this.getInsideBound(node.getBound()));
                        }
                    }
                }, this);


                var lastIndex = boundAry.length - 1;

                //
                boundAry.sort(function(a, b) {
                    return a.left - b.left;
                });

                bound.x = bound.left = boundAry[0].left;
                bound.maxX = boundAry[lastIndex].left;

                boundAry.sort(function(a, b) {
                    return (a.left + a.width) - (b.left + b.width);
                });

                bound.width = boundAry[lastIndex].left + boundAry[lastIndex].width - bound.x;


                //
                boundAry.sort(function(a, b) {
                    return a.top - b.top;
                });

                bound.y = bound.top = boundAry[0].top;
                bound.maxY = boundAry[lastIndex].top;

                boundAry.sort(function(a, b) {
                    return (a.top + a.height) - (b.top + b.height);
                });

                bound.height = boundAry[lastIndex].top + boundAry[lastIndex].height - bound.y;

                return bound;


            },
            _moveSelectionNodes: function(event, node) {
                if (this.nodeDraggable()) {
                    var nodes = this.selectedNodes().toArray();
                    var stageScale = this.stageScale();
                    if (nodes.indexOf(node) === -1) {
                        node.move(event.drag.delta[0] * stageScale, event.drag.delta[1] * stageScale);
                    } else {
                        nx.each(nodes, function(node) {
                            node.move(event.drag.delta[0] * stageScale, event.drag.delta[1] * stageScale);
                        });
                    }
                }
            },
            /**
             * Expand nodes from a source position, If nodes number more than 150, will ignore animation.
             * @method expandNodes
             * @param nodes {Array} ids of nodes to expand
             * @param sourcePosition
             * @param callback
             * @param context
             * @param isAnimate
             */
            expandNodes: function(nodes, sourcePosition, callback, context, isAnimate) {

                var nodesLength = nx.is(nodes, Array) ? nodes.length : nx.util.keys(nodes).length;
                callback = callback || function() {};


                if (nodesLength > 150 || nodesLength === 0 || isAnimate === false) {
                    callback.call(context || this, this);
                } else {
                    var positionMap = [];
                    nx.each(nodes, function(node) {
                        positionMap.push({
                            id: node.id(),
                            position: node.position(),
                            node: node
                        });
                        node.position(sourcePosition);
                    }, this);

                    if (this._nodesAnimation) {
                        this._nodesAnimation.stop();
                    }

                    var ani = this._nodesAnimation = new nx.graphic.Animation({
                        duration: 600
                    });
                    ani.callback(function(progress) {
                        nx.each(positionMap, function(item) {
                            var _position = item.position;
                            var node = item.node;
                            if (node && node.model()) {
                                node.position({
                                    x: sourcePosition.x + (_position.x - sourcePosition.x) * progress,
                                    y: sourcePosition.y + (_position.y - sourcePosition.y) * progress
                                });
                            }
                        });
                    }.bind(this));

                    ani.complete(function() {
                        callback.call(context || this, this);
                    }.bind(this));
                    ani.start();
                }
            },
            /**
             * To collapse nodes to a target position. If nodes number more than 150, will ignore animation.
             * @method collapseNodes
             * @param nodes nodes {Array} nodes to collape
             * @param targetPosition
             * @param callback
             * @param context
             * @param isAnimate
             */
            collapseNodes: function(nodes, targetPosition, callback, context, isAnimate) {
                var nodesLength = nx.is(nodes, Array) ? nodes.length : nx.util.keys(nodes).length;
                callback = callback || function() {};


                if (nodesLength > 150 || nodesLength === 0 || isAnimate === false) {
                    callback.call(context || this, this);
                } else {
                    var positionMap = [];
                    nx.each(nodes, function(node) {
                        positionMap.push({
                            id: node.id(),
                            position: node.position(),
                            node: node,
                            vertex: node.model(),
                            vertexPosition: node.model().position()
                        });
                    }, this);

                    if (this._nodesAnimation) {
                        this._nodesAnimation.stop();
                    }


                    var ani = this._nodesAnimation = new nx.graphic.Animation({
                        duration: 600
                    });
                    ani.callback(function(progress) {
                        nx.each(positionMap, function(item) {
                            var _position = item.position;
                            var node = item.node;
                            if (node && node.model()) {
                                node.position({
                                    x: _position.x - (_position.x - targetPosition.x) * progress,
                                    y: _position.y - (_position.y - targetPosition.y) * progress
                                });
                            }
                        });
                    }.bind(this));

                    ani.complete(function() {
                        nx.each(positionMap, function(item) {
                            item.vertex.position(item.vertexPosition);
                        });
                        callback.call(context || this, this);
                    }.bind(this));
                    ani.start();
                }
            },
            /**
             * Expand all nodeSets
             * @method expandAll
             */
            expandAll: function() {
                var nodeSetLayer = this.getLayer('nodeSet');
                //console.time('expandAll');
                var fn = function(callback) {
                    var isFinished = true;
                    nodeSetLayer.eachNodeSet(function(nodeSet) {
                        if (nodeSet.visible()) {
                            nodeSet.animation(false);
                            nodeSet.collapsed(false);
                            isFinished = false;
                        }
                    });
                    if (!isFinished) {
                        fn(callback);
                    } else {
                        callback();
                    }
                };

                this.showLoading();

                setTimeout(function() {
                    fn(function() {

                        nodeSetLayer.eachNodeSet(function(nodeSet) {
                            nodeSet.animation(true);
                        });
                        this.stage().resetFitMatrix();
                        this.hideLoading();
                        this.fit(function() {
                            this.blockEvent(false);
                            this.fire('expandAll');
                        }, this);
                    }.bind(this));
                }.bind(this), 100);
            },
            /**
             * Collpase all nodeSets
             * @method collapseAll
             */
            collapseAll: function() {
                var graph = this.graph();
                var rootVertexSets = {};
                graph.eachVertexSet(function(vertexSet, id) {
                    if (!vertexSet.rootVertexSet()) {
                        rootVertexSets[id] = vertexSet;
                    }
                });

                this.showLoading();



                nx.each(rootVertexSets, function(vertex, id) {
                    var nodeSet = this.getNode(id);
                    if (nodeSet) {
                        nodeSet.animation(false);
                        nodeSet.collapsed(true);
                    }
                }, this);


                var nodeSetLayer = this.getLayer('nodeSet');
                setTimeout(function() {
                    nodeSetLayer.eachNodeSet(function(nodeSet) {
                        nodeSet.animation(true);
                    });
                    this.stage().resetFitMatrix();
                    this.hideLoading();
                    this.fit(function() {
                        this.blockEvent(false);
                        this.fire('collapseAll');
                    }, this);
                }.bind(this), 100);
            }
        }
    });


})(nx, nx.global);
(function(nx, global) {

    /**
     * Links mixin class
     * @class nx.graphic.Topology.LinkMixin
     * @module nx.graphic.Topology
     */
    nx.define("nx.graphic.Topology.LinkMixin", {
        events: ['addLink', 'deleteLink'],
        properties: {
            /**
             * Link instance class name, support function
             * @property nodeInstanceClass
             */
            linkInstanceClass: {
                value: 'nx.graphic.Topology.Link'
            },
            /**
             * LinkSet instance class name, support function
             * @property linkSetInstanceClass
             */
            linkSetInstanceClass: {
                value: 'nx.graphic.Topology.LinkSet'
            },
            /**
             * Is topology support Multiple link , is false will highly improve performance
             * @property supportMultipleLink {Boolean}
             */
            supportMultipleLink: {
                value: true
            },
            /**
             * All link's config. key is link's property, support super binding
             * value could be a single string eg: color:'#f00'
             * value could be a an expression eg: label :'{model.id}'
             * value could be a function eg iconType : function (model,instance){ return  'router'}
             * value could be a normal binding expression eg : label :'{#label}'
             * @property {linkConfig}
             */
            linkConfig: {},
            /**
             * All linkSet's config. key is link's property, support super binding
             * value could be a single string eg: color:'#f00'
             * value could be a an expression eg: label :'{model.id}'
             * value could be a function eg iconType : function (model,instance){ return  'router'}
             * value could be a normal binding expression eg : label :'{#label}'
             * @property {linkSetConfig}
             */
            linkSetConfig: {}
        },
        methods: {

            /**
             * Add a link to topology
             * @method addLink
             * @param obj {JSON}
             * @param inOption {Config}
             * @returns {nx.graphic.Topology.Link}
             */
            addLink: function(obj, inOption) {
                if (!obj || obj.source == null || obj.target == null) {
                    return undefined;
                }
                var edge = this.graph().addEdge(obj, inOption);
                var edgeSet = this.graph().getEdgeSetBySourceAndTarget(obj.source, obj.target);
                if (edgeSet) {
                    this.graph()._generateConnection(edgeSet);
                }
                if (edge) {
                    var link = this.getLink(edge.id());
                    this.fire("addLink", link);
                    return link;
                } else {
                    return null;

                }

            },
            /**
             * Remove a link
             * @method removeLink
             * @param arg  {String}
             * @returns {boolean}
             */
            removeLink: function(arg) {
                this.deleteLink(arg);
            },

            deleteLink: function(arg) {
                var id = arg;
                if (nx.is(arg, nx.graphic.Topology.AbstractLink)) {
                    id = arg.id();
                }
                this.fire("deleteLink", this.getLink(id));
                this.graph().deleteEdge(id);
            },


            /**
             * Traverse each link
             * @method eachLink
             * @param callback <Function>
             * @param context {Object}
             */
            eachLink: function(callback, context) {
                this.getLayer("links").eachLink(callback, context || this);
            },

            /**
             * Get link by link id
             * @method getLink
             * @param id
             * @returns {*}
             */
            getLink: function(id) {
                return this.getLayer("links").getLink(id);
            },
            /**
             * get linkSet by node
             * @param sourceVertexID {String} source node's id
             * @param targetVertexID {String} target node's id
             * @returns  {nx.graphic.Topology.LinkSet}
             */
            getLinkSet: function(sourceVertexID, targetVertexID) {
                return this.getLayer("linkSet").getLinkSet(sourceVertexID, targetVertexID);
            },
            /**
             * Get linkSet by linkKey
             * @param linkKey {String} linkKey
             * @returns {nx.graphic.Topology.LinkSet}
             */
            getLinkSetByLinkKey: function(linkKey) {
                return this.getLayer("linkSet").getLinkSetByLinkKey(linkKey);
            },
            /**
             * Get links by node
             * @param sourceVertexID {String} source node's id
             * @param targetVertexID {String} target node's id
             * @returns {Array} links collection
             */
            getLinksByNode: function(sourceVertexID, targetVertexID) {
                var linkSet = this.getLinkSet(sourceVertexID, targetVertexID);
                if (linkSet) {
                    return linkSet.links();
                }
            }
        }
    });


})(nx, nx.global);
(function (nx, global) {
    nx.define("nx.graphic.Topology.LayerMixin", {
        events: [],
        properties: {
            /**
             * @property layersMap
             */
            layersMap: {
                value: function () {
                    return {};
                }
            },
            /**
             * @property layers
             */
            layers: {
                value: function () {
                    return [];
                }
            },

            /**
             * Get fade status.
             * @property fade
             * @readOnly
             */
            fade: {
                dependencies: "forceFade",
                value: function (forceFade) {
                    // TODO relates highlight and active setting
                    return (forceFade === true || forceFade === false) ? forceFade : this._fade;
                }
            },
            /**
             * Set active priority over highlight.
             * @property fadeActivePriority
             */
            fadeActivePriority: {
                value: false,
                set: function (v) {
                    if (v) {
                        this.dom().addClass("fade-active-priority");
                    } else {
                        this.dom().addClass("fade-active-priority");
                    }
                    this._fadeActivePriority = !! v;
                }
            },
            fadeUpdater_internal_: {
                dependencies: "fade",
                update: function (fade) {
                    if (fade) {
                        this.dom().addClass("fade-all");
                    } else {
                        this.dom().removeClass("fade-all");
                    }
                }
            },
            /**
             * Force layer fade.
             * @property forceFade
             */
            forceFade: {},
            layerResource_internal_: {
                value: function () {
                    return {};
                }
            }
        },
        methods: {
            initLayer: function () {
                this.layersMap({});
                this.layers([]);
                this.attachLayer("links", "nx.graphic.Topology.LinksLayer");
                this.attachLayer("linkSet", "nx.graphic.Topology.LinkSetLayer");
                this.attachLayer("groups", "nx.graphic.Topology.GroupsLayer");
                this.attachLayer("nodes", "nx.graphic.Topology.NodesLayer");
                this.attachLayer("nodeSet", "nx.graphic.Topology.NodeSetLayer");
                this.attachLayer("paths", "nx.graphic.Topology.PathLayer");

            },
            /**
             * To generate a layer
             * @param name
             * @param layer
             * @returns {*}
             * @private
             */
            _generateLayer: function (name, layer) {
                var layerObj;
                if (name && layer) {
                    if (nx.is(layer, "String")) {
                        var cls = nx.path(global, layer);
                        if (cls) {
                            layerObj = new cls();
                        }
                    } else {
                        layerObj = layer;
                    }
                    layerObj.topology(this);
                    layerObj.draw();

                    nx.each(layerObj.__events__, function (eventName) {
                        nx.Object.delegateEvent(layerObj, eventName, this, eventName);
                    }, this);


                    //                    debugger;
                    //                    nx.Object.extendProperty(this, name + 'LayerConfig', {
                    //                        set: function (value) {
                    //                            nx.each(value, function (value, key) {
                    //                                nx.util.setProperty(layerObj, key, value, this);
                    //                            }, this);
                    //                        }
                    //                    });


                }
                return layerObj;
            },
            /**
             * Get a layer reference by name
             * @method getLayer
             * @param name {String} The name you pass to topology when you attacherLayer/prependLayer/insertLayerAfter
             * @returns {*} Instance of a layer
             */
            getLayer: function (name) {
                var layersMap = this.layersMap();
                return layersMap[name];
            },
            appendLayer: function (name, layer) {
                return this.attachLayer(name, layer);
            },
            /**
             * attach a layer to topology, that should be subclass of nx.graphic.Topology.Layer
             * @method attachLayer
             * @param name {String} handler to get this layer
             * @param layer <String,nx.graphic.Topology.Layer> Could be string of a layer's class name, or a reference of a layer
             */
            attachLayer: function (name, layer, index) {
                var layersMap = this.layersMap();
                var layers = this.layers();
                var layerObj = this._generateLayer(name, layer);
                var layerResourceMap, layerResource = {};
                if (layerObj) {
                    if (index >= 0) {
                        layerObj.attach(this.stage(), index);
                        layers.splice(index, 0, layerObj);
                    } else {
                        layerObj.attach(this.stage());
                        layers.push(layerObj);
                    }
                    layersMap[name] = layerObj;
                    // listen layer active elements change
                    layerResourceMap = this.layerResource_internal_();
                    layerResourceMap[name] = layerResource;
                    layerResource.activeElementsChangeListener = function (sender, edata) {
                        layerResource.activeCount = layerObj.activeElements().count();
                        // get the total active count and update class
                        var total = 0;
                        nx.each(layerResourceMap, function (res) {
                            total += res.activeCount;
                        });
                        this.dom().setClass("fade-active-occur", total > 0);
                    };
                    layerObj.activeElements().on("change", layerResource.activeElementsChangeListener, this);
                }
                return layerObj;
            },
            /**
             * Prepend a layer to topology, that should be subclass of nx.graphic.Topology.Layer
             * @method prependLayer
             * @param name {String} handler to get this layer
             * @param layer <String,nx.graphic.Topology.Layer> Could be string of a layer's class name, or a reference of a layer
             */
            prependLayer: function (name, layer) {
                return this.attachLayer(name, layer, 0);
            },
            /**
             * Insert a layer under a certain layer, that should be subclass of nx.graphic.Topology.Layer
             * @method insertLayerAfter
             * @param name  {String} handler to get this layer
             * @param layer <String,Object> Could be string of a layer's class name, or a reference of a layer
             * @param upsideLayerName {String} name of upside layer
             */
            insertLayerAfter: function (name, layer, upsideLayerName) {
                var afterLayer = this.layersMap()[upsideLayerName];
                if (afterLayer) {
                    var index = this.layers().indexOf(afterLayer);
                    if (index >= 0) {
                        return this.attachLayer(name, layer, index + 1);
                    }
                }
            },

            eachLayer: function (callback, context) {
                nx.each(this.layersMap(), callback, context);
            },
            /**
             * fade out layer
             * @method fadeOut
             * @param [force] {Boolean} force layer fade out and can't fade in
             * @param [callback] {Function} callback after fade out
             * @param [context] {Object} callback context
             */
            fadeOut: function (force, callback, context) {
                if (force) {
                    this.forceFade(true);
                } else if (!this.forceFade()) {
                    this.fade(true);
                }
            },
            /**
             * FadeIn layer's fade statues
             * @param force {Boolean} force recover all items
             * @param [callback] {Function} callback after fade out
             * @param [context] {Object} callback context
             */
            fadeIn: function (force, callback, context) {
                if (this.forceFade() === true) {
                    if (force) {
                        this.forceFade(null);
                        this.fade(false);
                    }
                } else {
                    this.fade(false);
                }
            },
            recoverActive: function () {
                nx.each(this.layers(), function (layer) {
                    if (layer.activeElements) {
                        layer.activeElements().clear();
                    }
                }, this);
                this.activeNodes([]);
                this.fadeIn();
            },
            recoverHighlight: function () {
                nx.each(this.layers(), function (layer) {
                    if (layer.highlightedElements) {
                        layer.highlightedElements().clear();
                    }
                }, this);
                //todo refactore
                this.highlightedNodes([]);
                this.fadeIn(true);
            }
        }
    });
})(nx, nx.global);

(function (nx, global) {
    /**
     * Topology stage class
     * @class nx.graphic.Topology.StageMixin
     * @module nx.graphic.Topology
     */
    nx.define('nx.graphic.Topology.StageMixin', {
        events: ['fitStage', 'ready', 'resizeStage', 'afterFitStage'],
        properties: {
            /**
             * Set/get topology's width.
             * @property width {Number}
             */
            width: {
                get: function () {
                    return this._width || 300 + this.padding() * 2;
                },
                set: function (value) {
                    return this.resize(value);
                }
            },
            /**
             * height Set/get topology's height.
             * @property height {Number}
             */
            height: {
                get: function () {
                    return this._height || 300 + this.padding() * 2;
                },
                set: function (value) {
                    this.resize(null, value);
                }
            },
            /**
             * Set/get stage's padding.
             * @property padding {Number}
             */
            padding: {
                value: 100
            },
            /**
             * Set/get topology's scalability
             * @property scalable {Boolean}
             */
            scalable: {
                value: true
            },
            stageScale: {
                value: 1
            },
            revisionScale: {
                value: 1
            },
            matrix: {
                value: function () {
                    return new nx.geometry.Matrix(nx.geometry.Matrix.I);
                }
            },
            /**
             * Set to true will adapt to topology's outside container, set to ture will ignore width/height
             * @property adaptive {Boolean}
             */
            adaptive: {
                value: false
            },
            /**
             * Get the topology's stage component
             * @property stage {nx.graphic.Component}
             */
            stage: {
                get: function () {
                    return this.view('stage');
                }
            },
            /**
             * Enabling the smart node feature, set to false will improve the performance
             * @property enableSmartNode {Boolean}
             */
            enableSmartNode: {
                value: true
            },
            autoFit: {
                value: true
            }
        },

        methods: {
            initStage: function () {
                nx.each(nx.graphic.Icons.icons, function (iconObj, key) {
                    if (iconObj.icon) {
                        var icon = iconObj.icon.cloneNode(true);
                        icon.setAttribute("height", iconObj.size.height);
                        icon.setAttribute("width", iconObj.size.width);
                        icon.setAttribute("data-device-type", key);
                        icon.setAttribute("id", key);
                        icon.setAttribute("class", 'deviceIcon');
                        this.stage().addDef(icon);
                    }
                }, this);
            },
            _adaptiveTimer: function () {
                var self = this;
                if (!this.adaptive() && (this.width() !== 0 && this.height() !== 0)) {
                    this.status('appended');
                    /**
                     * Fired when topology appended to container with with& height
                     * @event ready
                     * @param sender{Object} trigger instance
                     * @param event {Object} original event object
                     */
                    setTimeout(function () {
                        this.fire('ready');
                    }.bind(this), 0);

                } else {
                    var timer = setInterval(function () {
                        if (self.dom() && nx.dom.Document.body().contains(self.dom())) {
                            clearInterval(timer);
                            this._adaptToContainer();
                            this.status('appended');
                            this.fire('ready');
                        }
                    }.bind(this), 10);
                }
            },
            _adaptToContainer: function () {
                var bound = this.view().dom().parentNode().getBound();
                if (bound.width === 0 || bound.height === 0) {
                    if (console) {
                        console.warn("Please set height*width to topology's parent container");
                    }
                    return;
                }
                if (this._width !== bound.width || this._height !== bound.height) {
                    this.resize(bound.width, bound.height);
                }
            },
            /**
             * Make topology adapt to container,container should set width/height
             * @method adaptToContainer
             */
            adaptToContainer: function (callback) {
                if (!this.adaptive()) {
                    return;
                }
                this._adaptToContainer();
                this.fit();
            },


            /**
             * Get the passing bound's relative inside bound,if not passing param will return the topology graphic's bound
             * @param bound {JSON}
             * @returns {{left: number, top: number, width: number, height: number}}
             */
            getInsideBound: function (bound) {
                var _bound = bound || this.stage().view('stage').getBound();
                var topoBound = this.view().dom().getBound();

                return {
                    left: _bound.left - topoBound.left,
                    top: _bound.top - topoBound.top,
                    width: _bound.width,
                    height: _bound.height
                };
            },
            getAbsolutePosition: function (obj) {
                var topoMatrix = this.matrix();
                var stageScale = topoMatrix.scale();
                var topoOffset = this.view().dom().getOffset();
                return {
                    x: obj.x * stageScale + topoMatrix.x() + topoOffset.left,
                    y: obj.y * stageScale + topoMatrix.y() + topoOffset.top
                };
            },
            /**
             * Make topology graphic fit stage
             * @method fit
             */
            fit: function (callback, context, isAnimated) {
                this.stage().fit(function () {
                    this.adjustLayout();
                    /* jshint -W030 */
                    callback && callback.call(context || this);
                    this.fire('afterFitStage');
                }, this, isAnimated == null ? true : isAnimated);
                /**
                 * Fired when  after topology fit to stage
                 * @event fit
                 * @param sender{Object} trigger instance
                 * @param event {Object} original event object
                 */
                this.fire('fitStage');

            },
            /**
             * Zoom topology
             * @param value {Number}
             * @method zoom
             */
            zoom: function (value) {

            },
            /**
             * Zoom topology by a bound
             * @method zoomByBound
             * @param inBound {Object} e.g {left:Number,top:Number,width:Number,height:Number}
             * @param [callback] {Function} callback function
             * @param [context] {Object} callback context
             * @param [duration] {Number} set the transition time, unit is second
             */
            zoomByBound: function (inBound, callback, context, duration) {
                this.stage().zoomByBound(inBound, function () {
                    this.adjustLayout();
                    /* jshint -W030 */
                    callback && callback.call(context || this);
                    this.fire('zoomend');
                }, this, duration !== undefined ? duration : 0.9);
            },
            /**
             * Move topology
             * @method move
             * @param x {Number}
             * @param y {Number}
             * @param [duration] {Number} default is 0
             */
            move: function (x, y, duration) {
                var stage = this.stage();
                stage.applyTranslate(x || 0, y || 0, duration);
            },
            /**
             * Resize topology
             * @method resize
             * @param width {Number}
             * @param height {Number}
             */
            resize: function (width, height) {
                var modified = false;
                if (width != null && width != this._width) {
                    var _width = Math.max(width, 300 + this.padding() * 2);
                    if (_width != this._width) {
                        this._width = _width;
                        modified = true;
                    }
                }
                if (height != null) {
                    var _height = Math.max(height, 300 + this.padding() * 2);
                    if (_height != this._height) {
                        this._height = _height;
                    }
                }

                if (modified) {
                    this.notify('width');
                    this.notify('height');
                    this.stage().resetFitMatrix();
                    /**
                     * Fired when topology's stage changed
                     * @event resizeStage
                     * @param sender{Object} trigger instance
                     * @param event {Object} original event object
                     */
                    this.fire('resizeStage');
                }
                return modified;
            },
            /**
             * If enable enableSmartNode, this function will auto adjust the node's overlapping and set the nodes to right size
             * @method adjustLayout
             */
            adjustLayout: function () {


                if (!this.enableSmartNode()) {
                    return;
                }

                if (this._adjustLayoutTimer) {
                    clearTimeout(this._adjustLayoutTimer);
                }
                this._adjustLayoutTimer = setTimeout(function () {
                    var graph = this.graph();
                    if (graph) {
                        var startTime = new Date();
                        var topoMatrix = this.matrix();
                        var stageScale = topoMatrix.scale();
                        var positionAry = [];
                        this.eachNode(function (node) {
                            if (node.activated && !node.activated()) {
                                return;
                            }
                            var position = node.position();
                            positionAry[positionAry.length] = {
                                x: position.x * stageScale + topoMatrix.x(),
                                y: position.y * stageScale + topoMatrix.y()
                            };
                        });
                        var calc = function (positionAry) {
                            var length = positionAry.length;
                            var iconRadius = 36 * 36;
                            var dotRadius = 32 * 32;

                            var testOverlap = function (sourcePosition, targetPosition) {
                                var distance = Math.pow(Math.abs(sourcePosition.x - targetPosition.x), 2) + Math.pow(Math.abs(sourcePosition.y - targetPosition.y), 2);
                                return {
                                    iconOverlap: distance < iconRadius,
                                    dotOverlap: distance < dotRadius
                                };
                            };

                            var iconOverlapCounter = 0;
                            var dotOverlapCounter = 0;

                            for (var i = 0; i < length; i++) {
                                var sourcePosition = positionAry[i];
                                var iconIsOverlap = false;
                                var dotIsOverlap = false;
                                for (var j = 0; j < length; j++) {
                                    var targetPosition = positionAry[j];
                                    if (i !== j) {
                                        var result = testOverlap(sourcePosition, targetPosition);
                                        /* jshint -W030 */
                                        result.iconOverlap && (iconIsOverlap = true);
                                        /* jshint -W030 */
                                        result.dotOverlap && (dotIsOverlap = true);
                                    }
                                }
                                /* jshint -W030 */
                                iconIsOverlap && iconOverlapCounter++;
                                /* jshint -W030 */
                                dotIsOverlap && dotOverlapCounter++;
                            }

                            //0.2,0.4,0.6.0.8,1
                            var overlapPercent = 1;
                            if (iconOverlapCounter / length > 0.2) {
                                overlapPercent = 0.8;
                                if (dotOverlapCounter / length > 0.8) {
                                    overlapPercent = 0.2;
                                } else if (dotOverlapCounter / length > 0.5) {
                                    overlapPercent = 0.4;
                                } else if (dotOverlapCounter / length > 0.15) {
                                    overlapPercent = 0.6;
                                }
                            }
                            return overlapPercent;
                        };

                        if (window.Blob && window.Worker) {
                            var fn = "onmessage = function(e) { self.postMessage(calc(e.data)); };";
                            fn += "var calc = " + calc.toString();

                            if (!this.adjustWorker) {
                                var blob = new Blob([fn]);
                                // Obtain a blob URL reference to our worker 'file'.
                                var blobURL = window.URL.createObjectURL(blob);
                                var worker = this.adjustWorker = new Worker(blobURL);
                                worker.onmessage = function (e) {
                                    var overlapPercent = e.data;
                                    this.revisionScale(overlapPercent);
                                }.bind(this);
                            }
                            this.adjustWorker.postMessage(positionAry); // Start the worker.
                        }


                        //                        var overlapPercent = calc(positionAry);
                        //                        this.revisionScale(overlapPercent);
                        //                        nodesLayer.updateNodeRevisionScale(overlapPercent);

                    }
                }.bind(this), 200);
            }
        }
    });
})
(nx, nx.global);

(function (nx, global) {

    /**
     * Tooltip mixin class
     * @class nx.graphic.Topology.TooltipMixin
     *
     */

    nx.define("nx.graphic.Topology.TooltipMixin", {
        events: [],
        properties: {
            /**
             * Set/get the tooltip manager config
             * @property tooltipManagerConfig
             */
            tooltipManagerConfig: {
                get: function () {
                    return this._tooltipManagerConfig || {};
                },
                set: function (value) {
                    var tooltipManager = this.tooltipManager();
                    if (tooltipManager) {
                        tooltipManager.sets(value);
                    }
                    this._tooltipManagerConfig = value;
                }
            },
            /**
             * get tooltip manager
             * @property tooltipManager
             */
            tooltipManager: {
                value: function () {
                    var config = this.tooltipManagerConfig();
                    return new nx.graphic.Topology.TooltipManager(nx.extend({}, {topology: this}, config));
                }
            }
        },
        methods: {

        }
    });


})(nx, nx.global);
(function (nx, global) {
    /**
     * Scene mixin
     * @class nx.graphic.Topology.SceneMixin
     * @module nx.graphic.Topology
     *
     */
    nx.define("nx.graphic.Topology.SceneMixin", {
        events: [],
        properties: {
            /**
             * @property scenesMap
             */
            scenesMap: {
                value: function () {
                    return {};
                }
            },
            /**
             * @property scenes
             */
            scenes: {
                value: function () {
                    return [];
                }
            },
            currentScene: {},
            /**
             * Current scene name
             * @property currentSceneName
             */
            currentSceneName: {},
            sceneEnabled: {
                value: true
            }
        },
        methods: {
            initScene: function () {
                this.registerScene("default", "nx.graphic.Topology.DefaultScene");
                this.registerScene("selection", "nx.graphic.Topology.SelectionNodeScene");
                this.registerScene("zoomBySelection", "nx.graphic.Topology.ZoomBySelection");
                this.activateScene('default');
                this._registerEvents();

            },
            /**
             * Register a scene to topology
             * @method registerScene
             * @param name {String} for reference to a certain scene
             * @param inClass <String,Class> A scene class name or a scene class instance, which is subclass of nx.graphic.Topology.Scene
             */
            registerScene: function (name, inClass) {
                var cls;
                if (name && inClass) {
                    var scene;
                    var scenesMap = this.scenesMap();
                    var scenes = this.scenes();
                    if (!nx.is(inClass, 'String')) {
                        scene = inClass;
                    } else {
                        cls = nx.path(global, inClass);
                        if (cls) {
                            scene = new cls();
                        } else {
                            //nx.logger.log('wrong scene name');
                        }
                    }
                    if (scene) {
                        scene.topology(this);
                        scenesMap[name] = scene;
                        scenes.push(scene);
                    }
                }
            },
            /**
             * Activate a scene, topology only has one active scene.
             * @method activateScene
             * @param name {String} Scene name which be passed at registerScene
             */
            activateScene: function (name) {
                var scenesMap = this.scenesMap();
                var sceneName = name || 'default';
                var scene = scenesMap[sceneName] || scenesMap["default"];
                //
                this.deactivateScene();
                this.currentScene(scene);
                this.currentSceneName(sceneName);

                scene.activate();
                this.fire("switchScene", {
                    name: name,
                    scene: scene
                });
                return scene;
            },
            /**
             * Deactivate a certain scene
             * @method deactivateScene
             */
            deactivateScene: function () {
                if (this.currentScene() && this.currentScene().deactivate) {
                    this.currentScene().deactivate();
                }
                this.currentScene(null);
            },
            disableCurrentScene: function (value) {
                this.sceneEnabled(!value);
            },
            _registerEvents: function () {
                nx.each(this.__events__, this._aop = function (eventName) {
                    this.upon(eventName, function (sender, data) {
                        this.dispatchEvent(eventName, sender, data);
                    }, this);
                }, this);
            },
            dispatchEvent: function (eventName, sender, data) {
                if (this.sceneEnabled()) {
                    var currentScene = this.currentScene();
                    if (currentScene.dispatch) {
                        currentScene.dispatch(eventName, sender, data);
                    }
                    if (currentScene[eventName]) {
                        currentScene[eventName].call(currentScene, sender, data);
                    }
                }
            }
        }
    });
})(nx, nx.global);
(function(nx, global) {
    /**
     * Layout mixin class
     * @class nx.graphic.Topology.LayoutMixin
     * @module nx.graphic.Topology
     */


    var __layouts = {
        'force': 'nx.graphic.Topology.NeXtForceLayout',
        'TURKEYMap': 'nx.graphic.Topology.TURKEYMapLayout',
        //'WorldMap': nx.graphic.Topology.WorldMapLayout,
        'hierarchicalLayout': 'nx.graphic.Topology.HierarchicalLayout',
        'enterpriseNetworkLayout': 'nx.graphic.Topology.EnterpriseNetworkLayout'
    };


    var CLS = nx.define("nx.graphic.Topology.LayoutMixin", {
        events: [],
        properties: {
            /**
             * Layout map
             * @property  layoutMap
             */
            layoutMap: {
                value: function() {
                    return {};
                }
            },
            /**
             * Current layout type
             * @property layoutType
             */
            layoutType: {
                value: null
            },
            /**
             * Current layout config
             * @property layoutConfig
             */
            layoutConfig: {
                value: null
            }
        },
        methods: {
            initLayout: function() {

                var layouts = nx.extend({},__layouts,nx.graphic.Topology.layouts);

                nx.each(layouts, function(cls, name) {
                    var instance;
                    if (nx.is(cls, 'Function')) {
                        instance = new cls();
                    } else {
                        var clz = nx.path(global, cls);
                        if (!clz) {
                            throw "Error on instance node class";
                        } else {
                            instance = new clz();
                        }
                    }

                    this.registerLayout(name, instance);

                }, this);
            },
            /**
             * Register a layout
             * @method registerLayout
             * @param name {String} layout name
             * @param cls {Object} layout class instance
             */
            registerLayout: function(name, cls) {
                var layoutMap = this.layoutMap();
                layoutMap[name] = cls;

                if (cls.topology) {
                    cls.topology(this);
                }
            },
            /**
             * Get layout instance by name
             * @method getLayout
             * @param name {String}
             * @returns {*}
             */
            getLayout: function(name) {
                var layoutMap = this.layoutMap();
                return layoutMap[name];
            },
            /**
             * Activate a layout
             * @param inName {String} layout name
             * @param inConfig {Object} layout config object
             * @param callback {Function} callback for after apply a layout
             */
            activateLayout: function(inName, inConfig, callback) {
                var layoutMap = this.layoutMap();
                var name = inName || this.layoutType();
                var config = inConfig || this.layoutConfig();
                if (layoutMap[name] && layoutMap[name].process) {
                    layoutMap[name].process(this.graph(), config, callback);
                    this.layoutType(name);
                }
            },
            deactivateLayout: function(name) {

            }
        }
    });


})(nx, nx.global);
(function(nx, global) {
    /**
     * Topology's batch operation class
     * @class nx.graphic.Topology.Categories
     * @module nx.graphic.Topology
     */
    nx.define("nx.graphic.Topology.Categories", {
        events: [],
        properties: {
            /**
             * 
             * @property loading
             */
            loading: {
                get: function() {
                    return this._loading || false;
                },
                set: function(value) {
                    this._loading = value;
                    if (value) {
                        nx.dom.Document.html().addClass('n-waitCursor');
                        this.view().dom().addClass('n-topology-loading');
                        this.view('loading').dom().setStyle('display', 'block');
                    } else {
                        nx.dom.Document.html().removeClass('n-waitCursor');
                        this.view().dom().removeClass('n-topology-loading');
                        this.view('loading').dom().setStyle('display', 'none');
                    }

                }
            },
        },
        methods: {
            /**
             * Show loading indicator
             * @method showLoading
             */
            showLoading: function() {
                this.loading(true);
            },
            /**
             * Hide loading indicator
             * @method hideLoading
             */
            hideLoading: function() {
                this.loading(false);
            },
            exportPNG: function() {

                this.fit();


                var serializer = new XMLSerializer();
                var stageScale = this.stageScale();
                var translateX = topo.matrix().x();
                var translateY = topo.matrix().y();
                var stage = this.stage().view().dom().$dom.querySelector('.stage').cloneNode(true);
                nx.each(stage.querySelectorAll('.fontIcon'), function(icon) {
                    icon.remove();
                });

                nx.each(stage.querySelectorAll('.link'), function(item) {
                    item.style.stroke = '#26A1C5';
                    item.style.fill = 'none';
                    item.style.background = 'transparent';
                });

                nx.each(stage.querySelectorAll('line.link-set-bg'), function(item) {
                    item.style.stroke = '#26A1C5';
                });

                nx.each(stage.querySelectorAll('text.node-label'), function(item) {
                    item.style.fontSize = '12px';
                    item.style.fontFamily = 'Tahoma';
                });

                nx.each(stage.querySelectorAll('.n-hidden'), function(hidden) {
                    hidden.remove();
                });

                nx.each(stage.querySelectorAll('.selectedBG'), function(item) {
                    item.remove();
                });

                nx.each(stage.querySelectorAll('[data-nx-type="nx.graphic.Topology.GroupsLayer"]'), function(item) {
                    item.remove();
                });


                var svg = serializer.serializeToString(stage);
                var svgString = '<svg width="' + this.width() + '" height="' + this.height() + '" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" >' + svg + "</svg>";
                var b64 = window.btoa(svgString);
                var img = this.view("img").dom().$dom;
                //var canvas = this.view("canvas").view().$dom;
                img.setAttribute('width', this.width());
                img.setAttribute('height', this.height());
                img.setAttribute('src', 'data:image/svg+xml;base64,' + b64);
                var canvas = this.view('canvas').dom().$dom;
                var ctx = canvas.getContext("2d");
                var revisionScale = this.revisionScale();
                var fontSize = 32 * revisionScale;


                ctx.fillStyle = '#fff';
                ctx.fillRect(0, 0, this.width(), this.height());


                ctx.drawImage(img, 0, 0);
                ctx.font = fontSize + "px next-font";
                this.eachNode(function(node) {
                    var iconType = node.iconType();
                    var iconObject = nx.graphic.Icons.get(iconType);
                    ctx.fillStyle = '#fff';
                    ctx.fillText(iconObject.font[1], node.x() / stageScale + translateX - 16 * revisionScale, node.y() / stageScale + translateY + 16 * revisionScale);
                    ctx.fillStyle = node.color() || '#26A1C5';
                    ctx.fillText(iconObject.font[0], node.x() / stageScale + translateX - 16 * revisionScale, node.y() / stageScale + translateY + 16 * revisionScale);
                });
                var link = document.createElement('a');
                link.setAttribute('href', canvas.toDataURL());
                link.setAttribute('download', (new Date()).getTime() + ".png");
                var event = document.createEvent('MouseEvents');
                event.initMouseEvent('click', true, true, window, 1, 0, 0, 0, 0, false, false, false, false, 0, null);
                link.dispatchEvent(event);
            },
            __drawBG: function(inBound) {
                var bound = inBound || this.stage().getContentBound();
                var bg = this.stage().view('bg');
                bg.sets({
                    x: bound.left,
                    y: bound.top,
                    width: bound.width,
                    height: bound.height,
                    visible: true
                });
                bg.set('visible', true);
            }
        }
    });


})(nx, nx.global);
(function(nx, global) {
    /**
     * Topology base class

     var topologyData = {
        nodes: [
            {"id": 0, "x": 410, "y": 100, "name": "12K-1"},
            {"id": 1, "x": 410, "y": 280, "name": "12K-2"},
            {"id": 2, "x": 660, "y": 280, "name": "Of-9k-03"},
            {"id": 3, "x": 660, "y": 100, "name": "Of-9k-02"},
            {"id": 4, "x": 180, "y": 190, "name": "Of-9k-01"}
        ],
        links: [
            {"source": 0, "target": 1},
            {"source": 1, "target": 2},
            {"source": 1, "target": 3},
            {"source": 4, "target": 1},
            {"source": 2, "target": 3},
            {"source": 2, "target": 0},
            {"source": 3, "target": 0},
            {"source": 3, "target": 0},
            {"source": 3, "target": 0},
            {"source": 0, "target": 4},
            {"source": 0, "target": 4},
            {"source": 0, "target": 3}
        ]
     };
     nx.define('MyTopology', nx.ui.Component, {
        view: {
            content: {
                type: 'nx.graphic.Topology',
                props: {
                    width: 800,
                    height: 800,
                    nodeConfig: {
                        label: 'model.id'
                    },
                    showIcon: true,
                    data: topologyData
                }
            }
        }
     });
     var app = new nx.ui.Application();
     var comp = new MyTopology();
     comp.attach(app);


     * @class nx.graphic.Topology
     * @extend nx.ui.Component
     * @module nx.graphic.Topology
     * @uses nx.graphic.Topology.Config
     * @uses nx.graphic.Topology.Projection
     * @uses nx.graphic.Topology.Graph
     * @uses nx.graphic.Topology.Event
     * @uses nx.graphic.Topology.StageMixin
     * @uses nx.graphic.Topology.NodeMixin
     * @uses nx.graphic.Topology.LinkMixin
     * @uses nx.graphic.Topology.LayerMixin
     * @uses nx.graphic.Topology.TooltipMixin
     * @uses nx.graphic.Topology.SceneMixin
     *
     */
    var extendEvent = nx.Object.extendEvent;
    var extendProperty = nx.Object.extendProperty;
    var extendMethod = nx.Object.extendMethod;
    var Topology = nx.define("nx.graphic.Topology", nx.ui.Component, {
        statics: {
            i18n: {
                'cantAggregateExtraNode': 'Can\'t aggregate extra node',
                'cantAggregateNodesInDifferentNodeSet': 'Can\'t aggregate nodes in different nodeSet'
            },
            extensions: [],
            registerExtension: function(cls) {
                var prototype = Topology.prototype;
                var classPrototype = cls.prototype;

                Topology.extensions.push(cls);

                nx.each(cls.__events__, function(name) {
                    extendEvent(prototype, name);
                });

                nx.each(cls.__properties__, function(name) {
                    extendProperty(prototype, name, classPrototype[name].__meta__);
                });

                nx.each(cls.__methods__, function(name) {
                    if (name !== 'init') {
                        extendMethod(prototype, name, classPrototype[name]);
                    }
                });
            },
            layouts: {}
        },
        mixins: [
            nx.graphic.Topology.Config,
            nx.graphic.Topology.Graph,
            nx.graphic.Topology.Event,
            nx.graphic.Topology.StageMixin,
            nx.graphic.Topology.NodeMixin,
            nx.graphic.Topology.LinkMixin,
            nx.graphic.Topology.LayerMixin,
            nx.graphic.Topology.LayoutMixin,
            nx.graphic.Topology.TooltipMixin,
            nx.graphic.Topology.SceneMixin,
            nx.graphic.Topology.Categories
        ],
        events: ['clear'],
        view: {
            props: {
                'class': ['n-topology', '{#themeClass}'],
                tabindex: '0',
                style: {
                    width: "{#width}",
                    height: "{#height}"
                }
            },
            content: [{
                    name: "stage",
                    type: "nx.graphic.Stage",
                    props: {
                        width: "{#width}",
                        height: "{#height}",
                        padding: '{#padding}',
                        matrixObject: '{#matrix,direction=<>}',
                        stageScale: '{#stageScale,direction=<>}'
                    },
                    events: {
                        ':mousedown': '{#_pressStage}',
                        ':touchstart': '{#_pressStage}',
                        'click': '{#_clickStage}',
                        'touchend': '{#_clickStage}',
                        'mousewheel': '{#_mousewheel}',
                        'DOMMouseScroll': '{#_mousewheel}',
                        'dragStageStart': '{#_dragStageStart}',
                        'dragStage': '{#_dragStage}',
                        'dragStageEnd': '{#_dragStageEnd}',
                        'stageTransitionEnd': '{#_stageTransitionEnd}'

                    }
                }, {
                    name: 'nav',
                    type: 'nx.graphic.Topology.Nav',
                    props: {
                        visible: '{#showNavigation}',
                        showIcon: '{#showIcon,direction=<>}'
                    }
                }, {
                    name: 'loading',
                    props: {
                        'class': 'n-topology-loading'
                    },
                    content: {
                        tag: 'ul',
                        props: {
                            items: new Array(10),
                            template: {
                                tag: 'li'
                            }
                        }
                    }
                },
                //                {
                //                    type: 'nx.graphic.Topology.Thumbnail',
                //                    props: {
                //                        width: "{#width}",
                //                        height: "{#height}"
                //                    }
                //                },
                {
                    name: 'img',
                    tag: 'img',
                    props: {
                        style: {
                            'display': 'none'
                        }
                    }
                }, {
                    name: 'canvas',
                    tag: 'canvas',
                    props: {
                        width: "{#width}",
                        height: "{#height}",
                        style: {
                            'display': 'none'
                        }
                    }
                }

            ],
            events: {
                'contextmenu': '{#_contextmenu}',
                'keydown': '{#_key}'
            }
        },
        properties: {},
        methods: {
            init: function(args) {
                this.inherited(args);
                this.sets(args);

                this.initStage();
                this.initLayer();
                this.initGraph();
                this.initNode();
                this.initScene();
                this.initLayout();


                nx.each(Topology.extensions, function(cls) {
                    var ctor = cls.__ctor__;
                    if (ctor) {
                        ctor.call(this);
                    }
                }, this);


            },
            attach: function(args) {
                this.inherited(args);
                this._adaptiveTimer();
            },
            /**
             * Clear all layer's content
             * @method clear
             */
            clear: function() {
                this.status('cleared');
                if (this._nodesAnimation) {
                    this._nodesAnimation.stop();
                }
                this.graph().clear();
                this.tooltipManager().closeAll();
                nx.each(this.layers(), function(layer, name) {
                    layer.clear();
                });
                this.blockEvent(false);
                this.fire('clear');
                if (this.width() && this.height()) {
                    this.status('appended');
                }
            },
            dispose: function() {
                this.status('disposed');
                this.tooltipManager().dispose();
                this.graph().dispose();

                nx.each(this.layers(), function(layer) {
                    layer.dispose();
                });
                this.blockEvent(false);
                this.inherited();
            }
        }
    });
})(nx, nx.global);
(function (nx, global) {

    /**
     * Topology basic layer class
     * @class nx.graphic.Topology.Layer
     * @extend nx.graphic.Group
     * @module nx.graphic.Topology
     */
    nx.define("nx.graphic.Topology.Layer", nx.graphic.Group, {
        view: {
            type: 'nx.graphic.Group',
            props: {
                class: "layer"
            }
        },
        properties: {
            /**
             * Get topology
             * @property topology
             */
            topology: {
                value: null
            },
            highlightedElements: {
                value: function () {
                    return new nx.data.UniqObservableCollection();
                }
            },
            activeElements: {
                value: function () {
                    return new nx.data.UniqObservableCollection();
                }
            },
            /**
             * Get fade status.
             * @property fade
             * @readOnly
             */
            fade: {
                dependencies: "forceFade",
                value: function (forceFade) {
                    return (forceFade === true || forceFade === false) ? forceFade : this._fade;
                }
            },
            fadeUpdater_internal_: {
                dependencies: "fade",
                update: function (fade) {
                    if (fade) {
                        this.dom().addClass("fade-layer");
                    } else {
                        this.dom().removeClass("fade-layer");
                    }
                }
            },
            /**
             * Force layer fade.
             * @property forceFade
             */
            forceFade: {}
        },
        methods: {
            init: function (args) {
                this.inherited(args);
                this.view().set("data-nx-type", this.__className__);

                var highlightedElements = this.highlightedElements();
                var activeElements = this.activeElements();

                highlightedElements.on('change', function (sender, args) {
                    if (args.action == 'add') {
                        nx.each(args.items, function (el) {
                            el.dom().addClass("fade-highlight-item");
                        });
                    } else if (args.action == 'remove' || args.action == "clear") {
                        nx.each(args.items, function (el) {
                            /* jslint -W030 */
                            el.dom() && el.dom().removeClass("fade-highlight-item");
                        });
                    }
                    if (highlightedElements.count() === 0 && activeElements.count() === 0) {
                        this.fadeIn();
                    } else {
                        this.fadeOut();
                    }
                }, this);


                activeElements.on('change', function (sender, args) {
                    if (args.action == 'add') {
                        nx.each(args.items, function (el) {
                            el.dom().addClass("fade-active-item");
                        });
                    } else if (args.action == 'remove' || args.action == "clear") {
                        nx.each(args.items, function (el) {
                            /* jslint -W030 */
                            el.dom() && el.dom().removeClass("fade-active-item");
                        });
                    }
                    if (highlightedElements.count() === 0 && activeElements.count() === 0) {
                        this.fadeIn();
                    } else {
                        this.fadeOut();
                    }
                }, this);

            },
            /**
             * Factory function, draw group
             */
            draw: function () {

            },
            /**
             * Show layer
             * @method show
             */
            show: function () {
                this.visible(true);
            },
            /**
             * Hide layer
             * @method hide
             */
            hide: function () {
                this.visible(false);
            },
            /**
             * fade out layer
             * @method fadeOut
             * @param [force] {Boolean} force layer fade out and can't fade in
             * @param [callback] {Function} callback after fade out
             * @param [context] {Object} callback context
             */
            fadeOut: function (force, callback, context) {
                if (force) {
                    this.forceFade(true);
                } else if (!this.forceFade()) {
                    this.fade(true);
                }
            },
            /**
             * FadeIn layer's fade statues
             * @param force {Boolean} force recover all items
             * @param [callback] {Function} callback after fade out
             * @param [context] {Object} callback context
             */
            fadeIn: function (force, callback, context) {
                if (this.forceFade() === true) {
                    if (force) {
                        this.forceFade(null);
                        this.fade(false);
                    }
                } else {
                    this.fade(false);
                }
            },
            /**
             * Fade in layer
             * @method fadeIn
             * @param force {Boolean} force recover all items
             * @param [callback] {Function} callback after fade out
             * @param [context] {Object} callback context
             */
            recover: function (force, callback, context) {
                this.fadeIn(force, callback, context);
            },
            /**
             * clear layer's content
             * @method clear
             */
            clear: function () {
                this.highlightedElements().clear();
                this.activeElements().clear();
                this.view().dom().empty();
            },
            dispose: function () {
                this.clear();
                this.highlightedElements().clear();
                this.activeElements().clear();
                this.inherited();
            }
        }
    });
})(nx, nx.global);

(function (nx, global) {

    nx.define('nx.graphic.Topology.NodeWatcher', nx.Observable, {
        properties: {
            nodes: {
                get: function () {
                    return this._nodes || [];
                },
                set: function (inNodes) {
                    var updater = this.updater();
                    var vertices = this.vertices();

                    if (vertices.length !== 0) {
                        nx.each(vertices, function (vertex) {
                            vertex.unwatch('generated', updater, this);
                        }, this);
                        vertices.length = 0;
                    }

                    if (!inNodes) {
                        return;
                    }

                    var nodes = inNodes;
                    if (!nx.is(nodes, Array) && !nx.is(nodes, nx.data.ObservableCollection)) {
                        nodes = [nodes];
                    }
                    nx.each(nodes, function (item) {
                        var vertex = this._getVertex(item);
                        if (vertex && vertices.indexOf(vertex) == -1) {
                            vertices.push(vertex);
                        }
                    }, this);


                    //todo
                    if (nx.is(nodes, nx.data.ObservableCollection)) {
                        nodes.on('change', function (sender, args) {
                            var action = args.action;
                            var items = args.items;
                            if (action == 'add') {

                            } else if (action == 'remove') {

                            } else if (action == 'clear') {

                            }
                        });
                    }

                    var observePosition = this.observePosition();
                    nx.each(vertices, function (vertex) {
                        vertex.watch('generated', updater, this);
                        if (observePosition) {
                            vertex.on('updateCoordinate', updater, this);
                        }
                    }, this);

                    updater();
                    this._nodes = nodes;
                }
            },
            updater: {
                value: function () {
                    return function () {

                    };
                }
            },
            topology: {
                set: function (topo) {
                    if (topo && topo.graph()) {
                        var graph = topo.graph();
                        graph.on("addVertexSet", this.update, this);
                        graph.on("removeVertexSet", this.update, this);
                        graph.on("deleteVertexSet", this.update, this);
                        graph.on("updateVertexSet", this.update, this);
                    }
                    this._topology = topo;
                }
            },
            vertices: {
                value: function () {
                    return [];
                }
            },
            observePosition: {
                value: false
            }
        },
        methods: {
            _getVertex: function (value) {
                var vertex;
                var topo = this.topology();
                if (topo && topo.graph()) {
                    var graph = topo.graph();
                    if (nx.is(value, nx.graphic.Topology.AbstractNode)) {
                        vertex = value.model();
                    } else if (graph.getVertex(value)) {
                        vertex = graph.getVertex(value);
                    }
                }
                return vertex;
            },
            getNodes: function (includeParent) {
                var nodes = [];
                var topo = this.topology();
                var vertices = this.vertices();
                nx.each(vertices, function (vertex) {
                    var id = vertex.id();
                    var node = topo.getNode(id);
                    if (includeParent !== false && (!node || vertex.generated() === false)) {
                        var generatedRootVertexSet = vertex.generatedRootVertexSet();
                        if (generatedRootVertexSet) {
                            node = topo.getNode(generatedRootVertexSet.id());
                        }
                    }

                    if (node && nodes.indexOf(node)) {
                        nodes.push(node);
                    }
                });

                return nodes;
            },
            update: function () {
                var updater = this.updater();
                var vertices = this.vertices();
                if (vertices.length !== 0) {
                    updater();
                }
            },
            dispose: function () {
                var topo = this.topology();
                if (topo && topo.graph()) {
                    var graph = topo.graph();
                    graph.off("addVertexSet", this.update, this);
                    graph.off("removeVertexSet", this.update, this);
                    graph.off("deleteVertexSet", this.update, this);
                    graph.off("updateVertexSet", this.update, this);
                }
                this.inherited();
            }

        }
    });
})(nx, nx.global);
(function (nx, global) {

    var Vector = nx.geometry.Vector;
    /**
     * Abstract node class
     * @class nx.graphic.Topology.AbstractNode
     * @extend nx.graphic.Group
     * @module nx.graphic.Topology
     */
    nx.define("nx.graphic.Topology.AbstractNode", nx.graphic.Group, {
        events: ['updateNodeCoordinate', 'selectNode', 'remove'],
        properties: {
            /**
             * Get  node's absolute position
             * @property  position
             */
            position: {
                get: function () {
                    return {
                        x: this._x || 0,
                        y: this._y || 0
                    };
                },
                set: function (obj) {
                    var isModified = false;
                    if (obj.x != null && obj.x !== this._x && !this._lockXAxle) {
                        this._x = obj.x;
                        this.notify("x");
                        isModified = true;
                    }

                    if (obj.y != null && obj.y !== this._y && !this._lockYAxle) {
                        this._y = obj.y;
                        this.notify("y");
                        isModified = true;
                    }

                    if (isModified) {
                        var model = this.model();
                        model.position({
                            x: this._x,
                            y: this._y
                        });

                        this.view().setTransform(this._x, this._y);
                    }
                }
            },
            absolutePosition: {
                //dependencies: ['position'],
                get: function () {
                    var position = this.position();
                    var topoMatrix = this.topology().matrix();
                    var stageScale = topoMatrix.scale();
                    return {
                        x: position.x * stageScale + topoMatrix.x(),
                        y: position.y * stageScale + topoMatrix.y()
                    };
                },
                set: function (position) {
                    if (position == null || position.x == null || position.y == null) {
                        return false;
                    }
                    var topoMatrix = this.topology().matrix();
                    var stageScale = topoMatrix.scale();

                    this.position({
                        x: (position.x - topoMatrix.x()) / stageScale,
                        y: (position.y - topoMatrix.y()) / stageScale
                    });
                }
            },
            matrix: {
                //dependencies: ['position'],
                get: function () {
                    var position = this.position();
                    var stageScale = this.stageScale();
                    return [
                        [stageScale, 0, 0],
                        [0, stageScale, 0],
                        [position.x, position.y, 1]
                    ];
                }
            },
            /**
             * Get  node's vector
             * @property  vector
             */
            vector: {
                //dependencies: ['position'],
                get: function () {
                    return new Vector(this.x(), this.y());
                }
            },
            /**
             * Get/set  node's x position, suggest use position
             * @property  x
             */
            x: {
                ////dependencies: ['position'],
                get: function () {
                    return this._x || 0;
                },
                set: function (value) {
                    return this.position({x: parseFloat(value)});
                }
            },
            /**
             * Get/set  node's y position, suggest use position
             * @property  y
             */
            y: {
                ////dependencies: ['position'],
                get: function () {
                    return this._y || 0;
                },
                set: function (value) {
                    return this.position({y: parseFloat(value)});
                }
            },
            /**
             * Lock x axle, node only can move at y axle
             * @property lockXAxle {Boolean}
             */
            lockXAxle: {
                value: false
            },
            /**
             * Lock y axle, node only can move at x axle
             * @property lockYAxle
             */
            lockYAxle: {
                value: false
            },
            /**
             * Get topology stage scale
             * @property scale
             */
            stageScale: {
                set: function (value) {
                    this.view().setTransform(null, null, value);
                }
            },
            /**
             * Get topology instance
             * @property  topology
             */
            topology: {},
            /**
             * Get node's id
             * @property id
             */
            id: {
                get: function () {
                    return this.model().id();
                }
            },
            /**
             * Node is been selected statues
             * @property selected
             */
            selected: {
                value: false
            },
            /**
             * Get/set node's usablity
             * @property enable
             */
            enable: {
                value: true
            },
            /**
             * Get node self reference
             * @property node
             */
            node: {
                get: function () {
                    return this;
                }
            },
            showIcon: {
                value: true
            },
            links: {
                get: function () {
                    var links = {};
                    this.eachLink(function (link, id) {
                        links[id] = link;
                    });
                    return links;
                }
            },
            linkSets: {
                get: function () {
                    var linkSets = {};
                    this.eachLinkSet(function (linkSet, linkKey) {
                        linkSets[linkKey] = linkSet;
                    });
                    return linkSets;
                }
            },
            connectedNodes: {
                get: function () {
                    var nodes = {};
                    this.eachConnectedNode(function (node, id) {
                        nodes[id] = node;
                    });
                    return nodes;
                }
            }
        },
        view: {
            type: 'nx.graphic.Group'
        },
        methods: {
            init: function (args) {
                this.inherited(args);
                this.watch('selected', function (prop, value) {
                    /**
                     * Fired when node been selected or cancel selected
                     * @event selectNode
                     * @param sender{Object} trigger instance
                     * @param event {Object} original event object
                     */
                    this.fire('selectNode', value);
                }, this);
            },
            /**
             * Factory function , will be call when set model
             */
            setModel: function (model) {
                this.model(model);
                model.upon('updateCoordinate', function (sender, args) {
                    this.position({
                        x: args.newPosition.x,
                        y: args.newPosition.y
                    });
                    /**
                     * Fired when node update coordinate
                     * @event updateNodeCoordinate
                     * @param sender{Object} trigger instance
                     * @param event {Object} original event object
                     */
                    this.fire('updateNodeCoordinate');
                }, this);


                this.setBinding('visible', 'model.visible,direction=<>', this);
                this.setBinding('selected', 'model.selected,direction=<>', this);

                //initialize position
                this.position(model.position());
            },
            update: function () {

            },
            /**
             * Move node certain distance
             * @method move
             * @param x {Number}
             * @param y {Number}
             */
            move: function (x, y) {
                var position = this.position();
                this.position({x: position.x + x || 0, y: position.y + y || 0});
            },
            /**
             * Move to a position
             * @method moveTo
             * @param x {Number}
             * @param y {Number}
             * @param callback {Function}
             * @param isAnimated {Boolean}
             * @param duration {Number}
             */
            moveTo: function (x, y, callback, isAnimated, duration) {
                if (isAnimated !== false) {
                    var obj = {to: {}, duration: duration || 400};
                    obj.to.x = x;
                    obj.to.y = y;

                    if (callback) {
                        obj.complete = callback;
                    }
                    this.animate(obj);
                } else {
                    this.position({x: x, y: y});
                }
            },
            /**
             * Use css translate to move node for high performance, when use this method, related link can't recive notification. Could hide links during transition.
             * @method translateTo
             * @param x {Number}
             * @param y {Number}
             * @param callback {Function}
             */
            translateTo: function (x, y, callback) {

            },
            /**
             * Iterate  all connected links to this node
             * @method eachLink
             * @param callback
             * @param context
             */
            eachLink: function (callback, context) {
                var model = this.model();
                var topo = this.topology();
                //todo

                this.eachLinkSet(function (linkSet) {
                    linkSet.eachLink(callback, context || this);
                });

            },
            eachLinkSet: function (callback, context) {
                var model = this.model();
                var topo = this.topology();
                nx.each(model.edgeSets(), function (edgeSet, linkKey) {
                    var linkSet = topo.getLinkSetByLinkKey(linkKey);
                    if (linkSet) {
                        callback.call(context || this, linkSet, linkKey);
                    }
                }, this);
                nx.each(model.edgeSetCollections(), function (edgeSetCollection, linkKey) {
                    var linkSet = topo.getLinkSetByLinkKey(linkKey);
                    if (linkSet) {
                        callback.call(context || this, linkSet, linkKey);
                    }
                }, this);
            },
            /**
             * Iterate all connected node
             * @method eachConnectedNode
             * @param callback {Function}
             * @param context {Object}
             */
            eachConnectedNode: function (callback, context) {
                var topo = this.topology();
                this.model().eachConnectedVertex(function (vertex, id) {
                    var node = topo.getNode(id);
                    if (node) {
                        callback.call(context || this, node, id);
                    }
                });
            },
            dispose: function () {
                var model = this.model();
                if (model) {
                    model.upon('updateCoordinate', null);
                }
                this.fire('remove');
                this.inherited();
            }
        }
    });


})(nx, nx.global);
(function (nx, global) {
    /**
     * Node class
     * @class nx.graphic.Topology.Node
     * @extend nx.graphic.Topology.AbstractNode
     * @module nx.graphic.Topology
     */
    nx.define('nx.graphic.Topology.Node', nx.graphic.Topology.AbstractNode, {
        events: ['pressNode', 'clickNode', 'enterNode', 'leaveNode', 'dragNodeStart', 'dragNode', 'dragNodeEnd', 'selectNode'],
        properties: {
            /**
             * Get node's label
             * @property label
             */
            label: {
                set: function (inValue) {
                    var label = this._processPropertyValue(inValue);
                    var el = this.view('label');
                    el.set('text', label);
                    if (label != null) {
                        this.calcLabelPosition();
                    }
                    this._label = label;
                }
            },
            /**
             * Node icon's type
             * @method iconType {String}
             */
            iconType: {
                get: function () {
                    return this.view('icon').get('iconType');
                },
                set: function (inValue) {
                    var value = this._processPropertyValue(inValue);
                    if (value && this._iconType !== value) {
                        this._iconType = value;
                        this.view('icon').set('iconType', value);
                        return true;
                    } else {
                        return false;
                    }
                }
            },

            /**
             * Show/hide node's icon
             * @property showIcon
             */
            showIcon: {
                set: function (inValue) {
                    var value = this._processPropertyValue(inValue);
                    this._showIcon = value;

                    this.view('icon').set('showIcon', value);

                    if (this._label != null) {
                        this.calcLabelPosition();
                    }
                    if (this._selected) {
                        this.view('selectedBG').set('r', this.selectedRingRadius());
                    }
                }
            },
            enableSmartLabel: {
                value: true
            },
            labelAngle: {
                value: 90
            },
            /**
             * Set node's label visible
             * @property labelVisibility {Boolean} true
             */
            labelVisibility: {
                value: true,
                set: function (inValue) {
                    var value = this._processPropertyValue(inValue);
                    var el = this.view('label');
                    el.visible(value);
                    this._labelVisibility = value;
                }
            },
            revisionScale: {
                set: function (value) {
                    var topo = this.topology();
                    var icon = this.view('icon');
                    icon.set('scale', value);
                    if (topo.showIcon()) {
                        icon.showIcon(value > 0.2);
                    } else {
                        icon.showIcon(false);
                    }

                    if (value > 0.4) {
                        this.view('label').set('visible', this._labelVisibility == null ? true : this._labelVisibility);
                    } else {
                        this.view('label').set('visible', false);
                    }

                    if (this._label != null) {
                        this.calcLabelPosition();
                    }
                    if (this._selected) {
                        this.view('selectedBG').set('r', this.selectedRingRadius());
                    }

                }
            },
            /**
             * Set the node's color
             * @property color
             */
            color: {
                set: function (inValue) {
                    var value = this._processPropertyValue(inValue);
                    //                    this.view('graphic').dom().setStyle('fill', value);
                    this.view('label').dom().setStyle('fill', value);
                    this.view('icon').set('color', value);
                    this._color = value;
                }
            },

            /**
             * Set node's scale
             * @property scale {Number}
             */
            scale: {
                get: function () {
                    return this.view('graphic').scale();
                },
                set: function (inValue) {
                    var value = this._processPropertyValue(inValue);
                    this.view('graphic').setTransform(null, null, value);
                    this.calcLabelPosition(true);
                }
            },


            selectedRingRadius: {
                get: function () {
                    var bound = this.getBound(true);
                    var radius = Math.max(bound.height, bound.width) / 2;
                    return radius + (this.selected() ? 10 : -4);
                }
            },
            /**
             * Get/set node's selected statues
             * @property selected
             */
            selected: {
                get: function () {
                    return this._selected || false;
                },
                set: function (inValue) {
                    var value = this._processPropertyValue(inValue);
                    if (this._selected == value) {
                        return false;
                    }
                    this._selected = value;
                    this.dom().setClass("node-selected", !!value);
                    if (value) {
                        this.view('selectedBG').set('r', this.selectedRingRadius());
                    }
                    return true;
                }
            },
            enable: {
                get: function () {
                    return this._enable != null ? this._enable : true;
                },
                set: function (inValue) {
                    var value = this._processPropertyValue(inValue);
                    this._enable = value;
                    if (value) {
                        this.dom().removeClass('disable');
                    } else {
                        this.dom().addClass('disable');
                    }
                }
            },
            parentNodeSet: {
                get: function () {
                    var vertexSet = this.model().parentVertexSet();
                    if (vertexSet) {
                        return this.topology().getNode(vertexSet.id());
                    } else {
                        return null;
                    }
                }
            },
            rootNodeSet: {
                get: function () {
                    var model = this.model();
                    if (model.rootVertexSet()) {
                        return this.topology().getNode(model.rootVertexSet().id());
                    } {
                        return null;
                    }
                }
            }
        },
        view: {
            type: 'nx.graphic.Group',
            props: {
                'class': 'node'
            },
            content: [{
                    name: 'label',
                    type: 'nx.graphic.Text',
                    props: {
                        'class': 'node-label',
                        'alignment-baseline': 'central',
                        y: 12
                    }
                }, {
                    name: 'selectedBG',
                    type: 'nx.graphic.Circle',
                    props: {
                        'class': 'selectedBG',
                        'r': 26
                    }
                }, {
                    type: 'nx.graphic.Group',
                    name: 'graphic',
                    content: [{
                        name: 'icon',
                        type: 'nx.graphic.Icon',
                        props: {
                            'class': 'icon',
                            'iconType': 'unknown',
                            'showIcon': false,
                            scale: 1
                        }
                    }],
                    events: {
                        'mousedown': '{#_mousedown}',
                        'touchstart': '{#_mousedown}',
                        'mouseup': '{#_mouseup}',

                        'mouseenter': '{#_mouseenter}',
                        'mouseleave': '{#_mouseleave}',

                        'dragstart': '{#_dragstart}',
                        'dragmove': '{#_drag}',
                        'dragend': '{#_dragend}'
                    }
                }


            ]
        },
        methods: {
            translateTo: function (x, y, callback, context) {
                var el = this.view();
                var position = this.position();
                el.setTransition(function () {
                    this.position({
                        x: x,
                        y: y
                    });
                    this.calcLabelPosition(true);

                    if (callback) {
                        callback.call(context || this);
                    }
                }, this, 0.5);
                if (position.x == x && position.y == y && callback) {
                    callback.call(context || this);
                } else {
                    el.setTransform(x, y, null, 0.9);
                }

            },
            /**
             * Get node bound
             * @param onlyGraphic {Boolean} is is TRUE, will only get graphic's bound
             * @returns {*}
             */
            getBound: function (onlyGraphic) {
                if (onlyGraphic) {
                    return this.view('graphic').getBound();
                } else {
                    return this.view().getBound();
                }
            },
            _mousedown: function (sender, event) {
                if (this.enable()) {
                    this._prevPosition = this.position();
                    event.captureDrag(this.view('graphic'), this.topology().stage());
                    this.fire('pressNode', event);
                }
            },
            _mouseup: function (sender, event) {
                if (this.enable()) {
                    var _position = this.position();
                    if (this._prevPosition && _position.x === this._prevPosition.x && _position.y === this._prevPosition.y) {
                        /**
                         * Fired when click a node
                         * @event clickNode
                         * @param sender{Object} trigger instance
                         * @param event {Object} original event object
                         */
                        this.fire('clickNode', event);
                    }
                }
            },
            _mouseenter: function (sender, event) {
                if (this.enable()) {
                    if (!this.__enter && !this._nodeDragging) {
                        /**
                         * Fired when mouse enter a node
                         * @event enterNode
                         * @param sender{Object} trigger instance
                         * @param event {Object} original event object
                         */
                        this.fire('enterNode', event);
                        this.__enter = true;
                    }
                }


            },
            _mouseleave: function (sender, event) {
                if (this.enable()) {
                    if (this.__enter && !this._nodeDragging) {
                        /**
                         * Fired when mouse leave a node
                         * @event leaveNode
                         * @param sender{Object} trigger instance
                         * @param event {Object} original event object
                         */
                        this.fire('leaveNode', event);
                        this.__enter = false;
                    }
                }
            },
            _dragstart: function (sender, event) {
                window.event = event;
                this._nodeDragging = true;
                if (this.enable()) {
                    /**
                     * Fired when start drag a node
                     * @event dragNodeStart
                     * @param sender{Object} trigger instance
                     * @param event {Object} original event object
                     */
                    this.fire('dragNodeStart', event);
                }
            },
            _drag: function (sender, event) {
                window.event = event;
                if (this.enable()) {
                    /**
                     * Fired when drag a node
                     * @event dragNode
                     * @param sender{Object} trigger instance
                     * @param event {Object} original event object
                     */
                    this.fire('dragNode', event);
                }
            },
            _dragend: function (sender, event) {
                window.event = event;
                this._nodeDragging = false;
                if (this.enable()) {
                    /**
                     * Fired when finish a node
                     * @event dragNodeEnd
                     * @param sender{Object} trigger instance
                     * @param event {Object} original event object
                     */
                    this.fire('dragNodeEnd', event);
                    this.updateConnectedNodeLabelPosition();
                }
            },

            updateConnectedNodeLabelPosition: function () {
                this.calcLabelPosition(true);
                this.eachConnectedNode(function (node) {
                    node.calcLabelPosition();
                }, this);
            },
            /**
             * Set label to a node
             * @method calcLabelPosition
             */
            calcLabelPosition: function (force) {
                if (this.topology().enableSmartLabel()) {

                    if (force) {
                        this._centralizedText();
                    } else {
                        //                        clearTimeout(this._centralizedTextTimer || 0);
                        //                        this._centralizedTextTimer = setTimeout(function () {
                        this._centralizedText();
                        //                        }.bind(this), 100);
                    }

                } else {
                    var dflt = this.topology().nodeConfig().labelAngle;
                    this.updateByMaxObtuseAngle(dflt >= 0 ? dflt : this.labelAngle());
                }
            },
            _centralizedText: function () {


                //
                var vertex = this.model();

                if (vertex === undefined) {
                    return;
                }

                var vertexID = vertex.id();
                var vectors = [];


                nx.each(vertex.edgeSets(), function (edgeSet) {
                    if (edgeSet.sourceID() !== vertexID) {
                        vectors.push(edgeSet.line().dir.negate());
                    } else {
                        vectors.push(edgeSet.line().dir);
                    }
                }, this);

                nx.each(vertex.edgeSetCollections(), function (esc) {
                    if (esc.sourceID() !== vertexID) {
                        vectors.push(esc.line().dir.negate());
                    } else {
                        vectors.push(esc.line().dir);
                    }
                }, this);


                //sort line by angle;
                vectors = vectors.sort(function (a, b) {
                    return a.circumferentialAngle() - b.circumferentialAngle();
                });


                // get the min incline angle

                var startVector = new nx.geometry.Vector(1, 0);
                var maxAngle = 0,
                    labelAngle;

                if (vectors.length === 0) {
                    labelAngle = 90;
                } else {
                    //add first item to vectors, for compare last item with first

                    vectors.push(vectors[0].rotate(359.9));

                    //find out the max incline angle
                    for (var i = 0; i < vectors.length - 1; i++) {
                        var inclinedAngle = vectors[i + 1].circumferentialAngle() - vectors[i].circumferentialAngle();
                        if (inclinedAngle < 0) {
                            inclinedAngle += 360;
                        }
                        if (inclinedAngle > maxAngle) {
                            maxAngle = inclinedAngle;
                            startVector = vectors[i];
                        }
                    }

                    // bisector angle
                    labelAngle = maxAngle / 2 + startVector.circumferentialAngle();

                    // if max that 360, reduce 360
                    labelAngle %= 360;
                }


                this.updateByMaxObtuseAngle(labelAngle);
            },
            /**
             * @method updateByMaxObtuseAngle
             * @method updateByMaxObtuseAngle
             * @param angle
             */
            updateByMaxObtuseAngle: function (angle) {

                var el = this.view('label');

                // find out the quadrant
                var quadrant = Math.floor(angle / 60);
                var anchor = 'middle';
                if (quadrant === 5 || quadrant === 0) {
                    anchor = 'start';
                } else if (quadrant === 2 || quadrant === 3) {
                    anchor = 'end';
                }

                //
                var size = this.getBound(true);
                var radius = Math.max(size.width / 2, size.height / 2) + (this.showIcon() ? 12 : 8);
                var labelVector = new nx.geometry.Vector(radius, 0).rotate(angle);


                el.set('x', labelVector.x);
                el.set('y', labelVector.y);
                //

                el.set('text-anchor', anchor);

                this._labelAngle = angle;

            },
            dispose: function () {
                clearTimeout(this._centralizedTextTimer);
                this.inherited();
            }
        }
    });
})(nx, nx.global);

(function (nx, global) {
    var util = nx.util;
    /**
     * Nodes layer
     Could use topo.getLayer('nodes') get this
     * @class nx.graphic.Topology.NodesLayer
     * @extend nx.graphic.Topology.Layer
     *
     */
    var CLZ = nx.define('nx.graphic.Topology.NodesLayer', nx.graphic.Topology.Layer, {
        statics: {
            defaultConfig: {}
        },
        events: ['clickNode', 'enterNode', 'leaveNode', 'dragNodeStart', 'dragNode', 'dragNodeEnd', 'hideNode', 'pressNode', 'selectNode', 'updateNodeCoordinate'],
        properties: {
            /**
             * Get all nodes instance
             * @property nodes {Array}
             */
            nodes: {
                get: function () {
                    return this.nodeDictionary().values().toArray();
                }
            },
            /**
             * Get all nodes instance map
             * @property nodesMap {Object}
             */
            nodesMap: {
                get: function () {
                    return this.nodeDictionary().toObject();
                }
            },
            /**
             * Nodes observable dictionary
             * @property nodeDictionary {nx.data.ObservableDictionary}
             */
            nodeDictionary: {
                value: function () {
                    return new nx.data.ObservableDictionary();
                }
            }
        },
        methods: {
            attach: function (args) {
                this.inherited(args);

                var topo = this.topology();
                topo.watch('stageScale', this.__watchStageScaleFN = function (prop, value) {
                    this.nodeDictionary().each(function (item) {
                        item.value().stageScale(value);
                    });
                }, this);

                topo.watch('revisionScale', this.__watchRevisionScale = function (prop, value) {
                    this.nodeDictionary().each(function (item) {
                        item.value().revisionScale(value);
                    }, this);
                }, this);
            },
            /**
             * Add node a nodes layer
             * @param vertex
             * @method addNode
             */
            addNode: function (vertex) {
                var id = vertex.id();
                var node = this._generateNode(vertex);
                this.nodeDictionary().setItem(id, node);
                return node;
            },

            /**
             * Remove node
             * @method removeNode
             * @param id
             */
            removeNode: function (id) {
                var nodeDictionary = this.nodeDictionary();
                var node = nodeDictionary.getItem(id);
                if (node) {
                    node.dispose();
                    nodeDictionary.removeItem(id);
                }
            },
            updateNode: function (id) {
                var nodeDictionary = this.nodeDictionary();
                var node = nodeDictionary.getItem(id);
                if (node) {
                    node.update();
                }
            },
            //get node instance class
            _getNodeInstanceClass: function (vertex) {
                var Clz;
                var topo = this.topology();
                var nodeInstanceClass = topo.nodeInstanceClass();
                if (nx.is(nodeInstanceClass, 'Function')) {
                    Clz = nodeInstanceClass.call(this, vertex);
                    if (nx.is(Clz, 'String')) {
                        Clz = nx.path(global, Clz);
                    }
                } else {
                    Clz = nx.path(global, nodeInstanceClass);
                }
                if (!Clz) {
                    throw "Error on instance node class";
                }
                return Clz;
            },

            _generateNode: function (vertex) {
                var id = vertex.id();
                var topo = this.topology();
                var stageScale = topo.stageScale();
                var Clz = this._getNodeInstanceClass(vertex);
                var node = new Clz({
                    topology: topo
                });
                node.setModel(vertex);
                node.attach(this.view());

                node.sets({
                    'class': 'node',
                    'data-id': id,
                    'stageScale': stageScale
                });


                this.updateDefaultSetting(node);
                //                setTimeout(function () {
                //                    this.updateDefaultSetting(node);
                //                }.bind(this), 0);
                return node;
            },


            updateDefaultSetting: function (node) {
                var topo = this.topology();
                // delegate events
                var superEvents = nx.graphic.Component.__events__;
                nx.each(node.__events__, function (e) {
                    if (superEvents.indexOf(e) == -1) {
                        node.on(e, function (sender, event) {
                            if (event instanceof MouseEvent) {
                                window.event = event;
                            }
                            this.fire(e, node);
                        }, this);
                    }
                }, this);

                //properties
                var nodeConfig = this.nodeConfig = nx.extend({
                    enableSmartLabel: topo.enableSmartLabel()
                }, CLZ.defaultConfig, topo.nodeConfig());
                delete nodeConfig.__owner__;
                nx.each(nodeConfig, function (value, key) {
                    util.setProperty(node, key, value, topo);
                }, this);

                util.setProperty(node, 'showIcon', topo.showIcon());

                if (topo.revisionScale() !== 1) {
                    node.revisionScale(topo.revisionScale());
                }


            },

            /**
             * Iterate all nodes
             * @method eachNode
             * @param callback
             * @param context
             */
            eachNode: function (callback, context) {
                this.nodeDictionary().each(function (item, id) {
                    callback.call(context || this, item.value(), id);
                });
            },
            /**
             * Get node by id
             * @param id
             * @returns {*}
             * @method getNode
             */
            getNode: function (id) {
                return this.nodeDictionary().getItem(id);
            },
            clear: function () {
                this.eachNode(function (node) {
                    node.dispose();
                });
                this.nodeDictionary().clear();
                this.inherited();

            },
            dispose: function () {
                this.clear();
                var topo = this.topology();
                if (topo) {
                    this.topology().unwatch('stageScale', this.__watchStageScaleFN, this);
                    this.topology().unwatch('revisionScale', this.__watchRevisionScale, this);
                    if (topo._activeNodesWatcher) {
                        topo._activeNodesWatcher.dispose();
                    }
                    if (topo._highlightedNodesWatcher) {
                        topo._highlightedNodesWatcher.dispose();
                    }

                }


                this.inherited();
            }
        }
    });


})(nx, nx.global);

(function (nx, global) {

    /**
     * NodeSet class
     * @class nx.graphic.Topology.NodeSet
     * @extend nx.graphic.Topology.Node
     * @module nx.graphic.Topology
     */

    nx.define("nx.graphic.Topology.NodeSet", nx.graphic.Topology.Node, {
        events: ['expandNode', 'collapseNode', 'beforeExpandNode', 'beforeCollapseNode'],
        properties: {
            /**
             * Get all sub nodes
             */
            nodes: {
                get: function () {
                    var nodes = {};
                    var topo = this.topology();
                    var model = this.model();
                    if (this.model().activated()) {
                        return;
                    }
                    nx.each(model.vertices(), function (vertex, id) {
                        var node = topo.getNode(id);
                        if (node) {
                            nodes[id] = node;
                        }
                    });

                    nx.each(model.vertexSet(), function (vertexSet, id) {
                        var nodeSet = topo.getNode(id);
                        if (nodeSet) {
                            if (nodeSet.activated()) {
                                nodes[id] = nodeSet;
                            } else {
                                nx.extend(nodes, nodeSet.nodes());
                            }
                        }
                    });
                    return nodes;
                }
            },
            nodeSets: {
                get: function () {
                    var nodeSets = {};
                    var topo = this.topology();
                    var model = this.model();
                    model.eachSubVertexSet(function (vertexSet, id) {
                        var nodeSet = topo.getNode(id);
                        if (nodeSet) {
                            nodeSets[id] = nodeSet;
                        }
                    }, this);
                    return nodeSets;
                }
            },
            /**
             * Collapsed statues
             * @property collapsed
             */
            collapsed: {
                get: function () {
                    return this._collapsed !== undefined ? this._collapsed : true;
                },
                set: function (inValue) {
                    var value = this._processPropertyValue(inValue);
                    if (this._collapsed !== value) {
                        this._collapsed = value;
                        if (value) {
                            this.collapse(this._animation);
                        } else {
                            this.expand(this._animation);
                        }
                        return true;
                    } else {
                        return false;
                    }
                }
            },
            activated: {
                value: true
            },
            /**
             * Show/hide node's icon
             * @property showIcon
             */
            showIcon: {
                set: function (inValue) {
                    var value = this._processPropertyValue(inValue);
                    this._showIcon = value;

                    this.view('icon').set('showIcon', value);
                    this.view('icon').set('visible', value);

                    if (this._label != null) {
                        this.calcLabelPosition();
                    }
                    if (this._selected) {
                        this.view('selectedBG').set('r', this.selectedRingRadius());
                    }

                    this._updateMinusIcon();
                }
            },
            revisionScale: {
                set: function (value) {
                    var topo = this.topology();
                    var icon = this.view('icon');
                    icon.set('scale', value);
                    if (topo.showIcon()) {
                        icon.showIcon(value > 0.2);
                        icon.set('visible', value > 0.2);
                    } else {
                        icon.showIcon(false);
                        icon.set('visible', false);
                    }
                    this._updateMinusIcon(value);

                    if (this._labelVisibility) {
                        this.view('label').set('visible', value > 0.4);
                    }
                }
            },
            animation: {
                value: true
            },
            expandable:{
                value: true
            },
            collapsible:{
                value: true
            }
        },
        view: {
            type: 'nx.graphic.Group',
            props: {
                'class': 'node'
            },
            content: [{
                name: 'label',
                type: 'nx.graphic.Text',
                props: {
                    'class': 'node-label',
                    'alignment-baseline': 'central',
                    y: 12
                }
            }, {
                name: 'selectedBG',
                type: 'nx.graphic.Circle',
                props: {
                    'class': 'selectedBG',
                    'r': 26
                }
            }, {
                type: 'nx.graphic.Group',
                name: 'graphic',
                content: [{
                    name: 'icon',
                    type: 'nx.graphic.Icon',
                    props: {
                        'class': 'icon',
                        'iconType': 'unknown',
                        'showIcon': false,
                        scale: 1
                    }
                }, {
                    name: 'minus',
                    type: 'nx.graphic.Icon',
                    props: {
                        'class': 'indicator',
                        'iconType': 'expand',
                        scale: 1
                    }
                }],
                events: {
                    'mousedown': '{#_mousedown}',
                    'touchstart': '{#_mousedown}',
                    'mouseup': '{#_mouseup}',

                    'mouseenter': '{#_mouseenter}',
                    'mouseleave': '{#_mouseleave}',

                    'dragstart': '{#_dragstart}',
                    'dragmove': '{#_drag}',
                    'dragend': '{#_dragend}'
                }
            }


            ]
        },
        methods: {
            setModel: function (model) {
                this.inherited(model);
                this.setBinding('activated', 'model.activated,direction=<>', this);
            },
            update: function () {
                //                this.view().visible(this.model().activated() && this.model().inheritedVisible());
            },
            expand: function (animation, callback, context) {
                this.fire('beforeExpandNode', this);
                if(this.expandable()) {
                    // remember the animation status
                    var _animation = this.animation();
                    this.animation(typeof animation === "boolean" ? animation : _animation);
                    // prepare to expand
                    this._collapsed = false;
                    this.selected(false);
                    this.model().activated(false);
                    // expand
                    this.topology().expandNodes(this.nodes(), this.position(), function () {
                        // set the result
                        this.fire('expandNode', this);
                        /* jslint -W030 */
                        callback && callback.call(context, this, this);
                    }, this, this.animation());
                    // restore the animation
                    this.animation(_animation);
                }
            },
            collapse: function (animation, callback, context) {
                this.fire('beforeCollapseNode');
                if(this.collapsible()) {
                    // remember the animation status
                    var _animation = this.animation();
                    this.animation(typeof animation === "boolean" ? animation : _animation);
                    // prepare to expand
                    this._collapsed = true;
                    this.selected(false);
                    this.model().activated(false);
                    this.topology().collapseNodes(this.nodes(), this.position(), function () {
                        this.model().activated(true);
                        this.fire('collapseNode', this);
                        /* jslint -W030 */
                        callback && callback.call(context, this, this);
                    }, this, this.animation());
                    // restore the animation
                    this.animation(_animation);
                }
            },
            expandNodes: function (callback, context) {
                if (!this.model().activated()) {
                    this.topology().expandNodes(this.nodes(), this.position(), callback, context);
                }
            },
            collapseNodes: function (callback, context) {
                this.topology().collapseNodes(this.nodes(), this.position(), callback, context);
            },
            _updateMinusIcon: function (revisionScale) {
                var icon = this.view('icon');
                var minus = this.view('minus');
                if (icon.showIcon()) {

                    if (revisionScale == 0.4) {
                        minus.scale(0.8);
                    } else {
                        minus.scale(1);
                    }

                    var iconSize = icon.size();
                    var iconScale = icon.scale();

                    minus.setTransform(iconSize.width * iconScale / 2, iconSize.height * iconScale / 2);

                } else {
                    minus.setTransform(0, 0);
                }
            }
        }

    });

})(nx, nx.global);

(function (nx, global) {
    var util = nx.util;
    var CLZ = nx.define('nx.graphic.Topology.NodeSetLayer', nx.graphic.Topology.Layer, {
        statics: {
            defaultConfig: {
                iconType: 'nodeSet',
                label: 'model.label'
            }
        },
        events: ['clickNodeSet', 'enterNodeSet', 'leaveNodeSet', 'dragNodeSetStart', 'dragNodeSet', 'dragNodeSetEnd', 'hideNodeSet', 'pressNodeSet', 'selectNodeSet', 'updateNodeSetCoordinate', 'expandNodeSet', 'collapseNodeSet', 'beforeExpandNodeSet', 'beforeCollapseNodeSet', 'updateNodeSet', 'removeNodeSet'],
        properties: {
            nodeSets: {
                get: function () {
                    return this.nodeSetDictionary().values().toArray();
                }
            },
            nodeSetMap: {
                get: function () {
                    return this.nodeSetDictionary().toObject();
                }
            },
            nodeSetDictionary: {
                value: function () {
                    return new nx.data.ObservableDictionary();
                }
            }
        },
        methods: {
            attach: function (args, index) {
                this.inherited(args, index);
                var topo = this.topology();
                topo.watch('stageScale', this.__watchStageScaleFN = function (prop, value) {
                    this.eachNodeSet(function (nodeSet) {
                        nodeSet.stageScale(value);
                    });
                }, this);

                topo.watch('revisionScale', this.__watchRevisionScale = function (prop, value) {
                    this.eachNodeSet(function (nodeSet) {
                        nodeSet.revisionScale(value);
                    }, this);
                }, this);

            },
            addNodeSet: function (vertexSet) {
                var id = vertexSet.id();
                var nodeSet = this._generateNodeSet(vertexSet);
                this.nodeSetDictionary().setItem(id, nodeSet);
                return nodeSet;
            },

            removeNodeSet: function (id) {
                var nodeSetDictionary = this.nodeSetDictionary();
                var nodeSet = nodeSetDictionary.getItem(id);
                if (nodeSet) {
                    this.fire('removeNodeSet', nodeSet);
                    nodeSet.dispose();
                    nodeSetDictionary.removeItem(id);
                }
            },
            updateNodeSet: function (id) {
                var nodeSetDictionary = this.nodeSetDictionary();
                var nodeSet = nodeSetDictionary.getItem(id);
                if (nodeSet) {
                    nodeSet.update();
                    this.fire('updateNodeSet', nodeSet);
                }
            },
            _getNodeSetInstanceClass: function (vertexSet) {
                var Clz;
                var topo = this.topology();
                var nodeSetInstanceClass = topo.nodeSetInstanceClass();
                if (nx.is(nodeSetInstanceClass, 'Function')) {
                    Clz = nodeSetInstanceClass.call(this, vertexSet);
                    if (nx.is(Clz, 'String')) {
                        Clz = nx.path(global, Clz);
                    }
                } else {
                    Clz = nx.path(global, nodeSetInstanceClass);
                }

                if (!Clz) {
                    throw "Error on instance node set class";
                }
                return Clz;

            },
            _generateNodeSet: function (vertexSet) {
                var id = vertexSet.id();
                var topo = this.topology();
                var stageScale = topo.stageScale();
                var Clz = this._getNodeSetInstanceClass(vertexSet);

                var nodeSet = new Clz({
                    topology: topo
                });
                nodeSet.setModel(vertexSet);
                nodeSet.attach(this.view());

                nodeSet.sets({
                    'data-id': id,
                    'class': 'node nodeset',
                    stageScale: stageScale
                }, topo);

//                setTimeout(function () {
                this.updateDefaultSetting(nodeSet);
//                }.bind(this), 0);
                return nodeSet;


            },
            updateDefaultSetting: function (nodeSet) {
                var topo = this.topology();


                //register events
                var superEvents = nx.graphic.Component.__events__;
                nx.each(nodeSet.__events__, function (e) {
                    if (superEvents.indexOf(e) == -1) {
                        nodeSet.on(e, function (sender, event) {
                            if (event instanceof MouseEvent) {
                                window.event = event;
                            }
                            this.fire(e.replace('Node', 'NodeSet'), nodeSet);
                        }, this);
                    }
                }, this);


                var nodeSetConfig = nx.extend({enableSmartLabel: topo.enableSmartLabel()}, CLZ.defaultConfig, topo.nodeSetConfig());
                delete nodeSetConfig.__owner__;

                nx.each(nodeSetConfig, function (value, key) {
                    util.setProperty(nodeSet, key, value, topo);
                }, this);

                util.setProperty(nodeSet, 'showIcon', topo.showIcon());

                if (topo.revisionScale() !== 1) {
                    nodeSet.revisionScale(topo.revisionScale());
                }

            },
            /**
             * Get node by id
             * @param id
             * @returns {*}
             * @method getNodeSet
             */
            getNodeSet: function (id) {
                return this.nodeSetDictionary().getItem(id);
            },
            /**
             * Iterate all nodeSet
             * @method eachNode
             * @param callback
             * @param context
             */
            eachNodeSet: function (callback, context) {
                this.nodeSetDictionary().each(function (item, id) {
                    var nodeSet = item.value();
                    callback.call(context || this, nodeSet, id);
                }, this);
            },
            clear: function () {
                this.eachNodeSet(function (nodeSet) {
                    nodeSet.dispose();
                });
                this.nodeSetDictionary().clear();
                this.inherited();
            },
            dispose: function () {
                this.clear();
                this.topology().unwatch('stageScale', this.__watchStageScaleFN, this);
                this.topology().unwatch('revisionScale', this.__watchRevisionScale, this);
                this.inherited();
            }
        }
    });


})(nx, nx.global);

(function (nx, global) {
    var Vector = nx.geometry.Vector;
    var Line = nx.geometry.Line;

    /**
     * Abstract link class
     * @class nx.graphic.Topology.AbstractLink
     * @extend nx.graphic.Group
     * @module nx.graphic.Topology
     */
    nx.define('nx.graphic.Topology.AbstractLink', nx.graphic.Group, {
        events: ['hide', 'show', 'remove'],
        properties: {
            /**
             * Get source node's instance
             * @property  sourceNode
             */
            sourceNode: {
                get: function () {
                    var topo = this.topology();
                    var id = this.model().source().id();
                    return topo.getNode(id);
                }
            },
            /**
             * Get target node's instance
             * @property targetNode
             */
            targetNode: {
                get: function () {
                    var topo = this.topology();
                    var id = this.model().target().id();
                    return topo.getNode(id);
                }
            },
            /**
             * Get source node's position
             * @property sourcePosition
             */
            sourcePosition: {
                get: function () {
                    return this.sourceNode().position();
                }
            },
            /**
             * Get target node's position
             * @property targetPosition
             */
            targetPosition: {
                get: function () {
                    return this.targetNode().position();
                }
            },
            /**
             * Get source node's id
             * @property sourceNodeID
             */
            sourceNodeID: {
                get: function () {
                    return this.model().source().id();
                }
            },
            /**
             * Get target node's id
             * @property targetNodeID
             */
            targetNodeID: {
                get: function () {
                    return this.model().target().id();
                }
            },
            /**
             * Get source node's x position
             * @property sourceX
             */
            sourceX: {
                get: function () {
                    return this.sourceNode().x();
                }
            },
            /**
             * Get source node's y position
             * @property sourceY
             */
            sourceY: {
                get: function () {
                    return this.sourceNode().y();
                }
            },
            /**
             * Get target node's x position
             * @property targetX
             */
            targetX: {
                get: function () {
                    return this.targetNode().x();
                }
            },
            /**
             * Get target node's x position
             * @property targetY
             */
            targetY: {
                get: function () {
                    return this.targetNode().y();
                }
            },
            /**
             * Get source node's vector
             * @property sourceVector
             */
            sourceVector: {
                get: function () {
                    return this.sourceNode().vector();
                }
            },
            /**
             * Get target node's vector
             * @property targetVector
             */
            targetVector: {
                get: function () {
                    if (this.targetNode()) {
                        return this.targetNode().vector();
                    }
                }
            },
            position: {
                get: function () {
                    var sourceNode = this.sourceNode().position();
                    var targetNode = this.targetNode().position();
                    return {
                        x1: sourceNode.x || 0,
                        x2: sourceNode.y || 0,
                        y1: targetNode.x || 0,
                        y2: targetNode.y || 0
                    };
                }
            },
            /**
             * Get link's line object
             * @property line
             */
            line: {
                get: function () {
                    return  new Line(this.sourceVector(), this.targetVector());
                }
            },
            /**
             * Get topology instance
             * @property topology
             */
            topology: {
                value: null
            },
            /**
             * Get link's id
             * @property id
             */
            id: {
                get: function () {
                    return this.model().id();
                }
            },
            /**
             * Get link's linkKey
             * @property linkKey
             */
            linkKey: {
                get: function () {
                    return this.model().linkKey();
                }
            },
            /**
             * Get is link is reverse link
             * @property reverse
             */
            reverse: {
                get: function () {
                    return this.model().reverse();
                }
            },
            /**
             * Get this center point's position
             * @property centerPoint
             */
            centerPoint: {
                get: function () {
                    return this.line().center();
                }
            },
            /**
             * Get/set link's usability
             * @property enable
             */
            enable: {
                value: true
            }

        },
        methods: {
            /**
             * Factory function , will be call when set model
             * @method setModel
             */
            setModel: function (model, isUpdate) {
                //
                this.model(model);
                //

                //updateCoordinate

//                model.source().on('updateCoordinate', this._watchS = function () {
//                    this.notify('sourcePosition');
//                    this.update();
//                }, this);
//
//                model.target().on('updateCoordinate', this._watchS = function (prop, value) {
//                    this.notify('sourcePosition');
//                    this.update();
//                }, this);

//                model.source().watch('position', this._watchS = function (prop, value) {
//                    this.notify('sourcePosition');
//                    this.update();
//                }, this);
//
//                model.target().watch('position', this._watchT = function () {
//                    this.notify('targetPosition');
//                    this.update();
//                }, this);


                //bind model's visible with element's visible
                this.setBinding('visible', 'model.visible,direction=<>', this);

                if (isUpdate !== false) {
                    this.update();
                }
            },


            /**
             * Factory function , will be call when relate data updated
             * @method update
             */
            update: function () {
//                this.notify('centerPoint');
//                this.notify('line');
//                this.notify('position');
//                this.notify('targetVector');
//                this.notify('sourceVector');
            },
            dispose: function () {
//                var model = this.model();
//                if (model) {
//                    model.source().unwatch('position', this._watchS, this);
//                    model.target().unwatch('position', this._watchT, this);
//                }
                this.fire('remove');
                this.inherited();
            }
        }
    });


})(nx, nx.global);
(function(nx, global) {
    var Vector = nx.geometry.Vector;
    var Line = nx.geometry.Line;
    /**
     * Link class
     * @class nx.graphic.Topology.Link
     * @extend nx.graphic.Topology.AbstractLink
     * @module nx.graphic.Topology
     */

    var offsetRadix = 5;

    nx.define('nx.graphic.Topology.Link', nx.graphic.Topology.AbstractLink, {
        events: ['pressLink', 'clickLink', 'enterLink', 'leaveLink'],
        properties: {
            /**
             * Get link type 'curve' / 'parallel'
             * @property linkType {String}
             */
            linkType: {
                get: function() {
                    return this._linkType !== undefined ? this._linkType : 'parallel';
                },
                set: function(inValue) {
                    var value = this._processPropertyValue(inValue);
                    if (this._linkType !== value) {
                        this._linkType = value;
                        return true;
                    } else {
                        return false;
                    }
                }
            },
            /**
             * Get/set link's offset percentage
             * @property offset {Float}
             */
            offsetPercentage: {
                value: 0
            },
            /**
             * Get/set link's offset step
             * @property offsetRadix {Number}
             */
            offsetRadix: {
                value: 5
            },
            /**
             * Get/set link's label, it is shown at the center point
             * @property label {String}
             */
            label: {
                set: function(inValue) {
                    var label = this._processPropertyValue(inValue);
                    var el = this.view('label');
                    if (label != null) {
                        el.append();
                    } else {
                        el.remove();
                    }
                    this._label = label;
                }
            },
            /**
             * Set/get link's color
             * @property color {Color}
             */
            color: {
                set: function(inValue) {
                    var value = this._processPropertyValue(inValue);
                    this.view('line').dom().setStyle('stroke', value);
                    this.view('path').dom().setStyle('stroke', value);
                    this._color = value;
                }
            },
            /**
             * Set/get link's width
             * @property width {Number}
             */
            width: {
                set: function(inValue) {
                    var value = this._processPropertyValue(inValue);
                    var width = (this._stageScale || 1) * value;
                    this.view('line').dom().setStyle('stroke-width', width);
                    this.view('path').dom().setStyle('stroke-width', width);
                    this._width = value;
                }
            },
            stageScale: {
                set: function(value) {
                    var width = (this._width || 1) * value;
                    this.view('line').dom().setStyle('stroke-width', width);
                    this.view('path').dom().setStyle('stroke-width', width);
                    //                    this.view('disableLabel').scale(value);
                    this._stageScale = value;
                    this.update();
                }
            },
            /**
             * Set/get is link dotted
             * @property dotted {Boolean}
             */
            dotted: {
                set: function(inValue) {
                    var value = this._processPropertyValue(inValue);
                    if (value) {
                        this.view('path').dom().setStyle('stroke-dasharray', '2, 5');
                    } else {
                        this.view('path').dom().setStyle('stroke-dasharray', '');
                    }
                    this._dotted = value;
                }
            },
            /**
             * Set link's style
             * @property style {Object}
             */
            style: {
                set: function(inValue) {
                    var value = this._processPropertyValue(inValue);
                    this.view('line').dom().setStyles(value);
                    this.view('path').dom().setStyles(value);
                }
            },
            /**
             * Get link's parent linkSet
             * @property parentLinkSet
             */
            parentLinkSet: {

            },
            ///**
            // * Get link's source interface point position
            // * @property sourcePoint
            // */
            //sourcePoint: {
            //    get: function () {
            //        var line = this.getPaddingLine();
            //        return line.start;
            //    }
            //},
            ///**
            // * Get link's target interface point position
            // * @property targetPoint
            // */
            //targetPoint: {
            //    get: function () {
            //        var line = this.getPaddingLine();
            //        return line.end;
            //    }
            //},
            /**
             * Set/get link's usability
             * @property enable {Boolean}
             */
            enable: {
                get: function() {
                    return this._enable != null ? this._enable : true;
                },
                set: function(inValue) {
                    var value = this._processPropertyValue(inValue);
                    this._enable = value;
                    this.dom().setClass("disable", !value);
                    this.update();
                }
            },
            /**
             * Set the link's draw function, after set this property please call update function
             * @property drawMethod {Function}
             */
            drawMethod: {

            },
            revisionScale: {}

        },
        view: {
            type: 'nx.graphic.Group',
            props: {
                'class': 'link'
            },
            content: [{
                type: 'nx.graphic.Group',
                content: [{
                    name: 'path',
                    type: 'nx.graphic.Path',
                    props: {
                        'class': 'link'
                    }
                }, {
                    name: 'line_bg',
                    type: 'nx.graphic.Line',
                    props: {
                        'class': 'link_bg'
                    }
                }, {
                    name: 'line',
                    type: 'nx.graphic.Line',
                    props: {
                        'class': 'link'
                    }
                }],
                events: {
                    'mouseenter': '{#_mouseenter}',
                    'mouseleave': '{#_mouseleave}',
                    'mousedown': '{#_mousedown}',
                    'touchstart': '{#_mousedown}',
                    'mouseup': '{#_mouseup}',
                    'touchend': '{#_mouseup}'
                }
            }, {
                name: 'label',
                type: 'nx.graphic.Group',
                content: {
                    name: 'labelText',
                    type: 'nx.graphic.Text',
                    props: {
                        'alignment-baseline': 'text-before-edge',
                        'text-anchor': 'middle',
                        'class': 'link-label'
                    }
                }
            }]
        },
        methods: {

            /**
             * Update link's path
             * @method update
             */
            update: function() {

                this.inherited();

                var _offset = this.getOffset();
                var offset = new Vector(0, _offset);
                var width = (this._width || 1) * (this._stageScale || 1);
                var line = this.reverse() ? this.line().negate() : this.line();
                var d;
                var pathEL = this.view('path');
                var lineEl = this.view('line');
                var lineBGEl = this.view('line_bg');

                if (this.drawMethod()) {
                    d = this.drawMethod().call(this, this.model(), this);
                    pathEL.setStyle('display', 'block');
                    pathEL.set('d', d);
                    pathEL.dom().setStyle('stroke-width', width);
                    lineEl.setStyle('display', 'none');
                    lineBGEl.setStyle('display', 'none');
                } else if (this.linkType() == 'curve') {
                    var path = [];
                    var n, point;
                    n = line.normal().multiply(_offset * 3);
                    point = line.center().add(n);
                    path.push('M', line.start.x, line.start.y);
                    path.push('Q', point.x, point.y, line.end.x, line.end.y);
                    d = path.join(' ');

                    pathEL.setStyle('display', 'block');
                    pathEL.set('d', d);
                    pathEL.dom().setStyle('stroke-width', width);
                    lineEl.setStyle('display', 'none');
                    lineBGEl.setStyle('display', 'none');
                } else {
                    var newLine = line.translate(offset);
                    lineEl.sets({
                        x1: newLine.start.x,
                        y1: newLine.start.y,
                        x2: newLine.end.x,
                        y2: newLine.end.y
                    });
                    lineBGEl.sets({
                        x1: newLine.start.x,
                        y1: newLine.start.y,
                        x2: newLine.end.x,
                        y2: newLine.end.y
                    });
                    pathEL.setStyle('display', 'none');
                    lineEl.setStyle('display', 'block');
                    lineBGEl.setStyle('display', 'block');
                    lineEl.setStyle('stroke-width', width);
                    lineBGEl.setStyle('stroke-width', width * 4);

                }


                this._updateLabel();
            },
            /**
             * Get link's padding Line
             * @method getPaddingLine
             * @returns {*}
             */
            getPaddingLine: function() {
                var _offset = this.offset() * offsetRadix;
                var sourceSize = this.sourceNode().getBound(true);
                var sourceRadius = Math.max(sourceSize.width, sourceSize.height) / 1.3;
                var targetSize = this.targetNode().getBound(true);
                var targetRadius = Math.max(targetSize.width, targetSize.height) / 1.3;
                var line = this.line().pad(sourceRadius, targetRadius);
                var n = line.normal().multiply(_offset);
                return line.translate(n);
            },
            /**
             * Get calculated offset number
             * @method getoffset
             * @returns {number}
             */
            getOffset: function() {
                if (this.linkType() == 'parallel') {
                    return this.offsetPercentage() * this.offsetRadix() * this._stageScale;
                } else {
                    return this.offsetPercentage() * this.offsetRadix(); //* this._stageScale;
                }

            },
            _updateLabel: function() {
                var el, point;
                var _offset = this.getOffset();
                var line = this.line();
                var n = line.normal().multiply(_offset);
                if (this._label != null) {
                    el = this.view('label');
                    point = line.center().add(n);
                    el.setTransform(point.x, point.y, this.stageScale());
                    this.view('labelText').set('text', this._label);
                }
            },
            _mousedown: function() {
                if (this.enable()) {
                    /**
                     * Fired when mouse down on link
                     * @event pressLink
                     * @param sender{Object} trigger instance
                     * @param event {Object} original event object
                     */
                    this.fire('pressLink');
                }
            },
            _mouseup: function() {
                if (this.enable()) {
                    /**
                     * Fired when click link
                     * @event clickLink
                     * @param sender{Object} trigger instance
                     * @param event {Object} original event object
                     */
                    this.fire('clickLink');
                }
            },
            _mouseleave: function() {
                if (this.enable()) {
                    /**
                     * Fired when mouse leave link
                     * @event leaveLink
                     * @param sender{Object} trigger instance
                     * @param event {Object} original event object
                     */
                    this.fire('leaveLink');
                }
            },
            _mouseenter: function() {
                if (this.enable()) {
                    /**
                     * Fired when mouse enter link
                     * @event enterLink
                     * @param sender{Object} trigger instance
                     * @param event {Object} original event object
                     */
                    this.fire('enterLink');
                }
            }
        }
    });


})(nx, nx.global);

(function (nx, global) {
    var util = nx.util;

    /**
     * Links layer
     Could use topo.getLayer('links') get this
     * @class nx.graphic.Topology.LinksLayer
     * @extend nx.graphic.Topology.Layer
     */

    var CLZ = nx.define('nx.graphic.Topology.LinksLayer', nx.graphic.Topology.Layer, {
        statics: {
            defaultConfig: {
                linkType: 'parallel',
                label: null,
                color: null,
                width: null,
                enable: true
            }
        },
        events: ['pressLink', 'clickLink', 'enterLink', 'leaveLink'],
        properties: {
            links: {
                get: function () {
                    return this.linkDictionary().values().toArray();
                }
            },
            linkMap: {
                get: function () {
                    return this.linkDictionary().toObject();
                }
            },
            linkDictionary: {
                value: function () {
                    return new nx.data.ObservableDictionary();
                }
            }
        },
        methods: {
            attach: function (args) {
                this.inherited(args);
                var topo = this.topology();
                topo.watch('stageScale', this.__watchStageScaleFN = function (prop, value) {
                    this.eachLink(function (link) {
                        link.stageScale(value);
                    });
                }, this);

                topo.watch('revisionScale', this.__watchRevisionScale = function (prop, value) {
                    this.eachLink(function (link) {
                        link.revisionScale(value);
                    });
                }, this);
            },
            /**
             * Add a link
             * @param edge
             * @method addLink
             */

            addLink: function (edge) {
                var id = edge.id();
                var link = this._generateLink(edge);
                this.linkDictionary().setItem(id, link);
                return link;
            },
            /**
             * Remove a link
             * @param id {String}
             */
            removeLink: function (id) {
                var linkDictionary = this.linkDictionary();
                var link = linkDictionary.getItem(id);
                if (link) {
                    link.dispose();
                    linkDictionary.removeItem(id);
                }
            },
            /**
             * Update link
             * @method updateLink
             * @param id {String}
             */
            updateLink: function (id) {
                this.linkDictionary().getItem(id).update();
            },

            //get link instance class
            _getLinkInstanceClass: function (edge) {
                var Clz;
                var topo = this.topology();
                var linkInstanceClass = topo.linkInstanceClass();
                if (nx.is(linkInstanceClass, 'Function')) {
                    Clz = linkInstanceClass.call(this, edge);
                    if (nx.is(Clz, 'String')) {
                        Clz = nx.path(global, Clz);
                    }
                } else {
                    Clz = nx.path(global, linkInstanceClass);
                }
                if (!Clz) {
                    throw "Error on instance link class";
                }
                return Clz;
            },


            _generateLink: function (edge) {
                var id = edge.id();
                var topo = this.topology();
                var Clz = this._getLinkInstanceClass(edge);
                var link = new Clz({
                    topology: topo
                });
                //set model
                link.setModel(edge, false);
                link.attach(this.view());

                link.view().sets({
                    'class': 'link',
                    'data-id': id
                });



//                setTimeout(function () {
                this.updateDefaultSetting(link);
//                }.bind(this), 0);

                return link;

            },
            updateDefaultSetting: function (link) {
                var topo = this.topology();
                //delegate link's events
                var superEvents = nx.graphic.Component.__events__;
                nx.each(link.__events__, function (e) {
                    if (superEvents.indexOf(e) == -1) {
                        link.on(e, function (sender, event) {
                            this.fire(e, link);
                        }, this);
                    }
                }, this);
                //set properties
                var linkConfig = nx.extend({}, CLZ.defaultConfig, topo.linkConfig());
                delete  linkConfig.__owner__;

                nx.each(linkConfig, function (value, key) {
                    util.setProperty(link, key, value, topo);
                }, this);

                if (nx.DEBUG) {
                    var edge = link.model();
                    link.view().sets({
                        'data-linkKey': edge.linkKey(),
                        'data-source-node-id': edge.source().id(),
                        'data-target-node-id': edge.target().id()
                    });
                }

                link.stageScale(topo.stageScale());

                link.update();
            },


            /**
             * Traverse all links
             * @param callback
             * @param context
             * @method eachLink
             */
            eachLink: function (callback, context) {
                this.linkDictionary().each(function (item, id) {
                    callback.call(context || this, item.value(), id);
                });
            },
            /**
             * Get link by id
             * @param id
             * @returns {*}
             */
            getLink: function (id) {
                return this.linkDictionary().getItem(id);
            },
            /**
             * Highlight links
             * @method highlightLinks
             * @param links {Array} links array
             */
            highlightLinks: function (links) {
                this.highlightedElements().addRange(links);
            },
            activeLinks: function (links) {
                this.activeElements().addRange(links);
            },
            /**
             * Clear links layer
             * @method clear
             */
            clear: function () {
                this.eachLink(function (link) {
                    link.dispose();
                });

                this.linkDictionary().clear();
                this.inherited();
            },
            dispose: function () {
                this.clear();
                this.topology().unwatch('stageScale', this.__watchStageScaleFN, this);
                this.inherited();
            }
        }
    });


})(nx, nx.global);
(function (nx, global) {

    var Vector = nx.geometry.Vector;
    var Line = nx.geometry.Line;

    /**
     * LinkSet class
     * @class nx.graphic.Topology.LinkSet
     * @extend nx.graphic.Topology.AbstractLink
     * @module nx.graphic.Topology
     */


    nx.define('nx.graphic.Topology.LinkSet', nx.graphic.Topology.AbstractLink, {
        events: ['pressLinkSetNumber', 'clickLinkSetNumber', 'enterLinkSetNumber', 'leaveLinkSetNumber', 'collapseLinkSet', 'expandLinkSet'],
        properties: {
            /**
             * Get link type 'curve' / 'parallel'
             * @property linkType {String}
             */
            linkType: {
                get: function () {
                    return this._linkType || 'parallel';
                },
                set: function (inValue) {
                    var value = this._processPropertyValue(inValue);
                    if (this._linkType !== value) {
                        this._linkType = value;
                        return true;
                    } else {
                        return false;
                    }
                }
            },
            /**
             * Sub links collection
             * @property links
             * @readOnly
             */
            links: {
                get: function () {
                    var links = {};
                    this.eachLink(function (link, id) {
                        links[id] = link;
                    }, this);
                    return links;
                }
            },
            /**
             * LinkSet's color
             * @property color
             */
            color: {
                set: function (inValue) {
                    var value = this._processPropertyValue(inValue);
                    this.view('numBg').dom().setStyle('stroke', value);
                    this.view('path').dom().setStyle('stroke', value);
                    this._color = value;
                }
            },
            stageScale: {
                set: function (value) {
                    this.view('path').dom().setStyle('stroke-width', value);
                    this.view('number').setTransform(null, null, value);
                    /* jshint -W030 */
                    this.model() && this._updateLinksOffset();
                    this._stageScale = value;
                }
            },
            /**
             * Set/get link's usability
             * @property enable {Boolean}
             */
            enable: {
                get: function () {
                    return this._enable === undefined ? true : this._enable;
                },
                set: function (inValue) {
                    var value = this._processPropertyValue(inValue);
                    this.dom().setClass("disable", !value);
                    this._enable = value;
                    this.eachLink(function (link) {
                        link.enable(value);
                    });
                }
            },
            /**
             * Collapsed statues
             * @property collapsed
             */
            collapsedRule: {
                value: false
            },
            activated: {
                value: true
            },
            revisionScale: {
                set: function (value) {
                    var strokeWidth = value < 0.6 ? 8 : 12;
                    this.view('numBg').dom().setStyle('stroke-width', strokeWidth);

                    var fontSize = value < 0.6 ? 8 : 10;
                    this.view('num').dom().setStyle('font-size', fontSize);

                    this.view('number').visible(value !== 0.2);


                }


            }
        },
        view: {
            type: 'nx.graphic.Group',
            props: {
                'data-type': 'links-sum',
                'class': 'link-set'
            },
            content: [{
                name: 'path',
                type: 'nx.graphic.Line',
                props: {
                    'class': 'link-set-bg'
                }
            }, {
                name: 'number',
                type: 'nx.graphic.Group',
                content: [{
                    name: 'numBg',
                    type: 'nx.graphic.Rect',
                    props: {
                        'class': 'link-set-circle',
                        height: 1
                    },
                    events: {
                        'mousedown': '{#_number_mouseup}',
                        'touchstart': '{#_number_mouseup}',
                        'mouseenter': '{#_number_mouseenter}',
                        'mouseleave': '{#_number_mouseleave}'
                    }
                }, {
                    name: 'num',
                    type: 'nx.graphic.Text',
                    props: {
                        'class': 'link-set-text',
                        y: 1
                    }
                }]
            }]
        },
        methods: {
            setModel: function (model, isUpdate) {
                this.inherited(model, isUpdate);
                this.setBinding('activated', 'model.activated,direction=<>', this);
            },
            update: function () {
                if (this._activated) {
                    var line = this.line();
                    this.view('path').sets({
                        x1: line.start.x,
                        y1: line.start.y,
                        x2: line.end.x,
                        y2: line.end.y
                    });
                    //num
                    var centerPoint = this.centerPoint();
                    this.view('number').setTransform(centerPoint.x, centerPoint.y);
                }
            },
            /**
             * Update linkSet
             * @property updateLinkSet
             */
            updateLinkSet: function () {
                var value = this._processPropertyValue(this.collapsedRule());
                this.model().activated(value, {
                    force: true
                });
                if (value) {
                    this.append();
                    this.update();
                    this._updateLinkNumber();
                    /**
                     * Fired when collapse linkSet
                     * @event collapseLinkSet
                     * @param sender{Object} trigger instance
                     * @param event {Object} original event object
                     */
                    this.fire('collapseLinkSet');
                } else {
                    /* jshint -W030 */
                    this.parent() && this.remove();
                    this._updateLinksOffset();
                    /**
                     * Fired when expend linkSet
                     * @event expandLinkSet
                     * @param sender{Object} trigger instance
                     * @param event {Object} original event object
                     */
                    this.fire('expandLinkSet');
                }
            },
            /**
             * Iterate all sub links
             * @method eachLink
             * @param callback {Function}
             * @param context {Object}
             */
            eachLink: function (callback, context) {
                var topo = this.topology();
                var model = this.model();

                nx.each(model.edges(), function (edge, id) {
                    var link = topo.getLink(id);
                    if (link) {
                        callback.call(context || this, link, id);
                    }
                });
            },

            _updateLinkNumber: function () {
                var edges = Object.keys(this.model().edges());
                var numEl = this.view('num');
                var numBg = this.view('numBg');
                if (edges.length == 1) {
                    numEl.visible(false);
                    numBg.visible(false);

                } else {
                    numEl.sets({
                        text: edges.length,
                        visible: true
                    });

                    var bound = numEl.getBound();
                    var width = Math.max(bound.width - 6, 1);

                    numBg.sets({
                        width: width,
                        visible: true
                    });
                    numBg.setTransform(width / -2);
                }

            },
            _updateLinksOffset: function () {
                if (!this._activated) {
                    var links = this.links();
                    var offset = (Object.keys(links).length - 1) / 2;
                    var index = 0;
                    nx.each(links, function (link, id) {
                        link.offsetPercentage(index++ * -1 + offset);
                        link.update();
                    }, this);



                    //var obj = {};
                    //this.eachLink(function (link, id) {
                    //    var edge = link.model();
                    //    var linkKey = edge.linkKey();
                    //    var ary = obj[linkKey] = obj[linkKey] || [];
                    //    ary.push(link);
                    //}, this);
                    //
                    //console.log(obj);
                    //
                    //nx.each(obj, function (links, linkKey) {
                    //    if (links.length > 1) {
                    //        var offset = (links.length - 1) / 2;
                    //        nx.each(links, function (link, index) {
                    //            link.offsetPercentage(index * -1 + offset);
                    //            link.update();
                    //        }, this);
                    //    }
                    //}, this);
                }
            },


            _number_mousedown: function (sender, event) {
                if (this.enable()) {
                    /**
                     * Fired when press number element
                     * @event pressLinkSetNumber
                     * @param sender{Object} trigger instance
                     * @param event {Object} original event object
                     */
                    this.fire('pressLinkSetNumber', event);
                }
            },
            _number_mouseup: function (sender, event) {
                if (this.enable()) {
                    /**
                     * Fired when click number element
                     * @event clickLinkSetNumber
                     * @param sender{Object} trigger instance
                     * @param event {Object} original event object
                     */
                    this.fire('clickLinkSetNumber', event);
                }
            },
            _number_mouseleave: function (sender, event) {
                if (this.enable()) {
                    /**
                     * Fired when mouse leave number element
                     * @event numberleave
                     * @param sender{Object} trigger instance
                     * @param event {Object} original event object
                     */
                    this.fire('numberleave', event);
                }
            },
            _number_mouseenter: function (sender, event) {
                if (this.enable()) {
                    /**
                     * Fired when mouse enter number element
                     * @event numberenter
                     * @param sender{Object} trigger instance
                     * @param event {Object} original event object
                     */
                    this.fire('numberenter', event);
                }
            }
        }
    });


})(nx, nx.global);










(function (nx, global) {

    var util = nx.util;

    /** Links layer
     Could use topo.getLayer('linkSet') get this
     * @class nx.graphic.Topology.LinksLayer
     * @extend nx.graphic.Topology.Layer
     */

    var CLZ = nx.define('nx.graphic.Topology.LinkSetLayer', nx.graphic.Topology.Layer, {
        statics: {
            defaultConfig: {
                label: null,
                sourceLabel: null,
                targetLabel: null,
                color: null,
                width: null,
                dotted: false,
                style: null,
                enable: true,
                collapsedRule: function (model) {
                    if (model.type() == 'edgeSetCollection') {
                        return true;
                    }
                    var linkType = this.linkType();
                    var edges = Object.keys(model.edges());
                    var maxLinkNumber = linkType === 'curve' ? 9 : 5;
                    return edges.length > maxLinkNumber;
                }
            }
        },
        events: ['pressLinkSetNumber', 'clickLinkSetNumber', 'enterLinkSetNumber', 'leaveLinkSetNumber', 'collapseLinkSet', 'expandLinkSet'],
        properties: {
            linkSets: {
                get: function () {
                    return this.linkSetDictionary().values().toArray();
                }
            },
            linkSetMap: {
                get: function () {
                    return this.linkSetDictionary().toObject();
                }
            },
            linkSetDictionary: {
                value: function () {
                    return new nx.data.ObservableDictionary();
                }
            }
        },
        methods: {
            attach: function (args) {
                this.inherited(args);

                var topo = this.topology();
                //watch stageScale
                topo.watch('stageScale', this.__watchStageScaleFN = function (prop, value) {
                    this.eachLinkSet(function (linkSet) {
                        linkSet.stageScale(value);
                    });
                }, this);
                topo.watch('revisionScale', this.__watchRevisionScale = function (prop, value) {
                    this.eachLinkSet(function (linkSet) {
                        linkSet.revisionScale(value);
                    });
                }, this);

            },
            addLinkSet: function (edgeSet) {
                var linkSetDictionary = this.linkSetDictionary();
                var linkSet = this._generateLinkSet(edgeSet);
                linkSetDictionary.setItem(edgeSet.linkKey(), linkSet);
                return linkSet;
            },
            updateLinkSet: function (linkKey) {
                this.linkSetDictionary().getItem(linkKey).updateLinkSet();

            },
            removeLinkSet: function (linkKey) {
                var linkSetDictionary = this.linkSetDictionary();
                var linkSet = linkSetDictionary.getItem(linkKey);
                if (linkSet) {
                    linkSet.dispose();
                    linkSetDictionary.removeItem(linkKey);
                    return true;
                } else {
                    return false;
                }
            },

            _getLinkSetInstanceClass: function (edgeSet) {
                var Clz;
                var topo = this.topology();
                var nodeSetInstanceClass = topo.linkSetInstanceClass();
                if (nx.is(nodeSetInstanceClass, 'Function')) {
                    Clz = nodeSetInstanceClass.call(this, edgeSet);
                    if (nx.is(Clz, 'String')) {
                        Clz = nx.path(global, Clz);
                    }
                } else {
                    Clz = nx.path(global, nodeSetInstanceClass);
                }

                if (!Clz) {
                    throw "Error on instance linkSet class";
                }
                return Clz;

            },

            _generateLinkSet: function (edgeSet) {
                var topo = this.topology();
                var Clz = this._getLinkSetInstanceClass(edgeSet);
                var linkSet = new Clz({
                    topology: topo
                });
                //set model
                linkSet.setModel(edgeSet, false);
                linkSet.attach(this.view());


//                setTimeout(function () {
                this.updateDefaultSetting(linkSet);
//                }.bind(this), 0);

                return linkSet;


            },
            updateDefaultSetting: function (linkSet) {
                var topo = this.topology();


                //delegate elements events
                var superEvents = nx.graphic.Component.__events__;
                nx.each(linkSet.__events__, function (e) {
                    //exclude basic events
                    if (superEvents.indexOf(e) == -1) {
                        linkSet.on(e, function (sender, event) {
                            this.fire(e, linkSet);
                        }, this);
                    }
                }, this);

                //set properties
                var linkSetConfig = nx.extend({}, CLZ.defaultConfig, topo.linkSetConfig());
                delete linkSetConfig.__owner__; //fix bug


                linkSetConfig.linkType = (topo.linkConfig() && topo.linkConfig().linkType) || nx.graphic.Topology.LinksLayer.defaultConfig.linkType;


                nx.each(linkSetConfig, function (value, key) {
                    util.setProperty(linkSet, key, value, topo);
                }, this);

                linkSet.stageScale(topo.stageScale());


                if (nx.DEBUG) {
                    var edgeSet = linkSet.model();
                    //set element attribute
                    linkSet.view().sets({
                        'data-nx-type': 'nx.graphic.Topology.LinkSet',
                        'data-linkKey': edgeSet.linkKey(),
                        'data-source-node-id': edgeSet.source().id(),
                        'data-target-node-id': edgeSet.target().id()

                    });

                }

                linkSet.updateLinkSet();
                return linkSet;

            },
            /**
             * Iterate all linkSet
             * @method eachLinkSet
             * @param callback {Function}
             * @param context {Object}
             */
            eachLinkSet: function (callback, context) {
                this.linkSetDictionary().each(function (item, linkKey) {
                    callback.call(context || this, item.value(), linkKey);
                });
            },
            /**
             * Get linkSet by source node id and target node id
             * @method getLinkSet
             * @param sourceVertexID {String}
             * @param targetVertexID {String}
             * @returns {nx.graphic.LinkSet}
             */
            getLinkSet: function (sourceVertexID, targetVertexID) {
                var topo = this.topology();
                var graph = topo.graph();
                var edgeSet = graph.getEdgeSetBySourceAndTarget(sourceVertexID, targetVertexID) || graph.getEdgeSetCollectionBySourceAndTarget(sourceVertexID, targetVertexID);
                if (edgeSet) {
                    return this.getLinkSetByLinkKey(edgeSet.linkKey());
                } else {
                    return null;
                }
            },
            /**
             * Get linkSet by linkKey
             * @method getLinkSetByLinkKey
             * @param linkKey {String} linkKey
             * @returns {nx.graphic.Topology.LinkSet}
             */
            getLinkSetByLinkKey: function (linkKey) {
                return this.linkSetDictionary().getItem(linkKey);
            },
            /**
             * Highlight linkSet
             * @method highlightlinkSets
             * @param linkSets {Array} linkSet array
             */
            highlightLinkSets: function (linkSets) {
                this.highlightedElements().addRange(linkSets);
            },
            /**
             * Active linkSet
             * @method highlightlinkSets
             * @param linkSets {Array} linkSet array
             */
            activeLinkSets: function (linkSets) {
                this.activeElements().addRange(linkSets);
            },
            /**
             * Clear links layer
             * @method clear
             */
            clear: function () {
                this.eachLinkSet(function (linkSet) {
                    linkSet.dispose();
                });
                this.linkSetDictionary().clear();
                this.inherited();
            },
            dispose: function () {
                this.clear();
                this.topology().unwatch('stageScale', this.__watchStageScaleFN, this);
                this.inherited();
            }
        }
    });


})(nx, nx.global);
(function(nx, global) {

    nx.define("nx.graphic.Topology.HierarchicalLayout", {
        properties: {
            topology: {},
            levelBy: {
                value: function() {
                    return function(inNode) {
                        return inNode.model().get("role");
                    };
                }
            },
            sortOrder: {
                value: function() {
                    return [];
                }
            },
            direction: { // horizontal,vertical
                value: 'vertical'
            },
            order: {

            },
            nodesPositionObject: {

            },
            groups: {}
        },
        methods: {

            process: function(graph, config, callback) {
                var groups = this._group(graph, config || {});
                var nodesPositionObject = this._calc(groups, config || {});

                this._layout(nodesPositionObject, callback);
            },
            _group: function(graph, config) {
                var groups = {
                    '__other__': []
                };
                var topo = this.topology();
                var levelBy = config.levelBy || this.levelBy();
                topo.eachNode(function(node) {
                    var key;
                    // substr should start from 0
                    if (nx.is(levelBy, 'String') && levelBy.substr(0,5) == 'model') {
                        key = node.model().get(levelBy.substring(6));
                    } else {
                        key = levelBy.call(topo, node, node.model());
                    }

                    if (key) {
                        var group = groups[key] = groups[key] || [];
                        group.push(node);
                    } else {
                        groups.__other__.push(node);
                    }

                });
                return groups;
            },
            _calc: function(groups, config) {
                var nodesPositionObject = {},
                    keys = Object.keys(groups);
                var topo = this.topology();
                var sortOrder = config.sortOrder || this.sortOrder() || [];

                //build order array, and move __other__ to the last
                var order = [];
                nx.each(sortOrder, function(v) {
                    var index = keys.indexOf(v.toUpperCase());
                    /* jshint ignore:start */
                    switch (index) {
                        case -1:
                            index = keys.indexOf(v.toLowerCase());
                        case -1:
                            index = keys.indexOf(v);

                    }
                    /* jshint ignore:end */

                    if (index !== -1) {
                        order.push(v);
                        keys.splice(index, 1);
                    }
                });
                keys.splice(keys.indexOf('__other__'), 1);
                order = order.concat(keys, ['__other__']);
                groups = this._sort(groups, order);

                //var y = 0;

                var padding = topo.padding();
                var width = topo.width() - padding * 2;
                var height = topo.height() - padding * 2;

                var direction = this.direction();


                var perY = height / (order.length + 1);
                var perX = width / (order.length + 1);
                var x = perX,
                    y = perY;

                //'vertical'

                nx.each(order, function(key) {
                    if (groups[key]) {

                        if (direction == 'vertical') {
                            //build nodes position map
                            perX = width / (groups[key].length + 1);
                            nx.each(groups[key], function(node, i) {
                                nodesPositionObject[node.id()] = {
                                    x: perX * (i + 1),
                                    y: y
                                };
                            });
                            y += perY;
                        } else {
                            //build nodes position map
                            perY = height / (groups[key].length + 1);
                            nx.each(groups[key], function(node, i) {
                                nodesPositionObject[node.id()] = {
                                    x: x,
                                    y: perY * (i + 1)
                                };
                            });
                            x += perX;
                        }


                        delete groups[key];
                    }
                });

                this.order(order);


                return nodesPositionObject;

            },
            _sort: function(groups, order) {
                var topo = this.topology();
                var graph = topo.graph();

                groups[order[0]].sort(function(a, b) {
                    return Object.keys(b.model().edgeSets()).length - Object.keys(a.model().edgeSets()).length;
                });

                for (var i = 0; i < order.length - 1; i++) {
                    var firstGroup = groups[order[i]];
                    var secondGroup = groups[order[i + 1]];
                    var ary = [],
                        indexs = [];
                    /* jshint -W083 */
                    nx.each(firstGroup, function(fNode) {
                        var temp = [];
                        nx.each(secondGroup, function(sNode, i) {
                            if (graph.getEdgesBySourceAndTarget(fNode, sNode) != null && temp.indexOf(sNode) != -1) {
                                temp.push(sNode);
                                indexs.push(i);
                            }
                        });
                        temp.sort(function(a, b) {
                            return Object.keys(b.model().edgeSets()).length - Object.keys(a.model().edgeSets()).length;
                        });

                        ary = ary.concat(temp);
                    });

                    /* jshint -W083 */
                    nx.each(ary, function(node, i) {
                        var index = secondGroup.indexOf(node);
                        if (index !== -1) {
                            secondGroup.splice(index, 1);
                        }
                    });
                    groups[order[i + 1]] = ary.concat(secondGroup);
                }

                this.groups(nx.extend({}, groups));
                return groups;
            },
            _layout: function(nodesPositionObject, callback) {
                var topo = this.topology();


                var queueCounter = 0;
                var nodeLength = 0;
                var finish = function() {
                    if (queueCounter == nodeLength) {
                        setTimeout(function() {
                            topo.getLayer('links').show();
                            topo.getLayer('linkSet').show();
                            topo.stage().resetFitMatrix();
                            topo.fit(function() {

                                if (callback) {
                                    callback.call(topo);
                                }
                            });
                        }, 0);

                    }
                }.bind(this);

                //
                topo.getLayer('links').hide();
                topo.getLayer('linkSet').hide();
                nx.each(nodesPositionObject, function(n, id) {
                    var node = topo.getNode(id);
                    if (node) {
                        node.translateTo(n.x, n.y, function() {
                            queueCounter++;
                            finish();
                        });
                        nodeLength++;
                    }
                });
            }
        }
    });


})(nx, nx.global);
// jshint ignore: start
(function (nx, global) {
    /* jshint camelcase:false */
    var TURKEYMAP = '<g><path class="mapPath" d="M 105.34375,34.21875 L 100.75,35.4375 L 100.65625,35.46875 L 100.53125,35.4375 L 96.28125,34.46875 L 93.8125,36.1875 L 91.40625,38.71875 L 91.3125,38.8125 L 91.1875,38.84375 L 89.90625,39.21875 L 90.28125,45.90625 L 90.28125,45.9375 L 90.53125,55.40625 L 90.53125,55.5625 L 90.4375,55.6875 L 88.8125,58.09375 L 88.78125,58.125 L 88.71875,58.1875 L 85.5625,61.09375 L 85.28125,63 L 88.65625,64.03125 L 89.125,64.15625 L 89,64.625 L 88.125,67.78125 L 88.09375,67.875 L 88.0625,67.9375 L 86.03125,71.09375 L 86,71.125 L 82.4375,75.5625 L 82.0625,79.09375 L 82.0625,79.125 L 82.0625,79.1875 L 82.5625,83.65625 L 82.5625,83.71875 L 82.59375,83.71875 L 87.0625,81.84375 L 87.25,81.75 L 87.4375,81.84375 L 92.375,84 L 92.40625,84 L 92.4375,84 L 94.09375,84.96875 L 101,84.96875 L 101.25,84.96875 L 101.375,85.125 L 106.71875,91.09375 L 108.59375,91.96875 L 110.28125,91.1875 L 110.34375,91.15625 L 110.4375,91.15625 L 115.75,90.6875 L 116.4375,85.78125 L 116.4375,85.6875 L 116.5,85.59375 L 119.125,80.8125 L 119.21875,80.65625 L 119.34375,80.59375 L 125.90625,77.1875 L 125.96875,77.15625 L 126.0625,77.125 L 133.375,75.90625 L 133.40625,75.875 L 137.40625,74.03125 L 137.5,73.96875 L 137.625,73.96875 L 141.75,73.84375 L 141.78125,73.84375 L 146.21875,73.40625 L 146.84375,72.78125 L 146.8125,72.75 L 144.8125,69.96875 L 144.71875,69.84375 L 144.71875,69.71875 L 144.46875,65.71875 L 142.65625,63 L 142.625,62.96875 L 142.59375,62.9375 L 140.96875,59.15625 L 140.9375,59.125 L 140.9375,59.09375 L 139.8125,55.4375 L 139.78125,55.34375 L 139.78125,55.25 L 140.03125,50.84375 L 140.0625,50.5 L 140.375,50.40625 L 143.21875,49.3125 L 143.875,47.96875 L 142.40625,45.6875 L 140.28125,45.6875 L 140.21875,45.6875 L 140.1875,45.65625 L 135.875,44.6875 L 132.3125,45.53125 L 132.1875,45.5625 L 132.0625,45.53125 L 128.125,44.4375 L 123.6875,45.125 L 120.21875,47.25 L 119.90625,47.4375 L 119.625,47.1875 L 117.40625,45.25 L 113.34375,43.75 L 113.1875,43.6875 L 113.09375,43.5625 L 111.09375,40.65625 L 111.0625,40.625 L 111.03125,40.5625 L 109.90625,37.5 C 109.85538,37.442179 109.50518,37.036427 109.03125,36.5625 C 108.77796,36.309213 108.51356,36.032839 108.28125,35.84375 C 108.04894,35.654661 107.82541,35.552581 107.875,35.5625 C 107.60716,35.508932 107.34512,35.394449 107.0625,35.25 C 106.77988,35.105551 106.50097,34.919331 106.21875,34.75 C 105.7561,34.472412 105.4755,34.305607 105.34375,34.21875 zM 81.5625,39.46875 L 80.78125,40.21875 L 80.625,40.375 L 80.40625,40.375 L 76,40.25 L 75.9375,40.25 L 75.875,40.21875 L 74,39.6875 L 71.28125,42.28125 L 70.1875,46.5625 L 70.15625,46.6875 L 70.0625,46.78125 L 68.1875,48.90625 L 68.09375,49.03125 L 67.9375,49.0625 L 65.8125,49.6875 L 65.5625,49.78125 L 65.375,49.625 L 63.71875,48.46875 L 59.6875,48.46875 L 59.1875,50 L 59.1875,50.03125 L 59.15625,50.09375 L 57.78125,52.75 L 59.75,55.4375 L 62.46875,55.9375 L 62.59375,55.9375 L 62.6875,56.03125 L 64.84375,57.8125 L 64.90625,57.84375 L 64.96875,57.9375 L 66.84375,61.25 L 70.3125,62 L 70.84375,62.09375 L 70.6875,62.625 L 70.0625,64.875 L 69.34375,73.28125 L 70.34375,74.53125 L 70.4375,74.65625 L 70.4375,74.84375 L 70.71875,80.75 L 70.71875,81.09375 L 70.4375,81.21875 L 68.03125,82.5 L 67.875,82.59375 L 67.65625,82.53125 L 64.4375,81.625 L 63.53125,82.75 L 63.46875,82.8125 L 63.40625,82.84375 L 59.5,85.375 L 59.40625,85.4375 L 59.28125,85.4375 L 54.34375,86.1875 L 52.34375,89.78125 L 53.09375,91.28125 L 53.15625,91.4375 L 53.15625,91.5625 L 52.90625,94.21875 L 52.53125,97.90625 L 54.25,101.65625 L 54.3125,101.8125 L 54.28125,101.96875 L 53.53125,106.125 L 53.46875,106.375 L 53.25,106.5 L 49.8125,108.09375 L 48.65625,109.96875 L 48.59375,110.0625 L 48.53125,110.125 L 43.4375,113.71875 L 40.46875,118.6875 L 40.375,118.78125 L 40.28125,118.84375 L 36.375,120.96875 L 36.625,126.25 L 38.4375,127.5 L 44.21875,127.625 L 44.25,127.625 L 44.3125,127.65625 L 47.46875,128.5 L 50.09375,127.53125 L 50.28125,127.46875 L 50.4375,127.5625 L 53.03125,128.59375 L 54.9375,127.5625 L 55.1875,127.4375 L 55.40625,127.5625 L 58,129 L 60.96875,128.03125 L 61.03125,128.03125 L 61.09375,128.03125 L 64,127.875 L 69.1875,126.5 L 69.4375,126.1875 L 71.84375,123.09375 L 70.875,119.53125 L 68.96875,117.78125 L 68.8125,117.625 L 68.8125,117.375 L 69.0625,111.4375 L 69.0625,111.40625 L 69.09375,111.34375 L 69.84375,108.5625 L 70.6875,105.0625 L 70.0625,103.4375 L 70.03125,103.40625 L 68.78125,101.65625 L 68.5625,101.34375 L 68.8125,101.0625 L 69.3125,100.4375 L 69.40625,100.28125 L 69.5625,100.25 L 76.5625,98.40625 L 81.4375,95.09375 L 83.1875,91.3125 L 82.71875,87.28125 L 81.59375,83.96875 L 81.59375,83.9375 L 81.5625,83.875 L 81.0625,79.1875 L 81.0625,79.15625 L 81.0625,79.09375 L 81.4375,75.3125 L 81.46875,75.15625 L 81.5625,75.03125 L 85.1875,70.53125 L 85.21875,70.5 L 87.1875,67.4375 L 87.21875,67.375 L 87.90625,64.84375 L 84.59375,63.84375 L 84.15625,63.71875 L 84.21875,63.28125 L 84.625,60.75 L 84.625,60.59375 L 84.78125,60.46875 L 87.96875,57.53125 L 87.96875,57.5 L 89.53125,55.28125 L 89.28125,45.96875 L 88.9375,39.5 L 88.90625,39.5 L 85.84375,39.5 L 84.25,40.5625 L 84,40.6875 L 83.75,40.5625 L 81.5625,39.46875 zM 493.6875,55.53125 L 492.71875,56.25 L 491.65625,59.125 L 491.625,59.21875 L 491.53125,59.3125 L 488.25,62.46875 L 488.1875,62.53125 L 488.09375,62.5625 L 482.8125,64.84375 L 482.71875,64.875 L 482.65625,64.875 C 482.65625,64.875 481.35882,64.998599 480,65.125 C 479.32059,65.188201 478.62126,65.233696 478.0625,65.28125 C 477.50374,65.328804 477.11585,65.374999 476.90625,65.375 C 476.65498,65.375 476.30991,65.321478 475.75,65.25 C 475.19009,65.178522 474.49225,65.094848 473.8125,65 C 472.453,64.810304 471.15625,64.625 471.15625,64.625 L 471.125,64.59375 L 471.09375,64.59375 L 468.28125,63.75 L 462.75,64.75 L 462.6875,64.75 L 462.625,64.75 L 457.8125,64.375 L 457.78125,64.375 L 457.75,64.34375 L 457.46875,64.28125 L 457.46875,66.6875 L 458.65625,69.25 L 458.71875,69.34375 L 458.71875,69.4375 L 459.0625,74.78125 L 459.09375,74.9375 L 459,75.0625 C 459,75.0625 458.71023,75.610788 458.40625,76.21875 C 458.25426,76.522731 458.07687,76.846982 457.96875,77.125 C 457.86063,77.403018 457.8125,77.654766 457.8125,77.6875 C 457.8125,77.752976 458.02719,78.173937 458.3125,78.5 C 458.52272,78.740255 458.65291,78.849832 458.75,78.9375 L 462.8125,78.59375 L 466.84375,77.71875 L 466.96875,77.6875 L 467.0625,77.71875 L 471.71875,78.8125 L 471.875,78.84375 L 472,78.96875 L 475.03125,82.71875 L 475.25,82.96875 L 475.09375,83.28125 L 472.9375,87.375 L 472.875,87.46875 L 472.78125,87.5625 L 469.59375,89.875 L 466.15625,93.25 L 466.125,93.3125 L 464.65625,96.625 L 466.53125,100.875 L 466.53125,100.90625 L 466.5625,100.9375 L 467.4375,104.53125 L 467.5,104.6875 L 467.4375,104.84375 L 466.90625,106.09375 L 473.40625,106.09375 L 473.53125,106.09375 L 473.625,106.15625 L 477.90625,108.5 L 477.9375,108.5 L 482.15625,111.15625 L 482.21875,111.1875 L 486.5,113 L 488,111.65625 L 488.0625,111.59375 L 489.875,109.125 L 491.3125,105 L 491.375,104.8125 L 491.5625,104.71875 L 497.09375,101.875 L 497.15625,101.84375 L 497.25,101.8125 L 499.9375,101.46875 L 500.28125,101.4375 L 500.4375,101.71875 L 503.28125,107.0625 L 503.3125,107.09375 L 505.65625,110.75 L 510.21875,110.9375 L 513.90625,108.75 L 515.71875,104.78125 L 513.8125,99.8125 L 513.75,99.65625 L 513.8125,99.5 L 514.875,95.9375 L 514.875,95.90625 L 516.3125,91.8125 L 516.34375,91.75 L 516.375,91.6875 L 519.78125,86.34375 L 517.96875,85.9375 L 517.8125,85.90625 L 517.71875,85.8125 L 515.90625,83.875 L 511.625,82.28125 L 507.8125,81 L 507.65625,80.96875 L 507.5625,80.8125 L 505.84375,78.25 L 503.5625,76.9375 L 503.34375,76.78125 L 503.3125,76.53125 L 503.1875,74.5625 L 500.65625,71.78125 L 500.53125,71.625 L 500.53125,71.40625 L 500.625,70.09375 L 498.5,67.59375 L 498.375,67.46875 L 498.375,67.25 L 498.5,63.34375 L 498.53125,63.25 L 498.5625,63.15625 L 499.5625,60.84375 C 499.43372,60.719263 499.32097,60.623334 499.03125,60.375 C 498.60568,60.010229 498.04863,59.599543 497.84375,59.53125 C 497.47647,59.408823 497.24121,59.166053 496.9375,58.875 C 496.63379,58.583947 496.32174,58.24515 496.03125,57.90625 C 495.48888,57.273483 495.08936,56.764625 495.03125,56.6875 L 493.6875,55.53125 zM 412.375,59.1875 L 408.9375,59.65625 L 408.90625,59.6875 L 403.375,62.1875 L 403.34375,62.1875 L 396.78125,64.59375 C 396.78125,64.59375 395.03858,65.272618 393.1875,65.96875 C 392.26196,66.316816 391.29062,66.674412 390.53125,66.9375 C 390.15157,67.069044 389.82821,67.170469 389.5625,67.25 C 389.29679,67.329531 389.1685,67.40625 388.90625,67.40625 C 388.95429,67.40625 388.87034,67.389007 388.78125,67.40625 C 388.69216,67.423493 388.58616,67.464724 388.4375,67.5 C 388.14017,67.570553 387.74332,67.657639 387.28125,67.78125 C 386.35711,68.028472 385.15866,68.387705 384,68.71875 C 382.81923,69.056114 382.54194,69.125139 381.6875,69.375 L 382.59375,72.625 L 382.59375,72.65625 L 382.625,72.71875 L 384.71875,76.53125 L 384.75,76.5625 L 384.75,76.59375 L 386.34375,80.34375 L 386.53125,80.71875 L 386.15625,80.96875 L 382.25,83.5 L 381.96875,85.75 L 383.25,87.28125 C 383.26262,87.280025 383.3011,87.282974 383.3125,87.28125 C 383.34764,87.275936 383.37467,87.252397 383.40625,87.25 C 383.46941,87.245207 383.54031,87.252165 383.625,87.25 C 383.79438,87.245669 384.02051,87.249648 384.28125,87.25 C 384.80274,87.250703 385.45184,87.247218 386.125,87.25 C 386.79816,87.252782 387.49499,87.265654 388,87.25 C 388.25251,87.242173 388.45624,87.20179 388.59375,87.1875 C 388.64532,87.182141 388.66397,87.19162 388.6875,87.1875 C 388.70886,87.170283 388.72507,87.144996 388.75,87.125 C 388.83151,87.059629 388.95063,86.985738 389.0625,86.90625 C 389.28625,86.747273 389.55254,86.549725 389.84375,86.375 C 390.13496,86.200275 390.43944,86.026861 390.71875,85.90625 C 390.8584,85.845945 390.98647,85.814619 391.125,85.78125 C 391.26353,85.747881 391.41578,85.718485 391.625,85.78125 C 391.91309,85.867675 392.03377,85.993342 392.21875,86.15625 C 392.40373,86.319158 392.62053,86.509048 392.8125,86.6875 C 393.00447,86.865952 393.18153,87.042753 393.34375,87.15625 C 393.50597,87.269747 393.65146,87.312181 393.65625,87.3125 C 393.9333,87.330969 394.19603,87.451962 394.375,87.625 C 394.55397,87.798038 394.6387,88.016883 394.71875,88.21875 C 394.87885,88.622484 394.94772,89.051258 395.03125,89.40625 C 395.19716,90.111309 395.95601,92.766673 395.96875,92.8125 C 395.96886,92.812891 395.96875,92.84375 395.96875,92.84375 L 396.8125,94.90625 C 396.86398,94.960957 397.11976,95.234642 397.46875,95.59375 C 397.65947,95.789999 397.86295,95.992009 398.03125,96.15625 C 398.19955,96.320491 398.36652,96.462691 398.375,96.46875 C 398.58808,96.620943 398.86976,96.861199 399.125,97.09375 C 399.38024,97.326301 399.59375,97.53125 399.59375,97.53125 L 399.90625,97.84375 L 399.625,98.21875 L 398.5625,99.59375 L 398.46875,99.71875 L 398.3125,99.75 L 395.15625,100.75 C 395.08085,100.79675 394.89054,100.91185 394.59375,101.09375 C 394.42001,101.20024 394.24264,101.31692 394.09375,101.40625 C 393.94486,101.49558 393.84683,101.54534 393.75,101.59375 C 393.63828,101.64961 393.52798,101.70742 393.34375,101.78125 C 393.15952,101.85508 392.94592,101.93983 392.71875,102.03125 C 392.49158,102.12267 392.26915,102.2056 392.09375,102.28125 C 392.00605,102.31908 391.92736,102.34984 391.875,102.375 C 391.82264,102.40016 391.76149,102.44451 391.8125,102.40625 C 391.87815,102.35701 391.77229,102.44822 391.6875,102.53125 C 391.60271,102.61428 391.50799,102.70972 391.375,102.84375 C 391.10902,103.11181 390.7718,103.46984 390.4375,103.8125 C 389.81608,104.44945 389.30071,104.97775 389.21875,105.0625 L 388.9375,106.40625 L 388.90625,106.4375 L 387.875,109.6875 C 387.875,109.6875 387.87506,109.74776 387.875,109.75 C 387.87343,109.8071 387.85443,110.53734 387.84375,111.34375 C 387.8382,111.76276 387.83966,112.1937 387.84375,112.53125 C 387.8458,112.70002 387.83823,112.83097 387.84375,112.9375 C 387.84651,112.99077 387.84157,112.97202 387.84375,113 C 387.85046,113.00733 387.85479,113.03654 387.875,113.0625 C 387.91542,113.11443 387.97958,113.19351 388.0625,113.28125 C 388.22833,113.45672 388.44399,113.68709 388.6875,113.90625 C 389.17452,114.34457 389.78746,114.81561 389.90625,114.875 C 390.20664,115.0252 390.37123,115.23715 390.59375,115.5 C 390.81627,115.76285 391.05972,116.06827 391.28125,116.375 C 391.50278,116.68173 391.71257,116.98551 391.875,117.21875 C 391.95622,117.33537 392.01037,117.4279 392.0625,117.5 C 392.11463,117.5721 392.16898,117.63773 392.125,117.59375 C 392.2394,117.70815 392.25128,117.74926 392.3125,117.84375 C 392.37372,117.93824 392.45014,118.05303 392.53125,118.1875 C 392.69347,118.45645 392.90312,118.7942 393.09375,119.125 C 393.47501,119.7866 393.84375,120.4375 393.84375,120.4375 L 393.875,120.53125 L 393.90625,120.625 L 394,121.84375 L 401.4375,122.34375 L 401.46875,122.34375 L 405.71875,122.34375 L 406,122.34375 L 406.15625,122.59375 L 407.75,125.28125 L 407.78125,125.3125 L 407.78125,125.375 L 408.75,128.0625 L 409.78125,128.0625 L 411.9375,125.40625 L 411.96875,125.34375 L 412.03125,125.3125 L 415.4375,122.96875 L 415.5625,122.90625 L 415.71875,122.90625 L 431.625,123.0625 L 432.09375,123.0625 L 432.09375,123.5625 L 432.09375,128.21875 L 432.09375,128.28125 L 432.09375,128.34375 L 431.03125,131.84375 L 431,131.9375 L 430.3125,136.625 L 430.3125,136.6875 L 430.46875,137.90625 L 439.03125,138.0625 L 442.46875,136.5 L 442.5,136.5 L 442.53125,136.5 L 444.125,135.96875 L 444.28125,135.90625 L 444.46875,135.96875 L 446.84375,136.8125 L 453.21875,136.28125 L 455.9375,134.6875 L 456.09375,131.125 L 456.09375,131.0625 L 455.09375,127.9375 L 451.59375,124.28125 L 451.46875,124.125 L 451.46875,123.9375 L 451.46875,120 L 451.46875,119.90625 L 451.5,119.8125 C 451.5,119.8125 451.86588,119.00719 452.21875,118.125 C 452.39519,117.68391 452.55884,117.22972 452.6875,116.84375 C 452.81616,116.45778 452.90625,116.0744 452.90625,116.0625 C 452.90625,115.81697 452.96913,115.66903 453.0625,115.5 C 453.15587,115.33097 453.27004,115.14538 453.40625,114.96875 C 453.67867,114.6155 454.02722,114.25644 454.375,113.875 C 454.72278,113.49356 455.0802,113.09538 455.34375,112.78125 C 455.6073,112.46712 455.76124,112.14256 455.75,112.1875 C 455.80739,111.95792 455.93542,111.84552 456.0625,111.65625 C 456.18958,111.46698 456.34614,111.23246 456.53125,111 C 456.90147,110.53508 457.35146,110.01726 457.8125,109.5 C 458.73457,108.46548 459.625,107.5 459.625,107.5 L 459.75,107.40625 L 459.90625,107.375 L 465.34375,106.40625 L 465.34375,106.09375 L 465.8125,106.09375 L 466.4375,104.59375 L 465.625,101.28125 L 465.59375,101.1875 L 463.65625,96.8125 L 463.5625,96.59375 L 463.65625,96.40625 L 465.25,92.84375 L 465.28125,92.75 L 465.375,92.6875 L 468.9375,89.125 L 468.96875,89.09375 L 469,89.0625 L 472.09375,86.84375 L 474.03125,83.09375 L 471.34375,79.75 L 466.9375,78.71875 L 462.96875,79.59375 L 462.9375,79.59375 L 462.90625,79.59375 L 458.625,79.96875 L 458.40625,79.96875 L 458.25,79.84375 C 458.25,79.84375 457.9022,79.544475 457.5625,79.15625 C 457.2228,78.768027 456.8125,78.336309 456.8125,77.6875 C 456.81249,77.36309 456.93624,77.074661 457.0625,76.75 C 457.18876,76.425339 457.33949,76.071019 457.5,75.75 C 457.7876,75.174813 458.00601,74.78516 458.0625,74.6875 L 457.71875,69.625 L 456.5,67 L 456.46875,66.90625 L 456.46875,66.78125 L 456.46875,64.0625 L 452.96875,63.34375 L 452.9375,63.34375 L 447.5,62.46875 L 447.40625,62.46875 L 436.125,62.46875 L 436.09375,62.46875 L 436.0625,62.46875 L 429.28125,61.59375 L 429.25,61.59375 L 423.84375,61.21875 L 423.8125,61.21875 L 423.78125,61.1875 L 418.875,60.1875 L 412.375,59.1875 zM 380.71875,69.65625 C 380.42175,69.743602 379.46875,70.03125 379.46875,70.03125 L 379.40625,70.03125 L 379.375,70.03125 L 373.09375,70.8125 L 373.0625,70.8125 L 366.125,74.03125 L 366.125,74.0625 L 366.09375,74.0625 L 359.53125,76.59375 C 359.31658,76.75489 354.55541,80.368177 354,80.8125 C 353.34961,81.332819 348.6875,84.96875 348.6875,84.96875 L 348.625,85 L 348.59375,85.03125 L 346.96875,85.78125 L 352.4375,88.21875 L 352.71875,88.3125 L 352.71875,88.625 L 353,91.71875 L 353,91.75 L 353.625,93.8125 L 353.65625,93.84375 L 355.9375,96.84375 L 356.125,97.09375 L 356,97.34375 L 355.15625,99.09375 L 355.21875,101.9375 L 355.9375,103.6875 L 360.90625,102.1875 L 360.9375,102.1875 C 361.04604,102.125 362.05442,101.54674 363.25,100.90625 C 363.87937,100.56909 364.51229,100.22666 365.0625,99.96875 C 365.33761,99.839794 365.59667,99.737188 365.8125,99.65625 C 366.02833,99.575312 366.19196,99.5 366.4375,99.5 C 366.37054,99.5 366.49299,99.470693 366.65625,99.40625 C 366.81951,99.341807 367.03808,99.246583 367.28125,99.125 C 367.76758,98.881835 368.36195,98.550798 368.9375,98.21875 C 370.03836,97.583638 370.97531,97.023138 371.0625,96.96875 L 374.1875,91.03125 L 374.3125,90.8125 L 374.53125,90.75 L 379.65625,89.53125 L 382.28125,87.75 L 381.03125,86.21875 L 380.90625,86.03125 L 380.9375,85.8125 L 381.28125,83.15625 L 381.3125,82.90625 L 381.5,82.78125 L 385.28125,80.34375 L 383.84375,77.03125 L 383.8125,76.96875 L 381.71875,73.09375 L 381.6875,73.0625 L 381.65625,73 L 380.71875,69.65625 zM 147.20598,73.916565 L 146.95598,74.166565 L 146.98723,74.510315 L 146.64348,74.541565 L 144.98723,77.697815 L 146.86223,81.229065 L 146.98723,81.447815 L 146.86223,81.697815 L 144.45598,86.229065 L 144.45598,86.260315 L 141.17473,92.166565 L 141.17473,92.197815 L 137.08098,98.885315 L 137.08098,98.916565 L 135.83098,104.16657 L 136.92473,107.72907 L 141.61223,106.35407 L 141.64348,106.35407 L 141.67473,106.35407 L 148.26848,105.44782 L 148.39348,105.44782 L 148.51848,105.47907 L 151.39348,106.63532 L 151.39348,106.60407 C 151.39348,106.60407 152.51123,107.00803 153.70598,107.38532 C 154.30336,107.57397 154.93561,107.74557 155.42473,107.88532 C 155.66929,107.95519 155.85761,108.00296 156.01848,108.04157 C 156.17935,108.08018 156.33034,108.10407 156.26848,108.10407 C 156.4462,108.10407 156.55936,108.15423 156.70598,108.19782 C 156.8526,108.24141 157.02721,108.28626 157.20598,108.35407 C 157.56353,108.48969 157.96314,108.67847 158.36223,108.85407 C 159.16041,109.20527 159.89348,109.54157 159.89348,109.54157 L 159.95598,109.57282 L 159.98723,109.60407 L 163.48723,112.19782 L 163.48723,112.13532 L 163.48723,111.66657 L 163.95598,111.63532 L 166.61223,111.51032 L 167.01848,111.51032 L 167.11223,111.91657 C 167.11223,111.91657 167.2345,112.48069 167.36223,113.13532 C 167.46741,113.67436 167.5456,114.17353 167.58098,114.60407 C 167.6086,114.61175 167.60616,114.6275 167.64348,114.63532 C 167.85674,114.67999 168.21665,114.7286 168.64348,114.76032 C 169.49713,114.82377 170.63737,114.84622 171.79973,114.85407 C 174.12445,114.86978 176.45598,114.79157 176.45598,114.79157 L 176.67473,114.79157 L 176.79973,114.91657 L 177.58098,115.57282 L 178.89348,114.85407 L 178.98723,114.82282 L 179.08098,114.79157 L 182.26848,114.54157 L 184.42473,113.41657 L 183.83098,113.07282 L 183.51848,112.91657 L 183.54973,112.60407 L 183.79973,110.32282 L 183.86223,109.88532 L 184.29973,109.88532 L 185.95598,109.88532 L 186.23723,109.88532 L 186.36223,110.10407 L 187.23723,111.44782 L 189.01848,110.19782 L 189.64348,107.47907 L 189.64348,107.38532 L 189.70598,107.29157 L 190.20598,106.60407 L 189.51848,104.32282 L 189.39348,103.97907 L 189.73723,103.76032 L 190.95598,103.01032 L 190.98723,102.97907 L 192.42473,100.94782 L 192.48723,100.85407 L 193.01848,99.635315 L 189.11223,99.635315 L 189.01848,99.635315 L 188.95598,99.604065 L 184.64348,98.104065 L 184.61223,98.072815 L 184.58098,98.072815 L 180.04973,95.791565 L 175.36223,93.385315 L 169.92473,90.604065 L 169.89348,90.604065 L 164.36223,87.072815 L 158.54973,83.666565 L 158.51848,83.635315 L 155.11223,81.229065 L 155.08098,81.229065 L 150.54973,77.822815 L 150.51848,77.791565 L 150.48723,77.760315 L 147.70598,74.979065 L 147.64348,74.916565 L 147.61223,74.854065 L 147.20598,73.916565 zM 145.5,74.5 L 141.84375,74.84375 L 141.8125,74.84375 L 137.78125,74.96875 L 133.8125,76.8125 L 133.75,76.84375 L 133.6875,76.875 L 126.28125,78.125 L 126.21875,78.125 L 119.9375,81.40625 L 117.375,86.09375 L 116.65625,91.21875 L 116.59375,91.59375 L 116.21875,91.625 L 110.5625,92.15625 L 110.53125,92.15625 L 108.8125,92.96875 L 108.59375,93.09375 L 108.375,92.96875 L 106.21875,91.96875 L 106.125,91.9375 L 106.0625,91.84375 L 100.8125,85.96875 L 93.9375,85.96875 L 93.8125,85.96875 L 93.6875,85.90625 L 91.96875,84.90625 L 91.9375,84.875 L 87.25,82.84375 L 82.90625,84.65625 L 83.6875,87.0625 L 83.6875,87.125 L 83.71875,87.15625 L 84.21875,91.34375 L 84.21875,91.46875 L 84.15625,91.59375 L 82.28125,95.65625 L 82.21875,95.78125 L 82.09375,95.84375 L 77.0625,99.25 L 76.96875,99.3125 L 76.90625,99.3125 L 70,101.1875 L 69.84375,101.40625 L 70.875,102.84375 L 70.90625,102.90625 L 70.9375,102.9375 L 71.6875,104.84375 L 71.75,105 L 71.6875,105.15625 L 70.8125,108.8125 L 70.0625,111.59375 L 69.8125,117.1875 L 71.6875,118.9375 L 71.78125,119.03125 L 71.8125,119.15625 L 72.75,122.59375 L 81.0625,122.59375 L 81.375,122.59375 L 81.53125,122.875 L 82.78125,125.53125 L 82.875,125.75 L 82.75,125.96875 L 80.75,129.65625 L 80.71875,129.6875 L 80.6875,129.71875 L 79.09375,131.6875 L 79.65625,134.46875 L 79.65625,134.53125 L 79.65625,134.5625 L 79.65625,134.96875 L 81.375,134.96875 L 85.03125,132.03125 L 85.15625,131.9375 L 85.3125,131.9375 L 90.5,131.5625 L 94.40625,129.25 L 94.4375,129.21875 L 98.6875,126.09375 L 100.34375,123.6875 L 100.375,123.65625 L 100.40625,123.625 L 104.71875,119.4375 L 104.75,119.40625 L 104.8125,119.375 L 107.03125,118.09375 L 108.09375,113.25 L 108.125,113.21875 L 108.125,113.1875 L 109.78125,109 L 109.875,108.71875 L 110.21875,108.6875 L 117.0625,108.5625 L 119.28125,107.71875 L 119.34375,107.6875 L 119.4375,107.6875 L 122.84375,107.5625 L 122.90625,107.5625 L 122.96875,107.5625 L 126.5,108.34375 L 126.59375,108.34375 L 126.6875,108.40625 L 130.9375,111.5625 L 134.28125,111 L 136.03125,107.90625 L 134.875,104.15625 L 134.84375,104.03125 L 134.875,103.90625 L 136.125,98.46875 L 136.15625,98.40625 L 136.1875,98.34375 L 140.34375,91.53125 L 143.625,85.59375 L 145.90625,81.3125 L 144,77.75 L 143.875,77.5 L 144,77.28125 L 145.5,74.5 zM 885.34375,76.71875 C 885.21684,76.723282 885.03818,76.729985 884.84375,76.75 C 884.45489,76.79003 884.00046,76.867118 883.53125,76.9375 C 882.68822,77.063955 882.02788,77.191706 881.875,77.21875 L 879.625,80.1875 L 879.625,80.21875 L 878.4375,84.46875 L 878.375,84.625 L 878.25,84.71875 L 875.84375,86.6875 L 878.0625,90.03125 L 878.09375,90.09375 L 880.375,92.90625 L 880.4375,92.96875 L 880.46875,93.0625 L 881.53125,96.28125 L 881.625,96.46875 L 881.5,96.6875 L 878.28125,102.375 L 878.28125,102.4375 L 878.25,102.46875 L 875.09375,106.3125 L 872.0625,112 L 869.40625,117.5 L 869.375,117.53125 L 867.5,122.875 L 867.6875,122.6875 L 870.15625,125.1875 L 873.5,128.3125 L 876.8125,129.71875 L 876.84375,129.71875 C 876.84375,129.71875 877.44872,130.04335 878.15625,130.375 C 878.86377,130.70665 879.71351,131.069 879.9375,131.125 C 880.28728,131.21244 880.51047,131.42519 880.71875,131.65625 C 880.92703,131.88731 881.13199,132.14676 881.3125,132.40625 C 881.67352,132.92522 882.06887,133.40944 882.1875,133.46875 C 882.62695,133.68847 882.76911,134.05132 882.96875,134.46875 C 883.16839,134.88618 883.33999,135.39496 883.5,135.875 C 883.76669,136.67507 883.90893,137.2053 883.96875,137.4375 L 884.0625,137.46875 L 887.90625,138.40625 L 895.75,137.1875 C 895.75,137.1875 895.80926,137.18841 895.8125,137.1875 C 895.86321,137.17329 896.24237,137.06854 896.6875,136.875 C 896.92427,136.77206 897.18123,136.64826 897.34375,136.53125 C 897.50627,136.41424 897.5666,136.2961 897.5625,136.3125 C 897.5658,136.29931 897.59851,136.10216 897.625,135.84375 C 897.65149,135.58534 897.65698,135.23359 897.6875,134.84375 C 897.74854,134.06408 897.8393,133.08693 897.90625,132.09375 C 897.9732,131.10057 898.03208,130.09133 898.09375,129.28125 C 898.15542,128.47117 898.1865,127.91125 898.25,127.59375 C 898.4336,126.67574 899.5,121.6875 899.5,121.6875 L 899.5625,121.40625 L 899.84375,121.3125 L 904.65625,119.71875 L 904.6875,119.6875 L 911.9375,117.75 L 916.6875,113.65625 L 918.4375,107.90625 L 918.5,107.75 L 918.59375,107.65625 L 921.09375,105.5 L 921.375,105.28125 L 921.6875,105.46875 L 924.84375,107.34375 L 924.8125,107.15625 L 924.8125,107.09375 L 924.8125,107.03125 L 924.9375,103.40625 L 921.71875,101.125 L 917.53125,101.625 L 913.375,102.25 L 913.0625,102.28125 L 912.875,102.03125 L 911.375,99.75 L 911.34375,99.6875 L 911.3125,99.625 L 910.1875,95.625 C 910.1875,95.625 910.15928,95.569141 910.15625,95.5625 C 910.13318,95.511998 910.05804,95.346735 909.90625,95.09375 C 909.7345,94.807498 909.45007,94.521914 909.40625,94.5 C 909.19053,94.392143 908.87488,94.165104 908.375,93.84375 C 907.87512,93.522396 907.25683,93.113872 906.65625,92.71875 C 905.48486,91.948099 904.42936,91.254982 904.375,91.21875 L 904.3125,91.1875 L 900.84375,89.5625 L 900.71875,89.53125 L 900.65625,89.40625 L 899.5625,87.9375 L 899.53125,87.90625 L 896.46875,84.59375 L 896.40625,84.53125 L 894.4375,83.0625 L 894.1875,83.65625 L 894.0625,83.9375 L 893.71875,83.9375 L 891.34375,83.9375 L 891,83.9375 L 890.875,83.65625 L 889.75,81.125 L 889.65625,80.9375 L 889.71875,80.75 L 890.6875,78.09375 C 889.87755,77.876662 885.93716,76.82023 885.53125,76.71875 C 885.58225,76.7315 885.47066,76.714218 885.34375,76.71875 zM 541.1875,80.1875 C 540.99652,80.281097 539.57022,81.008799 537.84375,81.8125 C 536.92531,82.24005 535.98668,82.676031 535.21875,83 C 534.83479,83.161984 534.46555,83.27622 534.1875,83.375 C 533.90945,83.47378 533.7822,83.562499 533.5,83.5625 C 533.54419,83.5625 533.38257,83.564326 533.21875,83.625 C 533.05493,83.685674 532.86525,83.791846 532.625,83.90625 C 532.1445,84.135058 531.53181,84.437191 530.96875,84.75 C 529.84264,85.375619 528.8125,86 528.8125,86 L 528.75,86.0625 L 528.625,86.09375 L 522.84375,86.96875 L 522.75,86.96875 L 522.65625,86.96875 L 520.8125,86.5625 L 517.21875,92.21875 L 515.84375,96.21875 L 514.8125,99.59375 L 516.71875,104.65625 L 516.78125,104.84375 L 516.71875,105.03125 L 514.75,109.3125 L 514.6875,109.46875 L 514.53125,109.53125 L 510.625,111.84375 L 510.5,111.9375 L 510.34375,111.9375 L 505.34375,111.75 L 505.0625,111.75 L 504.9375,111.53125 L 502.4375,107.59375 L 502.4375,107.5625 L 502.40625,107.5625 L 499.71875,102.5 L 497.5625,102.78125 L 497.53125,102.78125 L 492.1875,105.53125 L 490.84375,109.4375 L 490.8125,109.53125 L 490.75,109.59375 L 488.78125,112.25 L 488.75,112.3125 L 488.71875,112.34375 L 487.25,113.65625 L 489.4375,115.71875 L 489.5625,115.8125 L 489.59375,115.9375 L 490.28125,118.65625 L 494.6875,122 L 499.84375,122.34375 L 500.03125,122.375 L 500.15625,122.5 L 504.34375,126.5 L 507.03125,126.8125 L 511.875,125.75 L 511.90625,125.75 L 511.9375,125.75 C 511.9375,125.75 513.19049,125.65188 514.53125,125.5625 C 515.87201,125.47312 517.24703,125.40625 517.6875,125.40625 C 518.09524,125.40625 518.36585,125.63465 518.5625,125.875 C 518.75915,126.11535 518.90925,126.38785 519.03125,126.65625 C 519.27525,127.19305 519.40625,127.71875 519.40625,127.71875 L 519.46875,127.875 L 519.40625,128.03125 L 518.5,130.28125 L 521.21875,131.46875 L 524.65625,131.46875 L 524.90625,131.46875 L 525.0625,131.6875 L 527.0625,134.53125 L 535.5625,135.21875 L 535.625,135.21875 L 535.6875,135.25 L 542.9375,137.53125 L 547.84375,138.21875 L 552.28125,134 L 553.84375,131.03125 L 555.28125,128.15625 L 555.53125,127.625 L 556.03125,128 C 556.03125,128 556.44889,128.34835 557,128.6875 C 557.55111,129.02665 558.24901,129.3125 558.5625,129.3125 C 559.23711,129.3125 560.58767,129.55695 561.84375,129.78125 C 563.09983,130.00555 564.21875,130.21875 564.21875,130.21875 L 565.09375,130.40625 L 564.46875,131.0625 L 562.1875,133.46875 L 564.75,135.21875 L 564.78125,135.21875 L 566.78125,135.71875 L 571.65625,134.53125 L 576.96875,133.09375 C 576.96875,133.09375 576.99956,133.09393 577,133.09375 C 577.02776,133.08256 577.89409,132.72869 578.84375,132.5625 C 579.32602,132.4781 579.81197,132.43345 580.28125,132.5625 C 580.51589,132.62703 580.75817,132.75804 580.9375,132.96875 C 581.11683,133.17946 581.21875,133.45651 581.21875,133.75 C 581.21875,134.08163 581.21875,133.92322 581.21875,134.15625 L 584.71875,131.90625 L 584.8125,131.84375 L 584.9375,131.8125 L 590.0625,131.15625 L 593.3125,127.28125 L 593.375,127.1875 L 595.96875,121.75 L 596.09375,121.5 L 596.375,121.46875 L 600.34375,120.96875 L 602.9375,118.71875 C 602.897,118.70076 602.85264,118.70552 602.8125,118.6875 C 602.06048,118.34986 601.43043,118.02765 601.375,118 C 601.37257,117.99879 601.3125,117.96875 601.3125,117.96875 L 597.96875,116.75 L 597.6875,116.625 L 597.65625,116.34375 L 596.90625,112.34375 L 593,108.6875 L 589.09375,105.25 L 582.28125,104.375 L 582.21875,104.375 L 582.1875,104.375 L 579.125,103.21875 L 575.34375,107.9375 L 575.28125,108 L 572.6875,112.25 L 572.53125,112.46875 L 572.25,112.46875 L 565.4375,112.59375 L 565.21875,112.59375 L 565.0625,112.4375 L 563.65625,110.78125 L 560.71875,107.5 L 557.9375,106.5 L 557.78125,106.46875 L 557.6875,106.3125 L 556.8125,104.9375 L 554.03125,100.90625 L 551.34375,98.46875 L 551.1875,98.34375 L 551.1875,98.15625 L 550.65625,93.59375 L 550.65625,93.5625 L 550.40625,87.71875 L 548.625,84.875 L 548.59375,84.84375 L 545.96875,81.375 L 542.75,80.78125 L 542.6875,80.75 L 542.65625,80.75 L 541.1875,80.1875 zM 848,84.5625 C 847.98791,84.567609 847.98967,84.577017 847.96875,84.59375 C 847.89903,84.649527 847.77627,84.744074 847.65625,84.875 C 847.41622,85.136852 847.12252,85.503304 846.84375,85.875 C 846.2862,86.618394 845.78125,87.375 845.78125,87.375 L 845.71875,87.46875 L 845.65625,87.53125 L 841.875,90.03125 L 841.6875,90.15625 L 841.46875,90.125 L 837.53125,89.09375 L 832.71875,87.71875 L 832.71875,87.6875 L 827.5,86.03125 L 825.21875,89.15625 C 825.21875,89.15625 824.47056,90.231507 823.75,91.375 C 823.38972,91.946747 823.04526,92.523628 822.78125,93 C 822.64924,93.238186 822.53833,93.437943 822.46875,93.59375 C 822.42526,93.691129 822.3882,93.752765 822.375,93.78125 C 822.375,93.809438 822.37165,93.81262 822.375,93.8125 C 822.3671,94.019226 822.28997,94.15742 822.21875,94.25 C 822.14355,94.347755 822.06268,94.419634 821.96875,94.5 C 821.78088,94.660731 821.52752,94.824241 821.25,95 C 820.69497,95.351519 819.99796,95.750717 819.28125,96.125 C 817.89169,96.850658 816.58342,97.46101 816.5,97.5 L 814.46875,98.875 L 816.1875,103.75 L 818.25,106.8125 L 821.375,109.25 L 821.4375,109.28125 L 821.46875,109.34375 L 823.59375,112 L 823.90625,112.375 L 823.5625,112.6875 L 820.75,115.3125 L 820.6875,115.375 L 816.125,121.375 L 816.09375,121.375 L 810.625,128.09375 L 809.96875,131.875 L 809.9375,131.9375 L 809.90625,132 L 809.8125,132.21875 L 814.8125,134.875 L 814.875,134.90625 L 819.46875,136.6875 L 819.78125,136.8125 L 819.78125,137.15625 L 819.78125,146.03125 L 819.78125,146.0625 L 820.75,149.1875 L 822.625,149.28125 L 826.40625,144.6875 L 826.4375,144.65625 L 826.46875,144.625 L 830.40625,141.40625 L 830.4375,141.34375 L 830.5,141.3125 L 833.375,140.0625 L 833.5625,140 L 833.71875,140.0625 L 837.46875,141.3125 L 837.5,141.3125 L 839.75,142.125 L 841.65625,140.65625 L 841.65625,140.6875 L 844.5625,138.28125 L 845.9375,135.21875 L 846.09375,130.96875 L 845.4375,129.09375 L 845.375,128.96875 L 845.40625,128.84375 L 845.75,126.71875 L 845.78125,126.625 L 845.8125,126.53125 L 847.96875,122.625 L 848.0625,122.4375 L 848.28125,122.375 L 851.125,121.65625 L 851.1875,121.65625 L 851.25,121.65625 L 856.78125,121.65625 L 856.8125,121.65625 L 856.84375,121.65625 L 861.59375,122.34375 L 866.625,122.34375 L 868.46875,117.15625 L 868.46875,117.125 L 868.46875,117.09375 L 871.15625,111.5625 L 874.1875,105.84375 L 874.21875,105.78125 L 874.25,105.75 L 877.40625,101.90625 L 877.46875,101.8125 L 880.53125,96.375 L 879.5625,93.4375 L 877.28125,90.6875 L 877.28125,90.65625 L 877.25,90.625 L 875.0625,87.34375 L 874.09375,88.125 L 873.875,88.3125 L 873.59375,88.1875 L 869.28125,86.34375 L 869.15625,86.3125 L 866.15625,85.8125 L 866.15625,85.84375 L 861.34375,85.3125 L 856.15625,84.6875 L 856.03125,84.6875 L 851.875,85.1875 L 851.78125,85.21875 L 851.71875,85.1875 C 851.71875,85.1875 850.88041,85.032182 849.96875,84.875 C 849.51292,84.796409 849.04098,84.714542 848.65625,84.65625 C 848.33466,84.607524 848.13152,84.571944 848.03125,84.5625 C 848.031,84.56229 848.0047,84.562043 848,84.5625 zM 346.0625,86.1875 L 343.65625,87.3125 L 334.625,91.5625 L 334.5625,91.59375 L 325.53125,97.5 L 325.46875,97.53125 L 325.40625,97.5625 L 317.53125,99.5625 L 312.96875,102.90625 L 312,108.40625 L 311.96875,108.5 L 311.90625,108.59375 L 309.5,112 L 309.46875,112.0625 L 309.4375,112.09375 L 306.1875,115 L 309.28125,118.5 L 312.03125,120.4375 L 320.875,121.0625 L 320.90625,121.0625 L 320.9375,121.0625 L 324.09375,121.59375 L 324.125,121.59375 L 327.78125,122.46875 L 328.21875,122.5625 L 328.15625,123 L 328.0625,124.125 C 328.52875,123.9705 328.94523,123.80224 329.5,123.65625 C 330.35573,123.43106 331.125,123.25 331.125,123.25 L 331.1875,123.25 L 331.25,123.25 L 342.28125,123.25 L 342.3125,123.25 L 345.75,122.1875 L 345.8125,122.1875 L 345.90625,122.1875 L 347.375,122.1875 C 347.2581,122.01227 347.02557,121.65412 346.6875,121.0625 C 346.48067,120.70055 346.27284,120.32448 346.125,119.96875 C 345.97716,119.61302 345.81122,119.31699 345.9375,118.875 C 346.01109,118.61747 346.15536,118.34125 346.34375,117.96875 C 346.53214,117.59625 346.77524,117.16019 347,116.75 C 347.42133,115.98108 347.76387,115.36585 347.8125,115.28125 L 347.96875,111.84375 L 348.15625,108.375 L 348.1875,108.09375 L 348.40625,107.96875 L 355,104.0625 L 354.28125,102.25 L 354.25,102.15625 L 354.21875,102.0625 L 354.15625,99.03125 L 354.125,98.90625 L 354.1875,98.8125 L 354.96875,97.21875 L 352.8125,94.40625 L 352.75,94.34375 L 352.75,94.25 L 352.03125,91.9375 L 352,91.875 L 352,91.84375 L 351.75,89 L 345.96875,86.4375 L 346.0625,86.1875 zM 391.375,86.75 C 391.3224,86.762669 391.23088,86.798028 391.125,86.84375 C 390.91324,86.935193 390.61058,87.089903 390.34375,87.25 C 390.07692,87.410097 389.82536,87.576387 389.625,87.71875 C 389.52482,87.789931 389.43439,87.858619 389.375,87.90625 C 389.31561,87.953881 389.27198,87.98815 389.3125,87.9375 C 389.11057,88.18992 389.01989,88.137453 388.9375,88.15625 C 388.85511,88.175047 388.779,88.177991 388.6875,88.1875 C 388.50449,88.206518 388.29632,88.241784 388.03125,88.25 C 387.50111,88.266433 386.80229,88.252799 386.125,88.25 C 385.44771,88.247201 384.79492,88.250693 384.28125,88.25 C 384.02441,88.249654 383.80739,88.246135 383.65625,88.25 C 383.58068,88.251932 383.50181,88.247491 383.46875,88.25 C 383.47364,88.249261 383.45163,88.274178 383.5625,88.21875 L 383.53125,88.125 L 383.3125,88.28125 L 380.09375,90.40625 L 380.03125,90.46875 L 379.9375,90.5 L 374.96875,91.6875 L 371.875,97.5625 L 371.8125,97.6875 L 371.6875,97.75 C 371.6875,97.75 370.60783,98.418561 369.4375,99.09375 C 368.85234,99.431345 368.26813,99.772183 367.75,100.03125 C 367.49093,100.16078 367.23909,100.26171 367.03125,100.34375 C 366.82341,100.42579 366.68303,100.5 366.4375,100.5 C 366.50447,100.5 366.33104,100.5282 366.15625,100.59375 C 365.98146,100.6593 365.76061,100.75284 365.5,100.875 C 364.97879,101.11932 364.33938,101.44877 363.71875,101.78125 C 362.47749,102.44621 361.3125,103.125 361.3125,103.125 L 361.28125,103.15625 L 361.21875,103.15625 L 355.84375,104.75 L 349.15625,108.6875 L 348.96875,111.90625 L 348.8125,115.46875 L 348.8125,115.59375 L 348.75,115.6875 C 348.75,115.6875 348.31833,116.44092 347.875,117.25 C 347.65334,117.65454 347.42991,118.05052 347.25,118.40625 C 347.07912,118.74412 346.96481,119.04631 346.9375,119.125 C 346.95852,119.15336 346.97249,119.3459 347.0625,119.5625 C 347.18252,119.8513 347.36754,120.22133 347.5625,120.5625 C 347.95241,121.24484 348.375,121.875 348.375,121.875 L 347.90625,122.1875 L 353.9375,122.1875 L 354.21875,122.1875 L 354.375,122.4375 L 355.625,124.5625 L 355.65625,124.65625 L 355.65625,124.71875 L 356.5625,129.5625 L 356.5625,129.59375 L 356.5625,129.625 C 356.5625,129.625 356.61417,130.46715 356.84375,131.34375 C 356.95854,131.78205 357.11256,132.2141 357.3125,132.53125 C 357.51244,132.8484 357.73732,133.04232 357.96875,133.09375 C 358.7972,133.27785 359.89635,133.57793 360.9375,133.84375 C 361.97865,134.10957 363.00942,134.3125 363.40625,134.3125 C 364.13641,134.3125 364.81926,134.69136 365.46875,135.0625 C 366.11824,135.43364 366.71739,135.82745 367,135.96875 C 367.29783,136.11766 367.52959,136.35536 367.78125,136.625 C 368.03291,136.89464 368.30199,137.20196 368.53125,137.5 L 368.53125,137.375 L 370.15625,137.21875 C 370.22887,137.16279 370.53349,136.90771 370.96875,136.5625 C 371.45081,136.18018 372.01429,135.73571 372.15625,135.59375 C 372.66554,135.08446 373.3087,134.87936 373.71875,134.8125 C 373.74605,134.79779 373.81485,134.76444 373.875,134.71875 C 373.99529,134.62736 374.15084,134.49194 374.3125,134.34375 C 374.63582,134.04737 374.99124,133.70224 375.21875,133.5 C 375.51672,133.23513 375.83445,133.16008 376.09375,133.09375 C 376.35305,133.02742 376.56236,132.97665 376.625,132.9375 C 376.99166,132.70834 377.59623,132.31 378.21875,131.6875 C 378.475,131.43125 378.79534,130.92984 379.03125,130.46875 C 379.1492,130.23821 379.22938,130.02246 379.3125,129.84375 C 379.39562,129.66504 379.4549,129.56476 379.53125,129.4375 C 379.49664,129.49518 379.56846,129.32389 379.625,129.15625 C 379.68154,128.98861 379.74289,128.78526 379.8125,128.5625 C 379.95172,128.11698 380.09387,127.65598 380.21875,127.375 C 380.29757,127.19766 380.39013,126.93207 380.53125,126.65625 C 380.67237,126.38043 380.85386,126.08871 381.21875,125.90625 C 381.65819,125.68654 382.01993,125.86246 382.28125,126 C 382.54257,126.13754 382.82611,126.30368 382.78125,126.28125 C 382.98986,126.38556 383.01342,126.45836 383.125,126.5625 C 383.23658,126.66664 383.34302,126.78598 383.46875,126.90625 C 383.59448,127.02652 383.74361,127.16554 383.84375,127.25 C 383.88581,127.28547 383.91173,127.32561 383.9375,127.34375 C 383.98703,127.36026 383.99205,127.36076 383.96875,127.34375 C 384.20511,127.42448 384.53751,127.5819 384.90625,127.75 C 385.09582,127.83642 385.29172,127.93588 385.4375,128 C 385.50536,128.02985 385.48148,128.04351 385.53125,128.0625 C 385.54415,128.06742 385.55315,128.05886 385.5625,128.0625 C 385.60604,128.04728 385.64341,128.03194 385.71875,128 C 385.89603,127.92485 386.14488,127.79982 386.375,127.6875 C 386.83525,127.46285 387.28125,127.25 387.28125,127.25 L 387.40625,127.15625 L 387.53125,127.1875 C 387.53125,127.1875 387.90514,127.20224 388.3125,127.21875 C 388.51618,127.22701 388.73458,127.248 388.90625,127.25 C 389.07792,127.252 389.254,127.21287 389.21875,127.21875 C 389.10798,127.23721 389.29939,127.20574 389.46875,127.125 C 389.63811,127.04426 389.82815,126.91954 390.03125,126.8125 C 390.373,126.63239 390.59456,126.5204 390.6875,126.46875 L 391.6875,124.6875 L 391.71875,124.65625 L 393.03125,122.03125 L 392.90625,120.8125 C 392.85815,120.72691 392.5678,120.23071 392.21875,119.625 C 392.02992,119.29732 391.84336,118.97715 391.6875,118.71875 C 391.60957,118.58955 391.55109,118.45385 391.5,118.375 C 391.44891,118.29615 391.36774,118.24275 391.4375,118.3125 C 391.34888,118.22388 391.30983,118.1765 391.25,118.09375 C 391.19017,118.011 391.14451,117.89901 391.0625,117.78125 C 390.89848,117.54574 390.68249,117.2647 390.46875,116.96875 C 390.25501,116.6728 390.03696,116.35323 389.84375,116.125 C 389.65054,115.89677 389.43622,115.73373 389.46875,115.75 C 389.05183,115.54153 388.54869,115.12195 388.03125,114.65625 C 387.77253,114.4234 387.5066,114.17414 387.3125,113.96875 C 387.21545,113.86606 387.13404,113.77943 387.0625,113.6875 C 386.99096,113.59557 386.92893,113.53247 386.875,113.34375 C 386.82972,113.18526 386.85044,113.12906 386.84375,113 C 386.83706,112.87094 386.84589,112.70776 386.84375,112.53125 C 386.83947,112.17823 386.83814,111.73613 386.84375,111.3125 C 386.85497,110.46525 386.875,109.6875 386.875,109.6875 L 386.875,109.59375 L 386.875,109.53125 L 387.96875,106.1875 L 387.9375,106.1875 L 388.25,104.71875 L 388.28125,104.5625 L 388.375,104.46875 C 388.375,104.46875 389.04807,103.81245 389.71875,103.125 C 390.05409,102.78128 390.38652,102.42809 390.65625,102.15625 C 390.79112,102.02033 390.90901,101.90159 391,101.8125 C 391.09099,101.72341 391.10846,101.67648 391.21875,101.59375 C 391.31441,101.52201 391.36465,101.53501 391.4375,101.5 C 391.51035,101.46499 391.59244,101.416 391.6875,101.375 C 391.87761,101.29301 392.11333,101.18648 392.34375,101.09375 C 392.57417,101.00102 392.78747,100.9164 392.96875,100.84375 C 393.15003,100.7711 393.33494,100.70753 393.3125,100.71875 C 393.30495,100.72252 393.41842,100.64895 393.5625,100.5625 C 393.70658,100.47605 393.89026,100.35556 394.0625,100.25 C 394.40698,100.03887 394.75,99.84375 394.75,99.84375 L 394.78125,99.8125 L 394.84375,99.78125 L 397.875,98.875 L 398.5625,97.96875 C 398.50235,97.913073 398.50771,97.90772 398.4375,97.84375 C 398.19051,97.618712 397.88068,97.35227 397.78125,97.28125 C 397.63348,97.175701 397.52283,97.049765 397.34375,96.875 C 397.16467,96.700235 396.94432,96.481206 396.75,96.28125 C 396.36135,95.881337 396.03125,95.53125 396.03125,95.53125 L 395.96875,95.46875 L 395.90625,95.375 L 395.03125,93.1875 L 395.03125,93.15625 L 395,93.125 C 395,93.125 394.25234,90.431784 394.0625,89.625 C 393.96746,89.221064 393.90909,88.806087 393.8125,88.5625 C 393.7642,88.440706 393.71919,88.374395 393.6875,88.34375 C 393.65581,88.313105 393.65153,88.316352 393.59375,88.3125 C 393.26372,88.290498 393.01384,88.131481 392.78125,87.96875 C 392.54866,87.806019 392.32923,87.627351 392.125,87.4375 C 391.92077,87.247649 391.71652,87.041891 391.5625,86.90625 C 391.43203,86.791354 391.37222,86.757211 391.375,86.75 zM 813.59375,99.46875 L 810.96875,101.25 L 810.9375,101.28125 L 805.78125,105.53125 L 805.75,105.5625 L 805.71875,105.59375 L 798.90625,109.75 L 798.84375,109.8125 L 798.75,109.8125 L 792.75,110.90625 L 789.8125,114.09375 L 789.78125,114.125 L 789.75,114.125 L 785.9375,117.03125 L 785.9375,117.0625 L 785.90625,117.0625 L 779.96875,120.625 L 779.875,120.6875 L 779.75,120.6875 L 774.65625,120.9375 L 769.46875,123.125 L 769.4375,123.15625 L 767.59375,124.875 L 770.5,127.28125 L 770.53125,127.34375 L 770.59375,127.375 L 772.71875,130.25 L 772.78125,130.3125 L 772.8125,130.375 L 774.71875,136.40625 L 774.75,136.40625 L 776.15625,139.4375 L 776.21875,139.53125 L 776.21875,139.6875 L 775.84375,145.21875 L 775.84375,145.3125 L 775.8125,145.40625 L 774.46875,148.09375 L 774.78125,150.59375 L 774.78125,150.65625 L 775.46875,153.71875 L 777.875,155 L 781.34375,153.65625 L 785.9375,149.8125 L 786,149.71875 L 786.125,149.6875 L 790.65625,148.46875 L 793.3125,145.46875 L 793.375,145.375 L 795.625,141.03125 L 795.71875,140.84375 L 795.90625,140.78125 L 802.46875,138.3125 L 802.5,138.28125 L 806.75,136.25 L 809,131.59375 L 809,131.5625 L 809.6875,127.78125 L 809.71875,127.65625 L 809.78125,127.53125 L 815.3125,120.78125 L 819.96875,114.6875 L 820,114.65625 L 820,114.625 L 822.53125,112.28125 L 820.75,110.03125 L 820.6875,109.96875 L 817.5625,107.53125 L 817.5,107.5 L 817.4375,107.40625 L 815.3125,104.21875 L 815.25,104.15625 L 815.25,104.09375 L 813.59375,99.46875 zM 198.5625,101.125 L 195.6875,102.46875 L 193.625,104.6875 L 194.1875,106.40625 L 194.25,106.59375 L 194.125,106.78125 L 192.125,110.5625 L 192.09375,110.625 L 192.03125,110.6875 L 190.375,112.46875 L 189.8125,115.46875 L 191.40625,117.0625 L 191.4375,117.09375 L 193.53125,119.5625 L 193.5625,119.59375 L 195.8125,121.875 L 195.875,121.90625 L 199.375,123.78125 L 199.53125,123.875 L 199.59375,124.03125 L 200.625,126.46875 L 204.21875,128 L 205.59375,125.46875 L 205.625,125.375 L 206.84375,121.4375 L 207.5,119.28125 L 207.53125,119.09375 L 207.71875,119 L 211.375,116.84375 L 211.40625,116.84375 L 214.03125,115.4375 L 214.21875,115.375 L 214.40625,115.40625 L 216.03125,115.78125 L 216.125,115.8125 L 216.1875,115.84375 L 219.78125,118 L 222,117.46875 L 225.03125,115.9375 L 225.0625,115.9375 L 227.65625,114.6875 L 227.6875,114.6875 L 231.375,112.5625 L 232,109.6875 C 231.36187,109.53282 228.26289,108.77601 227.40625,108.53125 C 226.56471,108.29081 223,107.40625 223,107.40625 L 215.5625,105.78125 L 215.53125,105.75 L 215.5,105.75 L 209.9375,103.875 L 209.9375,103.84375 L 209.90625,103.84375 L 204.28125,101.5 L 198.5625,101.125 zM 921.46875,106.5 L 919.375,108.3125 L 917.625,114.0625 L 917.59375,114.21875 L 917.46875,114.3125 L 912.46875,118.59375 L 912.375,118.65625 L 912.28125,118.6875 L 904.96875,120.65625 L 904.9375,120.65625 L 900.4375,122.15625 C 900.34408,122.59248 899.41526,126.95494 899.25,127.78125 C 899.22421,127.91018 899.15485,128.57236 899.09375,129.375 C 899.03265,130.17764 898.97322,131.16282 898.90625,132.15625 C 898.83928,133.14968 898.74923,134.14909 898.6875,134.9375 C 898.65664,135.3317 898.62167,135.66508 898.59375,135.9375 C 898.56583,136.20992 898.5726,136.39712 898.53125,136.5625 C 898.43786,136.93605 898.16226,137.15942 897.90625,137.34375 C 897.65024,137.52808 897.37037,137.66098 897.09375,137.78125 C 896.54051,138.02179 896.03125,138.15625 896.03125,138.15625 L 896,138.15625 L 895.96875,138.1875 L 887.9375,139.4375 L 887.84375,139.4375 L 887.75,139.40625 L 883.78125,138.4375 L 881.9375,144.625 L 881.9375,144.65625 L 882.09375,147.59375 L 882.09375,147.65625 L 882.8125,151.53125 L 882.8125,151.5625 L 882.8125,151.59375 C 882.8125,151.59375 882.8587,152.49031 882.8125,153.4375 C 882.7894,153.91109 882.75251,154.39859 882.65625,154.8125 C 882.60812,155.01945 882.53722,155.19474 882.4375,155.375 C 882.33778,155.55526 882.18814,155.77328 881.90625,155.84375 C 881.85643,155.87513 881.7301,155.96024 881.59375,156.0625 C 881.38398,156.21983 881.12592,156.45069 880.8125,156.71875 C 880.18566,157.25486 879.41256,157.95555 878.65625,158.65625 C 877.14363,160.05765 875.71875,161.4375 875.71875,161.4375 L 875.625,161.5 L 875.5,161.53125 L 870.15625,163.34375 L 870.09375,163.34375 L 870,163.34375 L 864.28125,163.34375 L 862.03125,165 L 863.4375,168.25 L 865.75,170.25 L 873.875,172.1875 L 874.0625,172.25 L 874.15625,172.40625 L 877,176.8125 L 885.125,182.625 L 885.21875,182.71875 L 885.28125,182.84375 L 886.71875,186.46875 C 886.74081,186.4605 887,186.375 887,186.375 L 887.125,186.71875 L 892.03125,187.1875 L 898.75,184.375 L 898.75,184.34375 L 898.78125,184.34375 L 908.25,181.5 L 908.25,181.46875 L 908.28125,181.46875 L 914.53125,180.0625 L 914.53125,180.03125 L 914.5625,180.03125 L 921.65625,178.6875 C 921.64694,178.46816 921.62698,178.35123 921.65625,178 C 921.68086,177.70465 921.72363,177.38203 921.84375,177.09375 C 921.90381,176.94961 921.9864,176.81544 922.125,176.6875 C 922.2636,176.55956 922.47321,176.46875 922.6875,176.46875 C 922.9613,176.46875 923.98543,176.37021 924.875,176.28125 C 925.55073,176.21368 925.89488,176.18486 926.15625,176.15625 L 926.65625,171.1875 L 926.6875,170.65625 L 927.25,170.75 L 931.375,171.625 L 935.5625,170.40625 L 935.625,170.40625 L 935.65625,170.40625 L 939.71875,169.9375 L 939.65625,169.8125 L 939.40625,169.40625 L 939.78125,169.15625 L 942.28125,167.4375 L 942.03125,166.28125 L 939.28125,162.40625 L 939.28125,162.375 L 936.625,158.0625 L 936.59375,158.03125 L 936.59375,158 L 935.5625,155.59375 L 935.5,155.4375 L 935.5625,155.28125 L 936.375,152.5625 L 935.375,150.53125 L 935.34375,150.46875 L 933.90625,149.0625 L 933.75,148.9375 L 933.75,148.71875 L 933.75,145.8125 L 933.75,145.46875 L 934.09375,145.34375 L 935.71875,144.78125 L 937.8125,142.4375 L 939.34375,139.4375 L 939.375,139.40625 L 940.84375,135.90625 L 940.875,135.78125 L 941.59375,130.78125 L 940.84375,128.21875 L 940.84375,128.15625 L 938.78125,125 L 938.75,124.96875 L 938.71875,124.9375 L 936.84375,120.625 L 936.8125,120.5625 L 936.8125,120.5 L 936.3125,116.8125 L 932.40625,113.9375 L 929.375,113.46875 L 929.34375,113.46875 L 926.5625,112.71875 L 926.3125,112.65625 L 926.21875,112.40625 L 925.59375,110.78125 L 925.5625,110.71875 L 925.5625,110.6875 L 925,108.03125 L 924.75,108.46875 L 921.46875,106.5 zM 252.46875,106.8125 L 249.125,110.3125 L 248.96875,110.4375 L 248.75,110.46875 L 239.03125,110.59375 L 238.9375,110.59375 L 238.84375,110.5625 L 235.625,109.34375 L 233.625,109.9375 L 233.25,110.0625 L 233.0625,109.46875 L 232.3125,112.96875 L 232.28125,113.1875 L 232.09375,113.28125 L 228.15625,115.5625 L 228.125,115.59375 L 225.5,116.84375 L 222.46875,118.34375 L 222.40625,118.375 L 222.34375,118.40625 L 219.84375,119.03125 L 219.625,119.0625 L 219.4375,118.96875 L 215.71875,116.71875 L 214.34375,116.40625 L 211.875,117.71875 L 211.84375,117.71875 L 208.375,119.75 L 207.8125,121.71875 L 206.5625,125.75 L 206.53125,125.8125 L 206.5,125.84375 L 205.28125,128.125 L 205.5625,128.125 C 205.5625,128.56804 205.5625,130.67058 205.5625,131.25 L 209,131.65625 L 211.40625,130.59375 L 211.59375,130.5 L 211.75,130.5625 L 215.59375,131.53125 L 217.96875,130.34375 L 218.28125,130.1875 L 218.53125,130.40625 L 219.53125,131.3125 L 223.5,131.3125 L 223.75,131.3125 L 223.875,131.5 L 225.25,133.1875 L 234.5,133.6875 L 234.78125,133.71875 L 234.90625,133.9375 L 235.65625,135.21875 L 235.84375,135.5 L 235.65625,135.75 L 233.875,138.15625 L 233.6875,138.40625 L 233.375,138.34375 L 229.96875,137.59375 L 225.40625,137.59375 L 222.5625,137.71875 L 222.5,137.71875 L 217.125,138.46875 L 217.09375,138.46875 L 214.4375,138.75 L 214.28125,138.75 L 214.125,138.65625 L 213.9375,138.53125 L 213.09375,138.84375 L 213.09375,138.875 L 210.40625,139.75 L 209.71875,142.40625 L 209.6875,142.46875 L 209.65625,142.53125 L 207.65625,145.875 L 211.0625,147.09375 L 216,146.84375 L 219.9375,144.25 L 219.96875,144.25 L 220,144.21875 L 222.53125,143.09375 L 222.75,142.96875 L 223,143.09375 L 225.875,144.75 L 230.71875,147.21875 L 230.78125,147.25 L 233,147.90625 L 236.3125,145.1875 L 236.40625,145.09375 L 236.53125,145.0625 L 241.3125,144.0625 L 241.34375,144.0625 L 244.6875,143.59375 L 247.34375,140.4375 L 248.875,137.15625 L 249.25,134 L 249.28125,134 L 249.90625,129.96875 L 249.9375,129.71875 L 250.125,129.59375 L 252.5625,128.125 L 252.8125,125.0625 L 251.4375,121.75 L 251.40625,121.6875 L 251.40625,121.625 L 251.15625,118.46875 L 251.15625,118.4375 L 251.15625,118.40625 L 251.15625,114.625 L 251.15625,114.375 L 251.34375,114.21875 L 254.65625,111.78125 L 256.6875,108.40625 L 255.21875,107.125 L 252.46875,106.8125 zM 466.5,107.09375 L 466.4375,107.21875 L 466.15625,107.28125 L 460.25,108.3125 C 460.14398,108.4241 459.41084,109.20446 458.5625,110.15625 C 458.10836,110.66578 457.66215,111.18591 457.3125,111.625 C 457.13768,111.84455 456.97741,112.06623 456.875,112.21875 C 456.77259,112.37127 456.73725,112.4885 456.75,112.4375 C 456.64948,112.83958 456.41391,113.09315 456.125,113.4375 C 455.83609,113.78185 455.46918,114.15376 455.125,114.53125 C 454.78082,114.90874 454.45414,115.28852 454.21875,115.59375 C 454.10106,115.74636 453.99132,115.87132 453.9375,115.96875 C 453.88368,116.06618 453.90625,116.12946 453.90625,116.0625 C 453.90625,116.40774 453.79545,116.73865 453.65625,117.15625 C 453.51705,117.57385 453.33696,118.04824 453.15625,118.5 C 452.83334,119.30728 452.53368,119.85302 452.46875,120 L 452.46875,120.0625 L 452.46875,123.75 L 455.90625,127.34375 L 455.96875,127.40625 L 456,127.53125 L 457.09375,130.90625 L 457.125,131 L 457.09375,131.09375 L 456.9375,135.03125 L 456.90625,135.28125 L 456.6875,135.4375 L 453.65625,137.21875 L 453.5625,137.28125 L 453.4375,137.28125 L 446.8125,137.8125 L 446.71875,137.84375 L 446.625,137.78125 L 444.28125,136.96875 L 442.875,137.40625 L 442.84375,137.4375 L 440.3125,138.59375 L 441.78125,139.1875 L 442,139.25 L 442.0625,139.46875 L 443.6875,143.5625 L 445.8125,146.71875 L 445.84375,146.75 L 447.59375,147.96875 L 447.90625,148.1875 L 447.8125,148.53125 L 447.09375,150.875 L 446.78125,155.5625 L 448.375,156.125 L 448.65625,156.25 L 448.71875,156.53125 L 449.25,159.9375 L 449.25,160.0625 L 449.21875,160.1875 L 448.40625,162.28125 L 450.09375,165.65625 L 450.21875,165.90625 L 450.09375,166.125 L 448.46875,169.15625 L 448.46875,169.1875 C 448.46875,169.1875 448.13391,169.68614 447.78125,170.28125 C 447.42859,170.87636 447.05709,171.59169 446.90625,171.96875 C 446.67005,172.55925 446.14664,173.15949 445.6875,173.6875 C 445.22836,174.21551 444.8125,174.625 444.8125,174.625 L 444.75,174.71875 L 444.65625,174.75 L 438.75,177.3125 L 438.78125,177.375 L 441.1875,180.65625 L 443.59375,181.6875 L 443.84375,181.78125 L 443.875,182.0625 L 444.21875,184.625 L 444.25,184.6875 L 444.25,184.75 L 445.46875,187.65625 L 445.46875,187.6875 L 445.46875,187.71875 L 446.84375,192.75 L 446.875,192.78125 L 448.4375,194.875 L 448.46875,194.90625 L 448.46875,194.9375 L 450.25,198.34375 L 450.25,198.21875 C 450.25,198.21875 452.36449,198.09375 453.0625,198.09375 C 453.27817,198.09375 453.98454,197.99997 454.59375,197.90625 C 455.17088,197.81746 455.6356,197.72787 455.6875,197.71875 L 458.28125,195.9375 L 458.3125,195.90625 L 460.6875,193.90625 L 460.96875,193.6875 L 461.28125,193.875 C 461.28125,193.875 461.63467,194.10881 462.03125,194.40625 C 462.38701,194.67307 462.75346,194.94971 463,195.34375 C 463.02911,195.35178 463.09745,195.375 463.21875,195.375 C 463.46136,195.375 463.83954,195.31051 464.1875,195.25 C 464.88342,195.12897 465.5625,194.96875 465.5625,194.96875 L 465.75,194.90625 L 465.9375,195 L 468.96875,196.71875 L 473.5625,196.59375 L 475.375,195.40625 L 475.4375,195.34375 L 475.53125,195.34375 L 478.15625,194.59375 L 478.1875,194.5625 L 478.21875,194.5625 L 482.21875,193.8125 L 482.25,193.8125 L 484.5,193.1875 L 484.5625,193.15625 L 484.625,193.15625 C 484.625,193.15625 487.77619,193.15626 488.28125,193.15625 C 488.56314,193.15625 488.72877,193.31678 488.84375,193.4375 C 488.95873,193.55822 489.0421,193.69868 489.125,193.84375 C 489.2908,194.1339 489.4313,194.46809 489.5625,194.8125 C 489.75351,195.3139 489.83645,195.57999 489.90625,195.8125 C 490.22954,195.83379 491.11176,195.92929 491.625,195.84375 C 491.89273,195.79913 492.41767,195.57282 492.84375,195.375 C 493.26983,195.17718 493.59375,195 493.59375,195 L 493.6875,194.96875 L 493.75,194.9375 C 493.75,194.9375 494.89153,194.75233 496.09375,194.5625 C 496.69486,194.46759 497.31091,194.38416 497.8125,194.3125 C 498.28499,194.245 498.569,194.19322 498.8125,194.1875 C 498.80487,194.17602 498.94376,194.13515 499.0625,194.03125 C 499.22082,193.89272 499.41328,193.6793 499.59375,193.46875 C 499.90194,193.1092 500.08439,192.84889 500.15625,192.75 L 500.40625,188.34375 L 500.40625,188.28125 L 500.4375,188.25 L 500.90625,186.3125 L 501.40625,180.625 L 501.4375,180.34375 L 501.6875,180.21875 L 502.96875,179.59375 L 503.03125,179.53125 L 503.125,179.53125 L 511.375,178.8125 L 512.03125,176 L 512.75,173.28125 L 512.3125,172.125 L 512.28125,172.0625 L 512.28125,171.9375 L 512.28125,170.0625 L 512.28125,169.90625 L 512.375,169.78125 L 514.84375,166.0625 L 514.875,166 L 515.625,164.53125 L 515.65625,164.46875 L 515.71875,164.40625 L 518.5,161.625 L 520.09375,160 L 520.09375,158.53125 C 519.94502,158.4008 519.39029,157.92131 518.625,157.28125 C 518.19394,156.92072 517.7503,156.53869 517.375,156.25 C 516.9997,155.96131 516.62275,155.7491 516.625,155.75 C 516.30707,155.62283 516.06368,155.40703 515.71875,155.125 C 515.37382,154.84297 514.98689,154.49435 514.59375,154.15625 C 514.20061,153.81815 513.81992,153.49653 513.5,153.25 C 513.34004,153.12673 513.20189,153.03629 513.09375,152.96875 C 512.98561,152.90121 512.89069,152.86564 512.9375,152.875 C 512.31872,152.75125 510.28125,152.375 510.28125,152.375 L 510.0625,152.3125 L 509.9375,152.125 L 508.5,149.59375 C 508.3751,149.53164 507.80886,149.27547 507.0625,148.9375 C 506.64962,148.75053 506.23144,148.54204 505.875,148.40625 C 505.51856,148.27046 505.14533,148.21875 505.1875,148.21875 C 504.56487,148.21875 500.82389,148.21875 500.71875,148.21875 C 500.71473,148.22009 500.66257,148.21666 500.65625,148.21875 C 500.53817,148.25783 500.1543,148.39434 499.59375,148.5625 C 499.27368,148.65852 498.95304,148.76955 498.65625,148.84375 C 498.35946,148.91795 498.12627,148.96875 497.875,148.96875 C 497.56123,148.96875 497.37669,148.84275 497.15625,148.71875 C 496.93581,148.59475 496.70007,148.46255 496.5,148.3125 C 496.09986,148.01239 495.78125,147.6875 495.78125,147.6875 L 495.75,147.6875 L 495.71875,147.65625 L 493.1875,144.625 L 493.125,144.5 L 493.09375,144.375 L 492.59375,141.15625 L 492.59375,141.09375 L 492.09375,139.375 L 492.03125,139.15625 L 492.15625,138.96875 L 493,137.65625 L 493.34375,135.625 L 493.375,135.46875 L 493.5,135.34375 C 493.5,135.34375 493.80348,135.07153 494.15625,134.71875 C 494.50902,134.36597 494.9311,133.9065 495.0625,133.6875 C 495.02984,133.74194 495.11947,133.41973 495.125,133.03125 C 495.13053,132.64277 495.10132,132.14536 495.0625,131.65625 C 495.02368,131.16714 494.97896,130.68198 494.9375,130.28125 C 494.89604,129.88052 494.84376,129.61583 494.84375,129.40625 C 494.84375,129.13415 494.9151,128.87598 495,128.5 C 495.0849,128.12402 495.20126,127.67906 495.3125,127.25 C 495.53497,126.39188 495.75,125.59375 495.75,125.59375 L 495.75,125.5625 L 495.78125,125.53125 L 496.8125,123.15625 L 494.4375,123 L 494.28125,123 L 494.15625,122.90625 L 489.53125,119.3125 L 489.375,119.21875 L 489.34375,119.0625 L 488.65625,116.3125 L 486.4375,114.28125 L 486.59375,114.125 L 486.40625,114.03125 L 481.78125,112.0625 L 481.71875,112.0625 L 481.6875,112.03125 L 477.4375,109.375 L 477.40625,109.34375 L 473.28125,107.09375 L 466.5,107.09375 zM 257.53125,108.9375 L 255.5,112.34375 L 255.4375,112.4375 L 255.375,112.5 L 252.15625,114.875 L 252.15625,118.375 L 252.15625,118.40625 L 252.40625,121.4375 L 253.75,124.78125 L 253.8125,124.90625 L 253.78125,125.03125 L 253.53125,128.4375 L 253.53125,128.6875 L 253.3125,128.8125 L 250.84375,130.34375 L 250.25,134.125 L 249.875,137.28125 L 249.875,137.375 L 249.84375,137.4375 L 248.1875,140.96875 L 248.15625,141.03125 L 248.125,141.09375 L 245.34375,144.375 L 245.21875,144.5 L 245.03125,144.53125 L 241.5,145.0625 L 241.5,145.03125 L 236.8125,146.03125 L 233.75,148.5625 L 234.03125,149.75 L 234.03125,149.8125 L 234.0625,149.875 L 234.09375,151.59375 L 234.09375,151.625 L 234.8125,154.3125 L 235.9375,156.15625 L 237.875,157.1875 L 240.65625,157.1875 L 240.90625,157.1875 L 241.0625,157.375 L 242.625,159.3125 L 242.65625,159.34375 L 242.6875,159.375 L 245.3125,161.53125 L 245.34375,161.5625 L 245.40625,161.59375 L 246.34375,162.03125 L 248.375,160.78125 L 248.5,160.71875 L 248.65625,160.71875 L 255.21875,161.21875 L 255.375,161.25 L 255.5,161.34375 L 257.40625,162.84375 L 257.59375,163 L 257.59375,163.25 L 257.59375,164.46875 L 260.125,165.96875 L 262.25,167.21875 L 262.90625,167.5625 L 264.25,165.625 L 264.875,164.65625 L 264.3125,162.625 L 264.28125,162.53125 L 264.28125,162.46875 L 264.40625,159.8125 L 264.40625,159.625 L 264.53125,159.5 L 267.375,156.40625 L 268.21875,153.875 L 268.34375,153.5 L 268.71875,153.53125 L 279.40625,153.78125 L 281.3125,152.375 L 280.84375,148 L 280.8125,147.96875 L 280.84375,147.90625 L 281.21875,145.25 L 281.21875,145.125 L 281.3125,145 L 283.9375,141.4375 L 283.09375,138.40625 L 280.59375,137.84375 L 280.1875,137.75 L 280.1875,137.34375 L 280.1875,131.8125 L 280.1875,131.71875 L 280.21875,131.625 L 281.625,128.09375 L 281.6875,127.9375 L 281.8125,127.84375 L 285.09375,125.6875 L 288.0625,122.59375 L 288.625,119.90625 L 287.875,117.375 L 280.625,116.5 L 280.59375,116.5 L 280.5625,116.5 L 275.40625,115.25 L 275.34375,115.21875 L 275.28125,115.1875 L 271.125,113.0625 L 265.8125,111.84375 L 265.78125,111.8125 L 265.75,111.8125 L 260.96875,110.1875 L 257.53125,108.9375 zM 305.28125,115.46875 L 300.78125,116.75 L 300.71875,116.75 L 300.6875,116.78125 L 294.375,117.15625 L 289,117.625 L 289.625,119.78125 L 289.65625,119.90625 L 289.65625,120.03125 L 289,122.9375 L 288.96875,123.09375 L 288.875,123.1875 L 285.71875,126.46875 L 285.6875,126.5 L 285.65625,126.53125 L 282.5,128.59375 L 281.1875,131.875 L 281.1875,136.96875 L 283.59375,137.5 L 283.875,137.5625 L 283.96875,137.84375 L 284.96875,141.375 L 285.03125,141.625 L 284.875,141.8125 L 282.65625,144.84375 L 284.46875,145.0625 L 284.53125,145.0625 L 295.84375,144.9375 L 296,144.9375 L 296.125,145 L 298,146.21875 L 298.0625,146.21875 L 302.0625,147.4375 L 306.4375,146.375 L 308.09375,144.5 L 307.96875,139.625 L 307.96875,139.53125 L 308.03125,139.40625 C 308.03125,139.40625 308.2658,138.90588 308.53125,138.34375 C 308.7967,137.78162 309.09991,137.0691 309.125,136.96875 C 309.20412,136.65225 309.35964,136.4759 309.5625,136.15625 C 309.76536,135.8366 310.0027,135.476 310.25,135.125 C 310.74459,134.423 311.21875,133.78125 311.21875,133.78125 L 311.34375,133.59375 L 311.5625,133.5625 L 315.09375,133.0625 L 315.09375,133.09375 L 319.59375,132.0625 L 323.875,130.96875 L 326.6875,128.28125 L 327.125,123.34375 L 323.9375,122.5625 L 323.875,122.5625 L 320.8125,122.0625 L 320.78125,122.0625 L 311.84375,121.4375 L 311.71875,121.4375 L 311.59375,121.34375 L 308.6875,119.34375 L 308.65625,119.28125 L 308.59375,119.25 L 305.28125,115.46875 zM 603.96875,119.15625 L 600.875,121.8125 L 600.75,121.90625 L 600.59375,121.9375 L 596.75,122.4375 L 594.1875,127.71875 L 594.1875,127.78125 L 594.125,127.8125 L 590.75,131.9375 L 590.625,132.0625 L 590.4375,132.09375 L 585.21875,132.78125 L 581.46875,135.1875 L 581.34375,135.53125 L 581.53125,136.84375 L 586.1875,140.125 L 586.21875,140.15625 L 586.25,140.1875 L 589.28125,143.40625 L 589.3125,143.4375 L 589.34375,143.5 L 590.65625,145.59375 L 596.40625,146.46875 L 596.5,146.46875 L 601.9375,146.28125 L 602.0625,146.28125 L 602.15625,146.3125 L 605.375,147.5625 L 607.875,148.65625 L 608.15625,148.75 L 608.1875,149.0625 C 608.1875,149.0625 608.25647,149.87234 608.53125,150.78125 C 608.80604,151.69016 609.29272,152.64526 609.875,152.96875 C 610.85586,153.51368 611.40009,154.52949 611.90625,155.34375 C 612.15933,155.75088 612.4021,156.11635 612.625,156.34375 C 612.8479,156.57115 613.02827,156.65625 613.21875,156.65625 C 614.12053,156.65625 615.46809,157.06228 616.6875,157.46875 C 617.85655,157.85843 618.76305,158.21853 618.84375,158.25 L 629.84375,158.4375 L 630.59375,158.4375 L 630.28125,159.125 L 628.65625,162.6875 L 627.375,165.625 L 629.40625,168.34375 L 629.46875,168.375 L 629.5,168.4375 L 633.15625,171.25 L 635.28125,170.8125 L 635.9375,167.75 L 636.09375,167.0625 L 636.6875,167.4375 L 638.59375,168.65625 L 641.5625,169.3125 L 646,167.3125 L 647.375,161.84375 L 647.4375,161.625 L 647.65625,161.5 L 651.40625,159.71875 L 651.4375,159.71875 L 651.5,159.6875 L 655.90625,158.6875 C 655.99195,158.50242 656.31854,157.77577 656.5625,156.875 C 656.69952,156.36908 656.74989,155.85515 656.71875,155.53125 C 656.70318,155.3693 656.65986,155.26976 656.625,155.21875 C 656.59014,155.16774 656.59131,155.14529 656.5,155.125 C 655.84766,154.98003 654.23521,155.02258 652.8125,155 C 652.10115,154.98871 651.43424,154.96362 650.875,154.875 C 650.59538,154.83069 650.35295,154.75546 650.125,154.65625 C 649.89705,154.55704 649.64846,154.41804 649.53125,154.125 C 649.40675,153.81374 649.29187,153.33749 649.15625,152.71875 C 649.02063,152.10001 648.88443,151.362 648.75,150.65625 C 648.49963,149.34179 648.30912,148.286 648.28125,148.125 L 645.75,145.90625 L 645.5,145.6875 L 645.59375,145.375 L 647.03125,140.75 L 647.03125,140.71875 L 647.0625,140.6875 L 649.71875,134.96875 L 649.75,134.9375 L 651.9375,130.84375 C 651.68788,130.79431 651.40785,130.72756 651.1875,130.6875 C 650.67451,130.59423 650.23455,130.53125 650.15625,130.53125 C 649.61078,130.53125 648.97949,130.31572 648.34375,130.125 C 648.02588,130.02964 647.71681,129.94265 647.46875,129.875 C 647.22069,129.80735 647.00128,129.78125 647,129.78125 C 646.7904,129.78125 646.42983,129.7351 645.90625,129.6875 C 645.38267,129.6399 644.75717,129.59447 644.125,129.53125 C 642.86067,129.40482 641.65625,129.28125 641.65625,129.28125 L 641.53125,129.25 L 641.46875,129.21875 L 638.0625,127.3125 L 637.96875,127.25 L 637.90625,127.1875 L 635.625,124.28125 L 635.5625,124.1875 L 635.53125,124.0625 L 634.96875,120.96875 C 634.65789,120.87831 633.0915,120.4375 632.09375,120.4375 C 631.13457,120.4375 630.54414,121.16317 630.5,121.21875 C 630.4983,121.22088 630.46875,121.25 630.46875,121.25 L 627.59375,125.75 L 627.53125,125.875 L 627.375,125.9375 L 624.09375,127.34375 L 623.84375,127.4375 L 623.625,127.28125 L 619.9375,124.75 L 619.90625,124.75 L 619.875,124.71875 L 616.71875,121.6875 L 612.625,121.4375 L 612.5,121.4375 L 612.375,121.34375 L 609.5625,119.40625 C 609.25988,119.40625 605.57529,119.40625 604.96875,119.40625 C 604.63761,119.40625 604.35017,119.28742 604,119.15625 L 603.96875,119.15625 zM 720.8125,119.46875 L 716.1875,121.875 L 716.15625,121.90625 L 712.25,123.65625 L 712,123.78125 L 711.78125,123.65625 L 707.90625,121.40625 L 705.6875,123.03125 L 705.84375,123.03125 L 705.84375,127.8125 L 705.84375,127.84375 L 706.40625,134.25 L 707.96875,138.03125 L 708.03125,138.1875 L 708.15625,138 L 711.90625,140.65625 L 711.90625,140.6875 L 711.9375,140.6875 L 715.25,143.5 L 715.3125,143.53125 L 720.40625,146.6875 L 720.4375,146.71875 L 726.8125,149.71875 L 726.84375,149.71875 L 726.84375,149.75 L 732.03125,152.59375 L 732.0625,152.625 L 734.21875,154.15625 L 737.21875,151.15625 L 738.09375,147.21875 L 738.78125,143.8125 L 738.875,143.46875 L 739.21875,143.4375 L 742.625,143.0625 L 743.1875,143.03125 L 743.1875,143.5625 L 743.1875,146.96875 L 743.1875,147.125 L 743.0625,147.28125 L 742.0625,148.5 L 745.53125,149.71875 L 745.65625,149.75 L 745.75,149.875 L 747.1875,151.78125 L 749.4375,151.5 L 750.40625,147.5625 L 750.5625,146.9375 L 751.125,147.21875 L 753.625,148.46875 L 753.78125,148.5625 L 753.875,148.75 L 755.0625,151.96875 L 759.9375,154.15625 L 760.03125,154.1875 L 765.28125,155.5625 L 765.3125,155.5625 L 772.96875,154.3125 L 774.40625,153.625 L 773.8125,150.8125 L 773.78125,150.8125 L 773.78125,150.78125 L 773.4375,148.09375 L 773.40625,147.9375 L 773.46875,147.8125 L 774.84375,145.09375 L 775.21875,139.75 L 773.84375,136.8125 L 773.8125,136.78125 L 773.8125,136.75 L 771.90625,130.84375 L 771.875,130.8125 L 769.84375,128.0625 L 766.875,125.5625 L 766.6875,125.71875 L 763.375,128.875 L 763.3125,128.96875 L 763.1875,129 C 763.1875,129 762.16804,129.32448 761.09375,129.65625 C 760.01946,129.98802 758.95361,130.29284 758.625,130.375 C 758.36557,130.43986 758.13408,130.44368 757.8125,130.4375 C 757.49092,130.43132 757.10203,130.399 756.75,130.375 C 756.04594,130.32699 755.40625,130.28125 755.40625,130.28125 L 755.25,130.25 L 755.15625,130.15625 L 752.25,127.75 L 749.6875,127.5 L 746.78125,128.375 L 746.6875,128.375 L 746.59375,128.375 L 742.4375,128.125 L 742.28125,128.125 L 742.15625,128.03125 L 740.125,126.34375 L 740.09375,126.34375 L 735.78125,124.625 L 733.71875,125.6875 L 733.6875,125.71875 L 733.625,125.71875 L 731.71875,126.21875 L 731.53125,126.28125 L 731.34375,126.1875 L 729.34375,125.03125 L 729.3125,125.03125 L 729.3125,125 L 726.40625,123 L 726.375,122.96875 L 726.34375,122.9375 L 723.96875,120.65625 L 723.9375,120.65625 L 720.8125,119.46875 zM 190.71875,119.5625 L 190.65625,120.25 L 190.5625,121 L 192.25,121.75 L 192.3125,121.78125 L 192.375,121.8125 L 194.53125,123.71875 L 194.71875,123.875 L 194.6875,124.125 L 194.4375,127.03125 L 194.40625,127.59375 L 193.84375,127.5 L 191.84375,127.125 L 191.6875,127.09375 L 191.59375,127 L 190.21875,125.71875 L 190.15625,125.6875 L 190.125,125.65625 L 188.75,123.75 L 188.71875,123.6875 L 188.6875,123.625 L 187.65625,120.71875 L 187.46875,120.1875 L 188.0625,120.0625 L 190.0625,119.6875 L 190.71875,119.5625 zM 189.59375,120.8125 L 188.8125,120.9375 L 189.5625,123.15625 L 189.59375,123.1875 L 190.875,125 L 190.9375,125.03125 L 190.9375,125.0625 L 192.125,126.15625 L 193.5,126.40625 L 193.6875,124.3125 L 191.84375,122.65625 L 191.8125,122.625 L 189.84375,121.78125 L 189.5,121.625 L 189.53125,121.25 L 189.59375,120.8125 zM 856.78125,122.625 L 856.78125,122.65625 L 851.25,122.65625 L 848.75,123.28125 L 846.75,126.875 L 846.75,126.9375 L 846.40625,128.84375 L 847.0625,130.71875 L 847.125,130.8125 L 847.09375,130.90625 L 846.9375,135.375 L 846.9375,135.46875 L 846.875,135.5625 L 845.46875,138.78125 L 845.40625,138.875 L 845.3125,138.96875 L 842.28125,141.46875 L 842.25,141.46875 L 840.125,143.09375 L 839.90625,143.25 L 839.65625,143.15625 L 837.15625,142.25 L 833.625,141.0625 L 831.03125,142.1875 L 831,142.21875 L 827.1875,145.3125 L 823.25,150.125 L 823.09375,150.34375 L 822.8125,150.3125 L 820.3125,150.15625 L 819.96875,150.125 L 819.875,149.78125 L 818.8125,146.21875 L 818.78125,146.15625 L 818.78125,146.0625 L 818.78125,137.5 L 814.46875,135.8125 L 814.4375,135.8125 L 814.40625,135.8125 L 809.375,133.125 L 807.59375,136.8125 L 807.53125,136.96875 L 807.34375,137.0625 L 802.90625,139.1875 L 802.875,139.21875 L 802.84375,139.21875 L 796.40625,141.65625 L 794.1875,145.9375 L 794.15625,146 L 794.125,146.03125 L 791.28125,149.25 L 791.15625,149.375 L 791.03125,149.40625 L 786.5,150.625 L 781.9375,154.5 L 781.875,154.53125 L 781.78125,154.5625 L 781.4375,154.6875 L 781.8125,154.84375 L 780.5625,157.75 L 780.53125,157.78125 L 778.90625,161.1875 L 780.5,163.46875 L 780.5625,163.53125 L 780.59375,163.65625 C 780.59375,163.65625 780.97699,165.43928 781.09375,165.90625 C 781.13107,166.05552 781.08987,166.2265 781.03125,166.34375 C 780.97263,166.461 780.8837,166.5347 780.8125,166.59375 C 780.67009,166.71185 780.53426,166.78004 780.375,166.84375 C 780.05648,166.97116 779.66614,167.04311 779.28125,167.125 C 778.71461,167.24556 778.41641,167.30794 778.15625,167.34375 C 778.10968,167.73802 777.93749,169.12896 777.9375,170.0625 C 777.9375,170.16142 778.03798,170.45792 778.25,170.78125 C 778.46202,171.10458 778.75867,171.45464 779.0625,171.78125 C 779.61482,172.37499 780.05947,172.79158 780.15625,172.875 L 783.9375,173.21875 L 784.125,173.25 L 784.25,173.375 C 784.25,173.375 784.60462,173.7914 785.0625,174.21875 C 785.52038,174.6461 786.14714,175.06988 786.3125,175.125 C 786.35169,175.13806 786.35637,175.17136 786.4375,175.125 C 786.51863,175.07864 786.64786,174.97143 786.75,174.84375 C 786.95428,174.5884 787.09375,174.28125 787.09375,174.28125 L 787.1875,174.0625 L 787.375,174 L 790.15625,173.125 L 790.9375,172.875 L 790.8125,173.6875 C 790.8125,173.6875 790.69052,174.45303 790.53125,175.28125 C 790.45161,175.69536 790.36667,176.10267 790.28125,176.46875 C 790.19583,176.83483 790.12276,177.09823 790,177.34375 C 789.87373,177.5963 789.57036,178.25098 789.21875,178.90625 C 788.86714,179.56152 788.50098,180.2019 788.1875,180.59375 C 787.99394,180.8357 787.70686,181.06053 787.375,181.3125 C 787.04314,181.56447 786.68028,181.81464 786.3125,182.0625 C 785.61465,182.53279 785.0324,182.898 784.96875,182.9375 C 784.96875,182.9375 784.90812,182.99824 784.90625,183 C 784.81665,183.08466 782.69314,185.08813 781.84375,185.9375 C 780.99354,186.78771 780.3022,187.72816 778.84375,188.65625 C 777.29929,189.63908 775.30605,189.76532 774.25,190 C 773.50952,190.16455 772.64408,190.00771 771.90625,189.84375 C 771.29139,189.70711 770.96622,189.58065 770.8125,189.53125 L 769.625,190.21875 L 768.4375,193.15625 L 771.15625,195.625 L 773.6875,196.46875 L 779.78125,197.34375 L 779.9375,197.375 L 780.0625,197.46875 L 781.6875,199 L 781.84375,199.125 L 781.84375,199.34375 L 781.84375,204.34375 L 782.59375,206.375 C 782.66767,206.47331 782.92496,206.81424 783.3125,207.3125 C 783.75129,207.87666 784.30639,208.52514 784.5,208.71875 C 784.69362,208.91237 785.46438,209.57457 786.21875,210.1875 C 786.97312,210.80043 787.73755,211.42035 787.96875,211.59375 C 788.13989,211.7221 788.21799,211.84386 788.3125,212 C 788.40701,212.15614 788.49973,212.32649 788.59375,212.53125 C 788.7818,212.94077 788.97856,213.45183 789.15625,213.96875 C 789.33394,214.48567 789.47497,215.00183 789.59375,215.46875 C 789.71253,215.93567 789.81251,216.32812 789.8125,216.65625 C 789.8125,216.86009 790.01003,217.17985 790.28125,217.4375 C 790.52563,217.66966 790.70374,217.8149 790.75,217.84375 C 790.75,217.84375 790.81083,217.87434 790.8125,217.875 C 790.91857,217.91667 794.30542,219.21593 794.9375,219.46875 C 795.1058,219.53607 795.26494,219.68101 795.34375,219.875 C 795.42256,220.06899 795.41573,220.26662 795.375,220.40625 C 795.29355,220.68552 795.1239,220.87997 794.96875,221.0625 C 794.65845,221.42756 794.28125,221.71875 794.28125,221.71875 L 794.1875,221.8125 L 794.03125,221.8125 L 790.21875,222.1875 L 787.03125,224.15625 L 787.03125,224.28125 L 787.03125,224.375 L 787.03125,224.4375 C 787.03125,224.4375 786.92107,225.00249 786.90625,225.625 C 786.89884,225.93626 786.92527,226.25846 786.96875,226.5 C 787.01223,226.74154 787.10574,226.88459 787.09375,226.875 C 787.48241,227.18595 787.72611,227.51524 788,227.75 C 788.27389,227.98476 788.54782,228.15625 789.0625,228.15625 C 789.77717,228.15625 790.76593,228.29816 791.71875,228.375 C 792.67157,228.45184 793.57688,228.38555 793.84375,228.21875 C 794.25515,227.96164 794.13966,227.89013 794.4375,227.5625 C 794.58642,227.39868 794.81338,227.27737 795.09375,227.21875 C 795.37412,227.16013 795.7293,227.125 796.25,227.125 C 797.24973,227.125 798.47785,227.10869 799.5,227.03125 C 800.01107,226.99253 800.46395,226.93554 800.8125,226.875 C 800.81241,226.8746 800.81238,226.62538 800.8125,226.625 C 800.81262,226.62462 800.93716,226.43787 800.9375,226.4375 C 800.93784,226.43713 801.00235,226.36156 801.03125,226.34375 C 801.14683,226.27252 801.18687,226.28727 801.21875,226.28125 C 801.28252,226.2692 801.30429,226.25194 801.34375,226.25 C 801.50159,226.24224 801.77586,226.25 802.3125,226.25 C 803.40539,226.25 804.74628,226.3124 805.875,226.34375 C 806.43936,226.35943 806.9435,226.38633 807.34375,226.375 C 807.70978,226.36464 807.95296,226.2893 808,226.28125 C 808.01185,226.19854 808.02884,226.0457 808.0625,225.84375 C 808.08051,225.7357 808.09041,225.61115 808.1875,225.46875 C 808.28459,225.32635 808.47343,225.1923 808.65625,225.15625 C 809.02189,225.08415 809.33392,225.22946 809.75,225.4375 C 810.48775,225.80638 811.22329,226.10212 811.84375,226.4375 C 812.15398,226.60519 812.42325,226.78954 812.65625,227 C 812.88925,227.21046 813.0995,227.47203 813.15625,227.8125 C 813.20448,228.10187 813.16331,228.33186 813.125,228.5 C 813.08669,228.66814 813.05934,228.78244 813.0625,228.8125 C 813.06566,228.84256 813.06467,228.85507 813.1875,228.96875 C 813.31033,229.08243 813.5524,229.25987 814,229.46875 C 815.85656,230.33515 816.67886,230.4278 817.40625,230.71875 C 817.75434,230.85799 817.86766,231.1427 817.96875,231.40625 L 821.96875,231.3125 L 822,231.3125 L 829.03125,230.5625 L 829.21875,230.53125 L 829.375,230.625 C 829.375,230.625 830.24403,231.23049 831.28125,231.90625 C 832.31847,232.58201 833.52204,233.33914 834.09375,233.625 C 834.93976,234.04801 835.56247,234.99102 836.125,235.875 C 836.40627,236.31699 836.65528,236.75174 836.875,237.09375 C 837.09472,237.43576 837.30495,237.68771 837.34375,237.71875 C 837.83083,238.10842 838.22416,238.7951 838.65625,239.53125 C 839.08834,240.2674 839.49821,241.04419 839.71875,241.375 C 839.87883,241.61512 840.41577,242.06251 840.96875,242.40625 C 841.52173,242.74999 842.16027,243.03205 842.3125,243.0625 C 842.62188,243.12438 843.75801,243.32673 844.875,243.53125 C 845.43349,243.63351 845.99534,243.74043 846.4375,243.8125 C 846.87966,243.88457 847.24873,243.9375 847.25,243.9375 C 847.2096,243.9375 847.52858,243.87428 847.84375,243.78125 C 848.15892,243.68822 848.54574,243.5707 848.9375,243.4375 C 849.72102,243.1711 850.45534,242.90179 850.8125,242.8125 C 850.79241,242.81752 850.95792,242.7665 851.15625,242.6875 C 851.35458,242.6085 851.60614,242.50152 851.90625,242.375 C 852.50647,242.12197 853.25919,241.79187 854,241.46875 C 855.48163,240.82251 856.90625,240.1875 856.90625,240.1875 L 856.96875,240.15625 L 857.03125,240.15625 C 857.03125,240.15625 858.85283,239.8165 860.78125,239.46875 C 861.74546,239.29488 862.73341,239.09974 863.53125,238.96875 C 863.93017,238.90326 864.28289,238.85143 864.5625,238.8125 C 864.82827,238.7755 864.99309,238.7522 865.15625,238.75 C 865.17762,238.74202 865.23354,238.71809 865.28125,238.6875 C 865.37667,238.62633 865.50999,238.54168 865.65625,238.40625 C 865.94877,238.1354 866.30108,237.72936 866.625,237.34375 C 867.27283,236.57252 867.8125,235.8125 867.8125,235.8125 L 870.5625,231.84375 L 871.65625,227.03125 L 871.6875,226.9375 L 871.71875,226.875 L 874.5,222.4375 L 874.5625,222.34375 L 874.65625,222.28125 L 878.3125,220.125 L 878.4375,220.0625 L 878.59375,220.0625 L 879.25,220.0625 L 878.6875,219.625 L 883.5,213.5625 L 883.5625,213.5 L 883.625,213.4375 C 883.625,213.4375 884.65625,212.87343 884.65625,211.34375 C 884.65625,210.38844 884.84375,209.49043 884.84375,208.78125 C 884.84375,208.07207 884.73861,207.62782 884.125,207.21875 C 882.64179,206.22993 878.0625,203.4375 878.0625,203.4375 L 878.03125,203.4375 L 878.03125,203.40625 C 878.03125,203.40625 876.62085,202.3359 875.21875,201.125 C 874.5177,200.51955 873.82213,199.87796 873.28125,199.3125 C 873.01081,199.02977 872.76916,198.77842 872.59375,198.53125 C 872.41834,198.28408 872.28125,198.07419 872.28125,197.71875 C 872.28125,197.33868 872.09958,196.56412 872.03125,195.8125 C 871.99709,195.43669 871.96745,195.05715 872.0625,194.6875 C 872.15755,194.31785 872.41834,193.91583 872.8125,193.71875 C 872.96069,193.64466 873.44843,193.29357 874.03125,192.84375 C 874.61407,192.39393 875.31775,191.8362 876.03125,191.28125 C 876.74475,190.7263 877.45752,190.18361 878.09375,189.75 C 878.72998,189.31639 879.23947,188.97711 879.75,188.875 C 880.24934,188.77513 882.14359,188.16079 883.8125,187.5625 C 884.84078,187.19387 885.1889,187.06337 885.78125,186.84375 L 884.40625,183.34375 L 876.3125,177.5625 L 876.25,177.5 L 876.1875,177.40625 L 873.46875,173.125 L 865.40625,171.1875 L 865.3125,171.1875 L 865.21875,171.09375 L 862.71875,168.9375 L 862.625,168.875 L 862.5625,168.78125 L 860.96875,165.03125 L 860.8125,164.65625 L 861.125,164.40625 L 863.8125,162.46875 L 863.9375,162.34375 L 864.09375,162.34375 L 869.9375,162.34375 L 870,162.34375 L 875.09375,160.625 C 875.18216,160.53941 876.49502,159.27162 877.96875,157.90625 C 878.7303,157.2007 879.51077,156.48956 880.15625,155.9375 C 880.47899,155.66147 880.76055,155.42959 881,155.25 C 881.20875,155.09344 881.33303,154.98426 881.5625,154.90625 C 881.58973,154.85702 881.65192,154.74673 881.6875,154.59375 C 881.75865,154.28779 881.79096,153.84783 881.8125,153.40625 C 881.85558,152.52309 881.8125,151.625 881.8125,151.625 L 881.84375,151.625 L 881.125,147.78125 L 881.125,147.75 L 881.09375,147.71875 L 880.9375,144.6875 L 880.9375,144.59375 L 880.9375,144.5 L 882.96875,137.59375 C 882.89991,137.32961 882.80265,136.90795 882.5625,136.1875 C 882.41001,135.73004 882.23116,135.25891 882.0625,134.90625 C 881.89384,134.55359 881.66769,134.33385 881.75,134.375 C 881.15434,134.07717 880.82201,133.50782 880.46875,133 C 880.29212,132.74609 880.14887,132.5089 880,132.34375 C 879.85113,132.1786 879.69488,132.09559 879.6875,132.09375 C 879.1972,131.97118 878.4398,131.61924 877.71875,131.28125 C 877.01124,130.94961 876.42927,130.6365 876.40625,130.625 L 876.375,130.625 L 873.03125,129.21875 L 872.9375,129.1875 L 872.875,129.125 L 869.46875,125.90625 L 869.46875,125.875 L 866.96875,123.375 L 866.96875,123.34375 L 861.59375,123.34375 L 861.5625,123.34375 L 861.53125,123.34375 L 856.78125,122.625 zM 393.71875,122.8125 L 392.59375,125.125 L 392.59375,125.15625 L 391.5,127.0625 L 391.4375,127.1875 L 391.3125,127.28125 C 391.3125,127.28125 390.91969,127.46632 390.5,127.6875 C 390.29015,127.79809 390.09682,127.9404 389.90625,128.03125 C 389.71568,128.1221 389.6197,128.17797 389.375,128.21875 C 389.20583,128.24695 389.06326,128.25219 388.875,128.25 C 388.68674,128.24781 388.49052,128.22723 388.28125,128.21875 C 387.92701,128.20439 387.6864,128.1928 387.59375,128.1875 C 387.494,128.2396 387.22439,128.39271 386.8125,128.59375 C 386.57387,128.71022 386.33277,128.81817 386.125,128.90625 C 386.02112,128.95029 385.90282,129.00198 385.8125,129.03125 C 385.76734,129.04589 385.74233,129.05193 385.6875,129.0625 C 385.63267,129.07307 385.56483,129.10214 385.40625,129.0625 C 385.23322,129.01924 385.18681,128.97467 385.03125,128.90625 C 384.87569,128.83783 384.6899,128.74282 384.5,128.65625 C 384.12021,128.48311 383.65614,128.29163 383.625,128.28125 C 383.39202,128.20359 383.31894,128.11085 383.1875,128 C 383.05606,127.88915 382.91221,127.75027 382.78125,127.625 C 382.65029,127.49973 382.53519,127.40367 382.4375,127.3125 C 382.39461,127.27247 382.34761,127.21526 382.3125,127.1875 C 382.30246,127.18248 382.29086,127.19253 382.28125,127.1875 C 382.26427,127.17384 382.27974,127.15805 382.28125,127.15625 C 382.0882,127.05239 381.96339,126.95442 381.8125,126.875 C 381.73111,126.83216 381.68525,126.82009 381.65625,126.8125 C 381.64786,126.82332 381.53491,126.90336 381.4375,127.09375 C 381.33308,127.29784 381.22476,127.55681 381.125,127.78125 C 381.0713,127.90206 380.92104,128.39642 380.78125,128.84375 C 380.71136,129.06742 380.62454,129.28482 380.5625,129.46875 C 380.50046,129.65268 380.47658,129.76821 380.375,129.9375 C 380.38439,129.92185 380.30304,130.10003 380.21875,130.28125 C 380.13446,130.46247 380.03383,130.68813 379.90625,130.9375 C 379.65108,131.43624 379.35089,131.99286 378.9375,132.40625 C 378.22071,133.12302 377.47262,133.56399 377.125,133.78125 C 376.8305,133.96532 376.56436,134.00606 376.34375,134.0625 C 376.12314,134.11894 375.97881,134.15772 375.875,134.25 C 375.70074,134.4049 375.34632,134.77629 375,135.09375 C 374.82684,135.25248 374.63306,135.40641 374.46875,135.53125 C 374.30444,135.65609 374.21372,135.76858 373.90625,135.8125 C 373.68615,135.84394 373.1146,136.0104 372.84375,136.28125 C 372.58393,136.54107 372.08267,136.95598 371.59375,137.34375 C 371.10483,137.73152 370.65625,138.0625 370.65625,138.0625 L 370.5625,138.15625 L 370.40625,138.1875 L 369.09375,138.3125 C 369.15236,138.39796 369.34375,138.65625 369.34375,138.65625 L 369.4375,138.78125 L 369.4375,138.9375 L 369.25,146 L 376.78125,146.03125 L 376.90625,146.03125 L 377.03125,146.0625 L 379.4375,147.3125 L 379.46875,147.34375 L 381.09375,148.46875 L 381.1875,148.53125 L 383.96875,149.8125 L 383.96875,149.84375 L 386.3125,150.65625 L 390.0625,151.125 L 390.90625,151.21875 L 390.40625,151.90625 L 388.375,154.8125 L 388.6875,157.09375 L 390.09375,158.3125 L 390.15625,158.375 L 395.09375,161.34375 L 395.3125,161.5 L 395.3125,161.75 L 395.5,164.5 L 396.4375,166.25 L 399.09375,168.9375 L 402.125,171.78125 L 403.5625,171.53125 L 404.15625,169.65625 L 404.21875,169.5625 L 404.28125,169.46875 L 406.4375,167.3125 L 406.5625,167.1875 L 406.78125,167.1875 L 411.40625,167 L 411.46875,167 L 411.53125,167 L 416.1875,168.09375 L 416.25,168.09375 L 416.3125,168.125 L 419.96875,170.0625 L 420.0625,170.09375 L 424.96875,171.65625 L 425.5625,171.84375 L 425.46875,172 L 430.46875,173.09375 L 430.5,173.09375 L 430.53125,173.09375 L 435.1875,174.875 L 435.21875,174.90625 L 435.28125,174.9375 L 438.21875,176.96875 L 438.03125,176.5 L 444.21875,173.84375 C 444.29084,173.77094 444.55096,173.47577 444.9375,173.03125 C 445.37121,172.53248 445.84781,171.89611 445.96875,171.59375 C 446.17508,171.07797 446.57587,170.3915 446.9375,169.78125 C 447.28734,169.19089 447.57409,168.71844 447.59375,168.6875 L 447.625,168.65625 L 449.0625,165.875 L 447.40625,162.53125 L 447.3125,162.34375 L 447.375,162.15625 L 448.21875,159.9375 L 447.75,156.96875 L 446.09375,156.375 L 445.71875,156.21875 L 445.75,155.84375 L 446.09375,150.6875 L 446.125,150.625 L 446.125,150.5625 L 446.71875,148.59375 L 445.25,147.5625 L 445.1875,147.5 L 445.125,147.4375 L 442.8125,144.03125 L 442.78125,144 L 442.75,143.9375 L 441.25,140.03125 L 438.8125,139.0625 L 430,138.90625 L 429.53125,138.875 L 429.5,138.4375 L 429.3125,136.65625 L 429.3125,136.59375 L 429.3125,136.53125 L 430.03125,131.71875 L 430.03125,131.6875 L 430.0625,131.65625 L 431.09375,128.21875 L 431.09375,128.15625 L 431.09375,124.0625 L 415.875,123.90625 L 412.71875,126.03125 L 412.6875,126.0625 L 410.375,128.875 L 410.25,129.0625 L 410,129.0625 L 408.40625,129.0625 L 408.03125,129.0625 L 407.90625,128.75 L 406.84375,125.6875 L 405.40625,123.34375 L 401.4375,123.34375 L 401.40625,123.34375 L 393.71875,122.8125 zM 345.90625,123.1875 L 342.46875,124.21875 L 342.40625,124.25 L 342.3125,124.25 L 331.375,124.25 C 331.375,124.25 330.62195,124.40376 329.78125,124.625 C 329.04045,124.81995 328.31313,125.08425 327.96875,125.21875 L 327.65625,128.5625 L 327.65625,128.75 L 327.5,128.875 L 324.46875,131.78125 L 324.375,131.875 L 324.25,131.90625 L 319.84375,133.03125 L 319.8125,133.03125 L 315.28125,134.0625 L 315.25,134.0625 L 311.90625,134.53125 C 311.81116,134.65861 311.48717,135.08474 311.0625,135.6875 C 310.82051,136.03098 310.59404,136.39159 310.40625,136.6875 C 310.21846,136.98341 310.07776,137.28271 310.09375,137.21875 C 309.99257,137.62347 309.7087,138.20695 309.4375,138.78125 C 309.18244,139.32138 308.99645,139.72576 308.96875,139.78125 L 309.09375,144.65625 L 309.09375,144.875 L 308.96875,145 L 307.09375,147.15625 L 306.96875,147.28125 L 306.8125,147.3125 L 302.15625,148.4375 L 302.03125,148.46875 L 301.875,148.4375 L 297.71875,147.1875 L 297.65625,147.15625 L 297.59375,147.125 L 295.6875,145.9375 L 284.5,146.0625 L 284.46875,146.0625 L 284.4375,146.0625 L 282.34375,145.8125 L 282.28125,145.8125 L 282.125,145.8125 L 281.8125,147.90625 L 281.8125,147.96875 L 281.8125,148.03125 L 282.34375,152.59375 L 282.375,152.875 L 282.125,153.03125 L 279.84375,154.6875 L 279.71875,154.78125 L 279.5625,154.78125 L 269.0625,154.53125 L 268.28125,156.84375 L 268.25,156.9375 L 268.1875,157 L 265.40625,160.03125 L 265.28125,162.34375 L 265.28125,162.375 L 265.90625,164.625 L 265.96875,164.84375 L 265.84375,165.03125 L 265.0625,166.15625 L 265.0625,166.1875 L 263.78125,168.03125 L 264.375,168.34375 L 264.46875,168.40625 L 264.53125,168.46875 L 265.78125,169.84375 L 265.90625,169.96875 L 265.90625,170.15625 L 266.03125,173.0625 L 266.625,174.375 L 267.25,175.625 L 267.25,175.65625 L 268.25,177.3125 L 271.03125,177.09375 L 271.15625,177.09375 L 271.28125,177.125 L 272.84375,177.84375 L 272.875,177.84375 L 275.5,178.875 L 277,178.6875 L 279.15625,177.59375 L 281.84375,176.25 L 284.34375,175.15625 L 284.4375,175.125 L 284.5,175.125 L 287.96875,174.71875 L 289.3125,173.28125 L 289.375,173.21875 L 290.8125,171.125 L 291.84375,167.09375 L 291.84375,167.0625 L 291.875,167.03125 L 292.9375,164.78125 L 293.0625,164.53125 L 293.34375,164.5 L 295.125,164.3125 L 295.28125,164.3125 L 295.40625,164.375 L 297.53125,165.4375 L 300.40625,166.78125 L 300.4375,166.78125 L 302.3125,167.875 L 305.1875,167.375 L 305.21875,167.375 L 309.0625,166.90625 L 309.25,166.90625 L 309.40625,167 L 310.75,168 L 310.78125,168.03125 L 310.8125,168.0625 L 312.0625,169.5 L 315.5,171.03125 L 320.96875,171.09375 L 322.71875,170.1875 L 322.75,170.15625 C 322.75,170.15625 323.38628,169.90628 324.125,169.65625 C 324.86372,169.40622 325.64452,169.15626 326.25,169.15625 C 327.03421,169.15625 333.52365,169.15625 333.84375,169.15625 L 335.59375,168 L 335.625,167.96875 L 338.8125,165.59375 L 338.84375,165.5625 L 338.875,165.53125 C 338.875,165.53125 339.52294,165.19166 340.21875,164.84375 C 340.56666,164.6698 340.91954,164.51606 341.21875,164.375 C 341.51796,164.23394 341.7008,164.12168 341.9375,164.0625 C 341.89655,164.07274 341.97011,164.04289 342.0625,164 C 342.15489,163.95711 342.2676,163.91511 342.40625,163.84375 C 342.68355,163.70102 343.04242,163.49542 343.375,163.3125 C 344.04015,162.94666 344.65625,162.59375 344.65625,162.59375 L 344.6875,162.59375 L 351,159.5625 L 351.03125,159.5625 L 353.65625,157.96875 L 357.65625,155.21875 L 357.6875,155.1875 L 357.71875,155.1875 L 359.875,154.09375 L 359.53125,152.46875 C 359.45269,152.38672 359.10893,152.02527 358.625,151.53125 C 358.35843,151.25913 358.07411,150.97625 357.84375,150.75 C 357.61339,150.52375 357.39495,150.32746 357.375,150.3125 C 357.16038,150.15154 357.04756,149.89144 357.03125,149.6875 C 357.01494,149.48356 357.07963,149.29991 357.125,149.15625 C 357.21573,148.86894 357.34375,148.65625 357.34375,148.65625 L 357.40625,148.5625 L 357.5,148.5 L 359.4375,147.3125 L 360,146.21875 L 360.125,145.9375 L 360.4375,145.9375 L 368.25,145.96875 L 368.4375,139.125 C 368.38554,139.04767 368.1167,138.64233 367.71875,138.125 C 367.50158,137.84268 367.27959,137.54509 367.0625,137.3125 C 366.84541,137.07991 366.62181,136.90466 366.5625,136.875 C 366.13082,136.65916 365.56926,136.28065 364.96875,135.9375 C 364.36824,135.59435 363.74753,135.3125 363.40625,135.3125 C 362.73165,135.3125 361.74457,135.08239 360.6875,134.8125 C 359.63043,134.54261 358.52869,134.23554 357.75,134.0625 C 357.17786,133.93536 356.7543,133.51544 356.46875,133.0625 C 356.1832,132.60956 356.00574,132.09295 355.875,131.59375 C 355.61352,130.59535 355.5625,129.65625 355.5625,129.65625 L 355.59375,129.65625 L 354.6875,124.96875 L 353.65625,123.1875 L 345.9375,123.1875 L 345.90625,123.1875 zM 497.875,123.21875 L 496.71875,125.875 L 496.6875,125.9375 C 496.67068,125.99768 496.49178,126.68793 496.28125,127.5 C 496.17152,127.92326 496.04958,128.36079 495.96875,128.71875 C 495.88792,129.07671 495.84375,129.42582 495.84375,129.40625 C 495.84375,129.4492 495.89609,129.78721 495.9375,130.1875 C 495.97891,130.58779 496.0224,131.08849 496.0625,131.59375 C 496.1026,132.09901 496.13132,132.61839 496.125,133.0625 C 496.11868,133.50661 496.12832,133.84864 495.90625,134.21875 C 495.65884,134.6311 495.24827,135.03298 494.875,135.40625 C 494.5696,135.71165 494.40159,135.88759 494.3125,135.96875 L 493.9375,137.9375 L 493.9375,138.03125 L 493.875,138.125 L 493.125,139.34375 L 493.5625,140.875 L 493.5625,140.90625 L 493.5625,140.9375 L 494.0625,144.09375 L 496.5,147 C 496.54346,147.03872 496.76517,147.25356 497.09375,147.5 C 497.27249,147.63405 497.46663,147.75467 497.625,147.84375 C 497.78337,147.93283 497.93623,147.96875 497.875,147.96875 C 497.87626,147.96875 498.13483,147.94286 498.40625,147.875 C 498.67767,147.80714 499.00122,147.68713 499.3125,147.59375 C 499.93506,147.40698 500.5,147.25 500.5,147.25 L 500.5625,147.21875 L 500.65625,147.21875 C 500.65625,147.21875 504.55616,147.21875 505.1875,147.21875 C 505.54534,147.21875 505.82941,147.32043 506.21875,147.46875 C 506.60809,147.61707 507.0451,147.80816 507.46875,148 C 508.31605,148.38368 509.09375,148.78125 509.09375,148.78125 L 509.21875,148.84375 L 509.3125,148.96875 L 510.6875,151.40625 C 510.96818,151.45891 512.53355,151.78797 513.125,151.90625 C 513.32964,151.94718 513.47173,151.99803 513.625,152.09375 C 513.77827,152.18947 513.91831,152.33356 514.09375,152.46875 C 514.44463,152.73913 514.85395,153.06565 515.25,153.40625 C 515.64605,153.74685 516.04912,154.0773 516.375,154.34375 C 516.70088,154.6102 517.00225,154.8134 517,154.8125 C 517.31793,154.93967 517.57459,155.16555 517.96875,155.46875 C 518.36291,155.77195 518.84422,156.13448 519.28125,156.5 C 520.15532,157.23104 520.9375,157.9375 520.9375,157.9375 L 521.09375,158.09375 L 521.09375,158.3125 L 521.09375,160.21875 L 521.09375,160.40625 L 520.96875,160.5625 L 519.1875,162.34375 L 516.46875,165.03125 L 515.75,166.5 L 515.75,166.53125 L 515.71875,166.5625 L 513.28125,170.21875 L 513.28125,171.875 L 513.75,173.03125 L 513.8125,173.1875 L 513.78125,173.34375 L 513,176.25 L 512.375,178.8125 L 515.65625,179.125 L 517.15625,176.5 L 517.15625,176.46875 L 517.1875,176.4375 L 519.0625,173.9375 L 519.125,173.875 L 519.1875,173.8125 C 519.1875,173.8125 519.69898,173.44958 520.28125,173.09375 C 520.57239,172.91583 520.87414,172.73481 521.15625,172.59375 C 521.43836,172.45269 521.64456,172.34375 522,172.34375 C 522.00126,172.34375 522.35413,172.28861 522.75,172.21875 C 523.14587,172.14889 523.62234,172.06303 524.09375,171.96875 C 524.98742,171.79002 525.75875,171.64318 525.84375,171.625 L 529.0625,169.625 L 529.09375,169.625 L 532.53125,167.875 L 534.6875,165.375 L 536.1875,161.3125 L 536.40625,160.6875 L 536.9375,161.0625 C 536.9375,161.0625 537.31774,161.32388 537.8125,161.59375 C 538.30726,161.86362 538.9286,162.09375 539.15625,162.09375 C 539.27007,162.09375 539.75904,162.04237 540.3125,161.9375 C 540.86596,161.83263 541.51999,161.70389 542.15625,161.5625 C 543.42877,161.27972 544.59375,161 544.59375,161 L 545,160.875 L 545.1875,161.28125 L 546.09375,163.28125 L 550.1875,164 C 550.26919,163.99224 551.16002,163.89912 552.21875,163.75 C 552.7722,163.67205 553.35914,163.57138 553.84375,163.46875 C 554.32836,163.36612 554.74189,163.24571 554.84375,163.1875 C 555.63345,162.73626 557.60667,161.41796 557.8125,161.28125 L 558.875,159.0625 L 557.28125,157.6875 L 557.0625,157.5 L 557.125,157.1875 L 557.625,154.9375 L 557.6875,154.59375 L 558.0625,154.53125 L 564.375,153.78125 L 564.5625,153.75 L 564.75,153.875 C 564.75,153.875 565.27588,154.31986 565.875,154.75 C 566.17456,154.96507 566.48542,155.19256 566.75,155.34375 C 567.01458,155.49494 567.26299,155.53125 567.1875,155.53125 C 567.40315,155.53125 567.86505,155.46191 568.125,155.34375 C 568.14999,155.33239 568.13561,155.3243 568.15625,155.3125 C 567.9737,155.12726 567.56684,154.75437 567.125,154.40625 C 566.61215,154.00219 566.15625,153.65625 566.15625,153.65625 L 566.03125,153.59375 L 565.96875,153.4375 L 565.21875,151.5625 L 565.15625,151.40625 L 565.1875,151.25 L 566.4375,146.375 L 566.71875,144.25 L 566.75,143.9375 L 567.03125,143.84375 L 570.53125,142.46875 L 570.3125,141.46875 L 566.125,140.875 L 565.6875,140.8125 L 565.6875,140.375 L 565.8125,136.59375 L 566.09375,136.59375 L 564.53125,136.1875 L 564.4375,136.1875 L 564.375,136.125 L 561.15625,134 L 560.65625,133.65625 L 561.0625,133.21875 L 563.125,131.03125 C 562.69005,130.9466 562.43449,130.88897 561.65625,130.75 C 560.41234,130.52787 558.95934,130.3125 558.5625,130.3125 C 557.80456,130.3125 557.07835,129.90639 556.46875,129.53125 C 556.14354,129.33112 556.10116,129.26801 555.90625,129.125 L 554.71875,131.46875 L 553.125,134.53125 L 553.09375,134.59375 L 553.03125,134.65625 L 548.375,139.125 L 548.21875,139.28125 L 547.96875,139.25 L 542.78125,138.53125 L 542.75,138.53125 L 542.71875,138.5 L 535.5,136.21875 L 535.46875,136.21875 L 526.75,135.5 L 526.5,135.46875 L 526.375,135.28125 L 524.40625,132.46875 L 521.0625,132.46875 L 520.96875,132.46875 L 520.875,132.40625 L 517.65625,131 L 517.21875,130.8125 L 517.40625,130.34375 L 518.375,127.84375 C 518.33946,127.72241 518.29194,127.46101 518.125,127.09375 C 518.02378,126.87108 517.88594,126.65921 517.78125,126.53125 C 517.7289,126.46727 517.70418,126.4215 517.6875,126.40625 C 517.41369,126.40625 515.93156,126.47331 514.59375,126.5625 C 513.28801,126.64955 512.1203,126.74588 512.0625,126.75 C 512.06108,126.7501 512,126.75 512,126.75 L 507.0625,127.8125 L 507,127.8125 L 506.90625,127.8125 L 504.03125,127.46875 L 503.875,127.4375 L 503.75,127.3125 L 499.59375,123.34375 L 497.875,123.21875 zM 72.71875,123.59375 L 70.6875,126.21875 L 73.5,127.03125 L 73.71875,127.09375 L 73.8125,127.3125 L 75.46875,131.34375 L 75.5625,131.59375 L 75.4375,131.8125 L 73.15625,135.34375 L 73.0625,135.5 L 72.875,135.5625 L 68.8125,136.65625 L 67.28125,138.21875 L 67.125,138.34375 L 66.9375,138.375 L 62.21875,138.625 L 57.3125,141.09375 L 57.21875,141.125 L 57.15625,141.125 L 53.75,141.71875 L 48.90625,144.96875 L 48.84375,145 L 48.78125,145.03125 L 43.84375,146.9375 L 43.0625,150 L 44.0625,153.90625 L 44.09375,154.0625 L 44.03125,154.1875 L 42.90625,157.34375 L 42.875,157.40625 L 42.84375,157.4375 L 38.6875,164.1875 L 39.65625,163.8125 L 39.6875,163.78125 L 39.71875,163.78125 L 43.1875,161.90625 L 43.1875,161.9375 L 45.59375,160.5 L 46.5,159.09375 L 45.4375,157.59375 L 45.25,157.3125 L 45.40625,157.03125 L 46.6875,155.03125 L 46.8125,154.8125 L 47.03125,154.78125 L 49.34375,154.53125 L 52.96875,152.25 L 53.03125,152.21875 L 55.5,150.09375 L 55.5625,150.03125 L 55.65625,150 L 58.5625,149.15625 L 60.28125,147.6875 L 61.28125,144.90625 L 61.3125,144.8125 L 61.375,144.75 L 62.75,143.09375 L 62.84375,142.96875 L 63,142.9375 L 65.125,142.40625 L 65.03125,141.1875 L 65,140.875 L 65.25,140.71875 L 66.78125,139.71875 L 66.84375,139.6875 L 66.90625,139.65625 L 71.40625,138.40625 L 71.46875,138.375 L 78.65625,135.375 L 78.65625,134.5625 L 78.0625,131.65625 L 78,131.40625 L 78.15625,131.21875 L 79.875,129.15625 L 79.90625,129.09375 L 81.75,125.71875 L 80.75,123.59375 L 72.71875,123.59375 zM 704.84375,123.65625 L 704.78125,123.6875 L 704.65625,123.71875 L 702.40625,124.09375 L 702.375,124.09375 L 702.34375,124.09375 L 694.90625,124.46875 L 693.25,125.625 L 693.1875,125.6875 L 693.09375,125.71875 L 690.3125,126.4375 L 686.34375,129.78125 L 686.21875,129.875 L 686.09375,129.90625 L 683.0625,130.28125 L 682.96875,130.28125 L 682.875,130.28125 L 680.28125,129.65625 L 678.5625,130.59375 L 675.78125,133.40625 L 675.625,133.5625 L 675.40625,133.5625 L 664.15625,133.3125 L 664.0625,133.3125 L 663.9375,133.25 L 661.21875,131.84375 L 659.03125,132.53125 L 658.875,132.5625 L 658.75,132.53125 L 655.21875,131.53125 C 655.21875,131.53125 655.18787,131.53134 655.1875,131.53125 C 655.15962,131.52488 654.12936,131.27609 652.96875,131.03125 L 650.625,135.40625 L 647.96875,141.03125 L 647.9375,141.09375 L 646.65625,145.375 L 649.0625,147.46875 L 649.21875,147.59375 L 649.25,147.78125 C 649.25,147.78125 649.45189,149.06775 649.71875,150.46875 C 649.85218,151.16925 650.02401,151.89665 650.15625,152.5 C 650.28538,153.08915 650.41267,153.56962 650.46875,153.71875 C 650.47206,153.72544 650.46177,153.73255 650.46875,153.75 C 650.4815,153.75783 650.50107,153.73687 650.53125,153.75 C 650.63184,153.79378 650.80027,153.8384 651.03125,153.875 C 651.49321,153.94821 652.14885,153.98897 652.84375,154 C 654.23355,154.02206 655.76397,153.94407 656.71875,154.15625 C 657.02923,154.22524 657.30341,154.41429 657.46875,154.65625 C 657.63409,154.89821 657.69247,155.16418 657.71875,155.4375 C 657.77131,155.98414 657.65316,156.55949 657.5,157.125 C 657.19368,158.25601 656.6875,159.3125 656.6875,159.3125 L 656.625,159.4375 L 657.28125,163.65625 L 657.59375,165.65625 L 657.59375,165.6875 L 659.375,169.0625 L 659.40625,169.15625 L 659.4375,169.25 L 659.78125,173.53125 L 659.78125,173.625 L 659.78125,173.71875 L 658.6875,177.46875 L 658.6875,177.5 L 658.65625,177.5625 C 658.65625,177.5625 658.42731,178.00162 658.375,178.4375 C 658.34885,178.65544 658.36923,178.85892 658.4375,179 C 658.50577,179.14108 658.60724,179.24408 658.90625,179.34375 C 660.48177,179.86892 665.84375,181.5 665.84375,181.5 L 665.875,181.5 L 665.90625,181.5 L 670.40625,183.5 C 670.56982,183.29829 670.76116,183.04739 671.21875,182.625 C 671.5281,182.33945 671.86921,182.04416 672.25,181.84375 C 672.63079,181.64334 673.10095,181.5024 673.5625,181.65625 C 674.6339,182.01339 676.75,182.75 676.75,182.75 L 676.90625,182.78125 L 676.96875,182.875 L 679.34375,185.625 L 685.25,187.71875 L 690.78125,188.4375 L 690.84375,188.4375 L 690.90625,188.46875 L 694.65625,189.875 C 694.75442,189.88953 695.1708,189.96139 695.75,190 C 696.07231,190.02149 696.40069,190.0151 696.6875,190 C 696.97431,189.9849 697.22939,189.93218 697.28125,189.90625 C 697.47442,189.80966 698.08214,189.29286 698.5625,188.8125 C 698.77758,188.59742 698.81582,188.56885 698.96875,188.40625 C 699.01013,188.36226 699.02825,188.3181 699.0625,188.28125 L 694.53125,185.0625 L 694.34375,184.90625 L 694.3125,184.65625 L 694.15625,180.03125 L 694.125,179.90625 L 694.1875,179.8125 L 696.5,173.9375 L 696.53125,173.8125 L 696.625,173.71875 L 700.21875,170.6875 L 700.25,170.65625 L 703.09375,168.5625 L 700.0625,166.28125 L 700,166.25 L 699.96875,166.1875 L 698.09375,163.65625 L 690.9375,161.5625 L 690.875,161.53125 L 690.8125,161.5 L 687.59375,159.53125 L 687.21875,159.3125 L 687.40625,158.90625 L 690.25,152.3125 L 690.3125,152.15625 L 690.4375,152.09375 L 694.46875,149.46875 L 699.09375,144.46875 L 699.125,144.46875 L 699.125,144.4375 L 702.34375,141.59375 L 702.40625,141.5625 L 702.4375,141.53125 L 706.40625,139.4375 L 706.9375,138.1875 L 705.4375,134.46875 L 705.40625,134.40625 L 705.40625,134.3125 L 704.84375,127.90625 L 704.84375,127.875 L 704.84375,127.84375 L 704.84375,123.65625 zM 115.59375,131.71875 L 115.90625,131.875 C 115.90625,131.875 117.21827,132.57288 118.59375,132.6875 C 119.50027,132.76304 120.12192,133.2651 120.4375,133.71875 C 120.75308,134.1724 120.8125,134.625 120.8125,134.625 L 120.90625,135.125 L 120.40625,135.1875 L 116.90625,135.71875 C 116.90416,135.72002 116.87738,135.7173 116.875,135.71875 C 116.73345,135.80483 116.23011,136.14318 115.53125,136.5625 C 114.74039,137.03702 113.95207,137.52396 113.625,137.6875 C 113.40534,137.79733 113.19314,137.75922 113.03125,137.71875 C 112.86936,137.67828 112.73567,137.60931 112.59375,137.53125 C 112.30991,137.37514 112.01532,137.18432 111.75,136.96875 C 111.21936,136.53761 110.75,136.0625 110.75,136.0625 L 110.625,135.9375 L 110.625,135.75 L 110.5,132.96875 L 110.46875,132.34375 L 111.0625,132.4375 L 114.15625,132.90625 L 115.34375,131.90625 L 115.59375,131.71875 zM 115.71875,132.875 L 114.59375,133.8125 L 114.40625,133.96875 L 114.1875,133.9375 L 111.53125,133.53125 L 111.625,135.5 C 111.73425,135.60699 111.9742,135.86185 112.375,136.1875 C 112.61476,136.3823 112.87284,136.55193 113.0625,136.65625 C 113.14098,136.69942 113.21105,136.70578 113.25,136.71875 C 113.48713,136.59277 114.28455,136.13552 115.03125,135.6875 C 115.81875,135.215 116.53125,134.78125 116.53125,134.78125 L 116.625,134.71875 L 116.71875,134.71875 L 119.59375,134.3125 C 119.58499,134.29906 119.60322,134.29487 119.59375,134.28125 C 119.40426,134.00886 119.13995,133.73823 118.53125,133.6875 C 117.13271,133.57096 116.07258,133.05601 115.71875,132.875 zM 579.59375,133.5 C 579.41231,133.50572 579.20529,133.52657 579,133.5625 C 578.17883,133.70621 577.34375,134.03125 577.34375,134.03125 L 577.3125,134.03125 L 577.28125,134.0625 L 571.90625,135.46875 L 571.90625,135.5 L 566.90625,136.75 L 566.8125,136.75 L 566.6875,139.9375 L 570.8125,140.53125 L 571.15625,140.5625 L 571.21875,140.90625 L 571.59375,142.6875 L 571.6875,143.09375 L 571.28125,143.25 L 567.65625,144.6875 L 567.4375,146.5 L 567.4375,146.53125 L 567.4375,146.5625 L 566.21875,151.3125 L 566.84375,152.9375 C 566.91908,152.99295 567.26873,153.24582 567.75,153.625 C 568.27887,154.04169 568.8276,154.44722 569.125,154.84375 C 569.3177,155.10069 569.29079,155.57691 569.125,155.8125 C 568.95921,156.04809 568.74852,156.15124 568.53125,156.25 C 568.09671,156.44752 567.60316,156.53125 567.1875,156.53125 C 566.79633,156.53125 566.56547,156.36777 566.25,156.1875 C 565.93453,156.00723 565.59725,155.78938 565.28125,155.5625 C 564.75241,155.18282 564.42026,154.92556 564.28125,154.8125 L 558.53125,155.5 L 558.15625,157.125 L 559.8125,158.5625 L 560.125,158.8125 L 559.9375,159.15625 L 558.6875,161.8125 L 558.625,161.9375 L 558.5,162 C 558.5,162 556.24986,163.52689 555.3125,164.0625 C 554.97242,164.25683 554.55284,164.35829 554.03125,164.46875 C 553.50966,164.57921 552.91094,164.67011 552.34375,164.75 C 551.20938,164.90977 550.1875,165 550.1875,165 L 550.125,165 L 550.0625,165 L 545.65625,164.25 L 545.375,164.1875 L 545.28125,163.9375 L 544.4375,162.0625 C 544.13914,162.13447 543.44794,162.29282 542.375,162.53125 C 541.73278,162.67396 541.07112,162.82929 540.5,162.9375 C 539.92888,163.04571 539.48436,163.09375 539.15625,163.09375 C 538.50002,163.09375 537.8907,162.76709 537.34375,162.46875 C 537.1068,162.3395 537.07373,162.32361 536.90625,162.21875 L 535.59375,165.8125 L 535.5625,165.90625 L 535.5,165.96875 L 533.25,168.625 L 533.15625,168.6875 L 533.09375,168.75 L 529.59375,170.46875 L 529.59375,170.5 L 526.3125,172.5 L 526.21875,172.5625 L 526.15625,172.5625 C 526.15625,172.5625 525.26371,172.74726 524.3125,172.9375 C 523.83689,173.03262 523.34659,173.14656 522.9375,173.21875 C 522.52841,173.29094 522.25127,173.34375 522,173.34375 C 522.1029,173.34375 521.86375,173.38063 521.625,173.5 C 521.38625,173.61937 521.08957,173.79943 520.8125,173.96875 C 520.3274,174.2652 519.97737,174.46148 519.875,174.53125 L 519.84375,174.5625 L 518,177 L 517.96875,177.0625 L 516.4375,179.78125 L 517.9375,184.03125 L 521.625,187.75 L 521.6875,187.78125 L 525.84375,189.5 L 533.5,189.5 L 537.6875,188.09375 L 537.9375,188.03125 L 538.125,188.15625 L 542.40625,191 L 542.53125,191.09375 L 542.59375,191.21875 L 545.59375,198.0625 L 551.53125,197.90625 L 551.59375,197.90625 L 555.65625,197.375 L 555.6875,197.34375 L 555.71875,197.34375 L 566.59375,197.1875 L 566.6875,197.1875 L 566.75,197.1875 C 566.75,197.1875 567.32062,197.38718 568,197.5625 C 568.67937,197.73782 569.4994,197.90625 569.8125,197.90625 C 570.15893,197.90625 571.45913,197.75849 572.59375,197.625 C 573.64536,197.50128 574.45937,197.4237 574.59375,197.40625 L 577.5625,195.4375 L 578.96875,187.78125 L 579,187.6875 L 579.03125,187.59375 L 583.3125,180.8125 L 583.46875,180.59375 L 583.6875,180.5625 L 587.4375,180.21875 L 587.5625,180.21875 L 587.65625,180.25 L 591.28125,181.46875 L 597.125,180.9375 L 600.78125,178.1875 L 601,178 L 601.25,178.09375 L 603.21875,178.8125 L 603.28125,178.84375 L 603.34375,178.875 L 607.125,181.8125 L 614.125,182.1875 L 614.1875,182.1875 L 614.21875,182.1875 L 619.3125,183.5 L 620.9375,178.40625 L 621,178.3125 L 621.09375,178.21875 L 625.375,174.09375 L 628.75,169.09375 L 628.71875,169.0625 L 626.375,166.03125 L 626.21875,165.78125 L 626.34375,165.5 L 627.75,162.3125 L 627.75,162.28125 L 629.0625,159.4375 L 618.75,159.25 L 618.65625,159.25 L 618.5625,159.21875 C 618.5625,159.21875 617.5663,158.80335 616.375,158.40625 C 615.1837,158.00915 613.74554,157.65625 613.21875,157.65625 C 612.69494,157.65625 612.26706,157.36747 611.9375,157.03125 C 611.60794,156.69503 611.32281,156.29376 611.0625,155.875 C 610.54187,155.03747 610.0325,154.19167 609.40625,153.84375 C 608.38139,153.27438 607.89932,152.07323 607.59375,151.0625 C 607.33814,150.21701 607.278,149.69491 607.25,149.46875 L 605,148.5 L 601.875,147.28125 L 596.4375,147.46875 L 596.40625,147.46875 L 596.34375,147.46875 L 590.28125,146.5625 L 590.0625,146.53125 L 589.9375,146.34375 L 588.5625,144.09375 L 588.5,144 L 585.59375,140.9375 L 585.53125,140.875 L 580.78125,137.5625 L 580.625,137.4375 L 580.5625,137.21875 L 580.34375,135.75 L 580.21875,135.71875 C 580.21875,135.71875 580.21875,135.09067 580.21875,134.90625 C 580.21875,134.64381 580.21875,134.69388 580.21875,133.75 C 580.21875,133.6417 580.20348,133.61253 580.1875,133.59375 C 580.17152,133.57497 580.13143,133.5588 580.03125,133.53125 C 579.93107,133.5037 579.77519,133.49428 579.59375,133.5 zM 211.21875,136.8125 L 210.3125,137.59375 L 209.4375,138.375 L 209.28125,138.5 L 209.0625,138.5 L 206.8125,138.375 L 206.65625,138.34375 L 206.53125,138.28125 L 205.625,137.625 L 204.28125,139.09375 L 204.15625,139.25 L 203.9375,139.25 L 188.34375,139.375 L 188.28125,139.375 L 184.59375,139.84375 L 183.6875,141.84375 L 183.59375,142.03125 L 183.375,142.125 L 180.625,143.125 L 178.46875,144 L 178.4375,144.03125 L 178.375,144.03125 L 175.59375,144.5625 L 175.71875,145.15625 L 177.96875,147.0625 L 178,147.09375 L 180,149.09375 L 183.875,149.21875 L 185.75,148.09375 L 187.1875,145.5625 L 187.34375,145.34375 L 187.59375,145.3125 L 189.375,145.1875 L 189.5,145.1875 L 189.65625,145.25 L 192.8125,146.96875 L 195.5625,146.84375 L 199.875,146.71875 L 201.96875,145.84375 L 202.0625,145.8125 L 202.15625,145.8125 L 206.5625,145.8125 L 208.75,142.15625 L 208.75,142.125 L 209.5,139.25 L 209.5625,139 L 209.8125,138.90625 L 212.75,137.90625 L 212.75,137.9375 L 212.96875,137.84375 L 212.15625,137.3125 L 211.21875,136.8125 zM 707.75,138.9375 L 707.25,140.03125 L 707.15625,140.1875 L 707.03125,140.25 L 703,142.34375 L 702.96875,142.375 L 702.90625,142.40625 L 699.84375,145.15625 L 695.1875,150.15625 L 695.15625,150.21875 L 695.09375,150.25 L 691.125,152.8125 L 688.5,158.90625 L 691.21875,160.59375 L 691.25,160.59375 L 698.53125,162.75 L 698.6875,162.78125 L 698.78125,162.90625 L 700.65625,165.5 L 700.71875,165.53125 L 700.75,165.59375 L 704.21875,168.15625 L 704.78125,168.5625 L 704.21875,168.96875 L 700.875,171.4375 L 700.84375,171.46875 L 697.375,174.40625 L 695.15625,180.03125 L 695.3125,184.375 L 700.125,187.8125 L 700.5625,188.125 L 700.1875,188.5625 C 700.1875,188.5625 699.99795,188.7779 699.9375,188.84375 C 701.02803,189.32451 703.45102,190.38526 704.15625,190.6875 C 704.65365,190.90067 705.52237,191.35461 706.375,191.8125 C 707.22763,192.27039 708.09287,192.75589 708.3125,192.84375 C 708.63351,192.97216 709.15556,193.16446 709.6875,193.40625 C 710.21944,193.64804 710.72463,193.90287 711.0625,194.15625 C 711.3969,194.40705 712.46148,194.71511 713.53125,195.25 C 714.52649,195.74761 716.36513,196.58714 717.21875,197.15625 C 718.04036,197.704 719.51255,198.84375 720.75,198.84375 C 721.66039,198.84375 722.586,199.23992 723.40625,199.59375 C 723.81637,199.77067 724.20138,199.93855 724.5,200.0625 C 724.79862,200.18645 725.05675,200.25 725.03125,200.25 C 725.14692,200.25 725.39743,200.12381 725.6875,199.90625 C 725.97757,199.68869 726.30877,199.41473 726.6875,199.1875 C 727.02818,198.98309 727.36513,199.00176 727.6875,199.0625 C 728.00987,199.12324 728.32253,199.23251 728.65625,199.34375 C 729.32368,199.56623 730.02995,199.79181 730.40625,199.75 C 731.18657,199.6633 731.78805,200.08974 732.21875,200.46875 C 732.4341,200.65826 732.63763,200.83754 732.78125,200.96875 C 732.9029,201.07989 732.97201,201.11871 732.96875,201.125 C 733.02347,201.10663 733.10716,201.06303 733.21875,201 C 733.44193,200.87393 733.7346,200.66569 734.03125,200.4375 C 734.62455,199.98112 735.23916,199.4171 735.53125,199.125 C 735.78337,198.87288 736.10931,198.71511 736.5,198.53125 C 736.89069,198.34739 737.33806,198.16116 737.78125,198 C 738.66764,197.67768 739.51238,197.41878 739.8125,197.34375 C 739.73772,197.36244 739.80293,197.36784 739.875,197.3125 C 739.94707,197.25716 740.04674,197.16927 740.15625,197.0625 C 740.37526,196.84896 740.62775,196.53589 740.875,196.25 C 741.21953,195.85163 741.37118,195.67037 741.53125,195.46875 L 737.09375,193 C 737.08798,192.9991 737.03984,192.97012 737.03125,192.96875 C 736.88172,192.94486 736.45396,192.89244 735.875,192.71875 C 735.53736,192.61746 735.20606,192.49238 734.90625,192.3125 C 734.60644,192.13262 734.25,191.87343 734.25,191.40625 C 734.25001,190.70419 734.125,186.25 734.125,186.25 L 734.125,186.09375 L 734.21875,185.9375 C 734.21875,185.9375 734.68929,185.20666 735.3125,184.34375 C 735.93571,183.48084 736.7008,182.50902 737.34375,181.9375 C 738.46557,180.94035 742.95856,176.9052 743.0625,176.8125 C 743.08984,176.76108 743.21385,176.5512 743.34375,176.1875 C 743.48688,175.78675 743.54985,175.30578 743.5,175.15625 C 743.28434,174.5093 742.25,172.28125 742.25,172.28125 L 742.21875,172.21875 L 742.21875,172.125 C 742.21875,172.125 742.15701,171.29182 742.09375,170.40625 C 742.03049,169.52068 741.96875,168.61712 741.96875,168.28125 C 741.96875,168.21751 741.9303,167.94563 741.90625,167.625 C 741.8822,167.30437 741.875,166.93089 741.875,166.53125 C 741.875,166.13161 741.88414,165.71978 741.96875,165.34375 C 742.05336,164.96772 742.19708,164.58736 742.5625,164.34375 C 742.58655,164.32771 742.97393,163.92289 743.34375,163.4375 C 743.71357,162.95211 744.12363,162.34576 744.53125,161.75 C 745.3465,160.55849 746.09375,159.4375 746.09375,159.4375 L 746.125,159.375 L 746.1875,159.3125 L 748.46875,157.4375 L 748.5,157.375 L 748.5625,157.34375 L 751.09375,156.21875 L 751.25,156.15625 L 751.40625,156.1875 C 751.40625,156.1875 753.64438,156.67672 754.1875,156.8125 C 754.42302,156.87138 754.79048,156.89288 755.125,156.90625 L 755.4375,153.21875 L 754.4375,152.78125 L 754.25,152.6875 L 754.1875,152.5 L 753,149.3125 L 751.21875,148.40625 L 750.3125,152.09375 L 750.21875,152.40625 L 749.875,152.46875 L 747.03125,152.8125 L 746.75,152.84375 L 746.5625,152.625 L 745.09375,150.625 L 741.09375,149.21875 L 740.40625,149 L 740.875,148.4375 L 742.1875,146.78125 L 742.1875,144.125 L 739.71875,144.40625 L 739.0625,147.4375 L 738.15625,151.53125 L 738.125,151.6875 L 738.03125,151.78125 L 734.625,155.1875 L 734.34375,155.46875 L 734,155.21875 L 731.53125,153.46875 L 731.5,153.4375 L 726.40625,150.625 L 726.375,150.625 L 719.96875,147.59375 L 719.9375,147.59375 L 719.90625,147.5625 L 714.75,144.34375 L 714.71875,144.34375 L 714.6875,144.3125 L 711.3125,141.46875 L 711.28125,141.46875 L 707.75,138.9375 zM 119.40625,142.5625 L 118.625,143.4375 C 118.625,143.4375 118.56696,143.53161 118.53125,143.625 C 118.51875,143.65769 118.50149,143.67574 118.5,143.6875 C 118.62788,143.80117 119.11833,144.12343 119.53125,144.40625 C 119.73771,144.54766 119.9347,144.68748 120.09375,144.8125 C 120.17327,144.87501 120.21355,144.93037 120.28125,145 C 120.3151,145.03481 120.3683,145.06712 120.40625,145.125 C 120.42575,145.15474 120.44873,145.2297 120.46875,145.28125 C 120.47452,145.29011 120.49397,145.29977 120.53125,145.34375 C 120.60582,145.43171 120.71994,145.55525 120.84375,145.6875 C 120.96756,145.81975 121.10361,145.98507 121.21875,146.125 C 121.33389,146.26493 121.42973,146.34782 121.5,146.59375 C 121.52304,146.6744 121.71973,147.15768 121.875,147.5625 C 122.03027,147.96732 122.15625,148.34375 122.15625,148.34375 L 122.25,148.5625 L 122.125,148.75 C 122.125,148.75 122.12192,148.8165 122.125,148.875 C 122.12808,148.93349 122.07307,148.97345 122.34375,149.09375 C 123.10179,149.43065 125.34375,150.28125 125.34375,150.28125 L 125.5625,150.375 L 125.65625,150.59375 L 126.5,153.15625 L 126.59375,153.4375 L 126.375,153.65625 L 125.4375,154.5625 L 125.125,154.21875 L 125.28125,154.59375 C 124.63508,154.89312 123.68001,155.27492 122.75,155.71875 C 121.81999,156.16258 120.9389,156.6926 120.46875,157.25 L 120.28125,157.5 L 119.96875,157.40625 L 112.59375,155.65625 L 107.03125,156.40625 L 107,156.1875 L 105.625,158.90625 L 105.5625,159.03125 L 105.46875,159.125 L 101.5,161.6875 L 101.40625,161.75 L 98.90625,164.28125 L 99.5625,167.1875 L 101.65625,169.75 L 101.71875,169.84375 L 101.75,169.9375 L 102.875,174.625 L 102.90625,174.65625 L 102.90625,174.71875 L 103.03125,178.625 L 103.15625,180.34375 L 103.15625,180.375 L 103.875,182.40625 L 103.9375,182.53125 L 103.90625,182.6875 L 103,185.96875 L 103,186 L 103,186.03125 L 101.75,189.3125 L 101.6875,189.4375 L 101.59375,189.53125 L 98.5625,191.90625 L 98.5,191.9375 L 98.46875,191.96875 L 94.3125,194.125 L 94.25,194.125 L 94.21875,194.15625 L 90.8125,195.28125 L 90.75,195.3125 L 90.6875,195.3125 L 87.6875,195.5625 L 87.46875,195.5625 L 87.34375,195.46875 L 84.8125,193.5625 L 82.40625,191.8125 L 78.96875,190.34375 L 78.9375,190.34375 L 77.03125,189.375 L 75.4375,189 L 73.3125,189.21875 L 70.875,191.03125 L 70.84375,191.0625 L 70.78125,191.09375 L 69,191.84375 L 68.90625,191.90625 L 68.8125,191.90625 L 65.34375,191.90625 L 65.28125,191.90625 L 60.65625,192.5 L 59.90625,193.90625 L 59.90625,193.9375 L 58.25,196.71875 L 57.15625,198.4375 L 57,200.4375 L 59.53125,199.875 L 59.59375,199.84375 L 59.625,199.84375 L 64.8125,199.6875 L 64.96875,199.6875 L 65.09375,199.75 L 66.5,200.6875 L 69.875,199.875 L 69.96875,199.84375 L 70.03125,199.84375 L 72.375,200.03125 L 72.625,200.0625 L 72.75,200.28125 L 74.1875,202.78125 L 74.3125,203.03125 L 74.1875,203.28125 L 72.40625,206.65625 L 72.34375,206.8125 L 72.1875,206.875 L 69.4375,208.34375 L 69.25,211.28125 L 69.21875,211.71875 L 68.78125,211.75 L 65.15625,211.90625 L 65.15625,213.75 L 65.15625,214.03125 L 64.875,214.1875 L 62.9375,215.25 L 60.53125,216.625 L 60.5,216.65625 L 60.4375,216.6875 L 58.375,218.59375 L 58.21875,218.71875 L 58.03125,218.71875 L 56.65625,218.71875 L 56.125,219.3125 L 58.40625,219.3125 L 58.53125,219.3125 L 58.65625,219.40625 L 60.09375,220.28125 L 60.34375,220.4375 L 60.3125,220.75 L 60.1875,223.9375 L 61.46875,224.3125 L 64.5625,222.84375 L 66.46875,221.09375 L 66.5,221.03125 L 66.59375,221 L 69.875,219.46875 L 69.96875,219.4375 L 70.0625,219.4375 L 72.0625,219.3125 L 74.21875,217.875 L 77.125,215.875 L 77.1875,215.8125 L 77.28125,215.78125 L 80.46875,214.9375 L 80.5625,214.90625 L 82.21875,214.0625 L 82.4375,213.9375 L 82.65625,214.0625 L 84.46875,214.90625 L 84.5625,214.9375 L 88.375,215.78125 L 88.40625,215.78125 L 88.40625,215.8125 L 93.34375,217.4375 L 94.53125,215.5 L 94.6875,215.28125 L 94.96875,215.28125 L 98.875,215.28125 L 99,215.28125 L 99.09375,215.3125 L 100.75,216.21875 L 100.8125,216.25 L 100.84375,216.28125 L 104,219.3125 L 106.03125,220.3125 L 112,220.3125 L 112.15625,220.3125 L 112.28125,220.40625 L 113.5625,221.34375 L 117.25,221.59375 L 117.34375,221.59375 L 121.03125,221.09375 L 121.5625,221 L 121.59375,221.53125 L 121.96875,226.3125 L 123.40625,228.625 L 123.4375,228.65625 L 123.4375,228.6875 L 124.75,231.46875 L 126.71875,233.0625 L 129.09375,234.9375 L 129.15625,235 L 129.21875,235.0625 L 131.3125,238.1875 L 131.34375,238.21875 L 133.4375,240.78125 L 137.75,240.78125 C 137.75,240.78125 138.34255,240.63559 139,240.40625 C 139.65745,240.17691 140.41182,239.80693 140.5625,239.65625 C 140.86765,239.3511 141.25296,239.27891 141.65625,239.21875 C 142.05954,239.15859 142.50346,239.14806 142.9375,239.15625 C 143.37154,239.16444 143.78028,239.19285 144.125,239.21875 C 144.46972,239.24465 144.77999,239.25 144.84375,239.25 C 144.82419,239.25 145.00162,239.23225 145.21875,239.15625 C 145.43588,239.08025 145.72322,238.98242 145.96875,238.875 C 146.45981,238.66016 146.875,238.4375 146.875,238.4375 L 147,238.375 L 147.09375,238.375 C 147.09375,238.375 152.89737,238.37501 153.78125,238.375 C 154.03271,238.375 155.08033,238.12436 155.9375,237.875 C 156.79468,237.62564 157.5625,237.40625 157.5625,237.40625 L 157.59375,237.375 L 157.625,237.375 L 160.03125,236.9375 L 160.125,235.4375 L 159.15625,234.5625 L 159.0625,234.5 L 159.03125,234.40625 L 158.15625,232.53125 L 158.09375,232.40625 L 158.09375,232.28125 L 158.21875,230 L 158.25,229.75 L 158.46875,229.59375 L 159.96875,228.71875 L 160,228.71875 L 161.125,228.09375 L 161.21875,228.03125 L 161.3125,228.03125 L 165.78125,227.53125 L 169.3125,226.4375 L 172.71875,224.375 L 173.75,222.0625 L 174.125,216.75 L 174.125,216.6875 L 174.15625,216.65625 L 174.65625,214.875 L 174.6875,214.75 L 174.78125,214.65625 L 176.71875,212.71875 L 178.5,207.90625 L 177.625,207.3125 L 173.78125,206.9375 L 171.4375,208.03125 L 171.15625,208.125 L 170.9375,207.96875 L 168.40625,206.1875 L 168.34375,206.15625 L 168.28125,206.0625 L 166.25,203.03125 L 166.21875,202.96875 L 166.1875,202.875 L 165.46875,199.6875 L 165.4375,199.625 L 165.4375,199.59375 L 164.375,197.09375 L 162.0625,198.0625 L 161.96875,198.09375 L 161.84375,198.09375 L 155.15625,197.84375 L 154.9375,197.8125 L 154.8125,197.65625 L 153.15625,195.78125 L 153.125,195.71875 L 153.09375,195.6875 L 151.1875,192.3125 L 144.375,189.34375 L 144.25,189.28125 L 144.15625,189.15625 L 142.15625,186.25 L 142.125,186.21875 L 142.125,186.1875 L 140.34375,182.78125 L 140.28125,182.6875 L 140.28125,182.53125 L 140.40625,178.59375 L 139.34375,175.375 L 137.21875,171.84375 L 137.1875,171.78125 L 137.15625,171.71875 L 136.03125,167.9375 L 136,167.875 L 136,167.8125 L 135.75,163.46875 L 135.75,163.40625 L 135.125,160.5625 L 135.0625,160.3125 L 135.25,160.09375 L 137.09375,158.28125 L 137.15625,158.21875 L 139.8125,154.21875 L 138.71875,153.625 L 136,153.59375 L 134.4375,154.46875 L 134.3125,154.53125 L 134.1875,154.53125 L 129.5625,154.53125 L 129.46875,154.53125 L 129.375,154.46875 L 127.9375,153.90625 L 127.75,153.84375 L 127.6875,153.65625 L 126.5,151.28125 L 126.3125,150.90625 L 126.6875,150.65625 L 128.34375,149.5 L 129.6875,148.59375 L 129.71875,148.5625 L 132.03125,147.40625 L 132.09375,147.375 L 133.40625,146.46875 L 133.375,146.3125 L 131.0625,145.4375 L 131.0625,145.40625 C 131.0625,145.40625 130.4916,145.18048 129.90625,144.9375 C 129.61358,144.81601 129.33028,144.68195 129.09375,144.59375 C 128.97548,144.54965 128.85271,144.52214 128.78125,144.5 C 128.74552,144.48893 128.70129,144.47379 128.6875,144.46875 C 128.43124,144.46011 128.15973,144.39641 127.84375,144.34375 C 127.5036,144.28706 127.1875,144.25 127.1875,144.25 L 127.15625,144.25 L 127.125,144.21875 L 124.53125,143.3125 L 124.5,143.3125 L 121.6875,143.28125 L 121.53125,143.25 L 121.40625,143.1875 C 121.40625,143.1875 121.16665,143.01381 120.90625,142.84375 C 120.77605,142.75872 120.6339,142.64943 120.53125,142.59375 C 120.47992,142.56591 120.42725,142.57101 120.40625,142.5625 C 120.15134,142.5625 119.63773,142.5625 119.40625,142.5625 zM 222.71875,144.09375 L 220.5,145.09375 L 216.4375,147.75 L 216.34375,147.8125 L 216.1875,147.84375 L 211.03125,148.09375 L 210.90625,148.09375 L 210.8125,148.0625 L 207.28125,146.78125 L 207.53125,146.09375 L 207.25,146.5625 L 207.125,146.8125 L 206.84375,146.8125 L 202.28125,146.8125 L 200.1875,147.65625 L 200.125,147.6875 L 200.03125,147.71875 L 195.625,147.84375 L 192.71875,147.96875 L 192.5625,147.96875 L 192.4375,147.90625 L 189.28125,146.1875 L 187.9375,146.28125 L 186.5625,148.71875 L 186.5,148.84375 L 186.375,148.90625 L 186,149.125 L 186.34375,149.3125 L 187.46875,149.46875 L 187.5,149.46875 L 187.53125,149.46875 L 189.71875,149.96875 L 189.8125,150 L 189.90625,150.0625 L 191.15625,151.0625 L 192.75,152.28125 L 192.875,152.375 L 192.9375,152.53125 L 193.34375,153.71875 L 193.46875,154.15625 L 193.0625,154.34375 L 190.15625,155.5625 L 188.90625,157.125 L 188.84375,157.21875 L 188.75,157.28125 L 186.46875,158.34375 L 186.375,158.40625 L 186.25,158.40625 C 186.25,158.40625 181.11516,158.4375 180.59375,158.4375 C 180.34219,158.4375 180.1494,158.3622 179.9375,158.28125 C 179.7256,158.2003 179.50929,158.09986 179.3125,158 C 178.91892,157.80027 178.59375,157.625 178.59375,157.625 C 178.59375,157.625 178.12969,157.33073 177.625,157.03125 C 177.12031,156.73177 176.51138,156.39048 176.40625,156.34375 C 176.40945,156.34517 176.06913,156.23315 175.6875,156.125 C 175.30587,156.01685 174.81636,155.90635 174.34375,155.78125 C 173.87114,155.65615 173.425,155.52986 173.0625,155.4375 C 172.75289,155.35862 172.5632,155.32799 172.5,155.3125 C 172.49667,155.31168 172.47092,155.31304 172.46875,155.3125 C 172.38186,155.34245 172.24796,155.37339 172.09375,155.4375 C 171.78533,155.56573 171.3712,155.75432 170.96875,155.9375 C 170.5663,156.12068 170.15852,156.29309 169.84375,156.4375 C 169.68637,156.50971 169.57364,156.5786 169.46875,156.625 C 169.4163,156.6482 169.35142,156.67146 169.3125,156.6875 C 169.27358,156.70354 169.27476,156.72819 169.1875,156.75 C 169.10977,156.76943 169.10662,156.74425 169.0625,156.75 C 169.01838,156.75575 168.93959,156.77414 168.875,156.78125 C 168.74581,156.79547 168.57593,156.7935 168.375,156.8125 C 167.97315,156.8505 167.463,156.89816 166.9375,156.9375 C 166.412,156.97684 165.89504,157.01549 165.46875,157.03125 C 165.25561,157.03913 165.06089,157.03458 164.90625,157.03125 C 164.82893,157.02959 164.75482,157.03817 164.6875,157.03125 C 164.62018,157.02433 164.56268,157.0224 164.4375,156.96875 C 164.46635,156.98111 164.13862,156.86846 163.75,156.75 C 163.36138,156.63154 162.85691,156.48581 162.375,156.34375 C 161.41119,156.05962 160.5,155.78125 160.5,155.78125 L 154.6875,154.28125 L 147.46875,153.625 L 147.40625,153.625 L 147.34375,153.59375 L 144.03125,152.46875 L 141.0625,154.1875 L 140.96875,154.3125 L 137.9375,158.84375 L 137.90625,158.875 L 137.875,158.9375 L 136.15625,160.625 L 136.71875,163.25 L 136.75,163.3125 L 136.75,163.34375 L 137,167.75 L 138.125,171.40625 L 138.125,171.4375 L 140.21875,174.84375 L 140.25,174.90625 L 140.25,174.9375 L 141.375,178.375 L 141.40625,178.4375 L 141.40625,178.53125 L 141.28125,182.46875 L 142.96875,185.6875 L 143,185.75 L 144.90625,188.46875 L 151.71875,191.4375 L 151.875,191.5 L 151.96875,191.65625 L 153.96875,195.1875 L 155.4375,196.84375 L 161.78125,197.09375 L 164.46875,196 L 164.9375,195.8125 L 165.125,196.25 L 166.375,199.28125 L 166.40625,199.3125 L 166.40625,199.375 L 167.125,202.5625 L 169.0625,205.4375 L 171.25,207 L 173.53125,205.96875 L 173.65625,205.90625 L 173.78125,205.9375 L 177.84375,206.3125 L 177.96875,206.3125 L 178.0625,206.40625 L 181.0625,208.5 L 181.09375,208.53125 L 185.875,209.84375 L 189,209.84375 L 191,208.40625 L 191,208.4375 L 192.625,206.90625 L 194.625,201.5625 L 194.6875,201.4375 L 194.8125,201.34375 L 197.46875,199.5625 L 200.8125,197.59375 L 202.03125,196.15625 L 202.15625,190.375 L 202.1875,189.875 L 202.6875,189.875 L 205.59375,190 L 205.75,190.03125 L 205.90625,190.125 L 208.46875,192.34375 L 208.53125,192.40625 L 209.59375,193.03125 L 219.5625,193.03125 L 220.25,191.71875 L 220.28125,191.65625 L 220.96875,189.90625 L 220.96875,186 L 220.96875,185.96875 L 220.53125,184.4375 L 220.5,184.34375 L 219.28125,182.03125 L 219.21875,181.96875 L 219.21875,181.875 L 218.75,178.46875 L 218.15625,177.53125 L 218.03125,177.3125 L 218.09375,177.09375 L 218.84375,174.71875 L 218.90625,174.59375 L 219,174.5 L 223.375,170.34375 L 223.40625,170.3125 L 224.75,167.6875 L 224.75,161.34375 L 224.75,161.25 L 224.78125,161.1875 L 226.3125,156.75 L 226.34375,156.6875 L 226.375,156.625 L 229.40625,152.71875 L 229.5,152.59375 L 229.625,152.53125 L 232.96875,151.3125 L 232.96875,151.28125 L 233.09375,151.25 L 233.0625,150 L 232.8125,148.90625 L 230.4375,148.1875 L 230.375,148.1875 L 230.34375,148.15625 L 225.40625,145.625 L 222.71875,144.09375 zM 96.4375,144.5625 L 92.875,145.1875 L 92.8125,145.1875 L 92.75,145.1875 L 89.21875,144.8125 L 85.59375,146.65625 L 85.5625,146.65625 L 81.53125,148.40625 L 81.40625,148.46875 L 81.25,148.46875 L 78.09375,148.09375 L 78.03125,148.0625 L 77.96875,148.03125 L 74.375,146.4375 L 74.28125,146.40625 L 69.375,145.21875 L 66.40625,148.4375 L 66.375,148.4375 L 66.34375,148.46875 L 62.0625,152 L 61.90625,152.125 L 61.71875,152.125 L 59.75,152.03125 L 58.40625,154.625 L 58.34375,154.71875 L 58.28125,154.78125 L 54.59375,157.6875 L 54.46875,157.8125 L 54.28125,157.8125 L 50.9375,157.8125 L 50.375,162.15625 L 50.34375,162.4375 L 50.09375,162.5625 L 48,163.59375 L 46.40625,166.75 L 46.375,166.8125 L 46.3125,166.875 L 43.8125,169.53125 L 43.6875,169.65625 L 43.53125,169.65625 L 40.5,170.1875 L 40.34375,170.1875 L 40.21875,170.15625 L 38.0625,169.25 L 37.4375,169.6875 L 35.09375,176.96875 L 33.875,184.5625 L 34.8125,186.78125 L 34.875,186.9375 L 34.8125,187.125 L 32.6875,194.3125 L 32.65625,194.375 L 32.625,194.4375 L 27.84375,201.78125 L 28.625,203.40625 L 35.71875,203.15625 L 39.0625,203.03125 L 39.125,203.03125 L 45.5,201.78125 L 45.5,201.75 L 45.53125,201.75 L 50.6875,201.125 L 50.71875,201.125 L 55.96875,200.53125 L 56.1875,198.15625 L 56.21875,198.0625 L 56.28125,197.9375 L 57.40625,196.1875 L 59.03125,193.4375 L 59.90625,191.78125 L 60.03125,191.5625 L 60.28125,191.53125 L 65.21875,190.90625 L 65.25,190.90625 L 65.28125,190.90625 L 68.6875,190.90625 L 70.28125,190.25 L 70.34375,190.1875 L 70.375,190.1875 L 72.8125,188.34375 L 72.90625,188.25 L 73.0625,188.25 L 75.3125,188 L 75.40625,188 L 75.5,188 L 77.25,188.375 L 77.3125,188.40625 L 77.375,188.4375 L 79.375,189.4375 L 79.40625,189.4375 L 82.90625,190.9375 L 82.96875,190.96875 L 83,191 L 85.40625,192.75 L 85.40625,192.78125 L 87.78125,194.53125 L 90.59375,194.3125 L 90.625,194.3125 L 93.84375,193.21875 L 93.90625,193.1875 L 97.9375,191.125 L 98,191.09375 L 100.875,188.8125 L 102.0625,185.65625 L 102.90625,182.59375 L 102.1875,180.59375 L 102.15625,180.53125 L 102.15625,180.4375 L 102.03125,178.6875 L 102.03125,178.65625 L 101.90625,174.84375 L 100.8125,170.28125 L 98.71875,167.71875 L 98.65625,167.625 L 98.625,167.53125 L 97.875,164.25 L 97.8125,163.96875 L 98,163.78125 L 100.78125,161 L 100.8125,160.96875 L 100.875,160.9375 L 104.8125,158.34375 L 106.25,155.40625 L 101.59375,153.59375 L 101.5625,153.59375 L 101.53125,153.5625 L 97.59375,151.3125 L 97.46875,151.21875 L 97.40625,151.0625 L 96.65625,149.28125 L 96.59375,149.1875 L 96.59375,149.0625 L 96.71875,147.15625 L 96.75,147.0625 L 96.78125,146.96875 L 97.59375,145.5625 L 96.4375,144.5625 zM 360.75,146.9375 L 360.28125,147.90625 L 360.21875,148.03125 L 360.09375,148.09375 L 358.15625,149.28125 C 358.12881,149.33201 358.09189,149.37567 358.0625,149.46875 C 358.04598,149.52105 358.03325,149.54047 358.03125,149.5625 C 358.17414,149.67762 358.32008,149.82385 358.53125,150.03125 C 358.76964,150.26538 359.0746,150.53775 359.34375,150.8125 C 359.88204,151.36201 360.375,151.875 360.375,151.875 L 360.46875,152 L 360.5,152.125 L 360.9375,154.28125 L 361,154.65625 L 360.65625,154.8125 L 358.21875,156.03125 L 358.15625,156.0625 L 354.21875,158.8125 L 354.1875,158.8125 L 351.5,160.4375 L 351.46875,160.4375 L 345.15625,163.46875 C 345.15625,163.46875 345.126,163.49943 345.125,163.5 C 345.09088,163.51949 344.49877,163.82724 343.84375,164.1875 C 343.50669,164.37289 343.1669,164.56851 342.875,164.71875 C 342.72905,164.79387 342.61269,164.85393 342.5,164.90625 C 342.38731,164.95857 342.31774,164.99869 342.1875,165.03125 C 342.24564,165.01671 341.94298,165.14608 341.65625,165.28125 C 341.36952,165.41642 341.00031,165.57797 340.65625,165.75 C 339.96813,166.09406 339.34375,166.4375 339.34375,166.4375 L 336.1875,168.78125 L 336.1875,168.8125 L 336.15625,168.8125 L 334.28125,170.0625 L 334.15625,170.15625 L 334.03125,170.15625 C 334.03125,170.15625 327.05357,170.15625 326.25,170.15625 C 326.05191,170.15625 325.18092,170.35271 324.46875,170.59375 C 323.79109,170.82311 323.24312,171.04074 323.1875,171.0625 L 323.125,171.09375 L 321.3125,172.0625 L 321.1875,172.09375 L 321.0625,172.09375 L 315.34375,172.03125 L 315.25,172.03125 L 315.15625,171.96875 L 311.59375,170.375 L 311.46875,170.3125 L 311.40625,170.25 L 310.0625,168.71875 L 308.96875,167.9375 L 305.34375,168.34375 L 305.3125,168.34375 L 302.3125,168.875 L 302.15625,168.90625 L 302,168.84375 L 299.96875,167.6875 L 299.9375,167.65625 L 297.09375,166.34375 L 295.0625,165.34375 L 293.71875,165.46875 L 292.8125,167.34375 L 292.78125,167.40625 L 292.78125,167.4375 L 291.71875,171.46875 L 291.71875,171.5625 L 291.65625,171.625 L 290.15625,173.84375 L 290.125,173.875 L 290.09375,173.90625 L 288.5625,175.53125 L 288.46875,175.65625 L 288.28125,175.6875 L 284.75,176.09375 L 284.625,176.125 L 282.28125,177.15625 L 282.25,177.15625 L 279.59375,178.46875 L 277.96875,179.3125 L 279.21875,182.875 L 279.21875,182.90625 L 279.25,182.90625 L 279.75,184.9375 C 279.81288,185.00799 279.96314,185.17002 280.25,185.40625 C 280.59233,185.68817 281.0369,185.9375 281.25,185.9375 C 281.96309,185.9375 282.49115,186.39057 282.90625,186.78125 C 283.19149,187.04971 283.29279,187.17168 283.40625,187.3125 C 283.57541,187.30946 284.67247,187.30642 285.90625,186.84375 C 287.29207,186.32406 287.60906,185.9571 288.4375,185.75 C 288.7566,185.67023 289.327,185.50358 289.875,185.34375 C 290.423,185.18392 290.95536,185.03125 291.4375,185.03125 C 291.7619,185.03125 292.14329,185.13095 292.6875,185.25 C 293.23171,185.36905 293.87228,185.53057 294.5,185.6875 C 295.70564,185.98891 296.72546,186.25785 296.8125,186.28125 L 302.40625,185.0625 L 302.53125,185.03125 L 302.65625,185.0625 L 308.90625,187.03125 L 314.3125,188.96875 L 314.34375,188.96875 L 320.90625,189.15625 L 321.15625,189.15625 L 321.3125,189.375 L 323.625,192.75 L 323.65625,192.78125 L 323.6875,192.84375 L 325.75,197.84375 C 325.87527,197.90657 326.56802,198.25294 327.5,198.75 C 328.51125,199.28933 329.58334,199.87917 330.125,200.3125 C 330.98612,201.00139 332.78125,202.28125 332.78125,202.28125 L 333.34375,202.65625 L 332.8125,203.0625 L 328.5,206.53125 L 331.875,212.4375 L 331.875,212.46875 L 334.03125,216.9375 L 334.03125,216.96875 L 336.34375,222.84375 L 336.375,222.875 L 336.375,222.90625 L 337.8125,227.90625 L 337.84375,228.03125 L 337.8125,228.1875 L 336.21875,233.40625 L 337.0625,236.53125 L 339.46875,238.9375 L 339.625,239.09375 L 339.59375,239.34375 L 339.25,242.03125 L 339.21875,242.28125 L 339,242.40625 L 334.6875,244.71875 L 334.6875,244.75 L 334.65625,244.75 L 330.125,246.6875 L 327,250.59375 L 330.59375,252.84375 L 330.71875,252.90625 L 330.78125,253.03125 L 332.53125,256.5625 L 334.15625,259.625 L 338.59375,260.09375 L 343.25,258.125 L 343.34375,258.0625 L 343.4375,258.0625 L 347.75,258.0625 L 347.875,258.0625 L 347.96875,258.125 L 353.4375,260.875 L 353.53125,260.90625 L 358.125,262.34375 L 365.40625,259.90625 L 370.375,255.1875 L 370.46875,255.09375 L 370.59375,255.0625 L 373.9375,254.125 L 377.84375,249.78125 L 378.84375,246.8125 L 378.96875,246.375 L 379.40625,246.46875 L 383.375,247.15625 L 385.46875,243.90625 L 385.6875,243.53125 L 386.09375,243.71875 L 391.40625,246.25 L 391.4375,246.28125 L 391.5,246.3125 L 400.875,254 L 402.4375,252.59375 L 402.4375,252.5625 L 403.5,250.8125 L 403.6875,250.46875 L 404.0625,250.59375 L 406.40625,251.3125 L 406.6875,251.40625 L 406.75,251.71875 L 406.90625,252.75 L 408.84375,254.0625 L 408.9375,254.09375 L 409,254.1875 L 411.5,257.9375 L 411.53125,258 L 411.53125,258.03125 L 412.625,260.90625 L 412.65625,261.03125 L 412.625,261.1875 L 411.75,264.9375 L 411.71875,265.0625 L 411.59375,265.1875 L 410.6875,266.09375 L 411.03125,271.375 L 413,273.90625 L 414.8125,274.78125 L 415.40625,271.34375 L 415.53125,270.65625 L 416.125,271 L 418.4375,272.25 L 418.53125,272.28125 L 418.59375,272.375 L 421.09375,275.59375 L 421.15625,275.65625 L 421.1875,275.71875 L 422.0625,278.03125 L 422.125,278.1875 L 422.09375,278.3125 L 421.59375,280.625 L 423.25,282.9375 L 423.3125,283 L 424.0625,282.53125 L 425.8125,278.90625 L 427.75,274.8125 L 427.75,274.78125 L 428.21875,272.15625 L 427.28125,269.4375 L 424.65625,266.78125 L 424.34375,266.46875 L 424.59375,266.125 L 426.9375,263.09375 L 427,263 L 427.09375,262.9375 L 431.65625,260.46875 L 432.28125,259.53125 L 428.03125,257.78125 L 427.96875,257.75 L 427.9375,257.75 L 425.78125,256.3125 L 425.75,256.28125 L 425.6875,256.21875 L 422.59375,252.75 L 422.5625,252.75 L 418.6875,250.4375 L 418.59375,250.375 L 418.5625,250.3125 L 415.34375,246.5625 L 415.3125,246.53125 L 415.28125,246.5 L 413.375,243.21875 L 411.3125,241.65625 L 411.09375,241.5 L 411.09375,241.25 L 411.09375,237.53125 L 409.125,235.71875 L 409.03125,235.65625 L 409,235.53125 L 408.09375,233.03125 L 408.0625,232.90625 L 408.09375,232.75 L 408.9375,228.78125 L 408.28125,226 L 404.71875,223.625 L 404.625,223.5625 L 404.5625,223.46875 L 403.5625,221.78125 L 403.5,221.6875 L 401.625,219.8125 L 401.46875,219.65625 L 401.46875,219.46875 L 401.46875,217.15625 L 401.46875,216.96875 L 401.5625,216.84375 L 404.53125,212.65625 L 405.03125,210.5 L 405.40625,204.25 L 405.40625,204.15625 L 405.4375,204.0625 L 406.875,201.375 L 407.71875,196.53125 L 407.78125,196.125 L 408.1875,196.09375 L 414.28125,195.75 L 418.4375,192.625 L 418.46875,192.625 L 418.5,192.625 L 420.40625,191.4375 L 419.1875,188.96875 L 419.15625,188.90625 L 419.15625,188.8125 L 418.625,185.25 L 418.59375,185.21875 L 418.59375,185.1875 L 418.59375,181.59375 L 418.59375,181.46875 L 418.6875,181.34375 L 421.34375,177.0625 L 424.0625,172.4375 L 419.65625,171 L 419.625,171 L 419.59375,170.96875 L 415.96875,169.0625 L 411.34375,168 L 411.3125,168 L 406.96875,168.1875 L 405.09375,170.09375 L 404.40625,172.125 L 404.3125,172.40625 L 404.03125,172.46875 L 402.0625,172.8125 L 401.8125,172.84375 L 401.625,172.6875 L 398.40625,169.65625 L 398.40625,169.625 L 395.71875,166.96875 L 395.65625,166.90625 L 395.625,166.84375 L 394.5625,164.875 L 394.5,164.78125 L 394.5,164.6875 L 394.34375,162.0625 L 389.5625,159.1875 L 389.53125,159.15625 L 389.5,159.125 L 387.875,157.6875 L 387.75,157.5625 L 387.71875,157.375 L 387.375,154.71875 L 387.34375,154.5 L 387.4375,154.34375 L 389.09375,152 L 386.1875,151.65625 L 386.125,151.65625 L 386.09375,151.625 L 383.59375,150.75 L 383.5625,150.71875 L 383.53125,150.71875 L 380.6875,149.375 L 380.65625,149.375 L 380.625,149.34375 L 378.96875,148.21875 L 378.90625,148.1875 L 376.6875,147.03125 L 360.75,146.9375 zM 22.71875,151.75 L 22.875,151.78125 L 26.40625,152.78125 L 26.84375,152.90625 L 26.75,153.375 L 26.25,155.875 L 26.21875,156 L 26.15625,156.09375 L 23.625,159.375 L 23.5,159.5625 L 23.25,159.5625 L 15.9375,159.8125 L 15.75,159.84375 L 15.625,159.75 L 11.59375,156.96875 L 11.03125,156.5625 L 11.5625,156.15625 L 13.84375,154.375 L 13.90625,154.34375 L 14,154.3125 L 17.28125,153.28125 L 22.59375,151.78125 L 22.71875,151.75 zM 233.25,152.28125 L 230.15625,153.40625 L 227.21875,157.1875 L 227.1875,157.21875 L 225.75,161.5 L 225.75,167.78125 L 225.75,167.90625 L 225.71875,168.03125 L 224.1875,170.90625 L 224.15625,171 L 224.09375,171.0625 L 219.78125,175.15625 L 219.125,177.1875 L 219.625,178 L 219.6875,178.09375 L 219.6875,178.1875 L 220.21875,181.65625 L 220.21875,181.71875 L 221.40625,183.96875 L 221.4375,184 L 221.4375,184.0625 L 221.96875,185.84375 L 221.96875,185.90625 L 221.96875,185.96875 L 221.96875,190 L 221.96875,190.09375 L 221.9375,190.1875 L 221.1875,192.09375 L 221.1875,192.125 L 221.15625,192.125 L 220.28125,193.78125 L 220.125,194.03125 L 219.96875,194.03125 L 219.84375,202.6875 L 220.59375,204.8125 L 222.0625,205.03125 L 222.125,205.0625 L 222.21875,205.09375 L 224.75,206.4375 L 227.65625,207.0625 L 227.6875,207.09375 L 227.75,207.09375 L 230.0625,208.21875 L 230.15625,208.25 L 232.71875,208.84375 L 234.0625,208.84375 L 234.21875,207.4375 L 232.4375,206.34375 L 232.21875,206.1875 L 232.21875,205.9375 L 232.09375,202.65625 L 232.09375,202.46875 L 232.1875,202.34375 L 233.3125,200.8125 L 233.34375,200.8125 L 235.5,198.28125 L 235.5625,198.1875 L 235.6875,198.125 L 237.8125,197.25 L 237.90625,197.21875 L 238,197.21875 L 244.9375,197.09375 L 246.5625,196.28125 L 246.625,196.25 L 247.84375,195 L 249.5,192.875 L 249.5,192.84375 L 249.53125,192.8125 L 250.65625,191.6875 L 250.78125,191.5625 L 250.9375,191.53125 L 253.34375,191.0625 L 255.5,189.71875 L 255.9375,187.53125 L 255.9375,187.5 L 256.78125,184.34375 L 256.84375,184.125 L 257.03125,184.03125 L 258.3125,183.28125 L 258.34375,183.25 L 259.4375,181.90625 L 259.46875,181.875 L 260.6875,179.90625 L 260.8125,179.71875 L 260.96875,179.6875 L 263.0625,179.09375 L 263.0625,179.0625 L 264.96875,178.1875 L 265,178.15625 L 265.0625,178.15625 L 266.9375,177.75 L 266.90625,177.4375 L 267.125,177.40625 L 266.375,176.125 L 266.375,176.09375 L 266.34375,176.09375 L 265.71875,174.84375 L 265.71875,174.8125 L 265.09375,173.4375 L 265.0625,173.34375 L 265.03125,173.25 L 264.90625,170.375 L 263.90625,169.25 L 263.875,169.25 L 261.78125,168.09375 L 261.75,168.09375 L 259.59375,166.8125 L 256.84375,165.1875 L 256.59375,165.03125 L 256.59375,164.75 L 256.59375,163.46875 L 254.96875,162.21875 L 248.75,161.71875 L 246.625,163.03125 L 246.375,163.1875 L 246.125,163.0625 L 244.875,162.4375 L 244.8125,162.40625 L 244.78125,162.375 L 242,160.09375 L 241.96875,160.0625 L 241.9375,160.03125 L 240.4375,158.1875 L 237.75,158.1875 L 237.625,158.1875 L 237.53125,158.125 L 235.375,157 L 235.25,156.9375 L 235.1875,156.8125 L 233.9375,154.78125 L 233.90625,154.71875 L 233.875,154.65625 L 233.25,152.28125 zM 22.71875,152.78125 L 17.5625,154.25 L 14.4375,155.1875 L 14.40625,155.21875 L 12.71875,156.53125 L 16.03125,158.8125 L 23,158.5625 L 25.3125,155.59375 L 25.6875,153.625 L 22.71875,152.78125 zM 756.40625,153.65625 L 756.09375,157.46875 L 756.0625,157.9375 L 755.59375,157.9375 C 755.59375,157.9375 754.626,157.94555 753.96875,157.78125 C 753.52781,157.67102 751.57407,157.23881 751.34375,157.1875 L 749,158.28125 L 748.96875,158.28125 L 746.9375,159.96875 C 746.9375,159.96875 746.90659,159.99946 746.90625,160 C 746.8843,160.03433 746.18854,161.12348 745.375,162.3125 C 744.96187,162.9163 744.51279,163.55352 744.125,164.0625 C 743.73721,164.57148 743.47975,164.91975 743.125,165.15625 C 743.11161,165.16518 742.99494,165.30719 742.9375,165.5625 C 742.88006,165.81781 742.875,166.17327 742.875,166.53125 C 742.875,166.88923 742.88295,167.25178 742.90625,167.5625 C 742.92955,167.87322 742.96876,168.09246 742.96875,168.28125 C 742.96875,168.45045 743.03074,169.46155 743.09375,170.34375 C 743.15676,171.22595 743.21875,172.03125 743.21875,172.03125 C 743.31329,172.23055 744.16326,173.98979 744.4375,174.8125 C 744.64019,175.42058 744.4538,176.01687 744.28125,176.5 C 744.1087,176.98313 743.90625,177.375 743.90625,177.375 L 743.875,177.4375 L 743.8125,177.5 C 743.8125,177.5 739.13817,181.67581 738,182.6875 C 737.50653,183.12614 736.73291,184.09578 736.125,184.9375 C 735.55334,185.72903 735.17636,186.32782 735.125,186.40625 C 735.13344,186.6993 735.24857,190.55739 735.25,191.375 C 735.26735,191.38864 735.3194,191.41664 735.40625,191.46875 C 735.57995,191.57297 735.86255,191.69314 736.15625,191.78125 C 736.74366,191.95747 737.34375,192.03125 737.34375,192.03125 L 737.4375,192.0625 L 737.53125,192.09375 L 741.96875,194.5625 C 742.15177,194.33541 742.4733,193.91042 743.0625,193.21875 C 743.42853,192.78906 743.80411,192.34518 744.15625,191.96875 C 744.50839,191.59232 744.811,191.28224 745.09375,191.09375 C 745.91537,190.54599 748.46804,189.10975 749.0625,188.8125 C 749.37511,188.6562 749.64583,188.64481 750.0625,188.59375 C 750.47917,188.54269 750.96069,188.50844 751.46875,188.46875 C 752.48487,188.38937 753.58948,188.29759 753.875,188.25 C 754.13384,188.20686 755.21357,187.89227 756.15625,187.59375 C 757.09893,187.29523 757.96875,187 757.96875,187 L 758.03125,186.96875 L 758.125,186.96875 C 758.125,186.96875 759.74587,187.01508 761.46875,187.0625 C 762.33019,187.08621 763.20561,187.1265 763.9375,187.15625 C 764.66939,187.186 765.20643,187.20806 765.5,187.25 C 766.01454,187.32351 767.28256,187.60613 768.46875,187.875 C 769.65494,188.14387 770.75,188.375 770.75,188.375 L 770.71875,188.46875 L 770.90625,188.53125 C 770.90625,188.53125 771.4423,188.69204 772.125,188.84375 C 772.8077,188.99546 773.66656,189.11924 774.0625,189.03125 C 775.27933,188.76084 777.07904,188.59743 778.3125,187.8125 C 779.63199,186.97284 780.20745,186.16755 781.125,185.25 C 782.02573,184.34928 784.28125,182.1875 784.28125,182.1875 L 784.34375,182.15625 L 784.375,182.125 C 784.375,182.125 785.03348,181.73288 785.75,181.25 C 786.10826,181.00856 786.47387,180.73338 786.78125,180.5 C 787.08863,180.26662 787.34727,180.04247 787.40625,179.96875 C 787.59784,179.72926 788.00088,179.07649 788.34375,178.4375 C 788.68662,177.79851 788.99874,177.15878 789.125,176.90625 C 789.12851,176.89924 789.23219,176.59419 789.3125,176.25 C 789.39281,175.90581 789.45305,175.50039 789.53125,175.09375 C 789.6077,174.69621 789.60561,174.60029 789.65625,174.3125 L 787.875,174.90625 C 787.80791,175.04063 787.74888,175.19671 787.53125,175.46875 C 787.38086,175.65674 787.18783,175.82571 786.9375,175.96875 C 786.68717,176.11179 786.33961,176.20696 786,176.09375 C 785.40772,175.89634 784.86413,175.39403 784.375,174.9375 C 783.95574,174.54619 783.7153,174.28411 783.625,174.1875 L 779.90625,173.84375 L 779.75,173.8125 L 779.625,173.71875 C 779.625,173.71875 778.9988,173.17292 778.34375,172.46875 C 778.01623,172.11666 777.66774,171.71127 777.40625,171.3125 C 777.14476,170.91373 776.9375,170.53179 776.9375,170.0625 C 776.93749,168.852 777.1875,166.84375 777.1875,166.84375 L 777.25,166.46875 L 777.625,166.40625 C 777.625,166.40625 778.37988,166.30814 779.09375,166.15625 C 779.45068,166.08031 779.78583,165.99192 780,165.90625 C 780.0357,165.89197 780.03596,165.88824 780.0625,165.875 C 779.90933,165.22022 779.65067,164.05749 779.625,163.9375 L 777.90625,161.5 L 777.75,161.28125 L 777.875,161 L 779.625,157.34375 L 780.6875,155 L 778.03125,156 L 777.8125,156.09375 L 777.625,155.96875 L 774.875,154.53125 L 773.25,155.28125 L 773.1875,155.3125 L 773.125,155.3125 L 765.4375,156.5625 L 765.34375,156.59375 L 765.21875,156.5625 L 759.6875,155.125 L 759.65625,155.125 L 759.625,155.09375 L 756.40625,153.65625 zM 655.65625,159.75 L 651.8125,160.625 L 651.71875,160.65625 L 648.28125,162.3125 L 646.90625,167.8125 L 646.84375,168.03125 L 646.625,168.125 L 641.8125,170.28125 L 641.65625,170.34375 L 641.5,170.3125 L 638.28125,169.59375 L 638.1875,169.5625 L 638.125,169.53125 L 636.75,168.65625 L 636.21875,171.34375 L 636.125,171.6875 L 635.8125,171.75 L 633.125,172.28125 L 632.90625,172.3125 L 632.71875,172.1875 L 629.5625,169.71875 L 626.125,174.75 L 626.09375,174.78125 L 626.0625,174.8125 L 621.875,178.875 L 620.125,184.25 L 619.96875,184.71875 L 619.53125,184.59375 L 614.09375,183.1875 L 606.9375,182.8125 L 606.78125,182.8125 L 606.65625,182.71875 L 602.71875,179.6875 L 601.15625,179.125 L 597.625,181.8125 L 597.5,181.90625 L 597.375,181.9375 L 591.28125,182.46875 L 591.1875,182.46875 L 591.09375,182.4375 L 587.46875,181.21875 L 584.0625,181.53125 L 579.96875,187.9375 L 579.96875,188 L 578.53125,195.8125 L 578.5,196 L 578.3125,196.125 L 575.09375,198.28125 L 575,198.34375 L 574.875,198.34375 C 574.875,198.34375 573.86091,198.49063 572.71875,198.625 C 571.57659,198.75937 570.35895,198.90625 569.8125,198.90625 C 569.23274,198.90625 568.45456,198.71307 567.75,198.53125 C 567.12921,198.37105 566.74268,198.22329 566.625,198.1875 C 566.619,198.18568 566.5663,198.18866 566.5625,198.1875 L 555.78125,198.34375 L 555.71875,198.34375 L 551.65625,198.875 L 551.65625,198.90625 L 551.625,198.90625 L 546.03125,199.03125 L 546.1875,199.4375 L 546.28125,199.65625 L 546.15625,199.875 L 544.59375,203 L 548.4375,204.90625 L 548.71875,205.0625 L 548.71875,205.34375 L 548.71875,210.53125 L 552.5,214.28125 L 552.59375,214.40625 L 552.625,214.5625 L 553.71875,220.625 L 553.71875,220.75 L 553.6875,220.875 L 551.53125,227.3125 L 551.53125,227.34375 L 551.5,227.375 L 547.59375,234.53125 L 547.53125,234.59375 L 547.46875,234.65625 L 542.90625,238.875 L 542.90625,238.90625 L 542.84375,238.9375 L 539.15625,243.625 C 539.18471,243.65582 539.18835,243.65595 539.21875,243.6875 C 539.43264,243.90946 539.70932,244.15786 539.96875,244.40625 C 540.48761,244.90304 540.96875,245.34375 540.96875,245.34375 L 541.03125,245.40625 L 541.0625,245.46875 C 541.0625,245.46875 541.25144,245.81175 541.4375,246.21875 C 541.53053,246.42225 541.6127,246.66463 541.6875,246.875 C 541.7623,247.08537 541.84375,247.25506 541.84375,247.5 C 541.84375,247.75654 541.82199,248.49935 541.84375,249.25 C 541.85463,249.62532 541.86862,250.00404 541.90625,250.28125 C 541.92507,250.41986 541.94814,250.52341 541.96875,250.59375 C 541.97287,250.60782 541.96354,250.6146 541.96875,250.625 C 542.0065,250.66275 542.25598,250.87647 542.5625,251.125 C 542.86902,251.37353 543.25774,251.67939 543.625,251.96875 C 544.35953,252.54747 545.03125,253.09375 545.03125,253.09375 L 545.0625,253.09375 L 545.0625,253.125 C 545.0625,253.125 545.63393,253.65944 546.25,254.1875 C 546.55803,254.45153 546.90439,254.68611 547.15625,254.875 C 547.28218,254.96945 547.36506,255.05029 547.4375,255.09375 C 547.47372,255.11548 547.52245,255.12262 547.53125,255.125 C 547.83761,255.13695 548.26556,255.20022 548.8125,255.28125 C 549.42359,255.37178 550.06881,255.49377 550.46875,255.59375 C 550.83544,255.68541 551.69114,255.89561 552.59375,256.09375 C 553.49636,256.29189 554.47024,256.46875 555,256.46875 C 556.20238,256.46875 557.97551,256.28125 559.1875,256.28125 C 559.70376,256.28125 561.00196,256.17369 562.125,256.0625 C 563.16341,255.95969 563.93043,255.88992 564.0625,255.875 C 564.15394,255.79319 564.45561,255.49553 564.90625,255.125 C 565.16268,254.91416 565.44056,254.70635 565.6875,254.53125 C 565.93444,254.35615 566.07463,254.22257 566.40625,254.15625 C 566.75987,254.08553 566.97764,254.19354 567.25,254.28125 C 567.52236,254.36896 567.81201,254.47301 568.09375,254.59375 C 568.65723,254.83524 569.15625,255.09375 569.15625,255.09375 L 569.1875,255.09375 C 569.1875,255.09375 569.60531,255.35427 570.0625,255.59375 C 570.2911,255.71349 570.52748,255.82209 570.71875,255.90625 C 570.83829,255.95885 570.9279,256.01189 570.96875,256.03125 C 571.00372,256.03125 571.00194,256.03639 571,256.03125 C 571.18086,256.03394 571.33986,256.06082 571.5625,256.09375 C 571.79737,256.12849 572.06439,256.16115 572.34375,256.1875 C 572.90248,256.24021 573.50658,256.16494 573.5625,256.125 C 573.99046,255.81932 574.48201,255.69582 574.9375,255.5625 C 575.39299,255.42918 575.80398,255.26752 575.9375,255.15625 C 576.55393,254.64258 578.07719,253.67433 578.15625,253.625 C 578.15625,253.625 578.21534,253.59669 578.21875,253.59375 C 578.263,253.55555 578.53102,253.32071 578.90625,253.03125 C 579.10831,252.87537 579.32336,252.72772 579.53125,252.59375 C 579.73914,252.45978 579.88749,252.335 580.15625,252.28125 C 580.74096,252.16431 582.1131,252.09375 583.5625,252.09375 C 584.2143,252.09375 584.55096,251.97279 584.84375,251.90625 C 584.91695,251.88961 584.98768,251.87727 585.09375,251.875 C 585.19982,251.87273 585.35747,251.88681 585.5,252 C 585.64253,252.11319 585.72568,252.26641 585.75,252.375 C 585.77432,252.48359 585.78125,252.59152 585.78125,252.6875 C 585.78124,252.88092 585.8627,253.60826 586.0625,254.28125 C 586.2623,254.95424 586.60299,255.6183 586.8125,255.78125 C 587.28713,256.15042 587.89715,256.76677 588.40625,257.34375 C 588.85941,257.85733 589.14242,258.21968 589.21875,258.3125 C 589.29786,258.34857 589.95694,258.66608 590.75,259 C 591.16977,259.17675 591.61416,259.37106 591.96875,259.5 C 592.14604,259.56447 592.28767,259.59112 592.40625,259.625 C 592.52483,259.65888 592.63789,259.6875 592.59375,259.6875 C 592.85267,259.68751 593.06021,259.73275 593.34375,259.8125 C 593.62729,259.89225 593.9542,259.99136 594.25,260.09375 C 594.84159,260.29853 595.375,260.53125 595.375,260.53125 L 595.53125,260.59375 L 595.625,260.75 L 596.875,263.0625 L 596.96875,263.21875 L 596.90625,263.40625 L 596.375,266 L 596.375,266.09375 L 596.3125,266.15625 L 594.34375,269.28125 L 594.3125,269.34375 L 594.28125,269.375 C 594.28125,269.375 593.22323,270.43366 592.5625,271 C 592.06257,271.42852 591.39874,272.515 591.25,272.8125 C 591.265,272.78251 591.18959,273.02291 591.125,273.28125 C 591.06041,273.53959 590.97253,273.84693 590.90625,274.15625 C 590.77369,274.77489 590.65625,275.375 590.65625,275.375 L 590.65625,275.4375 L 590.625,275.5 L 589.46875,277.8125 L 589.40625,277.9375 L 589.3125,278 C 589.3125,278 588.1699,278.80796 587.21875,279.125 C 586.44678,279.38232 585.34596,279.86311 584.90625,280.15625 C 584.82506,280.21037 584.47731,280.64946 584.25,281.09375 C 584.13635,281.3159 584.035,281.53348 583.96875,281.71875 C 583.9025,281.90402 583.90625,282.08422 583.90625,282.0625 C 583.90624,282.2683 583.78668,282.42635 583.6875,282.53125 C 583.58832,282.63615 583.49563,282.69854 583.40625,282.75 C 583.22749,282.85292 583.07204,282.93497 582.96875,283 C 582.86546,283.06503 582.86701,283.09595 582.875,283.0625 C 582.88299,283.02905 582.84711,283.07739 583,283.28125 C 583.8569,284.42378 583.98372,285.18346 584.34375,285.6875 C 584.64026,286.10263 584.87681,286.72177 585.09375,287.28125 C 585.29697,287.80533 585.41898,288.19475 585.4375,288.25 L 586.09375,289.0625 L 586.15625,289.15625 L 586.1875,289.25 L 586.71875,291.21875 L 586.78125,291.40625 L 586.6875,291.5625 C 586.6875,291.5625 586.58753,291.77209 586.46875,292.03125 C 586.34997,292.29041 586.20836,292.6353 586.1875,292.71875 C 586.18117,292.74407 586.15938,293.11171 586.125,293.46875 L 589.5625,293.15625 L 589.59375,293.15625 C 589.73788,293.09612 591.4189,292.38406 592.5,292.1875 C 593.12224,292.07437 594.66812,292.00463 596.15625,291.9375 C 597.64438,291.87037 599,291.8125 599,291.8125 L 602.9375,291.03125 L 602.96875,291.03125 L 603.03125,291.03125 L 609.625,290.9375 L 609.65625,290.9375 L 613.46875,290.9375 L 615.1875,289.84375 L 615.78125,289.46875 L 615.8125,289.625 L 618.21875,286.46875 C 618.21983,286.46478 618.24862,286.44257 618.25,286.4375 C 618.28245,286.31832 618.31791,286.02186 618.46875,285.5625 C 618.55815,285.29023 618.67234,285.00947 618.78125,284.75 C 618.89016,284.49053 618.98244,284.26529 619.15625,284.0625 C 619.40053,283.7775 619.80577,283.44432 620.15625,283.125 C 620.33149,282.96534 620.48156,282.83442 620.59375,282.71875 C 620.63069,282.68066 620.66424,282.65191 620.6875,282.625 C 620.75085,282.37168 620.85658,282.3088 620.96875,282.15625 C 621.08092,282.0037 621.22371,281.82435 621.375,281.65625 C 621.67758,281.32004 621.96686,281.01001 622.3125,280.8125 C 622.73661,280.57016 625.36578,279.01803 625.65625,278.84375 C 625.86128,278.72072 626.02065,278.72718 626.1875,278.6875 C 626.35435,278.64782 626.51811,278.60959 626.65625,278.5625 C 626.79439,278.51541 626.87736,278.43389 626.90625,278.40625 C 626.93514,278.37861 626.94183,278.42695 626.9375,278.375 C 626.87204,277.58977 626.81692,275.4849 626.8125,275.3125 C 626.78619,275.25438 626.5262,274.69866 626.21875,274.03125 C 626.05742,273.68104 625.88762,273.32112 625.75,273.03125 C 625.61238,272.74138 625.50825,272.4825 625.5,272.46875 C 625.33582,272.19511 624.28125,270.59375 624.28125,270.59375 L 624.21875,270.46875 L 624.21875,270.34375 C 624.21875,270.34375 624.19556,269.75361 624.1875,269.125 C 624.18347,268.8107 624.17146,268.49461 624.1875,268.21875 C 624.19552,268.08082 624.1992,267.96107 624.21875,267.84375 C 624.23665,267.73636 624.23504,267.62943 624.34375,267.46875 C 624.35178,267.44916 624.36248,267.41867 624.375,267.375 C 624.40005,267.28767 624.43607,267.15059 624.46875,267 C 624.5341,266.69881 624.62107,266.32045 624.6875,265.9375 C 624.80913,265.23638 624.85855,264.67206 624.875,264.5625 L 623.5625,261.875 L 623.46875,261.6875 L 623.5625,261.5 C 623.5625,261.5 623.63363,261.25477 623.78125,260.96875 C 623.85506,260.82574 623.94049,260.67505 624.0625,260.53125 C 624.18451,260.38745 624.34147,260.20351 624.625,260.15625 C 624.74567,260.13614 624.86494,260.13784 625.0625,260.125 C 625.26006,260.11216 625.51029,260.10864 625.8125,260.09375 C 626.41693,260.06398 627.20334,260.02378 628,260 C 628.79666,259.97622 629.60044,259.96675 630.28125,259.96875 C 630.96206,259.97075 631.46051,259.96085 631.8125,260.03125 C 632.45364,260.15948 632.98095,260.58508 633.4375,260.9375 C 633.89405,261.28992 634.31459,261.57864 634.5,261.625 C 634.94538,261.73635 635.66026,262.00342 636.3125,262.25 C 636.83138,262.44616 637.11561,262.55922 637.28125,262.625 C 637.38002,262.56615 637.45615,262.52946 637.625,262.40625 C 637.75611,262.31058 637.88662,262.21134 637.96875,262.125 C 638.00324,262.08874 638.04701,262.05553 638.0625,262.03125 C 638.1266,261.58261 638.35229,261.27986 638.5625,260.96875 C 638.7386,260.70812 638.85598,260.56382 638.90625,260.5 L 639.5625,257.09375 L 639.59375,257 L 639.625,256.9375 C 639.625,256.9375 639.74818,256.72719 639.9375,256.5 C 640.12682,256.27282 640.35227,255.9375 640.875,255.9375 C 640.90026,255.9375 641.52747,255.90458 642.34375,255.875 C 643.16003,255.84542 644.20842,255.8207 645.25,255.78125 C 647.27012,255.70473 649.13228,255.62956 649.25,255.625 C 649.33476,255.55567 649.36626,255.50437 649.5625,255.40625 C 649.87466,255.25017 650.31784,255.09375 650.90625,255.09375 C 651.87472,255.09375 655.0625,254.96875 655.0625,254.96875 L 655.0625,255 L 661,254.1875 L 664.4375,251.59375 L 664.46875,251.59375 L 664.5,251.5625 C 664.5,251.5625 664.94768,251.34004 665.46875,251.125 C 665.72928,251.01748 666.00866,250.91779 666.28125,250.84375 C 666.55384,250.76971 666.81068,250.68015 667.125,250.75 C 667.38573,250.80794 667.60881,250.94922 667.875,251.09375 C 667.97127,251.14602 668.08608,251.19158 668.1875,251.25 L 668.875,249.1875 L 668.875,249.125 L 668.875,246.4375 L 668.875,246.40625 L 668.96875,241.0625 L 668.15625,239.71875 L 668.0625,239.59375 L 668.0625,239.4375 L 668.15625,236.40625 L 668.15625,236.25 L 668.28125,236.09375 L 669.59375,234.53125 L 669.625,234.5 L 670.9375,232.5 L 668.40625,230.28125 L 668.375,230.25 L 668.34375,230.1875 L 667.09375,228.3125 L 667.0625,228.28125 L 667.03125,228.21875 L 666.0625,225.90625 L 666.03125,225.84375 L 666.03125,225.78125 C 666.03125,225.78125 665.94968,225.3742 665.9375,224.875 C 665.93141,224.6254 665.95326,224.3586 666,224.09375 C 666.04674,223.8289 666.1084,223.54785 666.34375,223.3125 C 666.37286,223.28339 666.55456,223.05758 666.71875,222.78125 C 666.88294,222.50492 667.0482,222.16834 667.21875,221.84375 C 667.50186,221.30493 667.67455,220.96775 667.75,220.8125 L 666.96875,219.25 L 666.4375,218.15625 L 666.34375,217.96875 L 666.40625,217.78125 L 667.75,214.1875 L 670.4375,207.75 L 670.46875,207.6875 L 670.5,207.65625 L 672.09375,205.5625 L 672.09375,205.5 L 672.78125,203.1875 L 670.3125,201.875 L 670.25,201.84375 L 670.21875,201.8125 L 668.78125,200.5625 L 668.625,200.40625 L 668.59375,200.21875 L 668.4375,196.625 L 668.40625,196.375 L 668.625,196.21875 L 671.75,193.875 L 671.9375,193.75 L 672.1875,193.8125 L 675.375,194.59375 L 675.4375,194.625 L 675.5,194.65625 L 677.625,195.75 L 678.625,195.84375 L 681.03125,194.0625 L 681.1875,193.96875 L 681.34375,193.96875 L 688.21875,193.96875 L 689.0625,191.46875 L 689.0625,189.21875 L 685.125,188.71875 L 685.0625,188.71875 L 685,188.6875 L 678.9375,186.53125 L 678.8125,186.5 L 678.71875,186.40625 L 676.3125,183.65625 C 676.15942,183.60522 674.28045,182.96849 673.25,182.625 C 673.17583,182.60028 672.97412,182.61559 672.71875,182.75 C 672.46338,182.88441 672.17726,183.09359 671.90625,183.34375 C 671.36424,183.84407 670.9375,184.40625 670.9375,184.40625 L 670.6875,184.71875 L 670.34375,184.5625 L 665.5625,182.4375 L 665.5,182.40625 C 665.40081,182.3765 660.21702,180.82234 658.59375,180.28125 C 658.08919,180.11306 657.7141,179.81539 657.53125,179.4375 C 657.3484,179.05961 657.33419,178.65259 657.375,178.3125 C 657.45035,177.68463 657.70883,177.26315 657.75,177.1875 L 657.71875,177.1875 L 658.78125,173.5625 L 658.4375,169.4375 L 656.6875,166.125 L 656.65625,166.0625 L 656.65625,165.96875 L 656.28125,163.84375 L 656.28125,163.8125 L 655.65625,159.75 zM 940.25,170.78125 L 940.25,170.84375 L 935.84375,171.375 L 935.78125,171.375 L 931.5625,172.625 L 931.4375,172.65625 L 931.3125,172.625 L 927.5625,171.875 L 927.09375,176.65625 L 927.0625,177.0625 L 926.65625,177.09375 C 926.65625,177.09375 925.86489,177.19163 924.96875,177.28125 C 924.10919,177.36721 923.24238,177.46174 922.78125,177.46875 C 922.775,177.47811 922.76419,177.46595 922.75,177.5 C 922.70271,177.6135 922.67628,177.82214 922.65625,178.0625 C 922.61619,178.54322 922.65625,179.0625 922.65625,179.0625 L 922.65625,179.1875 L 925.9375,181.875 L 930.5,183.28125 L 930.6875,183.34375 L 930.78125,183.5 L 932.21875,186 L 932.28125,186.125 L 932.28125,186.28125 L 931.9375,191.28125 L 931.90625,191.375 L 931.875,191.46875 L 931.25,192.6875 L 931.90625,194.25 L 936.21875,193.65625 L 939.6875,191.03125 L 939.96875,190.84375 L 940.25,191 L 943.1875,192.75 L 943.28125,192.78125 L 947.75,194.3125 L 955.34375,194.3125 L 955.5625,194.3125 L 955.6875,194.4375 L 957.34375,195.9375 L 965.5,196.28125 L 965.5625,196.28125 L 970.5,195.9375 L 970.625,195.90625 L 970.75,195.96875 L 972.6875,196.96875 C 972.82951,196.89937 973.03413,196.77484 973.46875,196.59375 C 974.02267,196.36295 974.62202,196.09375 975.1875,196.09375 C 975.22024,196.09375 975.67754,196.05265 976.1875,195.9375 C 976.69746,195.82235 977.30647,195.6555 977.90625,195.5 C 979.07151,195.1979 980.09527,194.9233 980.15625,194.90625 L 980.21875,194.875 L 984.59375,192.75 L 984.75,192.6875 L 984.875,192.71875 L 988.875,193.25 L 989.3125,193 L 989.3125,191.65625 L 989.3125,191.4375 L 989.46875,191.28125 L 991.25,189.65625 L 991.40625,189.5 L 991.625,189.5 L 993.78125,189.625 L 994.125,189.65625 L 994.21875,190 L 994.78125,191.875 L 997.9375,192.9375 L 998.0625,193 L 998.15625,193.09375 L 999.25,194.4375 L 1000.9375,195.34375 L 998.15625,192.25 L 994.625,189.1875 L 991.21875,187.15625 L 991.125,187.09375 L 991.0625,187.03125 L 988.8125,184 C 988.8125,184 988.20769,183.24 987.53125,182.40625 C 986.85481,181.5725 986.06925,180.63176 985.8125,180.375 C 985.21534,179.77784 982.32162,177.03612 982.21875,176.9375 L 978.59375,175.84375 L 978.5625,175.84375 L 973.09375,174.625 L 968.6875,175.21875 L 961.25,176.5 L 961.25,176.46875 L 956.59375,177.5 L 956.5,177.5 L 956.375,177.5 L 950.71875,176.34375 L 950.625,176.34375 L 950.5625,176.3125 L 947.125,174.46875 L 943.84375,174.34375 L 943.65625,174.34375 L 943.53125,174.21875 L 941.125,172.21875 L 941.0625,172.15625 L 941.03125,172.09375 L 940.25,170.78125 zM 424.96875,172.90625 L 422.21875,177.5625 L 422.21875,177.59375 L 419.59375,181.78125 L 419.59375,185.09375 L 419.59375,185.1875 L 420.09375,188.53125 L 420.09375,188.5625 L 421.53125,191.375 L 421.71875,191.78125 L 421.34375,192.03125 L 419.0625,193.4375 L 419,193.46875 L 414.75,196.65625 L 414.65625,196.75 L 414.5,196.75 L 408.65625,197.0625 L 407.8125,201.6875 L 407.8125,201.78125 L 407.75,201.84375 L 406.40625,204.4375 L 406.03125,210.5625 L 406.03125,210.59375 L 406.03125,210.65625 L 405.5,212.96875 L 405.46875,213.0625 L 405.40625,213.15625 L 402.46875,217.3125 L 402.46875,219.28125 L 404.28125,221.0625 L 404.3125,221.125 L 404.34375,221.15625 L 405.375,222.875 L 409.03125,225.3125 L 409.1875,225.40625 L 409.25,225.59375 L 409.9375,228.625 L 409.96875,228.75 L 409.9375,228.84375 L 409.09375,232.84375 L 409.90625,235.0625 L 411.78125,236.8125 L 415.1875,233.40625 L 415.25,233.34375 L 415.3125,233.3125 L 418.375,231.75 C 418.43698,231.58432 418.58519,231.21811 418.90625,230.65625 C 419.09818,230.32037 419.30887,229.97238 419.59375,229.6875 C 419.87863,229.40262 420.25645,229.15625 420.71875,229.15625 C 421.73747,229.15626 425.74093,229.15625 426.15625,229.15625 L 428.6875,225.4375 L 428.78125,225.3125 L 428.90625,225.25 L 433.03125,223.53125 L 434.53125,220.53125 L 434.5625,220.5 L 436.125,216.25 L 436.15625,216.21875 L 436.15625,216.1875 L 438.5,212.0625 L 438.5625,211.9375 L 438.71875,211.875 L 445.4375,208.84375 L 444.53125,206.8125 L 444.53125,206.78125 L 443.46875,203.75 L 443.4375,203.65625 L 443.4375,203.5625 L 443.4375,200.34375 L 443.4375,199.96875 L 443.8125,199.875 L 449.25,198.59375 L 447.625,195.46875 L 447.59375,195.40625 L 446.03125,193.34375 L 445.96875,193.25 L 445.9375,193.15625 L 444.53125,188.0625 L 443.28125,185 L 443.25,184.9375 L 443.25,184.875 L 442.9375,182.5 L 440.6875,181.53125 L 440.5625,181.46875 L 440.5,181.375 L 438.0625,178.0625 L 434.71875,175.78125 L 430.25,174.0625 L 430.1875,174.03125 L 424.96875,172.90625 zM 271.03125,178.09375 L 268.8125,178.28125 L 268.84375,178.34375 L 268.1875,178.5 L 265.375,179.09375 L 265.28125,179.125 L 263.46875,179.96875 L 263.4375,180 L 263.40625,180 L 261.5,180.5625 L 260.28125,182.4375 L 260.28125,182.46875 L 260.25,182.5 L 258.96875,184.03125 L 258.9375,184.09375 L 258.84375,184.125 L 257.6875,184.8125 L 256.90625,187.71875 L 256.90625,187.75 L 256.4375,190.09375 L 256.40625,190.3125 L 256.21875,190.4375 L 253.8125,191.9375 L 253.75,192 L 253.65625,192 L 251.25,192.5 L 250.28125,193.46875 L 250.25,193.53125 L 248.65625,195.625 L 248.625,195.65625 L 248.59375,195.65625 L 247.21875,197.0625 L 247.15625,197.125 L 247.09375,197.15625 L 245.3125,198.03125 L 245.21875,198.09375 L 245.09375,198.09375 L 238.15625,198.21875 L 236.15625,199.03125 L 234.125,201.40625 L 234.09375,201.4375 L 233.09375,202.8125 L 233.21875,205.65625 L 235,206.75 L 235.28125,206.9375 L 235.21875,207.25 L 235.125,208 L 236.5625,208 L 240.84375,208 L 240.96875,208 L 241.0625,208.0625 L 243.46875,209.1875 L 243.75,209.3125 L 243.75,209.625 L 243.9375,213.28125 L 245.34375,216.3125 L 247.90625,218.125 L 247.90625,218.15625 L 247.9375,218.15625 L 250.46875,220.25 L 250.625,220.375 L 250.625,220.5625 L 251.21875,226 L 251.21875,226.1875 L 251.125,226.34375 C 251.125,226.34375 250.77828,226.84267 250.375,227.375 C 250.17336,227.64117 249.94845,227.9322 249.75,228.15625 C 249.65078,228.26828 249.56467,228.3505 249.46875,228.4375 C 249.40603,228.49438 249.30198,228.54494 249.21875,228.59375 C 249.19904,228.6266 249.1629,228.7089 249.125,228.8125 C 249.0492,229.0197 248.97475,229.32817 248.90625,229.625 C 248.79081,230.12522 248.74241,230.48136 248.71875,230.625 L 250.71875,233.34375 L 250.8125,233.4375 L 250.8125,233.5625 L 251.28125,236.34375 L 253.09375,239.1875 L 253.28125,239.46875 L 253.125,239.71875 L 255.84375,240.40625 L 255.96875,240.4375 L 256.03125,240.53125 C 256.03125,240.53125 257.66182,241.94493 258.78125,243.4375 C 259.22697,244.03179 260.13581,244.61478 260.90625,245 C 261.55657,245.32516 261.93636,245.44485 262.09375,245.5 C 262.26757,245.36239 262.56456,245.12104 263.1875,244.78125 C 263.97132,244.35371 264.97822,243.92918 266,244.15625 C 266.9165,244.35992 267.51595,244.85187 267.9375,245.25 C 268.35905,245.64813 268.60475,245.8897 268.84375,245.9375 C 269.18961,246.00667 270.15525,246.07162 271.0625,246.09375 C 271.96975,246.11588 272.86161,246.09375 273.21875,246.09375 C 273.85582,246.09374 274.99739,246.09375 275.28125,246.09375 L 277.78125,242.21875 L 278,241.9375 L 278.34375,242 L 281.1875,242.71875 L 283.65625,243.375 C 283.84171,243.23319 284.89368,242.42115 286.21875,241.46875 C 286.93704,240.95248 287.69566,240.42534 288.3125,240.03125 C 288.62092,239.8342 288.88811,239.68633 289.125,239.5625 C 289.36189,239.43867 289.48363,239.3125 289.8125,239.3125 C 289.79761,239.3125 289.9706,239.29528 290.15625,239.25 C 290.3419,239.20472 290.57289,239.14458 290.84375,239.0625 C 291.38547,238.89834 292.04353,238.69081 292.6875,238.46875 C 293.97545,238.02463 295.1875,237.5625 295.1875,237.5625 L 295.40625,237.5 L 295.59375,237.59375 L 298.8125,239.375 L 298.90625,239.4375 L 298.96875,239.53125 C 298.96875,239.53125 299.39714,240.0808 299.8125,240.75 C 300.02018,241.0846 300.2107,241.42527 300.375,241.78125 C 300.5393,242.13723 300.6875,242.47054 300.6875,242.84375 C 300.68751,243.32352 300.63709,244.10753 300.71875,244.78125 C 300.75958,245.11811 300.84041,245.42071 300.9375,245.625 C 301.03459,245.82929 301.10901,245.93217 301.21875,245.96875 C 301.83352,246.17367 302.72685,246.5904 303.71875,247.03125 C 304.71065,247.4721 305.78407,247.92949 306.6875,248.09375 C 308.72787,248.46473 313,249.6875 313,249.6875 L 313.09375,249.71875 L 313.1875,249.8125 L 314.5,251 L 321.40625,252.25 L 326.09375,250.28125 L 326.03125,250.21875 L 329.4375,245.9375 L 329.5,245.84375 L 329.625,245.78125 L 334.21875,243.84375 L 334.25,243.8125 L 334.28125,243.8125 L 338.28125,241.65625 L 338.59375,239.46875 L 336.25,237.125 L 336.15625,237.03125 L 336.125,236.90625 L 335.21875,233.53125 L 335.1875,233.375 L 335.25,233.25 L 336.8125,228.03125 L 335.40625,223.1875 L 333.125,217.34375 L 333.09375,217.3125 L 331,212.9375 L 330.96875,212.90625 L 327.4375,206.6875 L 327.21875,206.3125 L 327.53125,206.03125 L 331.6875,202.6875 C 331.20499,202.34732 330.24142,201.68688 329.5,201.09375 C 329.14879,200.81278 328.02893,200.15709 327.03125,199.625 C 326.03357,199.09291 325.125,198.65625 325.125,198.65625 L 324.96875,198.5625 L 324.90625,198.40625 L 322.75,193.21875 L 320.625,190.15625 L 314.28125,189.96875 L 314.1875,189.96875 L 314.125,189.9375 L 308.59375,187.96875 L 302.5,186.0625 L 296.90625,187.28125 L 296.78125,187.3125 L 296.65625,187.28125 C 296.65625,187.28125 295.49456,186.96739 294.25,186.65625 C 293.62772,186.50068 292.99597,186.33408 292.46875,186.21875 C 291.94153,186.10342 291.47024,186.03125 291.4375,186.03125 C 291.20537,186.03125 290.64843,186.15983 290.125,186.3125 C 289.60157,186.46517 289.08268,186.6512 288.6875,186.75 C 288.08733,186.90004 287.72132,187.2295 286.25,187.78125 C 284.71881,188.35544 283.21875,188.34375 283.21875,188.34375 L 282.96875,188.34375 L 282.8125,188.15625 C 282.8125,188.15625 282.56258,187.82361 282.21875,187.5 C 281.87492,187.17639 281.42977,186.9375 281.25,186.9375 C 280.57024,186.9375 280.0416,186.53058 279.625,186.1875 C 279.2084,185.84442 278.90625,185.5 278.90625,185.5 L 278.84375,185.40625 L 278.8125,185.3125 L 278.25,183.15625 L 277.0625,179.6875 L 275.5,179.875 L 275.375,179.875 L 275.28125,179.84375 L 272.5,178.78125 L 272.5,178.75 L 272.46875,178.75 L 271.03125,178.09375 zM 921.71875,179.6875 L 914.75,181.03125 L 908.53125,182.4375 L 908.5,182.4375 L 899.125,185.28125 L 899.0625,185.3125 L 892.34375,188.125 L 892.21875,188.1875 L 892.09375,188.1875 L 886.40625,187.65625 C 886.39959,187.65873 886.38183,187.65371 886.375,187.65625 C 885.82143,187.86208 885.32668,188.08041 884.15625,188.5 C 882.47903,189.10127 880.70082,189.72233 879.9375,189.875 C 879.81669,189.89916 879.25903,190.15169 878.65625,190.5625 C 878.05347,190.97331 877.36328,191.51259 876.65625,192.0625 C 875.94922,192.61241 875.24931,193.19852 874.65625,193.65625 C 874.06319,194.11398 873.60688,194.44656 873.25,194.625 C 873.13908,194.68046 873.07825,194.75473 873.03125,194.9375 C 872.98425,195.12027 873.00228,195.40008 873.03125,195.71875 C 873.08919,196.35609 873.28126,197.08867 873.28125,197.71875 C 873.29645,197.76368 873.34204,197.84702 873.40625,197.9375 C 873.53467,198.11846 873.74958,198.3632 874,198.625 C 874.50084,199.14861 875.18709,199.78089 875.875,200.375 C 877.2338,201.54851 878.5602,202.5678 878.59375,202.59375 C 878.59417,202.59408 878.625,202.625 878.625,202.625 C 878.679,202.65798 883.11835,205.34973 884.65625,206.375 C 885.55787,206.97609 885.84375,207.91207 885.84375,208.78125 C 885.84375,209.65043 885.65625,210.5313 885.65625,211.34375 C 885.65625,213.17898 884.49566,214.03917 884.28125,214.1875 L 884.25,214.21875 C 884.23853,214.2265 884.15625,214.3125 884.15625,214.3125 L 879.625,220.0625 L 881.09375,220.0625 L 881.21875,220.0625 L 881.3125,220.125 L 886,222.375 L 886.1875,222.5 L 886.25,222.6875 L 887,225.28125 L 887.03125,225.34375 L 888.3125,228.3125 L 892.4375,232.46875 L 892.46875,232.46875 L 892.46875,232.5 L 895.875,236.65625 L 895.96875,236.78125 L 896,236.9375 L 896.625,242.15625 L 896.625,242.21875 C 896.6407,242.27171 896.88258,243.02441 897.15625,243.90625 C 897.29771,244.36208 897.4342,244.83386 897.5625,245.21875 C 897.6908,245.60364 897.82162,245.92449 897.84375,245.96875 C 898.00005,246.28136 898.00622,246.54328 898.03125,246.90625 C 898.05628,247.26922 898.0625,247.69249 898.0625,248.09375 C 898.0625,248.83078 898.03566,249.394 898.03125,249.5 L 900.75,254.5625 L 900.21875,254.84375 L 903.03125,254.78125 L 903.0625,254.78125 L 906.6875,253.75 L 906.71875,253.71875 L 909.0625,251.875 L 910.1875,248.4375 L 910.28125,248.09375 L 910.65625,248.09375 L 912,248.09375 C 912.03015,247.93741 912.05082,247.7733 912.09375,247.625 C 912.22588,247.16856 912.40625,246.78125 912.40625,246.78125 L 912.40625,246.71875 L 912.4375,246.6875 L 914.0625,244.28125 L 914.0625,244.25 L 914.09375,244.21875 L 917.125,240.8125 L 917.15625,240.78125 L 917.21875,240.75 L 919.1875,239.4375 L 920.40625,235.8125 L 920.4375,235.75 L 920.46875,235.6875 C 920.46875,235.6875 920.78192,235.25908 921.125,234.75 C 921.46808,234.24092 921.87459,233.62584 921.96875,233.4375 C 921.93385,233.5073 921.97104,233.32853 921.9375,233.09375 C 921.90396,232.85897 921.83583,232.5504 921.75,232.25 C 921.66417,231.9496 921.55175,231.65526 921.46875,231.40625 C 921.39978,231.19934 921.38209,231.07036 921.34375,230.9375 C 921.33319,230.92867 921.32806,230.94921 921.3125,230.9375 C 921.23471,230.87893 921.09808,230.78266 920.9375,230.6875 C 920.61635,230.49719 920.18561,230.25181 919.75,230.03125 C 918.87877,229.59012 918,229.21875 918,229.21875 L 917.59375,229.03125 L 917.75,228.59375 L 918.375,226.625 L 918.46875,226.34375 L 918.75,226.28125 L 921.875,225.75 L 921.875,225.78125 C 921.90197,225.77366 922.56359,225.57168 923.3125,225.34375 C 923.69442,225.22751 924.08484,225.10985 924.40625,225 C 924.72766,224.89015 924.99556,224.75266 925,224.75 C 925.4545,224.4773 927.21109,223.51651 927.40625,223.40625 C 927.40625,223.40625 927.51901,223.3247 927.53125,223.3125 C 927.61845,223.22559 927.89666,222.92729 928.3125,222.53125 C 928.5496,222.30544 928.81341,222.0667 929.03125,221.875 C 929.24909,221.6833 929.36286,221.55295 929.59375,221.4375 C 929.80983,221.32946 929.88776,221.33898 930.0625,221.3125 C 930.23724,221.28602 930.44027,221.24433 930.6875,221.21875 C 931.18196,221.1676 931.80096,221.13859 932.40625,221.09375 C 933.61682,221.00408 934.78125,220.9375 934.78125,220.9375 L 934.96875,220.90625 L 935.09375,221 L 936.625,222 L 936.65625,222.03125 L 936.6875,222.0625 L 938.34375,223.71875 L 938.375,223.75 C 938.40736,223.77456 939.02008,224.22481 939.6875,224.75 C 940.03007,225.01957 940.36913,225.29127 940.65625,225.53125 C 940.90349,225.7379 941.07217,225.85812 941.21875,226.03125 C 941.23647,226.03954 941.29662,226.08416 941.375,226.09375 C 941.53175,226.11294 941.77604,226.10417 942,226.09375 C 942.44792,226.07292 942.875,226.03125 942.875,226.03125 L 943.09375,226 L 943.28125,226.125 L 946.03125,228.4375 L 947.84375,229.9375 L 947.90625,229.96875 C 947.95795,229.99966 948.33244,230.22394 948.78125,230.46875 C 949.02119,230.59963 949.26883,230.72023 949.46875,230.8125 C 949.56871,230.85863 949.65895,230.88515 949.71875,230.90625 C 949.78197,230.86733 949.86485,230.79757 949.96875,230.71875 C 950.19386,230.54798 950.47594,230.30367 950.75,230.0625 C 951.2308,229.6394 951.58423,229.31694 951.6875,229.21875 L 952.1875,226.78125 L 952.1875,226.75 C 952.1875,226.75 952.795,224.48986 953,223.875 C 953.0789,223.6383 953.2071,223.40146 953.375,223.125 C 953.5429,222.84854 953.7671,222.55808 953.96875,222.25 C 954.1704,221.94192 954.37346,221.62392 954.53125,221.375 C 954.68904,221.12608 954.80627,220.89058 954.8125,220.875 C 954.9724,220.47524 955.20741,220.41192 955.46875,220.28125 C 955.73009,220.15058 956.05251,220.03652 956.34375,219.9375 C 956.92623,219.73946 957.46875,219.59375 957.46875,219.59375 L 957.65625,219.5625 L 957.84375,219.65625 L 960.71875,221.25 L 964.46875,220.65625 L 964.1875,220.40625 L 964.375,220.0625 L 966.15625,217.03125 L 966.3125,216.78125 L 966.59375,216.78125 L 972.09375,216.78125 L 973.46875,215.625 L 973.6875,215.4375 L 973.96875,215.5625 L 975.5,216.15625 L 980.53125,216.15625 L 980.59375,216.15625 L 981.875,215.71875 L 981.96875,215.6875 L 983.375,214.84375 L 983.375,211.84375 L 983.375,211.71875 L 983.46875,211.59375 L 984.59375,209.75 L 984.0625,208.21875 L 984.03125,208.1875 L 984.03125,208.125 L 983.65625,204.84375 L 983.59375,204.53125 L 983.875,204.375 L 985.0625,203.59375 L 985.40625,201.53125 L 985.4375,201.5 L 985.4375,201.46875 L 986.25,199.15625 L 985.125,197.46875 L 984.9375,197.21875 L 985.09375,196.96875 L 986.34375,194.6875 L 986.4375,194.5625 L 986.5625,194.5 L 987.375,194.0625 L 984.875,193.71875 L 980.5625,195.8125 L 980.53125,195.8125 L 980.5,195.84375 C 980.5,195.84375 979.36741,196.15475 978.15625,196.46875 C 977.55067,196.62575 976.93424,196.78703 976.40625,196.90625 C 975.87826,197.02547 975.5119,197.09375 975.1875,197.09375 C 975.0387,197.09375 974.36126,197.28437 973.84375,197.5 C 973.32625,197.71563 972.90625,197.9375 972.90625,197.9375 L 972.6875,198.0625 L 972.46875,197.9375 L 970.46875,196.9375 L 965.5625,197.28125 L 965.53125,197.28125 L 965.5,197.28125 L 957.125,196.9375 L 956.9375,196.90625 L 956.8125,196.8125 L 955.15625,195.3125 L 947.6875,195.3125 L 947.59375,195.3125 L 947.5,195.28125 L 942.875,193.6875 L 942.8125,193.65625 L 942.78125,193.65625 L 940.03125,192.03125 L 936.71875,194.5 L 936.625,194.59375 L 936.5,194.59375 L 931.6875,195.3125 L 931.28125,195.375 L 931.15625,195 L 930.25,192.875 L 930.15625,192.65625 L 930.28125,192.46875 L 930.9375,191.0625 L 931.28125,186.375 L 930.03125,184.15625 L 925.5625,182.8125 L 925.46875,182.78125 L 925.40625,182.71875 L 921.71875,179.6875 zM 511.8125,179.78125 L 503.3125,180.53125 L 502.375,181 L 501.90625,186.40625 L 501.90625,186.4375 L 501.90625,186.46875 L 501.40625,188.5 L 501.15625,192.9375 L 501.15625,193.09375 L 501.0625,193.21875 C 501.0625,193.21875 500.74042,193.66222 500.34375,194.125 C 500.14541,194.35639 499.93923,194.58833 499.71875,194.78125 C 499.49827,194.97417 499.29293,195.1875 498.875,195.1875 C 498.87374,195.1875 498.46153,195.21085 497.96875,195.28125 C 497.47597,195.35165 496.84844,195.46801 496.25,195.5625 C 495.06868,195.74903 493.96645,195.93268 493.9375,195.9375 C 493.93428,195.93923 493.91007,195.93546 493.90625,195.9375 C 493.80509,195.99167 493.62329,196.10794 493.25,196.28125 C 492.79219,196.4938 492.27114,196.73085 491.78125,196.8125 C 490.87257,196.96395 489.5,196.8125 489.5,196.8125 L 489.15625,196.78125 L 489.0625,196.46875 C 489.0625,196.46875 488.86767,195.8245 488.625,195.1875 C 488.50366,194.869 488.36831,194.55079 488.25,194.34375 C 488.20086,194.25775 488.18418,194.19035 488.15625,194.15625 C 487.52309,194.15625 484.94476,194.15625 484.75,194.15625 L 482.46875,194.78125 L 482.4375,194.78125 L 478.40625,195.5625 L 478.40625,195.53125 L 475.8125,196.3125 L 475.78125,196.3125 L 474.03125,197.5 L 473.90625,197.5625 L 473.78125,197.59375 L 468.84375,197.71875 L 468.71875,197.71875 L 468.59375,197.65625 L 465.59375,195.96875 C 465.4248,196.01353 464.98601,196.1383 464.34375,196.25 C 463.96566,196.31575 463.56803,196.375 463.21875,196.375 C 463.04411,196.375 462.88989,196.35971 462.71875,196.3125 C 462.54761,196.26529 462.31224,196.15573 462.1875,195.90625 C 462.17303,195.87732 461.79853,195.48952 461.4375,195.21875 C 461.23845,195.06946 461.19352,195.02551 461.0625,194.9375 L 458.9375,196.71875 L 458.90625,196.71875 L 458.90625,196.75 L 456.125,198.625 L 456.03125,198.6875 L 455.90625,198.71875 C 455.90625,198.71875 455.37191,198.81057 454.75,198.90625 C 454.12809,199.00193 453.47817,199.09375 453.0625,199.09375 C 452.58138,199.09375 451.1984,199.16056 450.71875,199.1875 L 450.75,199.28125 L 450.125,199.40625 L 444.4375,200.75 L 444.4375,203.5 L 445.46875,206.40625 L 445.46875,206.4375 L 446.34375,208.46875 L 449.3125,209.625 L 449.46875,209.6875 L 449.5625,209.8125 L 450.90625,211.96875 L 452.84375,212.90625 L 452.875,212.90625 L 456,214 L 456.125,214.03125 C 456.22662,214.04213 456.67731,214.06964 457.3125,214.15625 C 458.01569,214.25214 458.79967,214.37072 459.28125,214.53125 C 460.19699,214.8365 461.1875,215.625 461.1875,215.625 L 461.21875,215.625 L 461.21875,215.65625 L 463.5,217.8125 L 463.59375,217.875 L 463.625,218 L 464.46875,220.40625 L 467.25,222.5625 L 467.34375,222.65625 L 467.40625,222.75 L 468.28125,224.65625 L 468.4375,225 L 468.15625,225.25 C 468.15625,225.25 467.60654,225.6744 467.03125,226.1875 C 466.7436,226.44405 466.4623,226.7252 466.21875,226.96875 C 465.9752,227.2123 465.75923,227.46379 465.71875,227.53125 C 465.75519,227.47051 465.73884,227.50985 465.8125,227.6875 C 465.88616,227.86515 466.01985,228.11779 466.1875,228.34375 C 466.50227,228.76801 466.83173,229.08111 466.875,229.125 L 470.03125,231.53125 L 473.9375,234.5625 L 474.15625,234.75 L 474.125,234.90625 L 477.28125,236.65625 L 477.3125,236.6875 L 477.34375,236.71875 L 479.96875,238.71875 L 480,238.71875 C 480.02614,238.73529 481.35186,239.57967 482.15625,240.25 C 482.46788,240.5097 483.37749,241.09523 484.21875,241.59375 C 484.63938,241.84301 485.04217,242.07402 485.375,242.25 C 485.70783,242.42598 486.0164,242.5666 486,242.5625 C 486.42897,242.66974 488.5,243.0625 488.5,243.0625 L 489.03125,243.15625 L 488.90625,243.6875 L 488.15625,246.3125 L 488.15625,246.34375 L 488.15625,249.8125 L 488.15625,249.875 C 488.19183,249.9973 488.34489,250.46407 488.5625,251.0625 C 488.68503,251.39945 488.81036,251.71446 488.9375,251.96875 C 489.06464,252.22304 489.26707,252.38353 489.125,252.3125 C 489.51172,252.50585 489.9229,252.86137 490.40625,253.3125 C 490.8896,253.76363 491.40118,254.30742 491.90625,254.8125 C 492.48498,255.39123 493.17528,256.38724 493.75,257.28125 C 494.32472,258.17526 494.78125,258.9375 494.78125,258.9375 L 494.84375,259.0625 L 494.84375,259.15625 L 495.09375,262 L 498.9375,262 L 499.125,262 L 499.28125,262.15625 L 501.96875,264.84375 L 505.65625,264.84375 L 511.15625,262.4375 L 511.21875,262.40625 L 515.8125,259.5625 L 515.84375,259.5625 L 515.875,259.53125 L 518.8125,258.25 L 519.125,256.5625 L 517.09375,253.5 L 516.84375,253.125 L 517.1875,252.84375 L 519.3125,251.03125 L 519.4375,250.9375 L 519.5625,250.9375 L 527.28125,249.90625 L 532.1875,246.03125 L 532.25,246 L 532.28125,245.96875 L 538.25,243.15625 L 542.09375,238.25 L 542.125,238.21875 L 542.15625,238.21875 L 546.75,233.96875 L 550.59375,227 L 550.625,226.90625 L 552.6875,220.71875 L 551.6875,214.90625 L 547.875,211.0625 L 547.71875,210.90625 L 547.71875,210.71875 L 547.71875,205.65625 L 543.71875,203.65625 L 543.25,203.4375 L 543.46875,203 L 545.15625,199.65625 L 541.75,191.75 L 537.75,189.125 L 533.71875,190.46875 L 533.65625,190.5 L 533.5625,190.5 L 525.71875,190.5 L 525.625,190.5 L 525.53125,190.46875 L 521.25,188.6875 L 521.15625,188.625 L 521.0625,188.5625 L 517.15625,184.625 L 517.0625,184.5625 L 517.03125,184.4375 L 515.53125,180.125 L 511.84375,179.78125 L 511.8125,179.78125 zM 758.28125,187.96875 C 758.28125,187.96875 757.4201,188.22999 756.46875,188.53125 C 755.5174,188.83251 754.53002,189.16687 754.03125,189.25 C 753.55913,189.32868 752.56668,189.35905 751.5625,189.4375 C 751.06041,189.47673 750.57579,189.54617 750.1875,189.59375 C 749.79921,189.64133 749.43993,189.71753 749.5,189.6875 C 749.08434,189.89534 746.34985,191.4751 745.65625,191.9375 C 745.56019,192.00154 745.2407,192.29874 744.90625,192.65625 C 744.5718,193.01376 744.17252,193.45237 743.8125,193.875 C 743.09247,194.72026 742.46875,195.5 742.46875,195.5 L 742.40625,195.59375 L 742.59375,195.75 C 742.59375,195.75 742.17189,196.31004 741.65625,196.90625 C 741.39843,197.20436 741.09825,197.53312 740.84375,197.78125 C 740.7165,197.90532 740.59003,198.00062 740.46875,198.09375 C 740.34747,198.18688 740.26355,198.26224 740.0625,198.3125 C 739.85751,198.36374 738.9748,198.62848 738.125,198.9375 C 737.7001,199.09201 737.28469,199.27411 736.9375,199.4375 C 736.59031,199.60089 736.31356,199.78019 736.25,199.84375 C 735.91076,200.183 735.26283,200.72812 734.625,201.21875 C 734.30609,201.46407 734.01249,201.70907 733.71875,201.875 C 733.57188,201.95796 733.42925,202.01281 733.28125,202.0625 C 733.13325,202.11219 732.97245,202.18061 732.75,202.125 C 732.44302,202.04825 732.26975,201.87954 732.09375,201.71875 C 731.91775,201.55796 731.74174,201.37648 731.5625,201.21875 C 731.20401,200.90328 730.88735,200.67918 730.53125,200.71875 C 729.77113,200.80321 729.00215,200.53196 728.34375,200.3125 C 728.01455,200.20277 727.72217,200.10436 727.5,200.0625 C 727.27783,200.02064 727.16249,200.04626 727.1875,200.03125 C 726.93488,200.18281 726.62252,200.46279 726.28125,200.71875 C 725.93998,200.97471 725.54693,201.25 725.03125,201.25 C 724.69008,201.25 724.45378,201.13648 724.125,201 C 723.79622,200.86352 723.42609,200.67032 723.03125,200.5 C 722.24156,200.15935 721.35484,199.84375 720.75,199.84375 C 718.957,199.84375 717.38111,198.46241 716.6875,198 C 716.02594,197.55894 714.08756,196.63753 713.0625,196.125 C 712.112,195.64974 711.14449,195.47557 710.46875,194.96875 C 710.30151,194.84333 709.79102,194.57547 709.28125,194.34375 C 708.77148,194.11203 708.24783,193.87413 707.9375,193.75 C 707.52578,193.58531 706.75825,193.17631 705.90625,192.71875 C 705.05425,192.26119 704.13648,191.75939 703.75,191.59375 C 702.95275,191.25208 699.93265,189.93618 699.15625,189.59375 C 698.68831,190.06042 698.20003,190.57186 697.71875,190.8125 C 697.41347,190.96515 697.09934,190.98161 696.75,191 C 696.40066,191.01839 696.03483,191.02316 695.6875,191 C 694.99284,190.95369 694.375,190.84375 694.375,190.84375 L 694.34375,190.84375 L 694.28125,190.8125 L 690.65625,189.4375 L 690.53125,189.40625 L 690.0625,189.375 L 690.0625,191.53125 L 690.0625,191.59375 L 690.03125,191.6875 L 689.03125,194.625 L 688.9375,194.96875 L 688.5625,194.96875 L 681.5,194.96875 L 679.03125,196.75 L 678.90625,196.84375 L 678.71875,196.84375 L 677.46875,196.75 L 677.375,196.75 L 677.28125,196.6875 L 675.03125,195.53125 L 672.15625,194.84375 L 669.4375,196.84375 L 669.59375,199.9375 L 670.78125,201 L 670.84375,201.03125 L 670.875,201.0625 L 673.625,202.5 L 674,202.6875 L 673.875,203.09375 L 673.0625,205.84375 L 673.03125,205.9375 L 673,206.03125 L 671.3125,208.21875 L 671.28125,208.25 L 668.6875,214.5625 L 667.40625,217.9375 L 667.84375,218.78125 L 668.75,220.59375 L 668.875,220.8125 L 668.75,221.03125 C 668.75,221.03125 668.47587,221.64472 668.125,222.3125 C 667.94957,222.64639 667.7415,222.98001 667.5625,223.28125 C 667.3835,223.58249 667.25662,223.80589 667.0625,224 C 667.07464,223.98786 666.99735,224.08796 666.96875,224.25 C 666.94015,224.41204 666.93243,224.63576 666.9375,224.84375 C 666.94725,225.24319 666.99549,225.56575 667,225.59375 C 667.00019,225.59491 667,225.625 667,225.625 L 667.90625,227.75 L 667.96875,227.84375 L 669.09375,229.53125 L 671.9375,232.03125 L 672.28125,232.3125 L 672.03125,232.6875 L 670.40625,235.09375 L 670.40625,235.125 L 670.375,235.15625 L 669.15625,236.59375 L 669.0625,239.3125 L 669.875,240.625 L 669.96875,240.75 L 669.96875,240.90625 L 669.875,246.4375 L 669.875,249.1875 L 669.875,249.28125 L 669.84375,249.34375 L 669.0625,251.78125 C 669.21095,251.86867 669.37687,251.96404 669.5,252.03125 C 669.72268,252.1528 669.9493,252.22937 669.875,252.21875 C 670.21148,252.26681 670.7086,252.41342 671.25,252.5625 C 671.5207,252.63704 671.78506,252.69838 672,252.75 C 672.21494,252.80162 672.4053,252.84375 672.375,252.84375 C 672.33902,252.84375 672.53805,252.83293 672.75,252.8125 C 672.96195,252.79207 673.22839,252.75418 673.5625,252.71875 C 674.23071,252.64789 675.10451,252.56346 675.96875,252.46875 C 676.83299,252.37404 677.69539,252.25872 678.375,252.1875 C 678.71481,252.15189 678.99458,252.14603 679.21875,252.125 C 679.44292,252.10397 679.59208,252.0625 679.71875,252.0625 C 680.01972,252.0625 680.20007,252.17653 680.46875,252.28125 C 680.73743,252.38597 681.01394,252.51504 681.3125,252.65625 C 681.90963,252.93867 682.475,253.21625 682.6875,253.34375 C 682.83834,253.43426 682.87927,253.49837 682.96875,253.59375 C 683.05823,253.68913 683.14125,253.8073 683.25,253.9375 C 683.4675,254.19789 683.72588,254.52922 683.96875,254.84375 C 684.45449,255.47282 684.90625,256.0625 684.90625,256.0625 L 687.40625,257.84375 C 687.40625,257.36333 687.40625,257.03103 687.40625,256.6875 C 687.40625,256.08658 687.40625,252.14832 687.40625,251.75 C 687.21678,251.58335 686.50159,251 685.5,251 C 684.89643,251 684.64364,251.13509 684.5,251.25 C 684.35637,251.36491 684.34375,251.40625 684.34375,251.40625 L 684.15625,251.9375 L 683.65625,251.6875 L 681.5,250.6875 L 681.40625,250.65625 L 681.34375,250.5625 L 678.90625,247.65625 C 678.80613,247.62278 678.41429,247.48094 677.84375,247.28125 C 677.2082,247.05881 676.52948,246.82724 676.1875,246.65625 C 675.69645,246.41072 675.57674,245.93911 675.5,245.59375 C 675.44525,245.34739 675.4415,245.23269 675.4375,245.125 L 674.25,243.3125 L 674.78125,242.9375 L 674.5,242.75 L 675.125,241.875 L 675.40625,241.46875 L 675.8125,241.75 L 677.28125,242.71875 L 677.34375,242.75 L 680.5625,244.5 L 680.6875,244.5625 L 680.78125,244.6875 L 681.71875,246.375 L 681.75,246.40625 L 681.78125,246.46875 L 684.09375,248.84375 L 687.65625,248.84375 L 689.6875,248.5 C 689.6875,248.5 689.71797,248.50021 689.71875,248.5 C 689.74507,248.49299 690.1892,248.3746 690.71875,248.25 C 691.2639,248.12173 691.79955,247.96875 692.21875,247.96875 L 692.21875,248.09375 L 694.75,247.25 L 694.84375,247.21875 L 697.28125,245.8125 L 696.9375,244.25 L 692.5,244.25 L 692.15625,244.25 L 692.03125,243.9375 L 691.125,241.59375 L 691.03125,241.375 L 691.1875,241.15625 L 693.15625,238.28125 L 693.25,238.15625 L 693.375,238.125 L 696.21875,236.875 L 696.5625,236.71875 L 696.8125,237 L 698.0625,238.40625 L 700.5625,236.0625 L 700.625,236 L 700.75,235.96875 L 703.21875,235.125 L 705.8125,230.46875 L 705.9375,230.28125 L 706.15625,230.21875 L 711.03125,229.1875 L 715.125,227.0625 L 715.3125,226.96875 L 715.53125,227.03125 L 718.9375,228.21875 L 721.09375,227.5625 L 721.125,227.5625 L 721.15625,227.53125 L 725.84375,226.6875 L 729.71875,224.0625 L 730.28125,223.65625 L 730.46875,224.3125 L 731.375,227.1875 L 731.8125,228.625 L 734.25,228.78125 L 737.3125,225.5625 L 737.375,225.5 L 737.4375,225.46875 L 742.34375,222.65625 L 742.90625,221.71875 L 742.375,221.28125 L 741.96875,220.96875 L 742.28125,220.59375 L 744.4375,217.90625 L 744.6875,217.59375 L 745.03125,217.75 L 748.0625,219.1875 L 752.375,221.25 L 758,220.4375 L 762.59375,217.625 L 762.71875,217.53125 L 762.875,217.53125 L 773.40625,217.90625 L 773.625,217.90625 L 773.78125,218.0625 L 776.625,221.28125 L 776.71875,221.40625 L 776.75,221.5625 L 776.84375,222.3125 C 777.40564,222.34349 777.97886,222.42164 778.25,222.625 C 778.61687,222.90015 778.70426,223.047 779.125,223.09375 C 779.49929,223.13534 779.8661,222.96804 780.25,222.6875 C 780.44195,222.54723 780.63354,222.3878 780.84375,222.25 C 781.05396,222.1122 781.26925,221.96875 781.59375,221.96875 C 782.22509,221.96875 786.28125,221.96875 786.28125,221.96875 L 786.71875,221.96875 L 786.78125,222.40625 L 786.875,223.09375 L 789.8125,221.28125 L 789.90625,221.21875 L 790.03125,221.21875 L 793.78125,220.84375 C 793.87183,220.76586 794.03783,220.6191 794.21875,220.40625 C 794.25647,220.36187 794.25311,220.35371 794.28125,220.3125 C 793.36845,219.95028 790.375,218.75 790.375,218.75 L 790.34375,218.75 L 790.3125,218.71875 C 790.3125,218.71875 789.95388,218.49837 789.59375,218.15625 C 789.23362,217.81413 788.8125,217.33629 788.8125,216.65625 C 788.8125,216.54244 788.73508,216.15149 788.625,215.71875 C 788.51492,215.28601 788.3883,214.77449 788.21875,214.28125 C 788.0492,213.78801 787.85459,213.33263 787.6875,212.96875 C 787.60396,212.78681 787.53307,212.60626 787.46875,212.5 C 787.40443,212.39374 787.33013,212.34135 787.375,212.375 C 787.10113,212.1696 786.35461,211.58695 785.59375,210.96875 C 784.83289,210.35055 784.09271,209.74895 783.78125,209.4375 C 783.46978,209.12603 782.97634,208.50976 782.53125,207.9375 C 782.08616,207.36524 781.71875,206.84375 781.71875,206.84375 L 781.65625,206.78125 L 781.625,206.71875 L 780.875,204.5625 L 780.84375,204.5 L 780.84375,204.40625 L 780.84375,199.5625 L 779.46875,198.3125 L 773.46875,197.4375 L 773.40625,197.4375 L 773.375,197.4375 L 770.71875,196.53125 L 770.625,196.5 L 770.53125,196.4375 L 767.5,193.65625 L 767.25,193.4375 L 767.375,193.09375 L 768.78125,189.6875 L 768.84375,189.53125 L 768.96875,189.4375 L 769.5,189.125 C 769.0764,189.02645 768.90468,188.99214 768.25,188.84375 C 767.06865,188.57597 765.74435,188.27151 765.375,188.21875 C 765.22662,188.19755 764.6304,188.18569 763.90625,188.15625 C 763.1821,188.12681 762.29647,188.08614 761.4375,188.0625 C 759.80052,188.01745 758.42255,187.97155 758.28125,187.96875 zM 203.15625,190.90625 L 203.03125,196.34375 L 203.03125,196.5 L 202.90625,196.65625 L 201.53125,198.28125 L 201.46875,198.34375 L 201.40625,198.40625 L 198,200.40625 L 195.5,202.0625 L 193.53125,207.34375 L 193.5,207.46875 L 193.40625,207.5625 L 191.625,209.1875 L 191.625,209.21875 L 191.59375,209.21875 L 189.4375,210.75 L 189.3125,210.84375 L 189.15625,210.84375 L 185.75,210.84375 L 185.6875,210.84375 L 185.59375,210.8125 L 180.6875,209.4375 L 180.59375,209.40625 L 180.53125,209.34375 L 179.34375,208.5 L 177.625,213.15625 L 177.59375,213.28125 L 177.5,213.34375 L 175.59375,215.28125 L 175.125,216.90625 L 174.75,222.25 L 174.75,222.34375 L 174.71875,222.40625 L 173.5625,224.9375 L 173.5,225.09375 L 173.375,225.15625 L 169.84375,227.3125 L 169.78125,227.34375 L 169.71875,227.34375 L 166.0625,228.5 L 166.03125,228.5 L 165.96875,228.5 L 161.53125,229.03125 L 160.5,229.59375 L 159.21875,230.34375 L 159.09375,232.1875 L 159.90625,233.9375 L 160.9375,234.84375 L 161.125,235 L 161.125,235.25 L 161,237.375 L 161,237.4375 L 161.125,237.4375 L 161.03125,239.875 L 161.03125,239.90625 L 161.03125,239.9375 L 161.21875,242.3125 L 161.75,242.96875 L 163.53125,243.0625 L 163.59375,243.0625 L 166,242.28125 L 166.0625,242.28125 L 166.09375,242.28125 C 166.09375,242.28125 166.64154,242.1875 167.28125,242.1875 C 167.92097,242.1875 168.64561,242.19514 169.21875,242.625 C 169.71989,243.00086 170.02634,243.59028 170.34375,244.09375 C 170.66116,244.59722 171.00239,245.01148 171.1875,245.09375 C 171.57994,245.26818 171.80461,245.55473 172.03125,245.90625 C 172.25789,246.25777 172.44597,246.66979 172.625,247.0625 C 172.98307,247.84793 173.25,248.59375 173.25,248.59375 L 173.3125,248.78125 L 173.21875,249 C 173.21875,249 172.9106,249.52256 172.625,250.09375 C 172.4822,250.37934 172.35237,250.67001 172.25,250.90625 C 172.19881,251.02437 172.14978,251.11506 172.125,251.1875 C 172.11633,251.21285 172.09844,251.23031 172.09375,251.25 C 172.09375,251.29539 172.08903,251.29917 172.09375,251.28125 C 172.09374,251.53837 172.09375,251.88813 172.09375,252.15625 L 174.21875,253.125 L 174.46875,253.21875 L 174.5,253.5 L 174.875,255.625 L 174.875,255.65625 L 174.875,255.6875 L 175.0625,258.34375 L 177.1875,260.0625 L 177.28125,260.125 L 177.34375,260.25 L 178.59375,263 L 178.59375,263.0625 L 178.625,263.125 L 178.90625,264.90625 L 179.6875,264.84375 L 179.71875,264.84375 L 179.75,264.84375 L 185.4375,265.03125 L 185.46875,265.03125 L 187.9375,264.53125 L 188,264.5 L 188.03125,264.5 L 190.28125,263.5 C 190.28125,263.5 190.31123,263.46948 190.3125,263.46875 L 190.34375,263.46875 C 190.39593,263.43895 190.79791,263.21069 191.28125,262.9375 C 191.79589,262.64662 192.30798,262.33039 192.53125,262.21875 C 192.70633,262.13121 192.80392,262.1397 192.9375,262.125 C 193.07108,262.1103 193.23883,262.09816 193.40625,262.09375 C 193.74109,262.08494 194.12497,262.11371 194.53125,262.125 C 195.34381,262.14757 196.22522,262.1875 196.4375,262.1875 C 196.37699,262.1875 196.60632,262.13848 196.84375,262.03125 C 197.08118,261.92402 197.35342,261.77708 197.625,261.625 C 198.16815,261.32083 198.65625,261 198.65625,261 L 198.71875,260.96875 L 198.75,260.96875 L 202.03125,259.71875 L 204.625,258.65625 L 208.125,257.21875 L 208.21875,257.1875 L 208.3125,257.1875 L 215.8125,257.1875 L 215.90625,257.1875 L 216,257.21875 L 217.65625,257.96875 L 222.84375,257.96875 L 223.0625,257.96875 L 223.1875,258.125 L 224.34375,259.1875 L 224.4375,259.28125 L 224.5,259.375 L 225.28125,261.71875 L 225.3125,261.71875 L 225.3125,261.75 L 226.03125,264.25 L 226.5625,266.5 L 227.03125,268.625 L 230.34375,265.03125 L 230.40625,264.9375 L 230.5,264.90625 L 233.71875,263.40625 L 236.59375,260.21875 L 236.71875,260.0625 L 236.90625,260.03125 L 238.09375,259.90625 L 240.0625,256.96875 L 241.09375,254.03125 L 241.28125,249.8125 L 241.28125,249.6875 L 241.34375,249.59375 L 242.9375,246.5625 L 243.03125,246.40625 L 243.1875,246.3125 L 247.1875,244.59375 L 247.21875,244.5625 L 250.3125,242.15625 L 252.09375,239.4375 L 250.40625,236.8125 L 250.34375,236.71875 L 250.34375,236.625 L 249.875,233.84375 L 247.78125,231.03125 L 247.65625,230.875 L 247.6875,230.65625 C 247.6875,230.65625 247.79039,230.04371 247.9375,229.40625 C 248.01105,229.08752 248.08574,228.7469 248.1875,228.46875 C 248.23838,228.32968 248.30149,228.21627 248.375,228.09375 C 248.44851,227.97123 248.52045,227.80568 248.78125,227.71875 C 248.8338,227.67109 248.91574,227.59513 249,227.5 C 249.16852,227.30973 249.36955,227.03594 249.5625,226.78125 C 249.89945,226.33648 250.11584,226.00971 250.1875,225.90625 L 249.6875,220.875 L 247.3125,218.9375 L 247.28125,218.9375 L 244.65625,217.0625 L 244.5625,216.96875 L 244.5,216.875 L 243,213.65625 L 242.9375,213.5625 L 242.9375,213.46875 L 242.75,209.96875 L 240.71875,209 L 236.5625,209 L 235,209 L 234.96875,209.375 L 234.9375,209.84375 L 234.46875,209.84375 L 232.59375,209.84375 L 232.53125,209.84375 L 232.46875,209.8125 L 229.8125,209.1875 L 229.78125,209.15625 L 229.71875,209.15625 L 227.4375,208.0625 L 224.53125,207.40625 L 224.46875,207.40625 L 224.40625,207.375 L 221.90625,206.03125 L 221.84375,206.03125 L 220.15625,205.78125 L 219.84375,205.75 L 219.75,205.46875 L 218.84375,202.9375 L 218.84375,202.84375 L 218.84375,202.75 L 218.96875,194.03125 L 209.46875,194.03125 L 209.34375,194.03125 L 209.21875,193.96875 L 207.96875,193.21875 L 207.9375,193.1875 L 207.90625,193.15625 L 205.34375,191 L 203.15625,190.90625 zM 446.34375,209.53125 L 446.28125,209.5625 L 439.28125,212.71875 L 437.0625,216.59375 L 437.03125,216.6875 L 435.46875,220.875 L 435.46875,220.90625 L 435.4375,220.9375 L 433.84375,224.15625 L 433.75,224.3125 L 433.59375,224.375 L 429.4375,226.125 L 426.84375,229.9375 L 426.6875,230.15625 L 426.4375,230.15625 C 426.4375,230.15625 421.79019,230.15626 420.71875,230.15625 C 420.64534,230.15625 420.49637,230.19113 420.3125,230.375 C 420.12863,230.55887 419.91521,230.86713 419.75,231.15625 C 419.41957,231.7345 419.21875,232.3125 419.21875,232.3125 L 419.15625,232.5 L 418.96875,232.59375 L 415.8125,234.15625 L 412.3125,237.6875 L 412.09375,237.46875 L 412.09375,241 L 414.0625,242.46875 L 414.125,242.53125 L 414.1875,242.59375 L 416.15625,246 L 419.1875,249.5625 L 419.21875,249.59375 L 423.125,251.90625 L 423.1875,251.9375 L 423.21875,252 L 426.34375,255.46875 L 426.375,255.46875 L 428.40625,256.84375 L 433.21875,258.8125 L 433.78125,259.0625 L 433.75,259.09375 C 434.13749,259.09501 434.49191,259.08338 434.96875,259.09375 C 435.33555,259.10172 435.69345,259.10661 436,259.125 C 436.30655,259.14339 436.53813,259.16578 436.75,259.21875 C 437.11668,259.31042 437.5153,259.52817 437.90625,259.8125 C 438.2972,260.09683 438.6847,260.4305 438.875,260.90625 C 439.09731,261.46209 439.79396,263.11783 439.90625,263.375 C 440.02855,263.42917 440.34908,263.56517 440.84375,263.8125 C 441.42521,264.10323 442.02113,264.39614 442.40625,264.78125 C 442.77662,265.15164 443.08297,265.71222 443.375,266.3125 C 443.66703,266.91278 443.93196,267.51741 444.0625,267.84375 C 444.08081,267.88952 444.26299,268.29304 444.53125,268.71875 C 444.79951,269.14446 445.13865,269.6611 445.46875,270.15625 C 446.11656,271.12796 446.727,271.99789 446.75,272.03125 C 446.75044,272.03189 446.78125,272.0625 446.78125,272.0625 L 448.625,274.46875 L 450.625,273.25 C 450.67824,273.09167 450.90196,272.38461 451.25,271.5 C 451.44253,271.01066 451.67229,270.52408 451.875,270.125 C 451.97635,269.92546 452.07949,269.74452 452.1875,269.59375 C 452.29551,269.44298 452.36281,269.26867 452.6875,269.1875 C 452.87346,269.14101 453.18851,269.01141 453.59375,268.96875 C 453.99899,268.92609 454.52754,269.05879 454.9375,269.46875 C 455.59239,270.12365 456.14798,270.8125 457.46875,270.8125 C 458.26803,270.8125 458.86573,270.92441 459.25,270.96875 C 459.63427,271.01309 459.70396,271.0189 459.8125,270.9375 C 459.81077,270.9388 460.00256,270.747 460.15625,270.5 C 460.30994,270.253 460.47097,269.92537 460.625,269.625 C 460.91633,269.05691 461.13127,268.58716 461.15625,268.53125 C 461.15625,268.53125 461.18657,268.47207 461.1875,268.46875 C 461.20373,268.41072 461.31619,267.92695 461.53125,267.3125 C 461.64492,266.98772 461.79692,266.65046 461.9375,266.34375 C 462.07808,266.03704 462.21547,265.75327 462.4375,265.53125 C 462.74896,265.21977 463.14461,264.96074 463.5625,264.6875 C 463.98039,264.41426 464.4098,264.13015 464.625,263.96875 C 464.8926,263.76805 465.16578,263.73494 465.4375,263.6875 C 465.70922,263.64006 465.97246,263.60596 466.21875,263.5625 C 466.46504,263.51904 466.69181,263.45763 466.78125,263.40625 C 466.87069,263.35487 466.8125,263.4174 466.8125,263.375 C 466.81251,262.5272 466.8125,261.95508 466.8125,261.90625 L 466.8125,261.84375 L 466.21875,260.125 L 466.03125,259.53125 L 466.65625,259.46875 L 470.0625,259.15625 L 469.84375,255.4375 L 469.84375,255.375 L 469.84375,255.34375 L 470.125,253.8125 L 470.15625,253.5625 L 470.375,253.46875 L 473.5,251.78125 L 474.28125,250.21875 L 474.40625,247.9375 L 474.40625,247.78125 L 474.53125,247.625 L 476.375,245.53125 L 470.84375,245.3125 L 470.375,245.28125 L 470.34375,244.84375 L 470.21875,243.0625 L 470.21875,243.03125 L 470.21875,240.53125 L 470.21875,240.3125 L 470.375,240.1875 L 472.875,237.40625 L 473.09375,235.15625 L 469.40625,232.34375 L 466.25,229.9375 L 466.25,229.90625 L 466.21875,229.875 C 466.21875,229.875 465.76575,229.46416 465.375,228.9375 C 465.17963,228.67417 465.00258,228.3702 464.875,228.0625 C 464.74742,227.7548 464.64915,227.37641 464.875,227 C 465.02393,226.75179 465.23453,226.51547 465.5,226.25 C 465.76547,225.98453 466.07865,225.70181 466.375,225.4375 C 466.81749,225.04285 467.03696,224.87038 467.21875,224.71875 L 466.5625,223.34375 L 463.71875,221.09375 L 463.625,221 L 463.5625,220.84375 L 462.71875,218.4375 L 460.59375,216.40625 C 460.59375,216.40625 460.53406,216.377 460.53125,216.375 C 460.45909,216.32357 459.54576,215.69234 458.96875,215.5 C 458.69273,215.40799 457.87327,215.24976 457.1875,215.15625 C 456.50173,215.06274 455.90625,215 455.90625,215 L 455.84375,215 L 455.78125,214.96875 L 452.5,213.84375 L 452.46875,213.8125 L 450.3125,212.8125 L 450.1875,212.75 L 450.09375,212.625 L 448.8125,210.5 L 446.34375,209.53125 zM 82.4375,215.0625 L 80.90625,215.84375 L 80.875,215.84375 L 80.8125,215.875 L 77.625,216.71875 L 74.78125,218.71875 L 72.5,220.21875 L 72.375,220.3125 L 72.25,220.3125 L 70.15625,220.4375 L 67.0625,221.875 L 67,221.90625 L 65.25,223.59375 L 65.1875,223.625 L 65.125,223.65625 L 62.28125,225.03125 L 62.71875,225.5625 L 62.84375,225.75 L 62.8125,225.9375 L 62.65625,227.21875 L 63.78125,227.78125 L 63.84375,227.78125 L 63.90625,227.84375 L 66.5625,230.15625 L 66.6875,230.25 L 66.71875,230.375 L 67.4375,232.53125 L 67.46875,232.65625 L 67.46875,232.75 L 66.90625,235.8125 L 66.875,236.0625 L 66.625,236.1875 L 63.4375,237.5 L 63,238.8125 L 62.8125,240.125 L 62.8125,240.1875 L 62.8125,240.25 L 63,241.59375 L 64.15625,243.0625 L 70,243.0625 L 70.1875,243.0625 L 70.3125,243.1875 L 72.25,244.78125 L 72.28125,244.78125 L 75.28125,246.90625 L 75.53125,247.09375 L 75.5,247.40625 L 75.125,249.53125 L 75.09375,249.875 L 74.75,249.9375 L 71.25,250.8125 L 71.1875,250.84375 L 68.25,252.0625 L 68.21875,252.0625 L 66.90625,252.71875 L 67.21875,253.34375 L 67.28125,253.46875 L 67.28125,253.5625 L 67.28125,255.90625 L 67.28125,256.03125 L 67.21875,256.15625 L 65.96875,258.125 L 65.75,258.4375 L 65.40625,258.34375 L 62.90625,257.625 L 62.875,257.625 L 60.6875,256.9375 L 59.4375,257.28125 L 59.40625,257.28125 L 57.25,258.53125 L 56.78125,262.625 L 59.03125,264.25 L 59.0625,264.25 L 62.46875,267.125 L 62.59375,267.21875 L 62.625,267.375 L 63.6875,271.125 L 63.71875,271.1875 L 63.71875,271.25 L 63.71875,272.625 L 65.15625,273.90625 L 65.25,274 L 65.28125,274.125 L 65.71875,275.375 L 73,275.03125 L 73.1875,275.03125 L 73.3125,275.125 L 74.6875,276.09375 L 75.125,275.4375 L 75.34375,275.09375 L 75.71875,275.25 L 78.03125,276.125 L 78.34375,276.25 L 78.34375,276.59375 L 78.34375,278.03125 L 78.34375,278.25 L 78.21875,278.375 L 76.8125,279.78125 L 76.78125,279.8125 L 75.75,281.03125 L 75.59375,281.1875 L 75.375,281.21875 L 71.8125,281.40625 L 71.6875,281.40625 L 71.59375,281.34375 L 69.84375,280.5625 L 67.78125,282.03125 L 67.6875,282.09375 L 67.5625,282.09375 L 63.8125,282.46875 L 63.75,282.46875 L 63.71875,282.46875 L 56.59375,282.09375 L 56.5,282.09375 L 56.4375,282.09375 L 54.84375,281.53125 L 54.53125,281.4375 L 54.5,281.125 L 54.34375,279.28125 L 52.875,278.75 L 51.125,279.625 L 50.125,284.03125 L 49.9375,284.90625 L 49.28125,284.28125 L 47.6875,282.6875 L 47.53125,282.53125 L 47.53125,282.28125 L 47.71875,279.28125 L 47.1875,278.625 L 45.78125,277.53125 L 45.40625,277.25 L 45.65625,276.875 L 46.4375,275.65625 L 45.78125,275.25 L 45.5625,275.09375 L 45.5625,274.8125 L 45.5625,273.21875 L 45.5625,272.71875 L 46.0625,272.71875 L 48.65625,272.71875 L 48.75,271.5625 L 47.125,269.59375 L 47.09375,269.5625 L 47.0625,269.53125 L 45.8125,267.1875 L 45.78125,267.15625 L 45.78125,267.125 L 44.71875,264.28125 L 43.6875,261.4375 L 39.84375,259.84375 L 39.03125,260.40625 L 38.96875,260.4375 L 38.9375,260.46875 L 36.84375,261.28125 L 36.40625,264.03125 L 37.4375,266.40625 L 37.4375,266.46875 L 37.46875,266.5 L 38.125,270.0625 L 39.75,271.375 L 39.78125,271.40625 L 43.5,274.0625 L 43.71875,274.21875 L 43.71875,274.5 L 43.53125,277.875 L 43.5,278.34375 L 43.03125,278.34375 L 41.9375,278.34375 L 40.625,280.9375 L 40.5625,281.09375 L 40.375,281.15625 L 38.15625,282.1875 L 38.0625,282.25 L 35.65625,283.96875 L 35.5625,284.03125 L 35.4375,284.0625 L 33.46875,284.40625 L 33,284.5 L 32.90625,284.03125 L 32.59375,282.5625 L 31.59375,282.34375 L 29.78125,284.28125 L 32.1875,287 L 32.71875,286.5625 L 32.9375,286.40625 L 33.21875,286.5 L 35.71875,287.375 L 35.75,287.40625 L 35.78125,287.4375 L 39.375,289.5625 L 39.40625,289.59375 L 39.4375,289.625 L 42.28125,291.9375 L 42.46875,292.09375 L 42.46875,292.34375 L 42.3125,295.25 L 43.875,295.40625 L 43.96875,295.40625 L 45.46875,295.25 L 45.9375,291.1875 L 46,290.75 L 46.4375,290.75 L 49.09375,290.75 L 54.28125,290.75 L 54.53125,290.75 L 54.6875,290.96875 L 55.9375,292.75 L 55.96875,292.75 L 57.90625,295.8125 L 57.9375,295.84375 L 57.96875,295.875 L 59.375,299.09375 L 59.40625,299.15625 L 59.4375,299.21875 L 59.875,302.09375 L 61.03125,301.53125 L 61.15625,301.4375 L 61.3125,301.46875 L 66.6875,302.1875 L 66.8125,302.1875 L 66.9375,302.28125 L 69.78125,304.59375 L 73.375,307.375 L 73.4375,307.40625 L 77.65625,308.8125 L 79.8125,309.53125 L 80.15625,309.625 L 80.15625,310 L 80.15625,315.1875 L 80.15625,315.28125 L 80.09375,315.375 L 79.53125,316.8125 L 81.09375,317.3125 L 82.75,317.90625 L 85.6875,317.46875 C 85.777176,317.36064 86.569431,316.42441 87.5,315.34375 C 87.991268,314.77325 88.516242,314.20737 88.9375,313.75 C 89.148129,313.52132 89.309462,313.31183 89.46875,313.15625 C 89.628038,313.00067 89.721573,312.92047 89.9375,312.8125 C 89.966874,312.79781 90.204483,312.61307 90.46875,312.40625 C 90.733017,312.19943 91.046547,311.93778 91.34375,311.6875 C 91.938156,311.18695 92.46875,310.71875 92.46875,310.71875 L 92.59375,310.625 L 92.75,310.59375 C 92.75,310.59375 93.934576,310.48602 95.1875,310.375 C 95.813962,310.31949 96.463672,310.24888 97,310.21875 C 97.268164,310.20368 97.486538,310.18934 97.6875,310.1875 C 97.888462,310.18566 98.050266,310.18506 98.21875,310.21875 C 98.628018,310.3006 98.828604,310.54974 99.125,310.8125 C 99.421396,311.07526 99.738935,311.39519 100.0625,311.71875 C 100.38606,312.04231 100.69134,312.34613 100.96875,312.59375 C 101.24616,312.84137 101.53912,313.02346 101.5625,313.03125 C 101.83855,313.12326 103.05523,313.40475 104.125,313.625 C 105.1283,313.83156 105.92067,313.97855 106.03125,314 L 115.09375,313.5 L 115.125,313.5 L 117.875,312.28125 L 117.96875,312.25 L 118.0625,312.25 C 118.0625,312.25 119.07894,312.26497 120.15625,312.3125 C 120.69491,312.33626 121.26249,312.37623 121.71875,312.40625 C 122.17501,312.43627 122.45932,312.43514 122.71875,312.5 C 122.89519,312.54411 123.56079,312.67164 124.125,312.75 C 124.62374,312.81927 124.96469,312.86268 125.0625,312.875 C 125.07534,312.87662 125.1875,312.875 125.1875,312.875 L 128.6875,312.375 L 128.71875,312.375 L 130.78125,311.5625 L 132.15625,309.8125 L 132.1875,309.78125 L 133.625,306.25 L 133.6875,306.15625 L 133.75,306.0625 L 134.625,305.1875 L 134.84375,304.96875 L 135.125,305.0625 L 136.96875,305.6875 L 137.03125,305.6875 L 137.03125,305.71875 C 137.08962,305.72974 138.47393,305.96473 140.15625,307 C 140.86856,307.43834 141.24453,307.37263 141.5,307.25 C 141.75547,307.12737 141.875,306.9375 141.875,306.9375 L 142.59375,305.21875 L 143.8125,302.34375 L 143.5625,299.59375 L 141.8125,296.6875 L 138.875,294.84375 L 138.84375,294.84375 L 136.21875,292.90625 L 136.15625,292.90625 L 133.6875,292.15625 L 126.625,291.78125 L 126.3125,291.75 L 126.1875,291.46875 L 125.5625,290.09375 L 124.03125,286.4375 L 120.53125,285.96875 L 120.5,285.96875 L 120.46875,285.9375 L 117.65625,285.21875 L 114.09375,285 L 113.625,289.9375 L 113.625,290.0625 L 113.53125,290.1875 L 112.15625,292.0625 L 111.875,292.4375 L 111.5,292.21875 L 109.21875,290.8125 L 109.125,290.75 L 109.0625,290.65625 L 107.8125,288.78125 L 105.65625,285.75 L 105.625,285.6875 L 105.59375,285.625 L 104.78125,283.15625 L 102.03125,281.53125 L 102,281.53125 L 98.25,280.65625 L 98.15625,280.625 L 98.09375,280.59375 L 95.0625,278.5625 L 95,278.53125 L 94.96875,278.46875 L 92.4375,275.71875 L 90.40625,274.0625 L 87.15625,273.34375 L 87.125,273.3125 L 87.09375,273.3125 L 83.3125,272.1875 L 83.125,272.125 L 83.03125,271.9375 C 83.03125,271.9375 82.714231,271.3203 82.3125,270.625 C 81.910769,269.9297 81.356879,269.13073 81.125,268.9375 C 80.773977,268.64498 80.67084,268.19914 80.65625,267.8125 C 80.64166,267.42586 80.727616,267.0525 80.8125,266.6875 C 80.955514,266.07254 81.124272,265.68727 81.1875,265.53125 L 80.5,263.21875 L 80.46875,263.125 L 79.125,260.5 L 79.09375,260.4375 L 76.65625,257.78125 L 76.5625,257.65625 L 76.53125,257.53125 L 76.03125,254.375 L 76,254.125 L 76.15625,253.9375 L 77.75,252.21875 L 77.78125,252.1875 L 80.15625,248.6875 L 80.25,248.53125 L 80.4375,248.5 L 84.09375,247.59375 L 84.125,247.59375 L 84.15625,247.59375 L 88.4375,246.96875 L 92.53125,246.21875 L 96.09375,244.0625 L 98.125,240.75 L 98,238.125 L 97.15625,236.03125 L 97.125,235.96875 L 97.09375,235.875 L 96.71875,230.71875 L 96.71875,230.6875 L 96.71875,230.65625 L 96.71875,225.28125 L 96.71875,225.25 L 96,223.6875 L 96,223.65625 L 93.9375,221.28125 L 93.84375,221.125 L 93.8125,220.96875 L 93.71875,218.625 L 93.40625,218.5 L 88.15625,216.75 L 88.09375,216.75 L 84.25,215.875 L 84.1875,215.875 L 84.125,215.84375 L 82.4375,215.0625 zM 95.21875,216.28125 L 94.53125,217.40625 L 94.6875,217.40625 L 94.8125,220.71875 L 96.84375,223.15625 L 96.90625,223.21875 L 96.9375,223.28125 L 97.6875,225.03125 L 97.71875,225.125 L 97.71875,225.25 L 97.71875,230.625 L 97.71875,230.65625 L 98.09375,235.71875 L 98.9375,237.8125 L 99,237.875 L 99,237.96875 L 99.125,240.875 L 99.125,241.03125 L 99.03125,241.15625 L 96.90625,244.6875 L 96.84375,244.78125 L 96.71875,244.875 L 92.9375,247.125 L 92.875,247.1875 L 92.78125,247.1875 L 88.59375,247.96875 L 84.34375,248.59375 L 84.28125,248.59375 L 80.84375,249.4375 L 78.5625,252.78125 L 78.5625,252.8125 L 78.53125,252.84375 L 77.03125,254.4375 L 77.5,257.21875 L 79.90625,259.875 L 79.96875,259.9375 L 80,260 L 81.375,262.78125 L 81.40625,262.8125 L 81.40625,262.84375 L 82.1875,265.375 L 82.21875,265.53125 L 82.15625,265.71875 C 82.15625,265.71875 81.927154,266.27886 81.78125,266.90625 C 81.708298,267.21994 81.647165,267.54049 81.65625,267.78125 C 81.665335,268.02201 81.722216,268.1331 81.75,268.15625 C 82.275735,268.59436 82.737232,269.39978 83.15625,270.125 C 83.518247,270.75153 83.740528,271.13905 83.8125,271.28125 L 87.375,272.375 L 87.375,272.34375 L 90.78125,273.125 L 90.875,273.125 L 90.96875,273.21875 L 93.125,274.96875 L 93.15625,275 L 93.1875,275.03125 L 95.625,277.71875 L 98.625,279.71875 L 98.65625,279.75 L 102.25,280.5625 L 102.34375,280.59375 L 102.40625,280.625 L 105.4375,282.375 L 105.59375,282.46875 L 105.65625,282.65625 L 106.5,285.25 L 106.53125,285.3125 L 108.625,288.21875 L 109.84375,290.03125 L 111.625,291.125 L 112.625,289.71875 L 113.15625,284.40625 L 113.1875,283.9375 L 113.6875,283.96875 L 117.71875,284.21875 L 117.75,284.21875 L 117.8125,284.21875 L 120.65625,284.96875 L 124.4375,285.46875 L 124.71875,285.53125 L 124.84375,285.78125 L 126.46875,289.6875 L 126.96875,290.78125 L 133.75,291.15625 L 133.8125,291.15625 L 133.84375,291.1875 L 136.5,291.9375 L 136.59375,291.96875 L 136.65625,292 L 139.40625,294 L 139.4375,294.03125 L 142.4375,295.90625 L 142.53125,295.96875 L 142.59375,296.0625 L 144.5,299.21875 L 144.5625,299.3125 L 144.5625,299.4375 L 144.8125,302.34375 L 144.84375,302.46875 L 144.78125,302.59375 L 143.53125,305.625 L 142.96875,306.90625 L 147.0625,307 L 147.15625,307 L 147.25,307.03125 L 150.1875,308.28125 L 153.34375,309.5625 L 155.40625,306.9375 L 157.625,303.90625 L 159.96875,300.84375 L 160.0625,300.71875 L 160.25,300.65625 L 161.5,300.4375 L 161.5625,300.40625 L 161.59375,300.40625 L 164.21875,299.34375 L 164.875,298.59375 L 163.84375,296.34375 L 163.8125,296.3125 L 161,293.5625 L 160.90625,293.5 L 160.875,293.375 L 160.0625,291.25 L 159.96875,290.96875 L 160.15625,290.75 L 160.8125,290.03125 C 160.8125,290.03125 160.872,289.9435 160.875,289.9375 C 160.95718,289.77315 162.04647,287.53206 162.21875,287.1875 C 162.21122,287.20257 162.31053,286.99176 162.375,286.75 C 162.43947,286.50824 162.49627,286.19324 162.5625,285.90625 C 162.68776,285.36345 162.80137,284.92824 162.8125,284.875 L 162.8125,284.8125 L 163.34375,277.375 L 163.34375,277.34375 L 163.34375,277.3125 L 163.71875,275.5625 L 163.6875,275.5625 L 163.96875,273.34375 L 163.96875,273.21875 L 164.0625,273.09375 L 164.84375,271.9375 L 164.90625,271.84375 L 165,271.8125 L 166.78125,270.71875 L 166.84375,270.71875 L 166.875,270.6875 L 169.125,269.875 L 169.15625,269.875 L 171.21875,269.34375 L 171.25,269.3125 L 171.3125,269.3125 L 174.8125,269.09375 L 176.125,267.375 L 176.125,267.34375 L 177.96875,265.1875 L 177.65625,263.40625 L 177.65625,263.375 L 176.4375,260.75 L 174.25,258.96875 L 174.0625,258.8125 L 174.0625,258.59375 L 173.875,255.78125 L 173.875,255.75 L 173.5625,253.9375 L 171.40625,252.96875 L 171.09375,252.8125 L 171.09375,252.5 C 171.09375,252.5 171.09374,251.60716 171.09375,251.25 C 171.09375,251.06994 171.1488,250.98811 171.1875,250.875 C 171.2262,250.76189 171.28612,250.633 171.34375,250.5 C 171.45902,250.23401 171.60262,249.95102 171.75,249.65625 C 171.98138,249.19349 172.13037,248.91478 172.21875,248.75 C 172.17372,248.62179 172.01625,248.12133 171.71875,247.46875 C 171.5518,247.10254 171.37102,246.75339 171.1875,246.46875 C 171.00398,246.18411 170.79059,246.00415 170.78125,246 C 170.16279,245.72513 169.82991,245.14831 169.5,244.625 C 169.17009,244.10169 168.83815,243.59736 168.625,243.4375 C 168.48386,243.33165 167.84689,243.1875 167.28125,243.1875 C 166.76534,243.1875 166.38755,243.24082 166.3125,243.25 L 163.71875,244.0625 L 163.625,244.0625 L 163.5625,244.0625 L 161.5,243.96875 L 161.28125,243.96875 L 161.125,243.8125 L 160.3125,242.8125 L 160.21875,242.6875 L 160.21875,242.53125 L 160.03125,239.9375 L 160.03125,239.90625 L 160.09375,237.9375 L 157.875,238.34375 L 157.8125,238.34375 C 157.76216,238.36049 157.06737,238.59688 156.21875,238.84375 C 155.33972,239.09947 154.41367,239.375 153.78125,239.375 C 152.90974,239.37501 147.34599,239.375 147.1875,239.375 C 147.09118,239.42271 146.79544,239.58364 146.34375,239.78125 C 146.0842,239.8948 145.81887,240.00402 145.5625,240.09375 C 145.30613,240.18348 145.11585,240.25 144.84375,240.25 C 144.65498,240.25 144.40042,240.24414 144.0625,240.21875 C 143.72458,240.19336 143.30874,240.16384 142.90625,240.15625 C 142.50376,240.14866 142.12342,240.14112 141.8125,240.1875 C 141.50158,240.23388 141.29177,240.36448 141.28125,240.375 C 140.80059,240.85566 140.04369,241.09958 139.34375,241.34375 C 138.64381,241.58792 138,241.75 138,241.75 L 137.9375,241.78125 L 137.875,241.78125 L 133.21875,241.78125 L 132.96875,241.78125 L 132.8125,241.59375 L 130.5625,238.8125 L 130.53125,238.78125 L 128.375,235.625 L 126.09375,233.84375 L 124.0625,232.1875 L 123.96875,232.125 L 123.9375,232.03125 L 122.5625,229.15625 L 122.53125,229.125 L 121.0625,226.78125 L 120.96875,226.65625 L 120.96875,226.53125 L 120.625,222.125 L 117.375,222.5625 L 117.3125,222.59375 L 117.28125,222.59375 L 113.34375,222.34375 L 113.21875,222.3125 L 113.09375,222.21875 L 111.84375,221.3125 L 105.9375,221.3125 L 105.8125,221.3125 L 105.71875,221.28125 L 103.4375,220.125 L 103.375,220.09375 L 103.3125,220.03125 L 100.28125,217.09375 L 100.21875,217.0625 L 98.75,216.28125 L 95.21875,216.28125 zM 763,218.53125 L 758.46875,221.3125 L 758.375,221.375 L 758.28125,221.375 L 752.40625,222.28125 L 752.25,222.3125 L 752.09375,222.25 L 747.65625,220.09375 L 744.96875,218.84375 L 743.375,220.8125 L 743.875,221.21875 L 744.21875,221.5 L 744,221.875 L 743.09375,223.3125 L 743.03125,223.40625 L 742.9375,223.46875 L 738.03125,226.25 L 738,226.28125 L 734.8125,229.625 L 734.65625,229.8125 L 734.4375,229.78125 L 731.40625,229.59375 L 731.0625,229.59375 L 730.9375,229.25 L 730.40625,227.46875 L 729.71875,225.25 L 726.34375,227.5625 L 726.28125,227.625 L 726.15625,227.625 L 721.34375,228.53125 L 719.0625,229.21875 L 718.90625,229.28125 L 718.75,229.21875 L 715.40625,228.03125 L 711.46875,230.09375 L 711.40625,230.125 L 711.34375,230.125 L 706.5625,231.15625 L 704,235.78125 L 703.90625,235.9375 L 703.71875,236 L 701.15625,236.875 L 698.375,239.46875 L 698,239.8125 L 697.65625,239.4375 L 696.3125,237.9375 L 693.875,239 L 692.15625,241.53125 L 692.84375,243.25 L 697.3125,243.25 L 697.71875,243.25 L 697.8125,243.625 L 698.34375,245.96875 L 698.4375,246.3125 L 698.09375,246.5 L 695.25,248.125 L 695.21875,248.125 L 695.15625,248.15625 L 691.78125,249.28125 C 691.75622,249.46976 691.68314,249.9346 691.53125,250.625 C 691.44133,251.03375 691.35946,251.45068 691.21875,251.8125 C 691.09032,252.14275 690.96289,252.46093 690.59375,252.65625 C 690.58038,252.66519 690.55126,252.69825 690.5,252.71875 C 690.53487,252.7048 690.56266,252.70336 690.59375,252.6875 C 690.57176,252.73755 690.5226,252.85436 690.5,253 C 690.4548,253.29128 690.42989,253.71438 690.4375,254.125 C 690.45126,254.86773 690.54797,255.46127 690.5625,255.59375 L 692.84375,258.25 L 692.9375,258.375 L 692.96875,258.53125 L 693.3125,262.25 C 693.55741,262.25125 693.72072,262.23963 694.1875,262.25 C 694.62198,262.25965 694.96279,262.28675 695.34375,262.3125 C 695.12236,262.00873 694.84375,261.6875 694.84375,261.6875 L 694.53125,261.28125 L 694.9375,260.96875 L 696.0625,260.0625 L 696.125,260.03125 L 696.21875,260 L 698.625,259.21875 L 700.1875,258.75 L 699.15625,260.03125 L 698.25,261.15625 C 698.24605,261.28746 698.23559,262.05404 698.25,263.0625 C 698.2578,263.60806 698.27254,264.16525 698.3125,264.65625 C 698.34424,265.04622 698.38955,265.30071 698.4375,265.5 C 698.45583,265.48033 698.45086,265.49134 698.46875,265.46875 C 698.71917,265.15242 698.96875,264.65625 698.96875,264.65625 L 699.03125,264.53125 L 699.15625,264.46875 L 702.4375,262.4375 L 702.6875,262.28125 L 702.9375,262.4375 C 702.9375,262.4375 703.39916,262.71755 703.84375,263.09375 C 704.06605,263.28185 704.28038,263.50366 704.46875,263.75 C 704.65712,263.99634 704.84375,264.25504 704.84375,264.625 C 704.8868,264.65027 705.02905,264.72601 705.25,264.78125 C 705.72179,264.8992 706.49948,265.03548 707.4375,265.4375 C 709.22112,266.2019 709.86937,266.55511 710.375,266.65625 C 710.3694,266.65513 710.82571,266.70496 711.34375,266.6875 C 711.86179,266.67004 712.50431,266.63304 713.125,266.59375 C 714.30229,266.51924 715.29493,266.41522 715.40625,266.40625 L 716.53125,265.625 L 717.125,265.21875 L 717.3125,265.875 C 717.3125,265.875 717.59376,266.78751 717.59375,267.65625 C 717.59375,267.9795 717.55694,267.93945 717.6875,268.09375 C 717.81806,268.24805 718.16339,268.53149 718.625,269.125 C 718.84282,269.40506 718.96487,269.56103 719.03125,269.625 C 719.06444,269.65698 719.07586,269.65618 719.0625,269.65625 C 719.11501,269.63669 719.47015,269.56278 720.09375,269.6875 C 721.62045,269.99283 722.59807,271.31945 724.28125,272.28125 C 725.17626,272.79269 725.64088,273.12567 726.0625,273.34375 C 726.48412,273.56183 726.88773,273.69044 727.6875,273.875 C 728.04131,273.95665 728.21233,273.93842 728.3125,273.90625 C 728.41267,273.87408 728.47056,273.8387 728.53125,273.75 C 728.59194,273.6613 728.63242,273.51874 728.71875,273.34375 C 728.80508,273.16876 728.92849,272.92637 729.21875,272.78125 C 729.81327,272.484 731.02832,272.05464 732.34375,270.5 C 732.98366,269.74374 733.23092,269.0813 733.34375,268.53125 C 733.45658,267.9812 733.42296,267.58948 733.53125,267.15625 C 733.50721,267.25243 733.51967,267.19078 733.5,267.09375 C 733.48033,266.99672 733.4275,266.84775 733.375,266.6875 C 733.27001,266.367 733.13154,265.98134 732.96875,265.59375 C 732.65695,264.85138 732.3397,264.21332 732.3125,264.15625 L 730.375,262.34375 L 729.40625,261.4375 L 730.75,261.46875 C 730.75,261.46875 733.78877,261.59376 734.625,261.59375 C 735.28123,261.59375 735.74592,262.04161 735.96875,262.40625 C 736.19159,262.77091 736.25,263.125 736.25,263.125 L 736.28125,263.21875 L 736.28125,263.28125 L 735.90625,268.1875 L 741.5,268.0625 L 741.5625,268.0625 L 744.78125,267.5625 L 744.8125,267.53125 L 744.875,267.53125 L 746.5625,267.53125 L 746.5625,267.4375 C 746.5625,267.4375 747.30777,267.34847 747.78125,266.875 C 748.08533,266.57092 748.17696,266.46727 748.28125,266.25 C 748.38554,266.03273 748.49466,265.65461 748.71875,264.9375 C 748.94763,264.2051 749.12399,263.82127 749.3125,263.53125 C 749.48923,263.25936 749.63985,263.10967 749.78125,262.96875 C 749.78719,262.96196 749.79965,262.94696 749.8125,262.90625 C 749.8382,262.82484 749.88007,262.6832 749.90625,262.53125 C 749.9586,262.22736 750.0041,261.83926 750.03125,261.4375 C 750.0584,261.03574 750.06116,260.63227 750.0625,260.3125 C 750.06317,260.15262 750.06732,260.00907 750.0625,259.90625 C 750.05768,259.80343 750.05166,259.70666 750.0625,259.75 C 750.05828,259.73312 749.99125,259.66031 749.84375,259.53125 C 749.69625,259.40219 749.48909,259.25378 749.25,259.0625 C 748.96965,258.83822 748.8102,258.55443 748.75,258.34375 C 748.6898,258.13307 748.66661,258.02073 748.5625,257.8125 C 748.34433,257.37617 748.06691,257.16403 747.34375,256.53125 C 746.81678,256.07015 746.79182,255.39501 746.875,254.9375 C 746.95818,254.47999 747.15625,254.15625 747.15625,254.15625 C 747.15625,254.15625 747.6663,253.05952 748.25,252.28125 C 748.57986,251.84143 749.06129,251.54542 749.625,251.375 C 750.18871,251.20458 750.83109,251.1408 751.625,251.1875 C 752.01651,251.21053 752.28133,251.25832 752.5,251.3125 C 752.51425,251.31603 752.517,251.33963 752.53125,251.34375 L 752.53125,248.5625 L 752.1875,247.0625 L 752.1875,247.03125 L 752.1875,246.96875 L 752.1875,243.40625 L 752.1875,243.25 L 752.25,243.15625 C 752.25,243.15625 753.1193,241.49431 754.3125,240.5 C 754.6824,240.19175 754.72898,239.82443 754.65625,239.40625 C 754.58352,238.98807 754.375,238.625 754.375,238.625 L 754.0625,238.0625 L 754.71875,237.90625 L 756.3125,237.5625 L 756.34375,237.53125 L 756.40625,237.53125 C 756.40625,237.53125 758.85859,237.34374 759.65625,237.34375 C 759.66815,237.34375 759.80068,237.30852 760,237.1875 C 760.19932,237.06648 760.45564,236.8958 760.71875,236.6875 C 761.24498,236.2709 761.84358,235.75008 762.46875,235.4375 C 763.54861,234.89756 765.83549,233.93207 765.96875,233.875 L 766.0625,233.8125 L 767.96875,232.5 L 767.03125,229.4375 L 766.90625,229.125 L 767.1875,228.90625 L 771.65625,225.3125 L 771.6875,225.3125 L 771.71875,225.28125 L 775.90625,222.9375 L 775.78125,221.8125 L 773.1875,218.90625 L 763,218.53125 zM 957.5,220.625 C 957.34711,220.66495 957.08024,220.73084 956.65625,220.875 C 956.38945,220.96571 956.12817,221.09216 955.9375,221.1875 C 955.7945,221.25901 955.6944,221.34209 955.6875,221.3125 C 955.60979,221.49779 955.52524,221.66925 955.375,221.90625 C 955.20912,222.16793 954.98138,222.47549 954.78125,222.78125 C 954.58112,223.08701 954.40576,223.39978 954.25,223.65625 C 954.09424,223.91272 953.97914,224.15634 953.96875,224.1875 C 953.81809,224.63939 953.16918,226.92104 953.15625,226.96875 L 953.15625,227 L 952.625,229.5625 L 952.59375,229.71875 L 952.5,229.8125 C 952.5,229.8125 951.97421,230.3127 951.40625,230.8125 C 951.12227,231.0624 950.82288,231.33372 950.5625,231.53125 C 950.43231,231.63002 950.30504,231.71136 950.1875,231.78125 C 950.06996,231.85114 949.99256,231.9375 949.71875,231.9375 C 949.54912,231.9375 949.48122,231.88124 949.375,231.84375 C 949.26878,231.80626 949.14893,231.77306 949.03125,231.71875 C 948.7959,231.61013 948.53238,231.48073 948.28125,231.34375 C 947.779,231.06979 947.34375,230.78125 947.34375,230.78125 L 947.3125,230.78125 L 947.28125,230.75 L 945.40625,229.21875 L 942.78125,227.03125 C 942.62613,227.05221 942.4148,227.07591 942.03125,227.09375 C 941.7753,227.10565 941.53466,227.12478 941.28125,227.09375 C 941.02784,227.06272 940.74497,227.04536 940.5,226.71875 C 940.53301,226.76276 940.27371,226.54127 940,226.3125 C 939.72629,226.08373 939.40073,225.7974 939.0625,225.53125 C 938.38605,224.99896 937.71875,224.5 937.71875,224.5 L 937.6875,224.46875 L 936.0625,222.84375 L 934.71875,221.9375 C 934.60531,221.9441 933.63642,222.00957 932.5,222.09375 C 931.89993,222.1382 931.28902,222.16945 930.8125,222.21875 C 930.57424,222.2434 930.36627,222.29015 930.21875,222.3125 C 930.14499,222.32367 930.07553,222.33862 930.03125,222.34375 C 930.02396,222.34865 929.99995,222.34139 930,222.34375 C 930.00673,222.35102 929.86912,222.46517 929.6875,222.625 C 929.48681,222.80161 929.23165,223.02938 929,223.25 C 928.5367,223.69124 928.125,224.09375 928.125,224.09375 L 928.0625,224.15625 L 928,224.1875 C 928,224.1875 925.94405,225.34607 925.53125,225.59375 C 925.31246,225.72501 925.05862,225.82134 924.71875,225.9375 C 924.37888,226.05366 923.98192,226.16311 923.59375,226.28125 C 922.81741,226.51753 922.09375,226.71875 922.09375,226.71875 L 922.0625,226.75 L 919.21875,227.21875 L 918.8125,228.46875 C 919.07656,228.59204 919.48651,228.80132 920.1875,229.15625 C 920.63358,229.38211 921.08064,229.60102 921.4375,229.8125 C 921.61593,229.91824 921.77652,230.02732 921.90625,230.125 C 921.97111,230.17384 922.03468,230.22027 922.09375,230.28125 C 922.15282,230.34223 922.23465,230.40736 922.28125,230.59375 C 922.28812,230.62123 922.35309,230.84053 922.4375,231.09375 C 922.52191,231.34697 922.62601,231.64416 922.71875,231.96875 C 922.81149,232.29334 922.89292,232.65666 922.9375,232.96875 C 922.98208,233.28084 923.01258,233.53734 922.84375,233.875 C 922.67007,234.22238 922.31764,234.7948 921.96875,235.3125 C 921.6328,235.811 921.36585,236.2184 921.34375,236.25 C 921.3429,236.25122 921.3125,236.28125 921.3125,236.28125 L 920.125,239.875 L 920.0625,240.0625 L 919.90625,240.15625 L 917.875,241.5 L 914.875,244.84375 L 914.84375,244.875 L 913.28125,247.25 C 913.25143,247.32435 913.16173,247.56345 913.0625,247.90625 C 913.00579,248.10214 912.95311,248.29389 912.9375,248.4375 C 912.93126,248.49494 912.9311,248.53586 912.9375,248.5625 C 912.94037,248.5658 912.93971,248.60201 912.9375,248.59375 C 913.07588,248.77787 913.36391,249.13609 913.65625,249.46875 C 913.81124,249.64512 913.96864,249.79068 914.09375,249.90625 C 914.18758,249.99293 914.29296,250.05003 914.28125,250.0625 C 914.33566,250.06844 914.51995,250.09203 914.78125,250.125 C 915.07476,250.16203 915.44668,250.2112 915.8125,250.25 C 916.17832,250.2888 916.54914,250.31759 916.84375,250.34375 C 917.13836,250.36991 917.37946,250.40625 917.40625,250.40625 C 917.59672,250.40625 917.67141,250.42481 917.78125,250.46875 C 917.89109,250.51269 918.00304,250.59301 918.125,250.65625 C 918.36892,250.78273 918.64406,250.93415 918.90625,251.09375 C 919.38056,251.38246 919.73393,251.6041 919.8125,251.65625 L 924.34375,251.5625 L 926.28125,250.53125 L 928.625,249.375 L 931.1875,248.03125 L 931.21875,248.03125 L 933.8125,246.78125 L 933.875,246.75 L 933.96875,246.71875 C 933.96875,246.71875 934.62904,246.69004 935.40625,246.65625 C 936.18346,246.62246 937.06454,246.6053 937.625,246.65625 C 938.20042,246.70856 939.0375,246.90149 939.75,247.09375 C 940.39379,247.26747 940.80771,247.4074 940.90625,247.4375 C 940.9087,247.43825 940.9356,247.43692 940.9375,247.4375 C 940.96689,247.4383 941.7588,247.47573 942.625,247.53125 C 943.0661,247.55952 943.52749,247.57655 943.90625,247.625 C 944.09563,247.64922 944.25628,247.68493 944.40625,247.71875 C 944.55622,247.75257 944.65644,247.76576 944.84375,247.90625 C 944.93697,247.97616 945.70718,248.46318 946.375,248.875 C 947.04282,249.28682 947.65625,249.65625 947.65625,249.65625 L 947.8125,249.75 L 947.875,249.875 L 948.65625,251.5625 L 948.875,252.03125 L 948.4375,252.25 L 945.3125,253.65625 L 945.28125,253.6875 L 945.25,253.6875 L 942.25,254.71875 C 942.17766,254.81043 941.9648,255.06761 941.59375,255.46875 C 941.16464,255.93265 940.69322,256.46621 940.125,256.71875 C 939.28015,257.09424 936.61891,258.10321 936.5625,258.125 C 936.5625,258.125 936.53271,258.15552 936.53125,258.15625 C 936.49579,258.1741 936.07414,258.38065 935.625,258.65625 C 935.39119,258.79972 935.15019,258.96746 935,259.09375 C 934.92491,259.1569 934.86289,259.19395 934.84375,259.21875 C 934.80378,259.59543 934.65329,259.90442 934.5,260.15625 C 934.32702,260.44044 934.15625,260.65625 934.15625,260.65625 L 933.78125,261.15625 L 933.375,260.6875 C 933.375,260.6875 932.95495,260.21578 932.5,259.75 C 932.27252,259.51711 932.02663,259.27496 931.84375,259.125 C 931.7688,259.06354 931.72968,259.0268 931.6875,259 C 931.0994,259.11043 930.63224,258.99428 930.46875,259.59375 C 930.37969,259.92031 930.33273,261.03236 930.34375,261.96875 C 930.35477,262.90514 930.40625,263.71875 930.40625,263.71875 L 930.4375,264.15625 L 930,264.25 L 926.96875,264.875 L 926.15625,265.28125 L 926.3125,268.53125 L 926.3125,268.75 L 926.1875,268.90625 L 925.125,270.15625 L 925.0625,270.21875 L 925,270.25 C 925,270.25 924.98093,270.24871 924.90625,270.34375 C 924.83156,270.43881 924.72038,270.612 924.6875,270.875 C 924.64827,271.18892 924.62554,271.73712 924.65625,272.1875 C 924.6716,272.41269 924.71577,272.59357 924.75,272.71875 C 924.78423,272.84393 924.85163,272.86332 924.6875,272.78125 C 924.85513,272.86506 924.91252,272.93774 925,273.03125 C 925.08748,273.12476 925.18759,273.22333 925.28125,273.34375 C 925.46858,273.5846 925.68188,273.87226 925.875,274.15625 C 926.21615,274.65795 926.43369,275.05072 926.5,275.15625 C 926.5,275.15625 926.53006,275.18644 926.53125,275.1875 C 926.56107,275.21406 926.91111,275.55575 927.375,275.90625 C 927.61617,276.08847 927.87647,276.24979 928.09375,276.375 C 928.31103,276.50021 928.51488,276.5625 928.46875,276.5625 C 928.75742,276.56251 929.38951,276.51973 930,276.53125 C 930.61049,276.54277 931.16975,276.53801 931.65625,276.78125 C 932.07317,276.98971 932.33085,277.33693 932.53125,277.625 C 932.73165,277.91307 932.84375,278.15625 932.84375,278.15625 L 932.875,278.1875 L 933.5,279.71875 L 933.53125,279.8125 L 933.53125,279.90625 C 933.53125,279.90625 933.54247,280.64085 933.53125,281.4375 C 933.52003,282.23414 933.49723,283.05065 933.4375,283.46875 C 933.352,284.06743 933,286.9375 933,286.9375 L 932.96875,287.25 L 932.65625,287.34375 L 928.875,288.53125 C 928.875,288.53125 928.8446,288.56185 928.84375,288.5625 C 928.81159,288.5869 928.20298,289.04245 927.53125,289.5625 C 927.18647,289.82943 926.85184,290.08103 926.5625,290.3125 C 926.27316,290.54397 926.00648,290.77477 925.96875,290.8125 C 925.97523,290.80602 925.81763,291.01498 925.65625,291.28125 C 925.49487,291.54752 925.30166,291.89855 925.125,292.21875 C 924.87162,292.678 924.76678,292.88295 924.65625,293.09375 C 924.7524,293.17142 924.76525,293.17151 924.875,293.28125 C 925.0192,293.42544 925.16882,293.60013 925.28125,293.8125 C 925.39368,294.02487 925.47762,294.31714 925.375,294.625 C 925.30327,294.8402 925.21255,294.9536 925.09375,295.0625 C 924.97495,295.1714 924.8357,295.27775 924.6875,295.375 C 924.39111,295.56951 924.03226,295.73387 923.6875,295.90625 C 922.99798,296.25101 922.34375,296.53125 922.34375,296.53125 L 922.25,296.5625 L 922.15625,296.5625 C 922.15625,296.5625 918.58482,296.5625 917.78125,296.5625 C 917.19428,296.56249 916.57953,296.32102 916,296.09375 C 915.71023,295.98012 915.4289,295.86055 915.21875,295.78125 C 915.0086,295.70195 914.7872,295.6875 914.90625,295.6875 C 914.56099,295.68751 914.18044,295.57834 913.6875,295.4375 C 913.19456,295.29666 912.68703,295.12469 912.3125,294.875 C 912.09797,294.73198 911.90079,294.73095 911.65625,294.4375 C 911.41171,294.14405 911.375,293.78224 911.375,293.21875 C 911.375,292.23065 911.06739,290.84141 910.40625,290.3125 C 909.37371,289.48649 909.4123,288.44254 909.34375,288.03125 C 909.28876,287.70119 909.29067,287.52826 909.28125,287.5 C 909.27183,287.47174 909.25336,287.41616 908.9375,287.21875 C 908.52796,286.96279 908.27169,286.70196 908.0625,286.5625 C 907.85331,286.42304 907.71798,286.3407 907.375,286.375 C 906.57262,286.45524 906.4303,286.57034 905.875,286.96875 L 903.65625,289.5625 L 904.15625,295.0625 L 904.15625,295.125 L 905.46875,298.75 L 905.5,298.8125 L 905.5,298.84375 L 905.9375,301.4375 L 906,301.75 L 905.71875,301.9375 L 903.375,303.5 L 902.625,306.125 C 902.625,306.125 902.52416,306.41221 902.53125,306.625 C 902.5348,306.7314 902.55991,306.80912 902.5625,306.8125 C 902.56509,306.81588 902.5556,306.8125 902.6875,306.8125 C 903.25433,306.81249 904.18784,306.95004 905.03125,307.0625 C 905.87466,307.17496 906.59375,307.28125 906.59375,307.28125 L 907.03125,307.34375 L 907.03125,307.78125 L 906.84375,311.53125 L 906.84375,311.6875 L 906.75,311.8125 L 905.8125,313.0625 L 906.65625,317.03125 L 906.65625,317.09375 L 906.65625,317.125 L 906.75,319.40625 L 906.75,319.4375 L 907.0625,322.1875 L 913.40625,322.28125 L 913.625,322.28125 L 913.78125,322.46875 L 915.3125,324.34375 L 915.375,324.40625 L 915.40625,324.53125 L 916.1875,327.9375 L 917.15625,330.4375 L 917.21875,330.625 L 917.15625,330.78125 C 917.15625,330.78125 917.03712,331.20307 916.96875,331.59375 C 916.94185,331.74744 916.93525,331.85307 916.9375,331.9375 C 917.16894,331.95523 917.41157,331.97828 917.78125,332.03125 C 918.26064,332.09994 918.84422,332.17837 919.40625,332.25 C 919.96828,332.32163 920.50641,332.39464 920.90625,332.40625 C 921.10617,332.41205 921.25635,332.38803 921.34375,332.375 C 921.38745,332.36848 921.41673,332.33765 921.40625,332.34375 C 921.54055,332.18929 921.69107,332.08818 921.875,331.96875 C 922.11624,331.8121 922.39403,331.64087 922.6875,331.5 C 923.27445,331.21826 923.85811,331.00242 924.3125,330.9375 C 924.57433,330.9001 924.82838,330.90721 925.1875,330.9375 C 925.54662,330.96779 925.97568,331.01218 926.40625,331.0625 C 927.26739,331.16315 928.18998,331.28125 928.65625,331.28125 C 929.38641,331.28125 930.03484,331.66922 930.59375,332 C 931.15266,332.33078 931.66821,332.60549 931.84375,332.625 C 932.22241,332.66707 932.51961,332.84793 932.84375,333.0625 C 933.16789,333.27707 933.47624,333.55353 933.78125,333.8125 C 934.31975,334.26972 934.68203,334.58931 934.78125,334.6875 C 934.96712,334.71 936.8142,334.9375 937.9375,334.9375 C 939.25895,334.93749 940.41326,335.15314 940.96875,334.90625 C 941.78175,334.54492 942.81695,334.07971 943.59375,333.96875 C 943.83697,333.934 944.95471,333.71172 945.96875,333.5 C 946.90241,333.30506 947.64952,333.15319 947.78125,333.125 C 947.78125,333.125 949.38283,332.24023 950.59375,331.9375 C 951.05654,331.82181 951.70501,331.53718 952.3125,331.25 C 952.91999,330.96282 953.46719,330.65677 953.9375,330.5 C 954.86755,330.18997 955.96875,330.21875 955.96875,330.21875 L 961.125,329.9375 L 961.15625,329.9375 L 964.40625,329.9375 C 964.40937,329.93655 964.46384,329.939 964.46875,329.9375 C 964.59112,329.90027 965.13374,329.70916 965.875,329.46875 C 966.69544,329.20266 967.64601,328.88012 967.90625,328.75 C 968.57583,328.4152 970.8125,327.15625 970.8125,327.15625 L 970.84375,327.125 L 970.90625,327.125 C 970.90625,327.125 971.36079,326.93756 971.875,326.71875 C 972.38921,326.49994 973.0102,326.19184 973.09375,326.125 C 973.37728,325.89817 973.91247,325.55939 974.4375,325.1875 C 974.70001,325.00155 974.95,324.80375 975.125,324.65625 C 975.2125,324.5825 975.27584,324.509 975.3125,324.46875 C 975.39062,324.22406 975.52223,324.18666 975.625,324.09375 C 975.73719,323.99232 975.87846,323.89197 976.03125,323.78125 C 976.33684,323.55981 976.71476,323.30007 977.09375,323.0625 C 977.85173,322.58735 978.59375,322.15625 978.59375,322.15625 L 978.875,322 L 979.15625,322.1875 L 980.59375,323.375 L 980.75,323.5 L 980.75,323.6875 L 981.03125,325.65625 L 981.03125,325.6875 L 981.03125,325.71875 C 981.03125,325.71875 981.03431,326.33669 981,327 C 980.98285,327.33165 980.94721,327.66841 980.90625,327.96875 C 980.88577,328.11892 980.87686,328.2457 980.84375,328.375 C 980.81064,328.5043 980.77073,328.62861 980.65625,328.78125 C 980.51639,328.96771 980.3125,329.68688 980.3125,330 C 980.31252,330.45657 980.12009,330.73182 980.0625,330.9375 C 980.05572,330.9617 980.06552,330.95051 980.0625,330.96875 C 980.37161,331.07396 980.57756,331.20444 980.65625,331.21875 C 980.74699,331.23525 980.87315,331.25702 981.3125,330.9375 C 982.30919,330.2126 982.70193,330.00587 983.5,329.5625 C 984.32281,329.10538 984.92599,328.875 985.96875,328.875 C 986.95086,328.875 987.13393,328.875 988.5625,328.875 C 989.26638,328.875 989.7224,328.85696 990,328.78125 C 990.2776,328.70554 990.38772,328.61969 990.5625,328.375 C 990.88912,327.9177 991.38006,327.70319 991.78125,327.53125 C 992.18244,327.35931 992.52767,327.22233 992.6875,327.0625 C 992.89643,326.85358 993.04469,326.58319 993.25,326.28125 C 993.45531,325.97931 993.74293,325.62802 994.1875,325.4375 C 994.40755,325.34319 994.86964,325.02169 995.25,324.75 C 995.28906,324.7221 995.27528,324.71449 995.3125,324.6875 L 994.71875,324.25 L 994.59375,324.1875 L 994.5625,324.0625 L 992.78125,320.4375 L 986.65625,320.3125 L 986.53125,320.3125 L 986.4375,320.25 L 984.9375,319.5 L 984.71875,319.40625 L 984.65625,319.15625 L 983.53125,313.34375 L 983.5,313.1875 L 983.5625,313.03125 L 984.71875,310.75 L 984.71875,310.71875 L 986.84375,307.09375 L 986.875,307.0625 L 988.75,303.1875 L 988.75,303.15625 L 988.78125,303.125 L 990.46875,300.71875 L 990.59375,292.28125 L 990.59375,291.96875 L 990.84375,291.84375 L 993.125,290.65625 L 994.59375,288.4375 C 994.55533,288.30445 994.49066,288.08902 994.34375,287.75 C 994.25045,287.5347 994.12481,287.34078 994.03125,287.21875 C 993.93769,287.09672 993.90783,287.09375 994,287.09375 C 993.64217,287.09375 993.38352,286.90693 993.1875,286.71875 C 992.99148,286.53057 992.81911,286.33558 992.6875,286.125 C 992.62067,286.01807 992.6472,286.00513 992.59375,285.90625 L 991.8125,286.59375 L 991.625,286.75 L 991.40625,286.71875 L 987.375,286.34375 L 987.28125,286.34375 L 987.1875,286.28125 L 985.1875,285.28125 L 984.9375,285.15625 L 984.90625,284.875 L 984.40625,276.625 L 983.65625,273.71875 L 983.625,273.53125 L 983.6875,273.375 L 984.5625,271.625 L 983.34375,269.84375 L 980.9375,266.3125 L 980.90625,266.21875 L 980.875,266.125 L 980.5,264.21875 L 980.46875,264.15625 L 980.5,264.09375 L 980.75,261.3125 L 980.75,261.21875 L 980.78125,261.125 L 981.59375,259.625 L 981.03125,255.3125 L 977.53125,252.9375 L 977.4375,252.84375 L 977.375,252.75 L 974.84375,247.8125 L 974.84375,247.78125 L 973.6875,245 L 973.65625,244.84375 L 973.6875,244.6875 L 973.9375,243.5625 L 973.96875,243.3125 L 974.21875,243.21875 L 975.5625,242.59375 L 975.3125,236.25 L 973.9375,234.1875 L 969.875,232 L 969.75,231.90625 L 969.6875,231.78125 L 967.78125,227.84375 L 967.78125,227.8125 L 967.75,227.78125 L 966.5,224 L 966.5,223.96875 L 966,222.1875 L 965.21875,221.40625 L 965.25,221.5625 L 960.6875,222.28125 L 960.53125,222.3125 L 960.375,222.21875 L 957.5,220.625 zM 878.75,221.0625 L 875.28125,223.09375 L 872.59375,227.34375 L 871.5,232.15625 L 871.46875,232.25 L 871.40625,232.34375 L 868.625,236.375 C 868.625,236.375 868.053,237.19287 867.375,238 C 867.036,238.40357 866.69046,238.80397 866.34375,239.125 C 866.17039,239.28552 865.98638,239.41979 865.8125,239.53125 C 865.63862,239.64271 865.45581,239.75 865.1875,239.75 C 865.16918,239.75 864.95341,239.77547 864.6875,239.8125 C 864.42159,239.84953 864.08171,239.90403 863.6875,239.96875 C 862.89908,240.09819 861.93014,240.26413 860.96875,240.4375 C 859.09532,240.77533 857.40287,241.07662 857.3125,241.09375 C 857.3125,241.09375 857.22144,241.12381 857.21875,241.125 C 857.13466,241.16236 855.84592,241.74706 854.40625,242.375 C 853.6634,242.69901 852.91973,243.02526 852.3125,243.28125 C 852.00888,243.40925 851.74033,243.51047 851.53125,243.59375 C 851.32217,243.67703 851.20886,243.74466 851.0625,243.78125 C 850.91459,243.81823 850.04484,244.10475 849.25,244.375 C 848.85258,244.51012 848.46485,244.64968 848.125,244.75 C 847.78515,244.85032 847.54294,244.9375 847.25,244.9375 C 846.99873,244.9375 846.73481,244.88643 846.28125,244.8125 C 845.82769,244.73857 845.24964,244.63418 844.6875,244.53125 C 843.56321,244.32539 842.44696,244.09564 842.125,244.03125 C 841.64591,243.93543 841.05252,243.63231 840.4375,243.25 C 839.82248,242.86769 839.25124,242.45499 838.90625,241.9375 C 838.62172,241.51069 838.20148,240.74719 837.78125,240.03125 C 837.36102,239.31531 836.86302,238.61541 836.71875,238.5 C 836.44187,238.2785 836.2653,237.98931 836.03125,237.625 C 835.7972,237.26069 835.55241,236.83236 835.28125,236.40625 C 834.73893,235.55403 834.07293,234.73959 833.65625,234.53125 C 832.96528,234.18576 831.79622,233.43163 830.75,232.75 C 829.77403,232.11414 829.04559,231.63573 828.9375,231.5625 L 822.0625,232.3125 L 822.03125,232.3125 L 817.75,232.4375 L 815.46875,234 L 815.40625,234.03125 L 815.28125,234.0625 C 815.28125,234.0625 814.85426,234.14775 814.40625,234.34375 C 813.95824,234.53975 813.58975,234.85974 813.53125,235.09375 C 813.31852,235.94473 813.20507,237.37431 813.1875,237.59375 C 813.21831,237.65416 813.39681,238.04304 813.96875,238.84375 C 814.3132,239.32601 814.4656,239.69486 814.59375,240.03125 C 814.7219,240.36764 814.83215,240.65645 815.125,241.125 C 815.68846,242.02657 817.38702,244.26227 817.5,244.40625 L 817.5625,244.4375 C 817.56352,244.4388 817.59375,244.5 817.59375,244.5 L 821.28125,247.1875 L 825.84375,250.46875 L 826.0625,250.625 L 826.03125,250.90625 C 826.03125,250.90625 826.00207,251.4491 825.9375,252.0625 C 825.90521,252.3692 825.863,252.6784 825.8125,252.96875 C 825.762,253.2591 825.74404,253.51193 825.625,253.75 C 825.49106,254.01791 825.28408,254.21174 825,254.5 C 824.71592,254.78826 824.36485,255.12392 823.96875,255.4375 C 823.17655,256.06466 822.28968,256.6875 821.375,256.6875 C 820.81031,256.6875 820.4293,256.76592 820.125,257 C 819.8207,257.23408 819.57784,257.64148 819.34375,258.34375 C 818.86501,259.77992 818.71875,261.40406 818.71875,261.96875 C 818.71874,262.25991 818.63199,262.51656 818.53125,262.8125 C 818.43051,263.10844 818.31327,263.42772 818.1875,263.75 C 817.93597,264.39456 817.71875,265.12467 817.71875,265.28125 C 817.71873,265.79893 817.53039,266.26844 817.375,266.78125 C 817.21961,267.29406 817.09375,267.80563 817.09375,268.28125 C 817.09373,269.33379 817.33924,271.58348 817.34375,271.625 C 817.34379,271.62539 817.34375,271.65625 817.34375,271.65625 L 818.625,274.21875 L 818.75,274.15625 L 818.8125,274.125 L 818.90625,274.09375 L 819.9375,273.96875 L 820,273.96875 L 820.03125,273.96875 L 824.25,274.3125 L 824.90625,274.375 L 824.6875,274.96875 C 824.68667,274.97849 824.66794,275.01877 824.6875,275.09375 C 824.72662,275.2437 824.86696,275.55446 825.3125,276 C 826.36961,277.05713 826.94275,278.22156 827.0625,279 C 827.12971,279.43682 827.04633,279.85181 827.03125,280.21875 C 827.01617,280.58569 827.07756,280.80062 827.125,280.84375 C 827.3365,281.03602 827.56572,281.13416 827.78125,281.4375 C 827.99678,281.74084 828.11062,282.14687 828.25,282.84375 C 828.38706,283.5291 828.45675,284.01519 828.5,284.3125 C 828.53564,284.55748 828.56466,284.58462 828.5625,284.59375 C 828.62917,284.61731 828.73514,284.66205 828.875,284.71875 C 829.01486,284.77545 829.19513,284.869 829.34375,285.03125 C 829.49237,285.1935 829.57577,285.43589 829.59375,285.6875 C 829.63545,286.27173 829.84235,289.37587 829.875,289.84375 L 833.9375,287.75 L 836.5,284.3125 L 837.875,282.28125 L 838,282.125 L 838.1875,282.0625 C 838.1875,282.0625 839.32665,281.83167 840.625,281.5625 C 841.92335,281.29333 843.35891,281.00786 844.0625,280.9375 C 845.25626,280.81811 847.72399,280.3125 850.5625,280.3125 C 851.9666,280.3125 853.69714,280.35931 855.25,280.375 C 856.80286,280.39069 858.20518,280.33609 858.75,280.1875 C 859.49395,279.98461 860.07514,279.95552 860.4375,279.875 C 860.79986,279.79448 860.90482,279.73688 861.09375,279.40625 C 861.57846,278.55795 862.03125,277.41037 862.03125,276.875 C 862.03125,276.41286 862.14913,275.59809 862.3125,274.78125 C 862.39418,274.37283 862.47706,273.97507 862.59375,273.625 C 862.71044,273.27493 862.81101,273.00149 863.0625,272.75 C 863.18245,272.63004 863.50566,272.04955 863.71875,271.5625 C 863.84357,271.27719 863.87261,271.20179 863.9375,271.03125 L 861.5,269.34375 L 861.125,269.09375 L 861.34375,268.6875 L 862.34375,266.8125 L 862.4375,266.625 L 862.59375,266.5625 L 866.28125,265.0625 L 866.34375,265.03125 L 866.4375,265.03125 L 870.875,264.8125 L 872.03125,260.21875 L 872.125,259.90625 L 872.40625,259.84375 L 876.78125,258.84375 L 876.8125,258.84375 C 876.92,258.7834 877.7647,258.30384 878.8125,257.75 C 879.3685,257.45611 879.94105,257.14236 880.4375,256.90625 C 880.93395,256.67014 881.298,256.49721 881.65625,256.4375 C 882.08394,256.36622 883.33882,256.22078 884.625,256.09375 C 885.26809,256.03024 885.91207,255.96971 886.4375,255.9375 C 886.96293,255.90529 887.32555,255.87136 887.65625,255.9375 C 887.97821,256.00189 888.88244,256.17303 889.78125,256.3125 C 890.23066,256.38223 890.67316,256.44476 891.03125,256.46875 C 891.38934,256.49274 891.69318,256.45398 891.65625,256.46875 C 891.87278,256.38214 892.2629,256.27991 892.78125,256.125 C 893.2996,255.97009 893.92248,255.76768 894.53125,255.59375 C 895.74879,255.24588 896.875,254.9375 896.875,254.9375 L 896.9375,254.90625 L 897,254.90625 L 899.75,254.84375 L 897.09375,249.84375 L 897,249.71875 L 897.03125,249.59375 C 897.03125,249.59375 897.0625,248.86961 897.0625,248.09375 C 897.0625,247.70582 897.05357,247.29237 897.03125,246.96875 C 897.00893,246.64513 896.90747,246.37743 896.9375,246.4375 C 896.83336,246.22923 896.75713,245.92765 896.625,245.53125 C 896.49287,245.13485 896.33014,244.64712 896.1875,244.1875 C 895.90222,243.26825 895.65625,242.4375 895.65625,242.4375 L 895.625,242.375 L 895.625,242.34375 L 895.03125,237.1875 L 891.75,233.15625 L 891.71875,233.125 L 887.5625,229 L 887.5,228.9375 L 887.46875,228.84375 L 886.0625,225.6875 L 886.0625,225.65625 L 886.0625,225.625 L 885.34375,223.1875 L 880.9375,221.0625 L 878.75,221.0625 zM 781.59375,222.96875 C 781.60258,222.96875 781.51992,222.96749 781.375,223.0625 C 781.23008,223.15751 781.03092,223.30913 780.8125,223.46875 C 780.37565,223.78798 779.79339,224.17843 779.03125,224.09375 C 778.31557,224.01423 777.92072,223.6046 777.65625,223.40625 C 777.49154,223.28272 777.17993,223.30666 776.9375,223.28125 L 776.96875,223.5 L 776.6875,223.65625 L 772.21875,226.15625 L 768.09375,229.46875 L 769.0625,232.53125 L 769.15625,232.875 L 768.84375,233.09375 L 766.53125,234.6875 L 766.5,234.71875 L 766.4375,234.75 C 766.4375,234.75 763.93793,235.82791 762.90625,236.34375 C 762.45997,236.56689 761.88894,237.03714 761.34375,237.46875 C 761.07115,237.68456 760.80067,237.89892 760.53125,238.0625 C 760.26183,238.22608 760.00149,238.34375 759.65625,238.34375 C 759.03761,238.34374 756.6272,238.52459 756.53125,238.53125 C 756.52934,238.53138 756.46875,238.53125 756.46875,238.53125 L 755.46875,238.75 C 755.54,238.93427 755.57859,238.9519 755.625,239.21875 C 755.73085,239.82735 755.67028,240.69664 754.96875,241.28125 C 754.05482,242.04284 753.25142,243.42082 753.1875,243.53125 L 753.1875,246.96875 L 753.53125,248.46875 L 753.53125,248.53125 L 753.53125,248.5625 L 753.53125,251.59375 L 752.96875,251.59375 C 752.99493,251.61918 753.04163,251.62842 753.0625,251.65625 C 753.30695,251.98218 753.19153,251.97618 753.46875,252.21875 C 753.76374,252.47686 753.99037,252.57984 754.34375,252.65625 C 754.69713,252.73266 755.16182,252.76726 755.75,252.8125 C 756.17102,252.84489 756.88926,252.63475 757.53125,252.40625 C 757.85224,252.292 758.16335,252.18904 758.4375,252.09375 C 758.68942,252.00619 758.87497,251.91945 759.125,251.90625 C 759.11537,251.90025 759.24642,251.87144 759.375,251.75 C 759.54644,251.58808 759.75743,251.31792 760,251.03125 C 760.48513,250.45791 761.05651,249.74978 761.65625,249.25 C 762.6815,248.39562 763.55705,247.34106 764.4375,246.65625 C 764.89495,246.30046 765.40498,246.05751 765.84375,245.84375 C 766.28252,245.62999 766.64149,245.421 766.6875,245.375 C 766.93146,245.13104 767.22389,245.08379 767.46875,245.0625 C 767.71361,245.04121 767.95637,245.06942 768.1875,245.09375 C 768.64976,245.14241 769.03125,245.21875 769.03125,245.21875 L 769.21875,245.28125 L 769.3125,245.40625 L 771.8125,248.53125 L 772,248.75 L 771.90625,249 C 771.90625,249 771.25677,250.80443 771.09375,251.375 C 770.96559,251.82357 770.68565,252.32075 770.40625,252.8125 C 770.26655,253.05838 770.13171,253.30691 770.03125,253.5 C 769.93079,253.69309 769.87281,253.85471 769.875,253.84375 C 769.87405,253.84851 769.84783,254.12348 769.84375,254.4375 C 769.83967,254.75152 769.8382,255.14599 769.84375,255.5625 C 769.85486,256.39552 769.875,257.29414 769.875,257.84375 C 769.875,258.94296 769.71737,259.47067 769.25,260.125 C 769.11711,260.31104 769.04091,260.58746 769.03125,260.90625 C 769.02262,261.19093 769.05562,261.44749 769.0625,261.6875 C 769.07357,261.71369 769.10677,261.78481 769.15625,261.84375 C 769.25521,261.96162 769.4189,262.09105 769.59375,262.25 C 769.94345,262.56791 770.36736,262.91264 770.59375,263.09375 C 770.77678,263.24017 770.89815,263.46353 770.9375,263.6875 C 770.97685,263.91147 770.92601,264.08969 770.875,264.25 C 770.77298,264.57062 770.63395,264.83919 770.5625,265.125 C 770.42011,265.69456 770.40837,266.43757 770.40625,266.90625 C 770.41559,266.91748 770.41986,266.91933 770.4375,266.9375 C 770.50808,267.0102 770.61946,267.12424 770.78125,267.25 C 771.10483,267.50153 771.55317,267.81727 772.03125,268.125 C 772.50933,268.43273 773.02171,268.72723 773.4375,268.96875 C 773.85329,269.21027 774.21965,269.39771 774.3125,269.4375 C 774.69193,269.60012 774.84267,269.91448 774.96875,270.21875 C 775.09483,270.52302 775.15352,270.88076 775.21875,271.21875 C 775.34921,271.89473 775.40626,272.51929 775.40625,272.78125 C 775.40625,273.12053 775.30565,273.21674 775.1875,273.4375 C 775.06935,273.65826 774.91235,273.91273 774.75,274.15625 C 774.42531,274.64329 774.09602,275.09151 773.84375,275.34375 C 773.67344,275.51406 773.40343,275.68961 773.03125,275.96875 C 772.65907,276.24789 772.22889,276.61296 771.78125,276.9375 C 770.88596,277.58659 770.03125,278.1875 770.03125,278.1875 C 769.95463,278.29541 769.61367,278.8179 769.125,279.5 C 768.58849,280.24888 768.02663,281.01359 767.8125,281.28125 C 767.60923,281.53533 766.22473,283.94382 766.0625,284.28125 C 766.07221,284.29633 766.0792,284.29359 766.09375,284.3125 C 766.18103,284.42596 766.32474,284.60052 766.5,284.75 C 766.85051,285.04896 767.25,285.3125 767.25,285.3125 L 767.28125,285.3125 L 770.6875,288.09375 L 770.8125,288.1875 L 770.84375,288.34375 C 770.84375,288.34375 771.40622,290.37294 771.40625,291.6875 C 771.40625,291.9858 771.74059,292.49918 772.1875,292.875 C 772.63441,293.25082 773.09375,293.5 773.09375,293.5 L 772.84375,293.96875 C 773.23837,293.99566 773.7014,294.0383 774.15625,294.0625 C 774.67579,294.09014 775.19028,294.09771 775.5625,294.09375 C 775.73429,294.09192 775.85016,294.10358 775.9375,294.09375 C 775.94045,294.08879 775.96576,294.09873 775.96875,294.09375 C 776.17713,293.74654 776.43234,293.36106 776.65625,293.0625 C 776.62321,293.10655 776.69756,292.91915 776.75,292.71875 C 776.80244,292.51835 776.86328,292.26047 776.90625,292 C 776.99218,291.47905 777.03125,290.92079 777.03125,290.8125 C 777.03124,290.68565 777,290.26244 777,289.84375 C 777,289.63441 777.01736,289.40192 777.0625,289.1875 C 777.10764,288.97308 777.18598,288.75523 777.40625,288.5625 C 777.71358,288.29361 778.03245,288.18958 778.375,288.0625 C 778.71755,287.93542 779.07239,287.79651 779.3125,287.625 C 779.90723,287.20021 780.19715,286.97721 780.5,286.71875 C 780.49682,286.70138 780.57033,286.57275 780.625,286.4375 C 780.69789,286.25717 780.78317,286.03091 780.875,285.78125 C 780.96683,285.53159 781.06349,285.26502 781.1875,285.03125 C 781.31151,284.79748 781.42822,284.55252 781.75,284.40625 C 781.93941,284.32016 782.03078,284.21555 782.3125,284.125 C 782.59422,284.03445 782.91027,284.06178 783.40625,284.15625 C 783.99823,284.26901 784.33482,284.62138 784.53125,284.8125 C 784.72768,285.00362 784.71815,285.03125 785.03125,285.03125 C 785.92407,285.03125 785.23567,285.03584 787.6875,285.125 C 790.15186,285.21462 790.7797,285.29358 792,285.25 C 792.76653,285.22262 793.65193,285.48215 794.46875,285.71875 C 794.87716,285.83705 795.25074,285.95015 795.5625,286.03125 C 795.87426,286.11235 796.16027,286.15807 796.1875,286.15625 C 796.52746,286.13358 796.50375,286.14636 796.5625,286.125 C 796.62125,286.10364 796.84914,285.98702 797.375,285.78125 C 798.41804,285.37309 798.43559,285.44183 799.21875,285.09375 C 800.06469,284.71777 800.89419,284.4714 801.3125,284.28125 C 801.61625,284.14317 802.41025,283.82761 803.1875,283.53125 C 803.96475,283.23489 804.6875,282.96875 804.6875,282.96875 L 804.78125,282.9375 L 804.90625,282.9375 C 804.90625,282.9375 806.60176,282.99216 807.34375,282.84375 C 807.36502,282.8395 807.76611,282.66097 808.15625,282.375 C 808.54639,282.08903 808.97935,281.72413 809.40625,281.34375 C 809.83315,280.96337 810.24356,280.57633 810.53125,280.28125 C 810.67509,280.13371 810.80402,280.02214 810.875,279.9375 C 810.91049,279.89518 810.93213,279.85178 810.9375,279.84375 C 810.95651,279.79787 810.97997,279.72536 811,279.6875 C 811.04355,279.60517 811.06732,279.51938 811.125,279.4375 C 811.24037,279.27373 811.40077,279.09151 811.5625,278.90625 C 811.88597,278.53573 812.24483,278.16853 812.5625,277.9375 C 812.843,277.73349 813.26206,277.48948 813.6875,277.21875 C 814.11294,276.94802 814.55851,276.64422 814.71875,276.5 C 815.25689,276.01563 816.25,275.40625 816.25,275.40625 L 816.28125,275.40625 L 817.75,274.65625 L 816.375,271.9375 L 816.34375,271.84375 L 816.34375,271.75 C 816.34375,271.75 816.09373,269.49176 816.09375,268.28125 C 816.09375,267.62045 816.24598,267.02891 816.40625,266.5 C 816.56652,265.97109 816.71874,265.52118 816.71875,265.28125 C 816.71875,264.68022 816.99646,264.05595 817.25,263.40625 C 817.37677,263.0814 817.50509,262.76044 817.59375,262.5 C 817.68241,262.23956 817.71875,261.99325 817.71875,261.96875 C 817.71875,261.27074 817.84356,259.62554 818.375,258.03125 C 818.64598,257.2183 819.0148,256.61602 819.53125,256.21875 C 820.0477,255.82148 820.67698,255.6875 821.375,255.6875 C 821.72301,255.6875 822.62072,255.22865 823.34375,254.65625 C 823.70527,254.37005 824.02869,254.06878 824.28125,253.8125 C 824.53381,253.55622 824.72643,253.29713 824.71875,253.3125 C 824.72598,253.29803 824.79954,253.06669 824.84375,252.8125 C 824.88796,252.55831 824.9379,252.26183 824.96875,251.96875 C 825.01499,251.52947 825.01959,251.30099 825.03125,251.125 L 820.71875,248 L 816.90625,245.21875 L 816.875,245.1875 L 816.8125,245.125 C 816.8125,245.125 814.93095,242.74581 814.25,241.65625 C 813.9115,241.11465 813.78064,240.73278 813.65625,240.40625 C 813.53186,240.07972 813.44311,239.80788 813.15625,239.40625 C 812.50919,238.50038 812.21875,237.96875 812.21875,237.96875 L 812.15625,237.84375 L 812.15625,237.71875 C 812.15625,237.71875 812.28621,235.949 812.5625,234.84375 C 812.75654,234.0676 813.43785,233.68344 814,233.4375 C 814.46526,233.23395 814.76992,233.18637 814.90625,233.15625 L 817.125,231.65625 C 817.13472,231.65622 817.16256,231.67753 817.03125,231.625 C 816.49596,231.41089 815.52527,231.27638 813.59375,230.375 C 813.09433,230.14194 812.74809,229.91711 812.5,229.6875 C 812.25191,229.45789 812.0909,229.17608 812.0625,228.90625 C 812.0341,228.63642 812.12353,228.42484 812.15625,228.28125 C 812.18897,228.13766 812.2024,228.05818 812.1875,227.96875 C 812.18111,227.93041 812.13396,227.83975 812,227.71875 C 811.86604,227.59775 811.64876,227.46048 811.375,227.3125 C 810.82748,227.01654 810.05875,226.70125 809.28125,226.3125 C 809.07175,226.20775 809.09268,226.23424 809.03125,226.21875 C 809.02561,226.30652 809.02501,226.36997 809,226.5 C 808.95568,226.73047 808.77943,227.08198 808.4375,227.21875 C 808.11959,227.34591 807.81128,227.36265 807.375,227.375 C 806.93872,227.38735 806.41581,227.35964 805.84375,227.34375 C 804.69962,227.31197 803.36618,227.25 802.3125,227.25 C 802.20147,227.25 802.21521,227.24988 802.125,227.25 C 802.06717,227.34675 802.03373,227.48252 801.96875,227.53125 C 801.66915,227.75595 801.40118,227.80532 801,227.875 C 800.59882,227.94468 800.09315,227.99105 799.5625,228.03125 C 798.50121,228.11165 797.27057,228.125 796.25,228.125 C 795.76055,228.125 795.46617,228.15537 795.3125,228.1875 C 795.15883,228.21963 795.16516,228.2402 795.15625,228.25 C 795.13843,228.26961 794.97378,228.68828 794.375,229.0625 C 793.63172,229.52705 792.62935,229.456 791.625,229.375 C 790.62065,229.294 789.61051,229.15625 789.0625,229.15625 C 788.31449,229.15625 787.73278,228.8647 787.34375,228.53125 C 786.95472,228.1978 786.71141,227.85039 786.46875,227.65625 C 786.14109,227.39412 786.06306,227.03785 786,226.6875 C 785.93694,226.33715 785.89788,225.94541 785.90625,225.59375 C 785.92142,224.95681 786.01568,224.50875 786.03125,224.40625 L 786.03125,224.34375 C 786.03167,224.34102 786.03125,224.28125 786.03125,224.28125 L 785.84375,222.96875 C 785.21874,222.96875 782.16619,222.96875 781.59375,222.96875 zM 474.03125,236 L 473.875,237.65625 L 473.875,237.8125 L 473.75,237.9375 L 471.21875,240.71875 L 471.21875,243 L 471.21875,243.03125 L 471.3125,244.34375 L 477.4375,244.5625 L 478.5,244.59375 L 477.8125,245.40625 L 475.40625,248.15625 L 475.28125,250.40625 L 475.25,250.5 L 475.21875,250.59375 L 474.34375,252.34375 L 474.25,252.5 L 474.125,252.5625 L 471.0625,254.21875 L 470.84375,255.46875 L 470.84375,255.5 L 471.09375,259.5625 L 471.125,260.03125 L 470.65625,260.09375 L 467.34375,260.40625 L 467.78125,261.6875 L 467.8125,261.78125 L 467.8125,261.84375 C 467.8125,261.84375 467.81251,262.49111 467.8125,263.375 C 467.8125,263.77454 467.56272,264.11955 467.28125,264.28125 C 466.99978,264.44295 466.6966,264.51126 466.40625,264.5625 C 466.1159,264.61374 465.81922,264.64813 465.59375,264.6875 C 465.36828,264.72687 465.20369,264.79254 465.21875,264.78125 C 464.92887,264.99866 464.52786,265.2366 464.125,265.5 C 463.72214,265.7634 463.3186,266.05639 463.125,266.25 C 463.09449,266.28051 462.9636,266.4885 462.84375,266.75 C 462.7239,267.0115 462.6073,267.34969 462.5,267.65625 C 462.2854,268.26938 462.125,268.8125 462.125,268.8125 L 462.125,268.84375 L 462.09375,268.875 C 462.09375,268.875 461.85452,269.46337 461.53125,270.09375 C 461.36961,270.40894 461.17776,270.74556 461,271.03125 C 460.82224,271.31694 460.69177,271.52805 460.4375,271.71875 C 460.04096,272.01615 459.56148,272.01911 459.125,271.96875 C 458.68852,271.91839 458.18469,271.8125 457.46875,271.8125 C 455.75908,271.8125 454.82651,270.76402 454.21875,270.15625 C 453.99736,269.93486 453.88203,269.94827 453.6875,269.96875 C 453.52539,269.98582 453.30639,270.05816 453.0625,270.125 C 453.06054,270.12894 453.02886,270.14722 453,270.1875 C 452.94228,270.26806 452.83805,270.38915 452.75,270.5625 C 452.5739,270.9092 452.37378,271.40154 452.1875,271.875 C 451.81494,272.82192 451.5,273.75 451.5,273.75 L 451.4375,273.9375 L 451.28125,274.03125 L 449.90625,274.84375 C 450.08464,274.97424 450.21714,275.10857 450.625,275.3125 C 451.26827,275.63414 451.43667,275.74379 451.59375,275.84375 C 451.75083,275.94371 451.93663,276.06209 452.75,276.4375 C 453.16111,276.62724 453.4138,276.7379 453.59375,276.84375 C 453.68373,276.89668 453.75472,276.92442 453.84375,277.03125 C 453.93278,277.13808 454,277.3226 454,277.4375 C 454,277.66731 453.96552,277.66067 453.96875,277.71875 C 453.97198,277.77683 453.98804,277.91356 454.125,278.1875 C 454.30669,278.55087 454.39826,278.87184 454.375,279.1875 C 454.35174,279.50316 454.20462,279.76412 454.03125,279.9375 C 453.6845,280.28425 453.33847,280.40505 453.1875,280.59375 C 452.99337,280.83642 453.01831,280.86085 453.03125,281.09375 C 453.04419,281.32665 453.10089,281.7482 453.03125,282.375 C 452.91306,283.4387 453.0625,284.53726 453.0625,285.46875 C 453.0625,285.68972 453.05636,285.82072 453.0625,285.875 C 453.06864,285.92928 453.05308,285.89212 453.0625,285.90625 C 453.08134,285.93451 453.32194,286.15843 453.71875,286.6875 C 454.48436,287.70832 454.10259,287.32652 455.75,288.59375 C 456.50593,289.17523 457.06144,289.33132 457.6875,289.46875 C 458.31356,289.60618 459.03981,289.73156 459.875,290.21875 C 460.65872,290.67592 460.94895,290.95468 461.125,291.21875 C 461.30105,291.48282 461.26742,291.50931 461.59375,291.78125 C 461.84612,291.99156 462.00321,292.24798 462.0625,292.53125 C 462.12179,292.81452 462.08492,293.07994 462.03125,293.3125 C 461.92392,293.77761 461.75001,294.20892 461.75,294.8125 C 461.75,296.20146 461.76015,297.00157 461.625,297.8125 C 461.49873,298.57012 461.44257,298.70986 460.9375,299.59375 C 460.77529,299.87762 460.78632,300.2475 460.875,300.75 C 460.96368,301.2525 461.12501,301.8392 461.125,302.5 C 461.125,303.00723 461.21281,303.17876 461.1875,303.15625 C 461.22413,303.16019 461.26677,303.15625 461.375,303.15625 C 461.71087,303.15625 462.01529,303.23542 462.25,303.34375 C 462.48471,303.45208 462.68508,303.57404 462.96875,303.6875 C 463.49786,303.89915 463.92153,304.37412 464.40625,304.875 C 464.89097,305.37588 465.36415,305.8954 465.65625,306.1875 C 465.92478,306.45603 466.09026,306.54513 466.4375,306.71875 C 466.78474,306.89237 467.28002,307.13263 468,307.65625 C 468.32502,307.89263 468.52803,307.99997 468.625,308.03125 C 468.72197,308.06253 468.68382,308.0642 468.6875,308.0625 C 468.69118,308.0608 468.75272,308.00474 468.90625,307.90625 C 469.05978,307.80776 469.30712,307.6875 469.59375,307.6875 C 469.86649,307.6875 470.24333,307.74069 470.75,307.8125 C 471.25667,307.88431 471.85382,307.99915 472.46875,308.09375 C 473.6986,308.28296 475.02618,308.46875 475.40625,308.46875 C 476.4164,308.46875 476.75601,308.46371 478.03125,308.71875 C 479.24994,308.96249 480.0546,308.95965 480.75,308.84375 C 481.0044,308.80135 481.64386,308.56108 482.28125,308.28125 C 482.91864,308.00142 483.5708,307.69732 484.03125,307.5 C 484.69522,307.21544 484.96318,306.72453 485,306.65625 L 484.875,303.9375 L 484.875,303.78125 L 484.9375,303.65625 L 486.46875,301 L 486.5,300.90625 L 486.59375,300.84375 C 486.59375,300.84375 487.2358,300.39998 487.9375,299.9375 C 488.28835,299.70626 488.64972,299.47144 488.96875,299.28125 C 489.28778,299.09106 489.51502,298.94937 489.8125,298.875 C 489.75199,298.89013 489.82382,298.86926 489.90625,298.8125 C 489.98868,298.75574 490.09297,298.66978 490.21875,298.5625 C 490.47031,298.34794 490.78397,298.05978 491.09375,297.75 C 491.71331,297.13044 492.34045,296.43383 492.5625,296.15625 C 492.90392,295.72948 493.50183,295.27971 494.09375,294.78125 C 494.68567,294.28279 495.26765,293.73474 495.4375,293.4375 C 495.573,293.20038 495.60604,292.51684 495.53125,291.84375 C 495.45646,291.17066 495.31906,290.50811 495.25,290.09375 C 495.21871,289.906 495.01882,289.62763 494.6875,289.28125 C 494.35618,288.93487 493.91875,288.53001 493.5625,288.03125 C 493.17352,287.48667 493.07949,286.89879 493.0625,286.40625 C 493.04551,285.91371 493.07243,285.50847 492.96875,285.09375 C 492.82108,284.50307 492.84198,283.87213 492.875,283.34375 C 492.90802,282.81537 492.96875,282.35672 492.96875,282.1875 C 492.96875,282.22662 492.80945,281.83481 492.53125,281.46875 C 492.25305,281.10269 491.89764,280.71014 491.59375,280.40625 C 490.75028,279.56278 490.56248,278.10413 490.5625,277.125 C 490.5625,276.11285 491.10332,275.34639 491.21875,275.1875 C 491.21875,275.1875 491.27695,275.07383 491.28125,275.0625 C 491.32223,274.9544 491.49285,274.46196 491.71875,273.8125 C 491.84354,273.45372 491.97162,273.08797 492.0625,272.78125 C 492.15338,272.47453 492.1875,272.17836 492.1875,272.21875 C 492.1875,271.96748 492.26915,271.75472 492.34375,271.46875 C 492.41835,271.18278 492.49753,270.83594 492.59375,270.53125 C 492.76557,269.98717 492.93403,269.63025 492.96875,269.53125 L 492.96875,269.46875 L 493.34375,264.09375 L 493.34375,264.03125 L 493.375,263.96875 L 493.9375,262.4375 L 493.9375,262 L 494.09375,262 L 493.84375,259.375 C 493.79622,259.29383 493.43481,258.66595 492.90625,257.84375 C 492.34455,256.96999 491.65017,255.96267 491.21875,255.53125 C 490.71367,255.02617 490.18242,254.46401 489.71875,254.03125 C 489.25508,253.59849 488.80587,253.27793 488.6875,253.21875 C 488.2929,253.02145 488.21946,252.75142 488.0625,252.4375 C 487.90554,252.12358 487.75501,251.73253 487.625,251.375 C 487.36498,250.65994 487.15625,250 487.15625,250 L 487.15625,249.9375 L 487.15625,249.875 L 487.15625,246.3125 L 487.15625,246.25 L 487.15625,246.1875 L 487.78125,243.9375 C 487.24831,243.83734 486.21108,243.64652 485.75,243.53125 C 485.48106,243.46402 485.26001,243.3433 484.90625,243.15625 C 484.55249,242.9692 484.11919,242.72457 483.6875,242.46875 C 482.82412,241.95712 481.97723,241.40291 481.53125,241.03125 C 480.82821,240.44539 479.4375,239.5625 479.4375,239.5625 L 479.40625,239.53125 L 476.8125,237.53125 L 476.75,237.5 L 474.03125,236 zM 295.3125,238.5625 C 295.13114,238.62946 294.22153,238.99581 293.03125,239.40625 C 292.38058,239.63062 291.68819,239.86059 291.125,240.03125 C 290.84341,240.11658 290.58974,240.16637 290.375,240.21875 C 290.18348,240.26547 290.04103,240.30484 289.875,240.3125 C 289.8798,240.32404 289.73834,240.36192 289.59375,240.4375 C 289.40096,240.53828 289.13801,240.687 288.84375,240.875 C 288.25523,241.251 287.52278,241.77074 286.8125,242.28125 C 285.39195,243.30227 284.0625,244.3125 284.0625,244.3125 L 283.84375,244.46875 L 283.625,244.40625 L 280.9375,243.6875 L 278.4375,243.09375 L 275.96875,246.875 L 275.8125,247.09375 L 275.53125,247.09375 C 275.53125,247.09375 273.93301,247.09374 273.21875,247.09375 C 272.8616,247.09375 271.95435,247.11626 271.03125,247.09375 C 270.10815,247.07124 269.20325,247.01565 268.65625,246.90625 C 268.00239,246.77548 267.63202,246.32954 267.25,245.96875 C 266.86798,245.60796 266.47189,245.27848 265.78125,245.125 C 265.19588,244.99492 264.34564,245.28022 263.65625,245.65625 C 262.96686,246.03228 262.46875,246.46875 262.46875,246.46875 L 262.25,246.625 L 262,246.53125 C 262,246.53125 261.2742,246.3246 260.4375,245.90625 C 259.6008,245.4879 258.62572,244.89678 258,244.0625 C 257.00021,242.72945 255.50802,241.40703 255.4375,241.34375 L 252.53125,240.625 L 251.125,242.78125 L 251.09375,242.84375 L 251.03125,242.90625 L 247.8125,245.40625 L 247.75,245.4375 L 247.6875,245.46875 L 243.78125,247.1875 L 242.28125,249.96875 L 242.09375,254.125 L 242.09375,254.1875 L 242.09375,254.28125 L 241,257.3125 L 241,257.375 L 240.9375,257.40625 L 238.8125,260.625 L 238.6875,260.8125 L 238.46875,260.84375 L 237.21875,261 L 234.46875,264.09375 L 234.40625,264.15625 L 234.3125,264.1875 L 231,265.78125 L 227.34375,269.8125 L 227.15625,269.65625 L 227.09375,270.40625 L 227.09375,270.59375 L 226.9375,270.71875 L 223.8125,273.59375 L 223.78125,273.625 L 223.75,273.625 L 221.125,275.28125 L 220.9375,278.125 L 220.9375,278.15625 L 221.03125,281.5 L 221.03125,281.75 L 220.84375,281.90625 L 218.5,283.71875 L 218.46875,283.75 L 218.4375,283.78125 L 215.84375,286.8125 L 219.25,288.65625 L 219.28125,288.6875 L 219.3125,288.71875 L 223.25,291.75 L 223.34375,291.8125 L 223.375,291.90625 L 225.1875,295.21875 L 225.21875,295.3125 L 225.21875,295.40625 L 225.5625,299.1875 L 225.59375,299.25 L 226.59375,301.96875 L 227.5,302.96875 L 227.59375,303.0625 L 227.625,303.1875 L 228.15625,305.59375 L 228.1875,305.75 L 228.125,305.90625 L 227.15625,308.21875 L 227.125,308.34375 L 227.03125,308.40625 C 227.03125,308.40625 226.42592,308.95117 225.78125,309.5625 C 225.45891,309.86816 225.14735,310.20052 224.875,310.46875 C 224.60265,310.73698 224.35734,310.9752 224.3125,311.03125 C 224.12926,311.2603 223.90503,311.39586 223.59375,311.625 C 223.28247,311.85414 222.92309,312.13273 222.5625,312.375 C 221.85265,312.85193 221.20818,313.26815 221.1875,313.28125 L 221.15625,313.28125 L 218.9375,315.6875 L 218.8125,315.84375 L 218.625,315.84375 L 214.78125,316.1875 L 211.34375,319.625 L 211.28125,319.6875 L 211.21875,319.71875 L 208.4375,321.3125 L 207.375,324.5 C 207.375,324.5 207.37506,324.53051 207.375,324.53125 C 207.37281,324.55969 207.32464,325.11133 207.28125,325.71875 C 207.23673,326.34206 207.1875,327.061 207.1875,327.15625 C 207.1875,327.12648 207.27532,327.39438 207.375,327.59375 C 207.44611,327.73598 207.4649,327.78509 207.5,327.84375 L 210.625,329.84375 L 212.59375,331.1875 L 212.65625,331.21875 L 212.6875,331.25 L 215.34375,333.9375 L 215.4375,334.03125 L 215.5,334.15625 L 215.96875,336 L 216.75,335.9375 L 221.125,334.78125 L 221.28125,334.75 L 221.4375,334.8125 L 224.84375,336.21875 L 227.75,334.8125 L 227.59375,334.71875 L 229.5,331.1875 L 231.78125,327.15625 L 231.78125,327.125 L 231.8125,327.09375 L 234.96875,322.5625 L 235.03125,322.4375 L 235.15625,322.40625 L 241.71875,319.1875 L 244.25,317.03125 L 246.96875,313.21875 L 246.96875,313.1875 L 247,313.15625 L 250.53125,309.625 L 250.625,309.53125 L 250.75,309.5 L 255.28125,308.09375 L 259.71875,306.375 L 265.59375,302.75 L 265.65625,302.71875 L 268.90625,300.09375 L 268.9375,300.0625 L 268.96875,300.0625 L 276.71875,295.78125 L 278.90625,292.75 L 278.96875,292.65625 L 279.0625,292.625 L 282.21875,290.71875 L 282.28125,290.65625 L 282.375,290.65625 L 284.90625,290.28125 L 284.96875,290.28125 L 285,290.28125 L 287.65625,290.40625 L 287.90625,290.40625 L 288.0625,290.625 L 289.6875,293.125 L 289.6875,293.15625 L 291.96875,296.03125 L 293.4375,296.84375 L 292.9375,296.03125 L 299.46875,291.75 L 299.5,291.75 L 303.5,288.71875 L 303.53125,288.71875 L 309.8125,284.4375 L 312.71875,282.375 L 309.375,280.46875 L 309.1875,280.375 L 309.125,280.15625 L 308.625,278.125 L 308.5625,277.875 L 308.71875,277.6875 L 313.71875,271.9375 L 314.90625,267.625 L 315.1875,263.59375 L 315.1875,263.28125 L 315.5,263.15625 L 318.9375,261.78125 L 318.75,259.96875 L 314,258.5625 L 313.65625,258.4375 L 313.65625,258.0625 L 313.90625,251.78125 L 312.59375,250.625 C 312.42607,250.57639 308.38137,249.39889 306.53125,249.0625 C 305.4704,248.86962 304.32953,248.42076 303.3125,247.96875 C 302.29547,247.51674 301.3629,247.05847 300.90625,246.90625 C 300.48028,246.76426 300.20202,246.42183 300.03125,246.0625 C 299.86048,245.70317 299.7672,245.306 299.71875,244.90625 C 299.62184,244.10675 299.68751,243.25684 299.6875,242.84375 C 299.6875,242.77054 299.60579,242.51567 299.46875,242.21875 C 299.33171,241.92183 299.1316,241.59397 298.9375,241.28125 C 298.56137,240.67525 298.21066,240.18727 298.1875,240.15625 L 298.15625,240.125 L 295.3125,238.5625 zM 538.375,244.21875 L 532.8125,246.8125 L 532.75,246.84375 L 532.71875,246.875 L 527.8125,250.75 L 527.6875,250.84375 L 527.5625,250.84375 L 519.84375,251.90625 L 518.15625,253.3125 L 520.0625,256.15625 L 520.15625,256.3125 L 520.125,256.5 L 519.78125,258.65625 L 519.75,258.90625 L 519.5,259.03125 L 516.34375,260.4375 L 516.28125,260.46875 L 511.6875,263.28125 L 511.65625,263.3125 L 511.625,263.3125 L 505.90625,265.8125 L 505.8125,265.84375 L 505.71875,265.84375 L 501.78125,265.84375 L 501.59375,265.84375 L 501.4375,265.71875 L 498.71875,263 L 494.8125,263 L 494.34375,264.25 L 493.96875,269.59375 L 493.96875,269.65625 L 493.9375,269.71875 C 493.9375,269.71875 493.74887,270.25359 493.5625,270.84375 C 493.46931,271.13883 493.37995,271.46018 493.3125,271.71875 C 493.24505,271.97732 493.1875,272.21748 493.1875,272.21875 C 493.1875,272.51168 493.12977,272.72998 493.03125,273.0625 C 492.93273,273.39502 492.784,273.78898 492.65625,274.15625 C 492.40076,274.89079 492.15625,275.53125 492.15625,275.53125 L 492.125,275.59375 L 492.09375,275.65625 C 492.09375,275.65625 491.5625,276.47922 491.5625,277.125 C 491.56249,277.91363 491.89329,279.26829 492.3125,279.6875 C 492.63997,280.01496 493.02218,280.42063 493.34375,280.84375 C 493.66532,281.26687 493.96875,281.6433 493.96875,282.1875 C 493.96874,282.52336 493.90511,282.92448 493.875,283.40625 C 493.84489,283.88802 493.83263,284.42427 493.9375,284.84375 C 494.08635,285.43918 494.04792,285.95209 494.0625,286.375 C 494.07708,286.79791 494.13263,287.09819 494.375,287.4375 C 494.65009,287.82262 495.04309,288.21408 495.40625,288.59375 C 495.76941,288.97342 496.12377,289.36763 496.21875,289.9375 C 496.27596,290.28076 496.4482,291.00257 496.53125,291.75 C 496.6143,292.49743 496.65083,293.29074 496.28125,293.9375 C 495.94602,294.52416 495.32638,295.01956 494.71875,295.53125 C 494.11112,296.04294 493.50741,296.57668 493.34375,296.78125 C 493.06074,297.13503 492.42438,297.79437 491.78125,298.4375 C 491.45968,298.75906 491.16008,299.06934 490.875,299.3125 C 490.73246,299.43408 490.59546,299.53774 490.46875,299.625 C 490.34204,299.71226 490.21803,299.79705 490.03125,299.84375 C 490.07619,299.83251 489.79653,299.94822 489.5,300.125 C 489.20347,300.30178 488.84363,300.55476 488.5,300.78125 C 487.84294,301.21431 487.30165,301.5889 487.25,301.625 L 485.875,304.03125 L 486,306.5625 L 489.375,307.1875 L 489.4375,307.21875 L 489.5,307.21875 C 489.5,307.21875 490.12395,307.48583 490.75,307.875 C 491.06303,308.06958 491.36804,308.29085 491.625,308.5625 C 491.88196,308.83415 492.1273,309.20264 492.0625,309.65625 C 492.0479,309.75842 492.04208,310.15994 492.09375,310.625 C 492.14542,311.09006 492.22653,311.66389 492.3125,312.1875 C 492.48444,313.23473 492.6875,314.15625 492.6875,314.15625 L 492.6875,314.1875 C 492.6875,314.1875 492.75449,314.66028 492.875,315.1875 C 492.99551,315.71472 493.21819,316.31179 493.34375,316.46875 C 493.83068,317.07742 494.74439,318.22737 494.8125,318.3125 C 494.8125,318.3125 494.84216,318.34219 494.84375,318.34375 C 494.84439,318.34455 494.875,318.375 494.875,318.375 C 494.92072,318.41933 495.08997,318.58297 495.375,318.78125 C 495.69898,319.00663 496.12353,319.1875 496.375,319.1875 C 497.16365,319.1875 498.95304,318.92186 500.21875,319.0625 C 501.46424,319.2009 502.625,319.75 502.625,319.75 L 502.6875,319.78125 L 502.75,319.8125 L 504.28125,321.21875 L 507.1875,323.71875 L 507.40625,323.9375 L 507.3125,324.25 C 507.3125,324.25 507.21772,324.70766 507.09375,325.25 C 506.96978,325.79234 506.84375,326.44266 506.84375,326.625 C 506.84375,326.91617 506.76625,327.27529 506.6875,327.78125 C 506.60875,328.28721 506.53018,328.87746 506.46875,329.46875 C 506.40732,330.06004 506.36573,330.63789 506.40625,331.03125 C 506.42651,331.22793 506.46998,331.37393 506.5,331.4375 C 507.23868,331.63597 507.6299,332.31853 507.875,332.84375 C 508.12324,333.37569 508.21875,333.84375 508.21875,333.84375 L 508.28125,334.09375 L 508.125,334.28125 L 507,335.59375 L 507.5625,337.5625 L 507.59375,337.625 C 507.61476,337.67848 507.71397,337.94004 507.78125,338.34375 C 507.85475,338.78476 507.89628,339.41622 507.4375,339.875 C 507.12604,340.18645 506.70157,340.48307 506.34375,340.78125 C 506.16484,340.93034 505.99842,341.07805 505.90625,341.1875 C 505.86938,341.23128 505.85133,341.258 505.84375,341.28125 C 505.84375,341.32228 505.83965,341.33251 505.84375,341.3125 C 505.83656,341.61033 505.73154,341.84422 505.625,342.1875 C 505.5146,342.54323 505.36224,342.94516 505.21875,343.34375 C 504.93882,344.12133 504.70105,344.80908 504.6875,344.84375 L 504.3125,346.09375 L 507.96875,346.09375 L 508.03125,346.09375 L 508.0625,346.09375 C 508.0625,346.09375 510.53246,346.43338 511.53125,346.71875 C 511.86734,346.81478 512.75512,346.93631 513.59375,347.03125 C 514.01306,347.07872 514.43317,347.13395 514.78125,347.1875 C 515.12933,347.24105 515.38836,347.27231 515.65625,347.40625 C 515.67815,347.4172 515.96067,347.5136 516.28125,347.59375 C 516.60183,347.6739 516.99999,347.76562 517.375,347.84375 C 518.12501,348 518.8125,348.125 518.8125,348.125 L 518.90625,348.125 L 518.96875,348.1875 C 518.96875,348.1875 519.27245,348.35411 519.65625,348.53125 C 520.04005,348.70839 520.50661,348.875 520.71875,348.875 C 520.79199,348.875 521.36659,348.60705 521.78125,348.28125 C 522.15921,347.98428 522.41728,347.73822 522.46875,347.6875 C 522.46875,347.6875 522.52719,347.63118 522.53125,347.625 C 522.57035,347.56556 522.73547,347.28338 522.9375,346.90625 C 523.04901,346.69809 523.15541,346.48791 523.21875,346.3125 C 523.28209,346.13709 523.26051,345.97952 523.28125,346.0625 C 523.22353,345.83161 523.20576,345.59077 523.1875,345.25 C 523.16924,344.90923 523.16421,344.50699 523.15625,344.125 C 523.14067,343.37727 523.12501,342.7163 523.125,342.6875 C 523.125,342.68687 523.125,342.65625 523.125,342.65625 L 523,339.9375 L 523,339.90625 L 522.53125,338.40625 L 522.5,338.34375 L 522.5,338.28125 L 522.375,336.78125 L 522.375,336.6875 L 522.40625,336.59375 L 522.90625,334.71875 L 522.96875,334.5 L 523.125,334.40625 L 526.40625,332.5 L 526.46875,332.5 L 526.5,332.46875 L 529.4375,331.375 L 529.53125,331.34375 L 533.625,328.96875 L 536.5,327.46875 L 536.53125,327.4375 L 539.40625,325.6875 L 539.4375,325.6875 L 539.46875,325.65625 C 539.46875,325.65625 540.35933,325.30416 541.21875,324.84375 C 541.64846,324.61355 542.04887,324.34616 542.34375,324.125 C 542.49119,324.01442 542.62951,323.91209 542.6875,323.84375 C 542.7165,323.80958 542.71819,323.78517 542.71875,323.78125 C 542.73218,323.42429 542.86215,323.11704 543.03125,322.6875 C 543.21001,322.23342 543.43973,321.70702 543.6875,321.1875 C 544.18305,320.14845 544.72035,319.17441 544.9375,318.8125 C 545.03358,318.65235 545.06615,318.23878 545.1875,317.71875 C 545.30885,317.19872 545.55572,316.55672 546.15625,316.03125 C 547.03541,315.26196 547.38172,314.07944 548.125,313.1875 C 548.36021,312.90525 548.84195,312.06596 549.25,311.28125 C 549.45402,310.88889 549.63978,310.51286 549.8125,310.1875 C 549.98522,309.86214 550.1073,309.59652 550.25,309.40625 C 550.4647,309.11996 550.73346,308.99784 551.0625,308.8125 C 551.39154,308.62716 551.79291,308.44729 552.1875,308.25 C 552.97668,307.85541 553.80628,307.38122 553.96875,307.21875 C 554.20193,306.98556 554.47976,306.46799 554.84375,306 C 555.20774,305.53201 555.73451,305.03125 556.46875,305.03125 C 557.0155,305.03125 557.31028,305.17076 557.53125,305.28125 C 557.75222,305.39174 557.99166,305.50491 558.84375,305.6875 C 560.66241,306.07722 561.74569,306.63402 562.78125,307.28125 C 563.91845,307.992 564.9375,309.28125 564.9375,309.28125 L 564.96875,309.3125 L 564.96875,309.34375 C 564.96875,309.34375 565.32098,309.92446 565.6875,310.59375 C 565.87076,310.92839 566.06601,311.28827 566.21875,311.59375 C 566.37149,311.89923 566.50121,312.12984 566.5625,312.375 C 566.69356,312.89915 566.9375,314 566.9375,314 L 567.28125,315.28125 L 569.3125,315.0625 L 570.96875,313.3125 L 572.03125,311.15625 C 572.03125,311.15625 572.06204,311.12628 572.0625,311.125 C 572.07474,311.09129 572.22537,310.657 572.40625,310.125 C 572.59398,309.57285 572.7871,308.90235 572.8125,308.75 C 572.8774,308.36059 573.09255,308.19551 573.3125,308 C 573.53245,307.80449 573.77909,307.63295 574.03125,307.46875 C 574.45655,307.19181 574.75643,307.03205 574.875,306.96875 C 574.92822,306.84164 575.18287,306.23732 575.5625,305.40625 C 575.97953,304.49329 576.43918,303.52018 576.84375,303 C 577.27904,302.44034 577.94878,302.26832 578.53125,302.21875 C 579.11372,302.16918 579.65871,302.22476 580.03125,302.1875 C 580.39065,302.15156 581.231,301.93766 581.9375,301.75 C 582.47422,301.60743 582.74096,301.55727 582.9375,301.5 L 583.0625,298.8125 L 581.9375,297.375 L 581.75,297.125 L 581.875,296.84375 L 582.3125,295.875 L 582.34375,295.78125 L 582.40625,295.71875 C 582.40625,295.71875 582.39217,295.75097 582.4375,295.6875 C 582.48283,295.62403 582.55861,295.49606 582.6875,295.28125 C 583.06128,294.65831 583.71875,294.375 583.71875,294.375 L 583.75,294.375 C 583.75,294.375 584.71377,293.95036 585.0625,293.78125 C 585.05614,293.78389 585.05102,293.78481 585.0625,293.75 C 585.08546,293.68038 585.11001,293.55615 585.125,293.40625 C 585.15498,293.10646 585.13605,292.79951 585.21875,292.46875 C 585.28717,292.19505 585.43575,291.90155 585.5625,291.625 C 585.64806,291.43833 585.67567,291.36902 585.71875,291.28125 L 585.25,289.59375 L 584.625,288.78125 L 584.5625,288.71875 L 584.53125,288.625 C 584.53125,288.625 584.36342,288.19052 584.15625,287.65625 C 583.94908,287.12198 583.68115,286.49112 583.53125,286.28125 C 582.99842,285.53529 582.93773,284.87531 582.1875,283.875 C 581.93861,283.54314 581.79168,283.19249 581.875,282.84375 C 581.95832,282.49501 582.23945,282.28095 582.4375,282.15625 C 582.63555,282.03155 582.80878,281.96237 582.90625,281.90625 C 582.93549,281.88941 582.92933,281.88096 582.9375,281.875 C 582.96072,281.71352 582.9698,281.54684 583.03125,281.375 C 583.11566,281.13896 583.24312,280.88276 583.375,280.625 C 583.63875,280.10947 583.92044,279.61552 584.375,279.3125 C 585.00671,278.89136 586.07104,278.46591 586.90625,278.1875 C 587.52666,277.9807 588.5085,277.32721 588.625,277.25 L 589.71875,275.03125 C 589.74256,274.90843 589.81954,274.51925 589.9375,273.96875 C 590.00514,273.65307 590.08691,273.30862 590.15625,273.03125 C 590.22559,272.75388 590.23946,272.58356 590.34375,272.375 C 590.55215,271.9582 591.15623,270.8929 591.90625,270.25 C 592.49552,269.74492 593.5625,268.65625 593.5625,268.65625 L 595.4375,265.6875 L 595.90625,263.34375 L 594.84375,261.375 C 594.72603,261.32942 594.39264,261.23087 593.90625,261.0625 C 593.62169,260.964 593.34593,260.85218 593.09375,260.78125 C 592.84157,260.71032 592.60268,260.6875 592.59375,260.6875 C 592.41568,260.6875 592.31111,260.638 592.15625,260.59375 C 592.00139,260.5495 591.81601,260.50696 591.625,260.4375 C 591.24297,260.29858 590.80345,260.1179 590.375,259.9375 C 589.51811,259.5767 588.71875,259.21875 588.71875,259.21875 L 588.625,259.15625 L 588.53125,259.0625 C 588.53125,259.0625 588.15162,258.59267 587.65625,258.03125 C 587.16088,257.46983 586.54767,256.81833 586.21875,256.5625 C 585.62469,256.10045 585.34932,255.31808 585.125,254.5625 C 584.92667,253.89444 584.83689,253.33961 584.8125,252.90625 C 584.55958,252.96868 584.21021,253.09375 583.5625,253.09375 C 582.15476,253.09375 580.68311,253.18838 580.375,253.25 C 580.42054,253.24089 580.23128,253.29748 580.0625,253.40625 C 579.89372,253.51502 579.68856,253.66704 579.5,253.8125 C 579.12288,254.10343 578.8125,254.40625 578.8125,254.40625 L 578.78125,254.40625 L 578.75,254.4375 C 578.75,254.4375 577.00168,255.54028 576.5625,255.90625 C 576.16031,256.24141 575.67844,256.36545 575.21875,256.5 C 574.75906,256.63455 574.32204,256.79676 574.125,256.9375 C 573.55592,257.34399 572.8743,257.2464 572.25,257.1875 C 571.93785,257.15805 571.64293,257.09751 571.40625,257.0625 C 571.16957,257.02749 570.9539,257.03125 570.96875,257.03125 C 570.6503,257.03125 570.53976,256.91249 570.3125,256.8125 C 570.08524,256.71251 569.83391,256.59455 569.59375,256.46875 C 569.12613,256.22381 568.74068,255.98143 568.71875,255.96875 C 568.71875,255.96875 568.6881,255.96905 568.6875,255.96875 C 568.66421,255.95714 568.20446,255.72155 567.6875,255.5 C 567.42236,255.38637 567.15899,255.29008 566.9375,255.21875 C 566.77138,255.16525 566.61139,255.13832 566.59375,255.125 C 566.58131,255.14155 566.452,255.22267 566.28125,255.34375 C 566.06781,255.4951 565.8083,255.70414 565.5625,255.90625 C 565.07089,256.31047 564.625,256.71875 564.625,256.71875 L 564.5,256.8125 L 564.34375,256.84375 C 564.34375,256.84375 563.35017,256.95048 562.21875,257.0625 C 561.08733,257.17452 559.83197,257.28125 559.1875,257.28125 C 558.07807,257.28125 556.29762,257.46875 555,257.46875 C 554.27976,257.46875 553.30274,257.26615 552.375,257.0625 C 551.44726,256.85885 550.59762,256.6494 550.25,256.5625 C 549.93566,256.48391 549.28177,256.36929 548.6875,256.28125 C 548.09323,256.19321 547.45983,256.125 547.40625,256.125 C 547.11161,256.125 547.06038,256.04248 546.9375,255.96875 C 546.81462,255.89502 546.67318,255.79395 546.53125,255.6875 C 546.24739,255.47461 545.94197,255.20919 545.625,254.9375 C 545.00816,254.40877 544.46781,253.90296 544.4375,253.875 C 544.43666,253.87423 544.40625,253.84375 544.40625,253.84375 C 544.3741,253.81885 543.72093,253.31801 543,252.75 C 542.63066,252.459 542.25041,252.15996 541.9375,251.90625 C 541.62459,251.65254 541.39083,251.48457 541.25,251.34375 C 541.09119,251.18494 541.04286,251.02125 541,250.875 C 540.95714,250.72875 540.92929,250.57596 540.90625,250.40625 C 540.86018,250.06683 540.85519,249.67601 540.84375,249.28125 C 540.82087,248.49172 540.84375,247.68989 540.84375,247.5 C 540.84375,247.52173 540.80913,247.35381 540.75,247.1875 C 540.69087,247.02119 540.61679,246.84337 540.53125,246.65625 C 540.39912,246.36722 540.33495,246.19668 540.28125,246.09375 C 540.28125,246.09375 540.25095,246.06336 540.25,246.0625 C 540.2205,246.03566 539.76368,245.61683 539.25,245.125 C 538.98488,244.87116 538.72975,244.61342 538.5,244.375 C 538.44398,244.31687 538.42427,244.27057 538.375,244.21875 zM 386.0625,244.8125 L 384.03125,248 L 383.84375,248.25 L 383.53125,248.21875 L 379.65625,247.53125 L 378.78125,250.15625 L 378.75,250.25 L 378.6875,250.3125 L 374.625,254.875 L 374.53125,254.96875 L 374.40625,255 L 370.96875,256 L 366.03125,260.71875 L 365.9375,260.78125 L 365.84375,260.8125 L 358.25,263.34375 L 358.09375,263.40625 L 357.9375,263.34375 L 353.15625,261.84375 L 353.125,261.8125 L 353.0625,261.8125 L 347.59375,259.0625 L 343.59375,259.0625 L 338.84375,261.0625 L 338.71875,261.09375 L 338.59375,261.09375 L 333.8125,260.59375 L 333.53125,260.5625 L 333.40625,260.3125 L 331.65625,257.03125 L 331.625,257.03125 L 329.9375,253.59375 L 326.25,251.3125 L 321.6875,253.21875 L 321.53125,253.28125 L 321.40625,253.25 L 314.875,252.09375 L 314.65625,257.6875 L 319.34375,259.09375 L 319.6875,259.1875 L 319.71875,259.53125 L 319.96875,262.0625 L 320,262.4375 L 319.65625,262.5625 L 316.125,263.96875 L 315.90625,267.6875 L 315.90625,267.75 L 315.90625,267.8125 L 314.625,272.34375 L 314.59375,272.46875 L 314.53125,272.53125 L 309.65625,278.125 L 310.03125,279.71875 L 313.90625,281.875 L 314.59375,282.25 L 313.9375,282.71875 L 310.40625,285.25 L 304.09375,289.53125 L 300.0625,292.5625 L 300.03125,292.59375 L 293.5,296.875 L 293.5625,296.90625 L 293.78125,297.03125 L 293.8125,297.28125 L 294.1875,300.75 L 294.1875,300.8125 L 295.40625,303.625 L 297.75,306.34375 L 302.46875,311.09375 L 302.5,311.125 L 305.125,313.25 L 305.15625,313.25 L 308.9375,316.53125 L 309,316.59375 L 309.0625,316.71875 L 310.0625,318.96875 L 310.0625,319 L 311.09375,321.375 L 311.1875,321.65625 L 311.03125,321.875 L 309.125,324.53125 L 309.03125,324.6875 L 308.84375,324.71875 L 303.59375,325.78125 L 303.71875,325.96875 L 304.21875,326.75 L 303.3125,326.75 L 303.25,326.75 L 305.09375,329.375 L 305.125,329.40625 L 305.15625,329.46875 C 305.15625,329.46875 305.50457,330.32199 305.90625,331.15625 C 306.10709,331.57338 306.3176,331.99156 306.5,332.28125 C 306.5912,332.4261 306.66856,332.53955 306.71875,332.59375 C 307.13057,332.62386 307.52033,332.75782 307.90625,332.90625 C 308.33266,333.07026 308.6875,333.25 308.6875,333.25 L 308.90625,333.34375 L 308.96875,333.59375 L 309.6875,336.65625 L 310.75,338.375 L 312.875,338.25 L 313.3125,338.21875 L 313.375,338.65625 L 314,342.03125 L 315.59375,343.28125 L 315.75,343.40625 L 315.78125,343.5625 L 316.28125,345.84375 L 316.3125,345.90625 L 316.3125,345.9375 L 316.3125,348.96875 L 316.3125,349.40625 L 315.875,349.46875 L 312.09375,350.09375 L 307.78125,350.71875 L 306,352.28125 L 305.96875,352.3125 L 304.21875,355.0625 L 304.03125,355.375 L 303.6875,355.28125 L 301.15625,354.65625 L 301.09375,354.625 L 301.0625,354.59375 L 299.28125,353.71875 L 298.875,353.5 L 299.0625,353.0625 L 300.40625,349.96875 L 300.40625,347.34375 L 299.34375,346.5 L 294.875,349.5625 L 293.96875,352 L 294.9375,355.6875 L 294.96875,355.78125 L 294.96875,355.875 L 294.4375,359.65625 L 294.4375,359.6875 L 294.4375,359.75 L 292.96875,364.09375 L 296.375,366.25 L 296.40625,366.25 L 299.5625,368.53125 L 303.4375,370.46875 C 303.4375,370.46875 303.52592,370.49831 303.53125,370.5 C 303.61029,370.52499 304.18027,370.70238 304.9375,370.90625 C 305.74582,371.12388 306.73451,371.34375 307.09375,371.34375 C 307.23171,371.34375 307.61212,371.24961 308.03125,371.125 C 308.45038,371.00039 308.9244,370.85842 309.375,370.6875 C 310.24174,370.35874 310.9436,370.05598 311,370.03125 L 311,370 L 314.53125,368 L 314.84375,367.8125 L 315.125,368.0625 L 317.90625,370.59375 L 317.9375,370.59375 L 317.9375,370.625 L 322,375.3125 L 322.03125,375.34375 L 322.0625,375.40625 L 323.6875,378.8125 L 323.71875,378.84375 L 323.71875,378.90625 L 324.6875,382.15625 L 324.71875,382.1875 L 326.9375,385.5625 L 329.46875,388.84375 L 329.5,388.875 L 330.53125,390.625 L 333.3125,391.84375 L 333.375,391.875 L 333.4375,391.90625 L 336.90625,394.90625 L 336.96875,394.9375 L 340.6875,397.28125 L 345.34375,400.0625 L 345.5,400.15625 L 345.5625,400.34375 L 346.59375,403.5 L 347.46875,404.9375 L 347.53125,405.03125 L 351.25,408.875 L 351.28125,408.875 L 351.28125,408.90625 L 353.0625,411.1875 L 353.15625,411.3125 L 353.15625,411.5 L 353.15625,412.03125 L 355.46875,410.90625 L 355.5,410.90625 L 359.09375,409.28125 L 359.15625,409.25 L 360.28125,408.09375 L 360.40625,407.96875 L 360.625,407.96875 L 364.46875,407.96875 L 367.625,405.40625 L 367.65625,405.40625 L 371.59375,402.59375 L 371.6875,402.5 L 374.34375,399.21875 L 374.375,399.1875 L 375.0625,398.15625 L 373.28125,397.28125 L 373.25,397.28125 L 373.21875,397.25 L 369.4375,394.71875 L 366.78125,392.96875 L 366.59375,392.84375 L 366.5625,392.625 L 365.96875,388.96875 L 365.9375,388.9375 L 365.21875,387.3125 L 365.09375,387.03125 L 365.28125,386.8125 C 365.28125,386.8125 366.79566,384.92646 367.4375,384.15625 C 367.6937,383.8488 368.05119,383.21011 368.3125,382.6875 C 368.57381,382.16489 368.75,381.75 368.75,381.75 L 368.8125,381.625 L 368.875,381.5625 L 370.5,380.1875 L 370.53125,380.15625 L 373.09375,377.59375 L 372.75,374.53125 L 372.75,374.46875 L 372.75,374.40625 L 373,372.78125 L 373.0625,372.375 L 373.46875,372.34375 L 381.15625,371.75 L 383.0625,368.78125 L 383.09375,368.71875 L 383.15625,368.6875 L 386.53125,365.6875 L 386.5625,365.65625 L 390.5625,361.40625 L 390.71875,361.25 L 390.9375,361.25 L 394.34375,361.25 L 394.59375,361.25 L 394.75,361.4375 L 395.9375,363.125 L 396.9375,364.03125 L 398.90625,363.0625 L 399.15625,362.9375 L 399.40625,363.09375 L 402.21875,364.90625 L 404.625,364.78125 L 406.90625,360.125 L 406.90625,360.09375 L 406.9375,360.0625 L 409.1875,356.65625 L 409.28125,356.5625 L 409.375,356.5 L 413.40625,354.21875 L 413.5,354.1875 L 413.5625,354.1875 L 417.625,353.4375 C 417.67914,353.40558 418.30884,353.05615 419.0625,352.65625 C 419.45542,352.44776 419.85046,352.2248 420.21875,352.0625 C 420.58704,351.9002 420.84425,351.75 421.21875,351.75 C 421.52659,351.75 421.77089,351.87983 422.03125,352 C 422.29161,352.12017 422.5727,352.25741 422.8125,352.40625 C 423.29211,352.70394 423.6875,353 423.6875,353 L 423.84375,353.125 L 423.875,353.3125 L 424.46875,356.5 L 424.5,356.5625 L 424.5,356.59375 L 425.46875,358.875 L 425.5,358.9375 L 425.5,358.96875 L 426.03125,361.375 L 427.75,364.9375 L 429.25,368.3125 L 429.28125,368.34375 L 430.28125,370.3125 L 433.9375,372 L 437.59375,373.65625 L 437.6875,373.6875 L 437.78125,373.78125 L 439.03125,375.15625 L 439.1875,375.3125 L 439.15625,375.53125 L 438.90625,378.1875 L 438.90625,378.34375 L 438.8125,378.4375 C 438.8125,378.4375 438.45564,378.97607 438.15625,379.5 C 438.01508,379.74705 437.89875,379.96966 437.84375,380.125 C 437.94657,380.18895 438.06083,380.23412 438.15625,380.3125 C 438.34709,380.46926 438.55217,380.63759 438.71875,380.8125 C 439.05192,381.16232 439.3125,381.5 439.3125,381.5 L 439.59375,381.84375 L 439.25,382.15625 C 439.25,382.15625 438.89474,382.54467 438.53125,382.96875 C 438.3495,383.18079 438.18559,383.40912 438.0625,383.59375 C 437.98557,383.70914 437.92678,383.80233 437.90625,383.84375 C 437.90625,384.05459 437.93719,385.57947 437.96875,387.03125 C 437.9899,388.0043 437.98835,388.42024 438,388.9375 L 439.25,388.46875 L 439.375,388.40625 L 441.28125,387.03125 L 441.3125,387 L 441.34375,386.96875 L 444.4375,385.53125 L 444.46875,385.53125 L 447.5625,384.1875 L 447.625,384.15625 L 447.6875,384.15625 C 447.6875,384.15625 448.60424,384.04749 449.53125,383.9375 C 449.99476,383.88251 450.44695,383.83347 450.8125,383.78125 C 450.99528,383.75514 451.17001,383.73912 451.28125,383.71875 C 451.39249,383.69838 451.51115,383.61942 451.375,383.6875 C 451.55191,383.59904 451.58837,383.62199 451.71875,383.59375 C 451.84913,383.56551 452.03088,383.53366 452.21875,383.5 C 452.59448,383.43269 453.04771,383.35656 453.53125,383.28125 C 454.49833,383.13064 455.50582,383.00318 455.78125,382.96875 C 455.91165,382.95245 456.71551,382.74303 457.40625,382.5625 C 458.04678,382.39509 458.543,382.2725 458.625,382.25 L 461,379.96875 L 460.6875,377.125 L 459.5,375.84375 L 459.40625,375.71875 L 459.375,375.59375 L 458.46875,370.59375 C 458.43381,370.54011 458.03924,369.9608 457.59375,369.28125 C 457.36121,368.92653 457.12896,368.53866 456.9375,368.25 C 456.74604,367.96134 456.57587,367.73658 456.5625,367.71875 C 456.49981,367.63516 456.11985,367.15947 455.78125,366.75 C 455.44265,366.34053 455.125,365.96875 455.125,365.96875 L 455.03125,365.84375 L 455.03125,365.65625 L 454.9375,358.46875 L 454.9375,358.28125 L 455.0625,358.125 L 456.46875,356.4375 L 456.46875,356.40625 L 456.5,356.375 L 458.65625,354.46875 C 458.67447,354.30054 458.72344,353.80322 458.8125,353.125 C 458.8643,352.73051 458.91035,352.33503 458.96875,352 C 458.99795,351.83249 459.03164,351.69094 459.0625,351.5625 C 459.08796,351.45654 459.09972,351.36346 459.15625,351.25 C 459.16024,351.22744 459.18268,351.18771 459.1875,351.125 C 459.19715,350.99958 459.18607,350.80759 459.1875,350.59375 C 459.19037,350.16607 459.17584,349.60718 459.15625,349.0625 C 459.12109,348.08507 459.07327,347.34081 459.0625,347.15625 L 456.3125,344.75 L 456.3125,344.71875 L 456.28125,344.71875 L 451.9375,339.8125 L 451.90625,339.78125 L 449.1875,338.03125 L 449.15625,338.03125 L 449.125,338 L 446.4375,335.78125 L 446.3125,335.71875 L 446.28125,335.5625 L 445.59375,333.6875 L 445.5625,333.625 L 444.15625,331 L 436.90625,330.03125 L 433,331.28125 L 432.84375,331.3125 L 432.6875,331.28125 C 432.6875,331.28125 430.65567,330.49978 429.15625,330 C 428.91579,329.91985 428.34654,329.89205 427.6875,329.9375 C 427.02846,329.98295 426.278,330.09432 425.5625,330.21875 C 424.1315,330.46762 422.875,330.78125 422.875,330.78125 L 413.28125,333.0625 L 413.125,333.09375 L 413,333.03125 L 406.1875,331.03125 L 406,330.96875 L 405.90625,330.8125 L 402.625,325.5 L 398.5625,318.15625 L 398.5625,318.125 L 398.5625,318.09375 L 396.28125,312.5625 L 396.21875,312.4375 L 396.25,312.3125 L 396.75,308 L 396.75,307.96875 L 398.53125,300.625 L 398.5625,300.4375 L 398.71875,300.34375 L 401.15625,298.625 L 404.6875,292.03125 L 403.6875,291.5 L 403.625,291.46875 L 403.59375,291.4375 C 403.59375,291.4375 400.69804,288.72094 399.875,288.0625 C 399.58729,287.83233 398.70518,287.54729 397.84375,287.375 C 396.98232,287.20271 396.0985,287.09375 395.71875,287.09375 C 395.3122,287.09375 394.97766,286.91534 394.71875,286.6875 C 394.45984,286.45966 394.24448,286.17315 394.0625,285.90625 C 393.69854,285.37245 393.46875,284.84375 393.46875,284.84375 L 393.4375,284.8125 L 393.4375,284.75 L 392.75,281.65625 L 389.46875,278.375 L 389.25,278.15625 L 389.34375,277.84375 L 391.125,273.4375 L 391.15625,273.375 L 392.1875,269.84375 L 392.21875,269.84375 L 392.21875,269.8125 L 393.8125,265.875 L 393.9375,265.59375 L 394.25,265.5625 L 396.09375,265.40625 C 396.17324,265.36006 396.60568,265.12419 397.1875,264.8125 C 397.82182,264.47269 398.49067,264.09608 399,263.96875 C 399.34026,263.88368 399.68953,264.01142 399.90625,264.1875 C 400.12297,264.36358 400.23601,264.57924 400.34375,264.78125 C 400.46871,265.01555 400.482,265.09508 400.53125,265.25 L 402.65625,265.53125 L 404.59375,263.3125 L 404,261.8125 L 404,261.78125 L 402.0625,257.75 L 402.0625,257.71875 L 400.5625,255.0625 L 390.96875,247.15625 L 390.875,247.09375 L 386.0625,244.8125 zM 767.40625,246.0625 C 767.0951,246.37363 766.71301,246.5084 766.28125,246.71875 C 765.84949,246.9291 765.37738,247.16829 765.03125,247.4375 C 764.30461,248.00268 763.39886,249.09991 762.28125,250.03125 C 761.80955,250.42433 761.24701,251.10013 760.75,251.6875 C 760.50149,251.98119 760.29284,252.2512 760.0625,252.46875 C 759.83216,252.6863 759.6131,252.90625 759.1875,252.90625 C 759.20636,252.90625 758.99761,252.94518 758.75,253.03125 C 758.50239,253.11732 758.18124,253.25488 757.84375,253.375 C 757.16877,253.61525 756.42719,253.8694 755.6875,253.8125 C 755.11496,253.76846 754.62876,253.72716 754.15625,253.625 C 753.68374,253.52284 753.20055,253.33564 752.78125,252.96875 C 752.37697,252.615 752.26272,252.2879 752.28125,252.28125 C 752.27209,252.28079 752.27416,252.28724 752.25,252.28125 C 752.15337,252.25731 751.92992,252.20911 751.5625,252.1875 C 750.83858,252.14492 750.30236,252.19274 749.90625,252.3125 C 749.51014,252.43226 749.26835,252.60053 749.0625,252.875 C 748.57479,253.52528 748.03125,254.59375 748.03125,254.59375 L 748.03125,254.625 C 748.03125,254.625 747.8945,254.8459 747.84375,255.125 C 747.793,255.4041 747.81269,255.61735 748,255.78125 C 748.70539,256.39848 749.1512,256.73989 749.46875,257.375 C 749.63248,257.70248 749.65841,257.96068 749.6875,258.0625 C 749.71659,258.16432 749.70892,258.14839 749.875,258.28125 C 750.08233,258.44712 750.29035,258.59781 750.5,258.78125 C 750.70965,258.96469 750.94618,259.19098 751.03125,259.53125 C 751.06441,259.66388 751.0565,259.74693 751.0625,259.875 C 751.0685,260.00307 751.06322,260.14035 751.0625,260.3125 C 751.06105,260.6568 751.05991,261.07587 751.03125,261.5 C 751.00259,261.92413 750.93705,262.35858 750.875,262.71875 C 750.84398,262.89883 750.82844,263.06928 750.78125,263.21875 C 750.73406,263.36822 750.69375,263.49376 750.53125,263.65625 C 750.32321,263.86429 750.22667,263.90609 750.125,264.0625 C 750.02333,264.21891 749.90505,264.55382 749.6875,265.25 C 749.46518,265.96145 749.35107,266.34674 749.1875,266.6875 C 749.02393,267.02826 748.78967,267.27283 748.46875,267.59375 C 748.14346,267.91904 747.79174,268.06099 747.46875,268.1875 L 747.46875,268.21875 L 746.84375,269.96875 L 746.75,270.21875 L 746.5,270.28125 C 746.5,270.28125 744.11342,270.93749 742.34375,270.9375 C 740.83047,270.9375 739.11121,271.5447 737.96875,271.6875 C 736.98428,271.81056 734.80102,272.0105 734.59375,272.03125 L 731.625,274.53125 L 731.59375,274.5625 L 731.53125,274.625 L 730.5,276.125 L 730.9375,279.4375 C 731.14079,279.51871 731.5422,279.66585 732.1875,279.96875 C 732.58326,280.15452 732.99376,280.38375 733.34375,280.59375 C 733.69374,280.80375 733.98182,280.96973 734.1875,281.3125 C 734.19141,281.31901 734.1997,281.31982 734.3125,281.34375 C 734.4253,281.36768 734.60049,281.36383 734.78125,281.34375 C 735.14277,281.30358 735.5,281.21875 735.5,281.21875 L 737.375,280.5625 L 737.6875,280.46875 L 737.90625,280.71875 L 738.5625,281.46875 L 739.0625,280.9375 L 739.21875,280.8125 L 739.4375,280.8125 L 741.4375,280.8125 L 741.53125,280.8125 L 741.625,280.84375 L 744.53125,281.90625 L 747.3125,281.46875 L 747.8125,280.21875 L 747.90625,279.96875 L 748.1875,279.9375 L 749.71875,279.6875 L 750.28125,279.5625 L 750.28125,280.15625 L 750.28125,282.6875 L 750.28125,282.75 L 750.25,282.84375 L 749.625,284.96875 L 749.59375,285.15625 L 749.4375,285.25 L 747.53125,286.53125 L 747.5,286.5625 L 747.4375,286.5625 L 744.03125,287.84375 L 743.6875,287.96875 L 743.46875,287.65625 L 741.8125,285.53125 L 741.125,284.59375 L 736.125,284.84375 L 732.9375,286 L 730.40625,288 L 730.3125,288.09375 L 730.15625,288.09375 L 725.6875,288.875 L 725.0625,289.28125 L 724.9375,289.375 L 724.78125,289.375 L 723.40625,289.375 L 723.125,289.375 L 722.96875,289.15625 L 721.84375,287.375 L 721.6875,287.15625 L 721.8125,286.90625 L 722.4375,285.5 L 722.46875,285.40625 L 722.5625,285.34375 L 724.96875,283.3125 L 725,283.3125 L 727.40625,281.46875 C 727.37648,281.25541 727.29021,280.70109 727.15625,279.84375 C 726.99925,278.83894 726.80022,277.65065 726.71875,277.40625 C 726.65837,277.22509 726.4123,277.03427 726.15625,276.90625 C 725.95141,276.80383 725.84796,276.79868 725.78125,276.78125 C 725.67982,276.81191 725.5369,276.85158 725.28125,276.96875 C 724.94505,277.12284 724.64667,277.38332 724.625,277.4375 C 724.586,277.53499 724.50988,277.65727 724.375,277.75 C 724.24012,277.84273 724.03948,277.87289 723.90625,277.84375 C 723.63978,277.78546 723.5693,277.64437 723.46875,277.53125 C 723.26764,277.305 723.10313,277.02517 722.9375,276.71875 C 722.68742,276.2561 722.56428,275.96631 722.46875,275.75 L 720,275.75 L 719.8125,275.75 L 719.6875,275.625 L 717.90625,274.25 L 715.875,272.75 L 714.28125,274.34375 L 714,274.59375 L 713.65625,274.40625 C 713.65625,274.40625 712.87827,273.94735 712.5625,273 C 712.55207,272.96871 712.44434,272.79889 712.25,272.625 C 712.05566,272.45111 711.78592,272.25854 711.53125,272.09375 C 711.06499,271.79205 710.69699,271.59907 710.625,271.5625 L 709.5625,271.65625 L 709.125,274.9375 L 709.0625,275.4375 L 708.53125,275.34375 L 707.78125,275.21875 L 707.65625,275.21875 L 707.53125,275.125 L 703.90625,271.96875 L 700.875,272.4375 L 700.6875,272.46875 L 700.5625,272.40625 L 698.6875,271.34375 C 698.35579,271.85344 696.99858,273.98157 696.6875,274.5 C 696.56827,274.69871 696.26289,274.85319 696.03125,274.84375 C 695.79961,274.83431 695.64269,274.75184 695.5,274.65625 C 695.21463,274.46508 694.97736,274.18367 694.71875,273.875 C 694.27518,273.34557 693.90009,272.75429 693.625,272.34375 C 693.42965,272.5484 693.1347,272.94726 692.875,273.375 C 692.3556,274.23047 691.90625,275.21875 691.90625,275.21875 L 691.5625,275.90625 L 691.0625,275.3125 L 688.65625,272.40625 L 688.4375,272.125 L 688.625,271.8125 L 689.59375,270.4375 L 688.875,269.1875 L 687.34375,266.53125 L 687.1875,266.25 L 687.375,266 C 687.375,266 688.41968,264.36012 690.15625,263.78125 C 690.17953,263.77349 690.17,263.78864 690.1875,263.78125 C 690.14479,263.72615 690.09952,263.63164 689.9375,263.5 C 689.49938,263.14403 688.8125,262.8125 688.8125,262.8125 L 688.8125,262.78125 L 688.78125,262.78125 L 686.625,261.375 L 685.75,262.46875 L 685.53125,265.09375 L 687.28125,267.34375 L 687.34375,267.40625 L 687.34375,267.46875 C 687.34375,267.46875 687.54208,267.86394 687.75,268.34375 C 687.95792,268.82356 688.19197,269.3303 688.28125,269.6875 C 688.31427,269.81959 688.32455,269.98633 688.25,270.15625 C 688.17545,270.32617 688.02986,270.44663 687.90625,270.5 C 687.65904,270.60675 687.4615,270.60276 687.28125,270.59375 C 686.97041,270.57821 686.69487,270.54927 686.5,270.5625 C 686.48835,270.6056 686.47825,270.6156 686.46875,270.6875 C 686.4352,270.94153 686.44604,271.33272 686.46875,271.71875 C 686.51417,272.49082 686.625,273.28125 686.625,273.28125 L 686.78125,274.125 L 686.34375,273.9375 L 686.8125,274.8125 L 686.875,274.90625 L 686.875,275.03125 L 686.96875,276.9375 L 687,277.21875 L 686.78125,277.375 C 686.78125,277.375 685.62192,278.21875 684.09375,278.21875 C 682.68777,278.21875 681.25525,277.95444 680.8125,277.84375 C 680.58529,277.78696 680.46149,277.69618 680.3125,277.59375 C 680.16351,277.49132 680.02346,277.38729 679.875,277.28125 C 679.57808,277.06916 679.25397,276.9375 679.25,276.9375 C 679.14879,276.9375 678.84409,277.02607 678.59375,277.15625 C 678.38444,277.26509 678.25054,277.3499 678.09375,277.4375 C 678.09153,277.43991 678.08239,277.4427 678.0625,277.46875 C 678.02272,277.52084 677.9428,277.61705 677.875,277.71875 C 677.73939,277.92216 677.57187,278.19824 677.40625,278.46875 C 677.07502,279.00977 676.78125,279.53125 676.78125,279.53125 L 676.75,279.5625 L 675.78125,280.90625 C 675.76285,280.99078 675.65774,281.54602 675.5,282.1875 C 675.41522,282.53229 675.30303,282.87681 675.21875,283.15625 C 675.17661,283.29597 675.13693,283.4241 675.09375,283.53125 C 675.07216,283.58482 675.0643,283.62986 675.03125,283.6875 C 674.9982,283.74514 674.9918,283.83223 674.78125,283.9375 C 674.83352,283.91137 674.70586,283.97958 674.59375,284.0625 C 674.48164,284.14542 674.33432,284.26142 674.1875,284.375 C 673.89386,284.60216 673.58817,284.83881 673.40625,284.96875 C 673.1105,285.18002 671.43384,286.36587 671.15625,286.5625 L 671.03125,292.1875 C 671.07111,292.26096 671.1761,292.44236 671.34375,292.71875 C 671.44288,292.88218 671.53059,293.05607 671.625,293.1875 C 671.71941,293.31893 671.84526,293.3984 671.8125,293.375 C 671.92486,293.45526 671.97011,293.52903 672.0625,293.625 C 672.15489,293.72097 672.25444,293.83471 672.375,293.96875 C 672.61612,294.23682 672.9295,294.57806 673.21875,294.90625 C 673.508,295.23444 673.80197,295.56839 674.03125,295.8125 C 674.14589,295.93456 674.24012,296.02566 674.3125,296.09375 C 674.38488,296.16184 674.46976,296.21026 674.34375,296.15625 C 674.50265,296.22435 674.98604,296.43564 675.5,296.625 C 676.01396,296.81436 676.62798,296.96875 676.75,296.96875 C 677.21725,296.96876 677.68026,297.13836 678.15625,297.3125 C 678.63224,297.48664 679.0767,297.66817 679.28125,297.75 C 679.30612,297.75995 679.65159,297.8716 680.03125,297.96875 C 680.41091,298.0659 680.86774,298.16712 681.34375,298.28125 C 682.29577,298.50951 683.23873,298.73273 683.53125,298.8125 C 683.72728,298.86597 684.4141,298.99952 685.125,299.15625 C 685.8359,299.31298 686.56065,299.49747 686.96875,299.625 C 687.37514,299.75199 688.12966,300.03356 688.84375,300.3125 C 689.2008,300.45197 689.54669,300.58748 689.8125,300.6875 C 689.94541,300.73751 690.07243,300.78366 690.15625,300.8125 C 690.24007,300.84134 690.30426,300.8528 690.25,300.84375 C 690.41058,300.87051 690.38712,300.88709 690.46875,300.875 C 690.55038,300.86291 690.75678,300.81024 691.21875,300.65625 C 691.71687,300.49022 692.28607,300.35594 692.71875,300.21875 C 692.93509,300.15015 693.09737,300.06121 693.21875,300 C 693.27944,299.96939 693.32381,299.95242 693.34375,299.9375 C 693.5027,299.65136 693.83921,299.24738 694.21875,298.84375 C 694.40852,298.64193 694.59813,298.43754 694.8125,298.28125 C 695.02687,298.12496 695.25843,297.96875 695.59375,297.96875 C 695.91518,297.96875 696.19209,298.20275 696.3125,298.40625 C 696.43291,298.60975 696.48412,298.82031 696.53125,299 C 696.62551,299.35937 696.7622,299.62417 696.71875,299.59375 C 697.05832,299.83146 697.53625,300.32312 698.03125,300.8125 C 698.52625,301.30188 698.96875,301.75 698.96875,301.75 C 698.96875,301.75 699.42167,302.1989 699.90625,302.65625 C 700.14854,302.88493 700.38089,303.1125 700.59375,303.28125 C 700.74009,303.39727 700.88814,303.49657 700.9375,303.53125 C 700.96797,303.53679 700.97863,303.54047 700.96875,303.53125 C 701.46042,303.63237 701.68127,303.97251 701.90625,304.1875 C 702.13584,304.40689 702.3097,304.51894 702.53125,304.53125 C 703.2191,304.56946 704.22076,304.38782 704.8125,304.21875 C 705.40422,304.04968 706.23425,303.7391 706.71875,303.59375 C 707.18862,303.45279 707.96676,303.25 709.09375,303.25 C 709.62945,303.25 709.98141,303.22846 710.34375,303.34375 C 710.70609,303.45904 710.99553,303.72915 711.28125,304.0625 C 711.57844,304.40924 711.85971,304.81683 712.15625,305.1875 C 712.45279,305.55817 712.76956,305.85353 713,305.96875 C 713.37949,306.1585 713.65665,306.33541 713.875,306.5625 C 713.98418,306.67604 714.07875,306.81873 714.125,307 C 714.35676,306.98187 714.6483,306.97875 715.09375,306.9375 C 715.69755,306.88159 716.27246,306.8125 716.59375,306.8125 C 716.6726,306.8125 716.91058,306.76188 717.1875,306.59375 C 717.46442,306.42562 717.79548,306.16987 718.125,305.90625 C 718.40269,305.6841 718.52028,305.46483 718.8125,305.21875 C 719.10472,304.97267 719.5628,304.8125 720.1875,304.8125 C 721.29023,304.8125 722.92506,304.76578 723.90625,304.8125 C 724.54299,304.84282 725.04019,305.16119 725.46875,305.4375 C 725.89731,305.71381 726.27603,305.96513 726.65625,306.03125 C 727.59265,306.19411 728.7789,306.0729 729.8125,306.5625 C 730.33442,306.80971 730.80017,307.20459 731.25,307.53125 C 731.69983,307.85791 732.11647,308.0625 732.3125,308.0625 C 732.96778,308.06249 735.02531,307.56748 735.625,307.25 C 736.41817,306.83011 737.12019,306.53298 737.65625,305.84375 C 738.02464,305.37012 738.64893,304.80294 739.25,304.28125 C 739.55054,304.02041 739.8305,303.78163 740.0625,303.59375 C 740.2945,303.40587 740.44486,303.26593 740.5625,303.1875 C 740.70398,303.09319 740.79084,303.10097 740.90625,303.0625 C 741.02166,303.02403 741.15235,302.98228 741.3125,302.9375 C 741.6328,302.84793 742.02515,302.73939 742.46875,302.625 C 743.35595,302.39622 744.41858,302.14172 745.125,301.90625 C 746.60969,301.41136 747.44355,301.17238 748.375,300.90625 C 748.8498,300.77059 749.15244,300.68629 749.34375,300.5625 C 749.53506,300.43871 749.70522,300.27486 749.90625,299.8125 C 750.2975,298.91254 750.4375,297.35711 750.4375,297.1875 C 750.4375,297.01413 750.45332,296.87436 750.5,296.65625 C 750.54668,296.43814 750.6283,296.15888 750.71875,295.90625 C 750.8092,295.65362 750.90183,295.41049 751.0625,295.1875 C 751.22317,294.96451 751.49273,294.71875 751.875,294.71875 C 751.88313,294.71875 752.26444,294.54057 752.65625,294.3125 C 752.85216,294.19847 753.0712,294.08105 753.3125,294 C 753.5538,293.91895 753.85512,293.89245 754.15625,294 C 754.65768,294.17907 754.94414,294.54179 755.28125,294.8125 C 755.61836,295.08321 755.9122,295.25 756.28125,295.25 C 757.35265,295.24999 758.2143,295.25 758.75,295.25 C 758.71281,295.25 758.84063,295.25295 759,295.21875 C 759.15937,295.18455 759.3841,295.12436 759.625,295.0625 C 760.1068,294.93878 760.70722,294.76111 761.3125,294.59375 C 761.91778,294.42639 762.51003,294.28351 763,294.15625 C 763.24498,294.09262 763.47902,294.03899 763.65625,294 C 763.83348,293.96101 763.91873,293.90625 764.09375,293.90625 C 764.5545,293.90624 765.42594,293.875 767.53125,293.875 C 769.63652,293.875 771.41649,293.90625 771.78125,293.90625 C 771.81846,293.90625 771.92146,293.90428 771.96875,293.90625 C 771.79583,293.78913 771.76583,293.79599 771.5625,293.625 C 771.02728,293.17493 770.40625,292.54991 770.40625,291.6875 C 770.40623,290.74157 769.96178,289.00717 769.90625,288.78125 L 766.6875,286.125 L 766.65625,286.09375 C 766.62346,286.07185 766.23517,285.83386 765.84375,285.5 C 765.63954,285.32582 765.44509,285.15049 765.28125,284.9375 C 765.19933,284.831 765.11614,284.70636 765.0625,284.5625 C 765.00886,284.41864 764.97934,284.20788 765.0625,284 C 765.33925,283.30814 766.5268,281.2868 767.03125,280.65625 C 767.17427,280.47748 767.77759,279.6529 768.3125,278.90625 C 768.84741,278.1596 769.3125,277.46875 769.3125,277.46875 L 769.375,277.40625 L 769.4375,277.375 C 769.4375,277.375 770.29708,276.77056 771.1875,276.125 C 771.63271,275.80222 772.07308,275.46082 772.4375,275.1875 C 772.80192,274.91418 773.11674,274.66451 773.125,274.65625 C 773.22991,274.55135 773.60594,274.04421 773.90625,273.59375 C 774.0564,273.36852 774.2186,273.14419 774.3125,272.96875 C 774.35378,272.89162 774.39332,272.82924 774.40625,272.78125 C 774.40625,272.68606 774.36509,272.00259 774.25,271.40625 C 774.19246,271.10808 774.11444,270.82575 774.03125,270.625 C 773.94806,270.42425 773.83932,270.34631 773.90625,270.375 C 773.68661,270.28087 773.36713,270.0933 772.9375,269.84375 C 772.50787,269.5942 771.9929,269.28602 771.5,268.96875 C 771.0071,268.65148 770.52184,268.31544 770.15625,268.03125 C 769.97345,267.88916 769.84592,267.78724 769.71875,267.65625 C 769.65516,267.59076 769.58484,267.51955 769.53125,267.4375 C 769.47766,267.35545 769.40625,267.25707 769.40625,267.0625 C 769.40626,266.61611 769.3914,265.68441 769.59375,264.875 C 769.70087,264.44652 769.88327,264.1392 769.9375,263.96875 C 769.95824,263.90358 769.9678,263.87953 769.96875,263.875 C 769.74869,263.69896 769.29315,263.35173 768.90625,263 C 768.7128,262.82413 768.55561,262.64664 768.40625,262.46875 C 768.25689,262.29086 768.0625,262.16219 768.0625,261.78125 C 768.06251,261.68605 768.01859,261.29282 768.03125,260.875 C 768.04391,260.45718 768.12396,259.97021 768.4375,259.53125 C 768.86298,258.93556 768.875,258.8874 768.875,257.84375 C 768.875,257.32192 768.85496,256.40358 768.84375,255.5625 C 768.83814,255.14196 768.83946,254.76801 768.84375,254.4375 C 768.84804,254.10699 768.83131,253.87471 768.875,253.65625 C 768.92184,253.42207 769.01061,253.25111 769.125,253.03125 C 769.23939,252.81139 769.39193,252.5577 769.53125,252.3125 C 769.80988,251.82211 770.10584,251.30143 770.15625,251.125 C 770.32797,250.52397 770.76106,249.29442 770.875,248.96875 L 768.625,246.15625 C 768.50694,246.13107 768.35197,246.09297 768.0625,246.0625 C 767.86952,246.04219 767.67144,246.05031 767.53125,246.0625 C 767.39106,246.07469 767.34086,246.12789 767.40625,246.0625 zM 911,249.09375 L 910,252.28125 L 909.9375,252.4375 L 909.84375,252.53125 L 907.3125,254.53125 L 907.21875,254.59375 L 907.125,254.625 L 903.21875,255.78125 L 903.15625,255.78125 L 903.09375,255.78125 L 897.15625,255.90625 C 897.15625,255.90625 896.02564,256.21589 894.8125,256.5625 C 894.20593,256.73581 893.57403,256.90963 893.0625,257.0625 C 892.55097,257.21537 892.13039,257.36659 892.03125,257.40625 C 891.67865,257.54729 891.37617,257.49605 890.96875,257.46875 C 890.56133,257.44145 890.09104,257.38482 889.625,257.3125 C 888.69291,257.16787 887.74689,256.96813 887.4375,256.90625 C 887.45253,256.90926 887.00445,256.90658 886.5,256.9375 C 885.99555,256.96842 885.38538,257.031 884.75,257.09375 C 883.47924,257.21926 882.14246,257.38251 881.8125,257.4375 C 881.79194,257.44093 881.34925,257.58694 880.875,257.8125 C 880.40075,258.03806 879.83011,258.33489 879.28125,258.625 C 878.18354,259.20522 877.1875,259.78125 877.1875,259.78125 L 877.125,259.8125 L 877.0625,259.8125 L 872.9375,260.78125 L 871.75,265.375 L 871.65625,265.75 L 871.28125,265.75 L 866.5,266.03125 L 863.15625,267.4375 L 862.4375,268.75 L 864.84375,270.40625 L 865.15625,270.625 L 865.03125,271 C 865.03125,271 864.88511,271.44565 864.65625,271.96875 C 864.42739,272.49185 864.16635,273.05238 863.78125,273.4375 C 863.7802,273.43855 863.65889,273.64833 863.5625,273.9375 C 863.46611,274.22667 863.3574,274.61924 863.28125,275 C 863.12895,275.76152 863.03125,276.57951 863.03125,276.875 C 863.03125,277.85485 862.49415,278.98675 861.96875,279.90625 C 861.65261,280.4595 861.14621,280.73487 860.65625,280.84375 C 860.16629,280.95263 859.645,280.98034 859,281.15625 C 858.15586,281.38647 856.79106,281.39088 855.21875,281.375 C 853.64644,281.35912 851.9363,281.3125 850.5625,281.3125 C 847.84519,281.3125 845.48791,281.80432 844.15625,281.9375 C 843.59715,281.99341 842.13391,282.26378 840.84375,282.53125 C 839.65177,282.77837 838.74792,282.99709 838.59375,283.03125 L 837.9375,283.9375 C 838.10661,284.05089 838.41217,284.27217 838.96875,284.59375 C 839.31416,284.79332 839.6775,284.98288 840,285.125 C 840.3225,285.26712 840.62129,285.34375 840.6875,285.34375 C 841.31991,285.34375 842.18257,285.61855 843,285.875 C 843.81743,286.13145 844.53125,286.375 844.53125,286.375 L 844.84375,286.5 L 844.875,286.8125 C 844.875,286.8125 844.93672,287.67577 845,288.625 C 845.06328,289.57423 845.125,290.59689 845.125,291.03125 C 845.12502,291.5212 844.99873,292.31316 844.9375,293.09375 C 844.90689,293.48404 844.88618,293.85899 844.90625,294.125 C 844.92632,294.39101 845.03599,294.50355 844.90625,294.40625 C 845.18987,294.61895 845.31322,294.88345 845.4375,295.1875 C 845.56178,295.49155 845.65233,295.85248 845.75,296.21875 C 845.94534,296.95129 846.12968,297.73746 846.25,298.21875 C 846.51796,299.2907 847.10911,302.66049 847.125,302.75 C 847.16823,302.83088 847.39756,303.23331 847.71875,303.75 C 847.89488,304.03335 848.0707,304.32887 848.25,304.5625 C 848.4293,304.79613 848.62031,304.97844 848.65625,305 C 848.99297,305.20202 849.77693,305.67806 850.59375,306.125 C 851.00216,306.34847 851.41984,306.57015 851.78125,306.71875 C 852.14266,306.86735 852.44538,306.9375 852.5625,306.9375 C 852.95046,306.9375 853.42679,307.06159 854.03125,307.21875 C 854.63571,307.37591 855.33281,307.57474 856,307.78125 C 857.33439,308.19428 858.53125,308.59375 858.53125,308.59375 L 858.5625,308.625 L 858.59375,308.625 C 858.59375,308.625 859.42432,309.00096 860.375,309.375 C 860.85034,309.56202 861.35454,309.73845 861.78125,309.875 C 862.20796,310.01155 862.57813,310.09375 862.65625,310.09375 C 863.24105,310.09375 863.66896,310.3611 863.9375,310.5625 C 864.20604,310.7639 864.32183,310.84375 864.4375,310.84375 C 864.5865,310.84375 865.28299,310.722 865.875,310.5 C 866.17101,310.389 866.43952,310.25199 866.65625,310.125 C 866.87298,309.99801 867.01851,309.86498 867.03125,309.84375 C 867.20161,309.55982 867.45158,309.34448 867.78125,309.0625 C 868.11092,308.78052 868.52412,308.44805 868.9375,308.15625 C 869.35088,307.86445 869.77526,307.59152 870.15625,307.375 C 870.53724,307.15848 870.8448,306.99462 871.1875,306.9375 C 871.64628,306.86104 872.54984,306.82883 873.40625,306.78125 C 874.26266,306.73367 875.03125,306.6875 875.03125,306.6875 L 875.1875,306.6875 L 875.3125,306.75 L 879.46875,309.28125 L 879.5,309.3125 L 879.5625,309.34375 L 884,313.4375 L 884.0625,313.46875 L 884.09375,313.5 L 888.65625,315.84375 L 894.84375,319.125 L 894.9375,319.15625 L 895,319.25 L 897.8125,322.65625 L 900.59375,323.625 L 900.8125,323.71875 L 900.875,323.90625 L 901.8125,326.0625 L 904.375,324.75 L 906.15625,323.09375 L 906.125,322.71875 L 905.75,319.53125 L 905.75,319.5 L 905.75,319.46875 L 905.65625,317.25 L 904.78125,313.0625 L 904.71875,312.84375 L 904.875,312.65625 L 905.84375,311.34375 L 906,308.1875 C 905.7447,308.14872 905.49961,308.11037 904.90625,308.03125 C 904.07554,307.92049 903.1028,307.8125 902.6875,307.8125 C 902.32833,307.8125 901.97118,307.65399 901.78125,307.40625 C 901.59132,307.15851 901.53886,306.88467 901.53125,306.65625 C 901.51603,306.1994 901.65625,305.84375 901.65625,305.84375 L 902.46875,303.0625 L 902.53125,302.90625 L 902.65625,302.8125 L 904.90625,301.25 L 904.53125,299.09375 L 904.5,299 L 903.1875,295.34375 L 903.15625,295.28125 L 903.15625,295.21875 L 902.65625,289.71875 C 902.51343,289.7374 902.33139,289.78162 902,289.84375 C 901.57434,289.92356 901.04953,290.0095 900.53125,290.0625 C 900.01297,290.1155 899.50779,290.14163 899.03125,290.03125 C 898.55471,289.92087 898.0506,289.6038 897.90625,289.0625 C 897.56903,287.79803 897.23716,287.16117 897.03125,286.875 C 897.01848,286.87144 897.01491,286.8787 897,286.875 C 896.8733,286.84357 896.67239,286.81337 896.4375,286.78125 C 895.96772,286.71701 895.33253,286.66924 894.71875,286.625 C 893.60231,286.54453 892.71999,286.47607 892.53125,286.46875 C 892.46011,286.54582 892.45091,286.58763 892.3125,286.71875 C 892.08207,286.93705 891.79946,287.19897 891.4375,287.34375 C 891.305,287.39675 890.86179,287.65573 890.5,287.875 C 890.13821,288.09427 889.8125,288.28125 889.8125,288.28125 L 889.75,288.3125 L 889.65625,288.34375 C 889.65625,288.34375 889.17502,288.47093 888.65625,288.53125 C 888.39686,288.56141 888.13444,288.56008 887.875,288.53125 C 887.74528,288.51684 887.61491,288.51207 887.46875,288.4375 C 887.32259,288.36293 887.13948,288.19741 887.09375,287.96875 C 887.10097,288.00485 887.0362,287.83738 886.9375,287.6875 C 886.8388,287.53762 886.72706,287.3528 886.59375,287.1875 C 886.42353,286.97642 886.34843,286.92271 886.25,286.8125 L 884.875,287.1875 L 884.8125,287.1875 L 884.78125,287.1875 C 884.78125,287.1875 884.33754,287.23636 883.84375,287.28125 C 883.34995,287.32614 882.85565,287.375 882.59375,287.375 C 882.37351,287.375 881.29941,287.36608 880.25,287.34375 C 879.20059,287.32142 878.21875,287.28125 878.21875,287.28125 L 877.71875,287.28125 L 877.71875,286.78125 L 877.71875,284.71875 L 877.71875,284.5625 L 877.8125,284.40625 L 879,283 L 879.09375,282.875 L 879.21875,282.84375 L 880.59375,282.375 L 881.5,280 L 881.53125,279.875 L 881.625,279.8125 L 882.84375,278.71875 L 883.25,276.78125 L 883.3125,276.46875 L 883.65625,276.375 L 885.15625,276.0625 L 884.71875,274.6875 L 883.53125,273.25 L 883.40625,273.09375 L 883.4375,272.90625 L 883.78125,269.0625 L 883.8125,268.75 L 884.09375,268.65625 L 888.1875,266.9375 L 888.21875,266.9375 L 892.3125,265.34375 L 896.59375,263.46875 L 896.625,263.4375 L 896.65625,263.4375 C 896.65625,263.4375 897.79976,263.16424 899,262.90625 C 899.60012,262.77725 900.21876,262.65224 900.71875,262.5625 C 900.96874,262.51763 901.19235,262.49141 901.375,262.46875 C 901.55765,262.44609 901.64476,262.4227 901.875,262.46875 C 902.19886,262.53351 903.12532,262.77522 904.09375,263.03125 C 904.57797,263.15926 905.06019,263.28307 905.4375,263.375 C 905.62615,263.42096 905.78571,263.47499 905.90625,263.5 C 906.02679,263.52501 906.13244,263.53125 906.0625,263.53125 C 906.02678,263.53125 906.28295,263.48796 906.5625,263.4375 C 906.84205,263.38704 907.20074,263.32235 907.5625,263.25 C 908.28601,263.1053 909.04424,262.95796 909.40625,262.90625 C 909.62519,262.87497 910.11176,262.8358 910.8125,262.78125 C 911.51324,262.7267 912.36442,262.65517 913.21875,262.59375 C 914.91153,262.47204 916.50136,262.3458 916.53125,262.34375 C 916.53153,262.34373 916.5625,262.34375 916.5625,262.34375 L 919.09375,261.1875 L 919.15625,261.15625 L 921.03125,259.3125 L 917.15625,258.8125 L 916.875,258.75 L 916.75,258.46875 L 915.96875,256.15625 L 915.4375,254.84375 L 915.28125,254.46875 L 915.625,254.21875 L 918.6875,252.125 C 918.55774,252.04277 918.55354,252.02715 918.40625,251.9375 C 918.15505,251.7846 917.89559,251.63915 917.6875,251.53125 C 917.58346,251.4773 917.49856,251.43067 917.4375,251.40625 C 917.37644,251.38183 917.30507,251.40625 917.40625,251.40625 C 917.25446,251.40625 917.05249,251.37061 916.75,251.34375 C 916.44751,251.31689 916.08954,251.28933 915.71875,251.25 C 915.34796,251.21067 914.95983,251.1633 914.65625,251.125 C 914.35267,251.0867 914.17015,251.0738 914,251.03125 C 913.69671,250.95543 913.57411,250.81132 913.40625,250.65625 C 913.23839,250.50118 913.07492,250.31694 912.90625,250.125 C 912.56891,249.74113 912.23567,249.31423 912.09375,249.125 C 912.0851,249.11346 912.10162,249.10516 912.09375,249.09375 L 911,249.09375 zM 666.90625,251.75 C 666.93647,251.75671 666.76934,251.75632 666.5625,251.8125 C 666.35566,251.86868 666.0804,251.93358 665.84375,252.03125 C 665.40472,252.21244 665.08471,252.37882 665.03125,252.40625 C 665.02708,252.40839 664.96875,252.4375 664.96875,252.4375 L 661.5,255.0625 L 661.40625,255.125 L 661.28125,255.15625 L 655.15625,255.96875 L 655.125,255.96875 L 655.09375,255.96875 C 655.09375,255.96875 651.95807,256.09375 650.90625,256.09375 C 650.48451,256.09375 650.19291,256.21605 650,256.3125 C 649.80709,256.40895 649.75,256.46875 649.75,256.46875 L 649.625,256.59375 L 649.40625,256.625 C 649.40625,256.625 647.39623,256.70232 645.3125,256.78125 C 644.27064,256.82072 643.19233,256.84539 642.375,256.875 C 641.59167,256.90338 641.12298,256.93494 640.9375,256.9375 C 640.94341,256.9547 640.81351,257.01129 640.71875,257.125 C 640.6153,257.24914 640.55753,257.33228 640.53125,257.375 L 639.84375,260.8125 L 639.84375,260.9375 L 639.75,261.03125 C 639.75,261.03125 639.59063,261.25837 639.40625,261.53125 C 639.22187,261.80413 639.03029,262.1942 639.03125,262.1875 C 638.98812,262.48938 638.83621,262.65617 638.6875,262.8125 C 638.53879,262.96883 638.37964,263.10135 638.21875,263.21875 C 637.89698,263.45355 637.59375,263.625 637.59375,263.625 L 637.375,263.75 L 637.15625,263.65625 C 637.15625,263.65625 636.61077,263.43021 635.96875,263.1875 C 635.32673,262.94479 634.56224,262.67181 634.25,262.59375 C 633.6778,262.4507 633.25561,262.0608 632.8125,261.71875 C 632.36939,261.3767 631.93091,261.09244 631.625,261.03125 C 631.50348,261.00695 630.94403,260.9707 630.28125,260.96875 C 629.61847,260.9668 628.82084,260.97643 628.03125,261 C 627.24166,261.02357 626.4721,261.06434 625.875,261.09375 C 625.57645,261.10846 625.31439,261.11269 625.125,261.125 C 624.95437,261.13609 624.8518,261.15648 624.84375,261.15625 C 624.80003,261.20777 624.70871,261.30461 624.65625,261.40625 C 624.59892,261.51732 624.59332,261.5461 624.5625,261.625 L 625.875,264.28125 L 625.9375,264.4375 L 625.90625,264.59375 C 625.90625,264.59375 625.79171,265.31285 625.65625,266.09375 C 625.58852,266.4842 625.50828,266.89254 625.4375,267.21875 C 625.40211,267.38186 625.37912,267.53296 625.34375,267.65625 C 625.31194,267.76713 625.31688,267.85532 625.21875,268 C 625.20895,268.05877 625.19428,268.16467 625.1875,268.28125 C 625.17394,268.51442 625.18364,268.82374 625.1875,269.125 C 625.1948,269.69497 625.21573,270.16136 625.21875,270.21875 C 625.35514,270.43169 626.14641,271.63984 626.34375,271.96875 C 626.4302,272.11283 626.51568,272.29766 626.65625,272.59375 C 626.79682,272.88984 626.96277,273.24159 627.125,273.59375 C 627.44946,274.29807 627.75,274.96875 627.75,274.96875 L 627.8125,275.0625 L 627.8125,275.15625 C 627.8125,275.15625 627.87931,277.58324 627.9375,278.28125 C 627.96474,278.60811 627.82498,278.93364 627.625,279.125 C 627.42502,279.31636 627.17785,279.42872 626.96875,279.5 C 626.75965,279.57128 626.56296,279.61898 626.40625,279.65625 C 626.24954,279.69352 626.14031,279.74707 626.1875,279.71875 C 625.84663,279.92327 623.27227,281.42478 622.8125,281.6875 C 622.7162,281.74253 622.35937,282.04861 622.09375,282.34375 C 621.96094,282.49132 621.83512,282.63423 621.75,282.75 C 621.7137,282.79937 621.67415,282.84018 621.65625,282.875 C 621.64036,282.93853 621.63948,282.93891 621.65625,282.90625 C 621.61405,283.0543 621.55357,283.11858 621.5,283.1875 C 621.44209,283.26201 621.38366,283.33288 621.3125,283.40625 C 621.17018,283.55298 620.99239,283.7111 620.8125,283.875 C 620.45271,284.2028 620.04078,284.5618 619.90625,284.71875 C 619.89066,284.73693 619.77983,284.90504 619.6875,285.125 C 619.59517,285.34496 619.52172,285.61852 619.4375,285.875 C 619.26906,286.38797 619.125,286.875 619.125,286.875 L 619.125,286.96875 L 619.0625,287.03125 L 616.125,290.90625 L 616.28125,291.65625 L 616.34375,291.875 L 616.21875,292.0625 L 613.90625,295.71875 L 613.875,295.78125 L 613.8125,295.8125 C 613.8125,295.8125 613.49785,296.10691 613.15625,296.4375 C 612.81465,296.76808 612.44092,297.1621 612.375,297.25 C 612.26204,297.40061 612.13494,297.54847 612,297.6875 C 611.94704,297.74206 611.92459,297.78979 611.875,297.84375 C 612.77825,297.86221 613.43593,297.90396 614.625,298.0625 C 615.05721,298.12012 615.64208,298.31585 616.34375,298.5625 C 617.04542,298.80915 617.83645,299.13458 618.59375,299.4375 C 620.10835,300.04334 621.4375,300.625 621.4375,300.625 L 621.5,300.625 L 621.5625,300.6875 C 621.5625,300.6875 622.18846,301.15795 622.875,301.65625 C 623.21827,301.9054 623.59122,302.15321 623.875,302.34375 C 624.01689,302.43902 624.12731,302.53952 624.21875,302.59375 C 624.31019,302.64798 624.40814,302.64891 624.3125,302.625 C 624.45701,302.66113 624.52173,302.72591 624.625,302.78125 C 624.72827,302.83659 624.84035,302.89128 624.96875,302.96875 C 625.22555,303.12369 625.54975,303.33279 625.875,303.53125 C 626.5255,303.92816 627.26999,304.34068 627.625,304.4375 C 628.55766,304.69187 630.8162,305.10776 632.125,305.8125 C 632.71815,306.13189 633.31565,306.48886 633.8125,306.84375 C 634.06093,307.0212 634.28974,307.19599 634.46875,307.375 C 634.64776,307.55401 634.81434,307.72792 634.875,308.03125 C 634.92216,308.26704 634.97276,308.62838 635.0625,308.9375 C 635.10737,309.09206 635.17436,309.22643 635.21875,309.3125 C 635.24095,309.35554 635.24621,309.36546 635.25,309.375 C 635.47687,309.49403 635.58489,309.6387 635.75,309.8125 C 635.92171,309.99325 636.10976,310.20046 636.28125,310.40625 C 636.62424,310.81783 636.90625,311.21875 636.90625,311.21875 L 636.9375,311.25 L 636.9375,311.28125 L 638.375,313.78125 L 638.40625,313.78125 L 639.375,315.75 L 639.4375,315.875 L 639.4375,316.03125 C 639.4375,316.03125 639.35166,316.78911 639.25,317.625 C 639.19917,318.04295 639.15905,318.46934 639.09375,318.84375 C 639.02845,319.21816 638.98028,319.50819 638.84375,319.78125 C 638.68,320.10872 638.31656,320.72027 637.96875,321.28125 C 637.62094,321.84223 637.28125,322.3125 637.28125,322.3125 L 637.28125,322.34375 C 637.28125,322.34375 636.87208,322.91771 636.40625,323.53125 C 636.17333,323.83802 635.94607,324.14773 635.71875,324.40625 C 635.60509,324.53551 635.48121,324.65127 635.375,324.75 C 635.26879,324.84873 635.1812,324.95877 635,325.03125 C 634.87282,325.08213 634.37776,325.33507 633.9375,325.625 C 633.49724,325.91493 633.04574,326.27876 632.96875,326.375 C 632.73177,326.67121 632.49783,326.86005 632.34375,327.03125 C 632.18967,327.20245 632.09375,327.32159 632.09375,327.59375 C 632.09376,328.06963 632.01248,328.90983 631.96875,329.71875 C 631.94689,330.12321 631.95367,330.51836 631.96875,330.8125 C 631.98006,331.03311 632.03844,331.22023 632.03125,331.25 C 632.18415,331.45184 632.2581,331.65779 632.375,331.9375 C 632.49843,332.23285 632.63646,332.58265 632.75,332.90625 C 632.97708,333.55344 633.15625,334.125 633.15625,334.125 L 632.84375,334.21875 L 638.40625,336.09375 L 638.46875,336.09375 L 644.8125,336.28125 L 644.84375,336.28125 L 650.90625,334.53125 C 650.90625,334.53125 654.85066,333.25812 655.90625,332.90625 C 656.05157,332.85781 656.45582,332.65007 656.875,332.34375 C 657.29418,332.03743 657.74678,331.65586 658.1875,331.28125 C 658.93666,330.64446 659.41395,330.1989 659.59375,330.03125 L 658.84375,327.40625 L 656.03125,324.0625 L 655.84375,323.84375 L 655.96875,323.53125 L 656.875,321.59375 L 656.96875,321.34375 L 657.25,321.28125 L 661.75,320.59375 L 663.78125,319.09375 L 663.8125,319.0625 L 667.34375,315.875 L 667.46875,315.75 L 667.65625,315.75 L 671.40625,315.5625 L 671.46875,315.5625 L 671.5625,315.59375 L 675.84375,316.65625 L 675.90625,316.6875 L 675.96875,316.71875 L 678.84375,318.5 L 684.09375,320.25 L 684.15625,320.25 L 684.21875,320.3125 C 684.21875,320.3125 686.0612,321.57747 686.65625,321.875 C 686.78979,321.94177 687.57133,322.03125 688.21875,322.03125 C 688.86617,322.03125 689.4375,322 689.4375,322 L 689.625,322 L 689.78125,322.125 L 692.96875,324.78125 L 693,324.78125 L 696,326.9375 L 697.8125,326.5 L 697.84375,326.46875 L 697.90625,326.46875 L 702.78125,324.21875 L 702.8125,324.1875 L 706.46875,322.09375 L 709.9375,317.21875 L 709.96875,317.1875 L 710,317.15625 L 710.9375,316.21875 L 710.625,316.25 C 710.625,316.25 710.57072,315.75689 710.53125,315.1875 C 710.49178,314.61811 710.43539,314.02293 710.46875,313.65625 C 710.49735,313.34165 710.63856,313.17717 710.78125,312.96875 C 710.92394,312.76033 711.11471,312.53901 711.28125,312.34375 C 711.44779,312.14849 711.60271,311.9507 711.71875,311.8125 C 711.77677,311.7434 711.81926,311.6906 711.84375,311.65625 C 711.88619,311.4847 711.95412,311.40228 712.03125,311.25 C 712.11866,311.07742 712.22546,310.89235 712.34375,310.6875 C 712.46204,310.48265 712.57056,310.27176 712.6875,310.09375 C 712.79522,309.92978 712.88494,309.8092 713,309.6875 C 713.01126,309.6421 713.02113,309.57549 713.03125,309.46875 C 713.05149,309.25527 713.05975,308.95296 713.0625,308.65625 C 713.06525,308.35954 713.0559,308.06785 713.0625,307.8125 C 713.0658,307.68482 713.08313,307.54393 713.09375,307.4375 C 713.09953,307.3796 713.11248,307.31032 713.125,307.25 C 713.05602,307.18325 712.85372,307.03624 712.53125,306.875 C 712.0474,306.63308 711.70347,306.22308 711.375,305.8125 C 711.04653,305.40192 710.7385,304.96576 710.5,304.6875 C 710.25001,304.39585 710.19124,304.35346 710.0625,304.3125 C 709.93376,304.27154 709.62945,304.25 709.09375,304.25 C 708.07788,304.25 707.45424,304.40435 707.03125,304.53125 C 706.62289,304.65376 705.75198,304.96818 705.09375,305.15625 C 704.43549,305.34432 703.38804,305.58232 702.46875,305.53125 C 701.88673,305.49892 701.49139,305.16677 701.21875,304.90625 C 700.94611,304.64573 700.72794,304.49599 700.75,304.5 C 700.38258,304.43319 700.22046,304.26205 699.96875,304.0625 C 699.71704,303.86295 699.47312,303.61507 699.21875,303.375 C 698.71002,302.89485 698.25,302.4375 698.25,302.4375 C 698.25,302.4375 697.83089,302.01285 697.34375,301.53125 C 696.85661,301.04965 696.26309,300.48104 696.15625,300.40625 C 695.66638,300.06333 695.64681,299.57143 695.5625,299.25 C 695.5327,299.13639 695.4919,299.08984 695.46875,299.03125 C 695.43265,299.04814 695.45848,299.05567 695.40625,299.09375 C 695.27044,299.19276 695.0993,299.35918 694.9375,299.53125 C 694.6139,299.87539 694.28298,300.29062 694.21875,300.40625 C 694.07628,300.66269 693.89257,300.80284 693.6875,300.90625 C 693.48243,301.00966 693.24125,301.07976 693,301.15625 C 692.51751,301.30924 691.97065,301.44729 691.53125,301.59375 C 691.05572,301.75226 690.81346,301.8112 690.59375,301.84375 C 690.37404,301.8763 690.20101,301.86162 690.09375,301.84375 C 689.97253,301.82354 689.91213,301.78429 689.8125,301.75 C 689.71287,301.71571 689.60649,301.67683 689.46875,301.625 C 689.19327,301.52134 688.85724,301.38955 688.5,301.25 C 687.78552,300.97091 686.99538,300.65871 686.6875,300.5625 C 686.38131,300.46681 685.61276,300.31202 684.90625,300.15625 C 684.19974,300.00048 683.54502,299.86172 683.25,299.78125 C 683.05145,299.7271 682.08147,299.47933 681.125,299.25 C 680.64677,299.13534 680.17028,299.03705 679.78125,298.9375 C 679.39222,298.83795 679.10458,298.76683 678.90625,298.6875 C 678.66437,298.59075 678.2517,298.41068 677.8125,298.25 C 677.3733,298.08932 676.90773,297.96875 676.75,297.96875 C 676.24702,297.96875 675.70256,297.76377 675.15625,297.5625 C 674.60994,297.36123 674.12234,297.12832 673.96875,297.0625 C 673.76461,296.97501 673.72352,296.90519 673.625,296.8125 C 673.52648,296.71981 673.40378,296.63046 673.28125,296.5 C 673.03619,296.23909 672.75986,295.89279 672.46875,295.5625 C 672.17764,295.23221 671.88946,294.91552 671.65625,294.65625 C 671.53965,294.52662 671.42226,294.39406 671.34375,294.3125 C 671.26524,294.23094 671.18451,294.16304 671.21875,294.1875 C 671.02974,294.0525 670.93154,293.91572 670.8125,293.75 C 670.69346,293.58428 670.5761,293.39572 670.46875,293.21875 C 670.25406,292.86481 670.09375,292.5625 670.09375,292.5625 L 670.03125,292.4375 L 670.03125,292.3125 L 670.15625,286.28125 L 670.1875,286.03125 L 670.375,285.875 C 670.375,285.875 672.53866,284.37419 672.84375,284.15625 C 672.97433,284.06298 673.29588,283.79293 673.59375,283.5625 C 673.74269,283.44728 673.87634,283.34147 674,283.25 C 674.06329,283.20319 674.1373,283.19139 674.1875,283.15625 C 674.18977,283.15061 674.18499,283.13154 674.1875,283.125 C 674.21008,283.06611 674.24761,282.98655 674.28125,282.875 C 674.35601,282.6271 674.41737,282.27351 674.5,281.9375 C 674.66525,281.26547 674.8125,280.59375 674.8125,280.59375 L 674.84375,280.5 L 674.90625,280.4375 L 675.90625,279.03125 C 675.90625,279.03125 675.9368,279.0012 675.9375,279 C 675.95761,278.96556 676.23547,278.47165 676.5625,277.9375 C 676.7317,277.66114 676.91351,277.37974 677.0625,277.15625 C 677.137,277.04451 677.18724,276.95719 677.25,276.875 C 677.28138,276.83391 677.30804,276.78879 677.34375,276.75 C 677.37946,276.71121 677.3934,276.66268 677.53125,276.59375 C 677.51616,276.60129 677.81731,276.41 678.125,276.25 C 678.43269,276.09 678.81548,275.93751 679.25,275.9375 C 679.78175,275.9375 680.10942,276.23441 680.4375,276.46875 C 680.60154,276.58592 680.75613,276.69953 680.875,276.78125 C 680.99387,276.86297 681.11114,276.88716 681.0625,276.875 C 681.33405,276.94289 682.8211,277.21875 684.09375,277.21875 C 685.041,277.21875 685.71928,276.84578 685.96875,276.6875 L 685.875,275.1875 L 684.90625,273.46875 L 684.96875,273.4375 L 684.78125,273.375 L 684.6875,273.1875 C 684.6875,273.1875 684.31792,272.46375 683.90625,271.65625 C 683.49458,270.84875 683.0624,270.01541 682.90625,269.625 C 682.89648,269.60057 682.74377,269.34542 682.53125,269.09375 C 682.31873,268.84208 682.0447,268.55244 681.78125,268.28125 C 681.25436,267.73886 680.75,267.28125 680.75,267.28125 L 680.59375,267.125 L 680.59375,266.9375 L 680.46875,264.78125 L 680.46875,264.65625 L 680.53125,264.53125 C 680.53125,264.53125 680.84291,263.8925 681.1875,263.125 C 681.53209,262.3575 681.89792,261.45103 682,261.09375 C 682.07825,260.81986 682.16784,260.5532 682.46875,260.40625 C 682.76966,260.2593 683.06179,260.36425 683.21875,260.4375 C 683.53268,260.584 683.72475,260.71875 684,260.71875 C 684.05431,260.71875 684.11889,260.69731 684.21875,260.59375 C 684.31861,260.49019 684.41184,260.31488 684.5,260.125 C 684.6406,259.82217 684.69027,259.61504 684.71875,259.5 L 683.8125,257.65625 L 683.75,257.53125 L 683.75,257.375 L 683.875,256.34375 C 683.72869,256.14661 683.5448,255.90022 683.1875,255.4375 C 682.94897,255.12858 682.70273,254.83646 682.5,254.59375 C 682.39863,254.4724 682.31762,254.35333 682.25,254.28125 C 682.18238,254.20917 682.08433,254.17559 682.15625,254.21875 C 682.05308,254.15684 681.47712,253.8325 680.90625,253.5625 C 680.62082,253.4275 680.32619,253.2781 680.09375,253.1875 C 679.86131,253.0969 679.63874,253.0625 679.71875,253.0625 C 679.73493,253.0625 679.53003,253.07335 679.3125,253.09375 C 679.09497,253.11415 678.80666,253.15209 678.46875,253.1875 C 677.79294,253.25833 676.92657,253.34281 676.0625,253.4375 C 675.19843,253.53219 674.35892,253.64755 673.6875,253.71875 C 673.35179,253.75435 673.06166,253.7915 672.84375,253.8125 C 672.62584,253.8335 672.50568,253.84375 672.375,253.84375 C 672.1553,253.84375 671.98686,253.77564 671.75,253.71875 C 671.51314,253.66186 671.24258,253.60665 670.96875,253.53125 C 670.42108,253.38044 669.82424,253.20257 669.71875,253.1875 C 669.42348,253.14531 669.25083,253.04316 669,252.90625 C 668.74917,252.76934 668.47132,252.607 668.1875,252.4375 C 667.90368,252.268 667.61388,252.09845 667.375,251.96875 C 667.13612,251.83905 666.92962,251.75519 666.90625,251.75 zM 208.4375,258.1875 L 205,259.5625 L 202.4375,260.625 L 202.40625,260.65625 L 199.09375,261.90625 C 199.01482,261.95618 198.64626,262.20809 198.125,262.5 C 197.83854,262.66042 197.53154,262.81035 197.25,262.9375 C 196.96846,263.06465 196.76587,263.1875 196.4375,263.1875 C 196.11407,263.18751 195.32583,263.14707 194.53125,263.125 C 194.13396,263.11396 193.73882,263.08582 193.4375,263.09375 C 193.28684,263.09771 193.15074,263.11529 193.0625,263.125 C 193.03603,263.12791 193.01822,263.12055 193,263.125 C 192.9571,263.14645 192.95343,263.1604 192.96875,263.15625 C 192.81221,263.23619 192.24691,263.53164 191.75,263.8125 C 191.23785,264.10197 190.78125,264.375 190.78125,264.375 L 190.75,264.375 L 188.3125,265.46875 L 188.28125,265.46875 L 188.21875,265.5 L 185.625,266.03125 L 185.59375,266.03125 L 185.53125,266.03125 L 179.75,265.84375 L 179.71875,265.84375 L 178.6875,265.90625 L 176.90625,267.96875 L 176.90625,268 L 175.5,269.84375 L 175.34375,270.03125 L 175.125,270.0625 L 171.46875,270.3125 L 169.46875,270.8125 L 169.40625,270.84375 L 167.3125,271.59375 L 167.21875,271.625 L 165.65625,272.59375 L 164.9375,273.59375 L 164.6875,275.6875 L 164.6875,275.71875 L 164.34375,277.4375 L 164.34375,277.5 L 163.8125,284.9375 L 163.8125,284.96875 L 163.78125,285 C 163.78125,285 163.66665,285.53826 163.53125,286.125 C 163.46355,286.41837 163.41321,286.73953 163.34375,287 C 163.27429,287.26047 163.22182,287.43136 163.125,287.625 C 162.94642,287.98217 161.6875,290.5 161.6875,290.5 L 161.65625,290.5625 L 161.625,290.59375 L 161.09375,291.1875 L 161.78125,292.9375 L 164.53125,295.625 L 164.625,295.6875 L 164.65625,295.78125 L 165.90625,298.4375 L 166.03125,298.75 L 165.875,298.9375 L 169.125,300.03125 L 169.15625,300.03125 L 179.3125,300.3125 L 179.34375,300.3125 L 179.40625,300.3125 L 182.1875,301.03125 L 182.25,301.03125 L 185,301.28125 L 187.09375,300.4375 L 187.125,300.4375 L 189.875,298.4375 L 189.90625,298.4375 L 189.90625,298.40625 L 191.53125,297.4375 L 191.59375,297.375 L 191.6875,297.375 L 194.8125,296.84375 L 195.03125,296.78125 L 195.1875,296.90625 L 197.34375,298.34375 L 197.375,298.375 L 197.4375,298.40625 L 200.125,301.34375 L 203.21875,302.125 L 204.28125,301.3125 L 205.21875,298.8125 L 205.25,298.75 L 205.59375,297.25 L 205.5625,297.25 L 206.375,291.8125 L 206.4375,291.4375 L 206.78125,291.375 L 208.0625,291.15625 L 212.03125,289.125 L 212.09375,289.09375 L 214.75,286.59375 L 214.9375,286.40625 L 214.875,286.375 L 217.75,283.0625 L 217.78125,283.03125 L 217.8125,283 L 220.03125,281.28125 L 219.9375,278.125 L 219.9375,278.09375 L 220.125,274.96875 L 220.125,274.71875 L 220.375,274.5625 L 223.15625,272.84375 L 223.21875,272.78125 L 226.09375,270.15625 L 226.1875,269.34375 L 225.59375,266.71875 L 225.0625,264.5 L 224.34375,262.03125 L 224.34375,262 L 223.5625,259.78125 L 222.65625,258.96875 L 217.59375,258.96875 L 217.46875,258.96875 L 217.375,258.9375 L 215.71875,258.1875 L 208.4375,258.1875 zM 433.09375,260.09375 L 432.375,261.15625 L 432.3125,261.28125 L 432.1875,261.34375 L 427.625,263.8125 L 425.65625,266.375 L 428.03125,268.75 L 428.125,268.84375 L 428.15625,268.9375 L 429.21875,271.96875 L 429.28125,272.09375 L 429.25,272.25 L 428.71875,275.09375 L 428.6875,275.15625 L 428.65625,275.21875 L 426.6875,279.3125 L 424.90625,283.0625 L 424.84375,283.1875 L 424.75,283.28125 L 423.40625,284.15625 L 423.5,286.40625 L 427.65625,287.9375 L 428.0625,288.0625 L 428,288.5 L 427.46875,291.15625 L 427.40625,291.34375 L 427.28125,291.46875 L 423.96875,294.0625 L 423.90625,294.125 L 423.875,294.15625 L 422,296.40625 L 420.28125,300.21875 L 420.15625,300.5 L 419.8125,300.5 L 417.59375,300.5 L 417.1875,301.25 L 417.59375,302.09375 L 417.625,302.15625 L 417.625,302.21875 L 418,304 L 418.125,304.625 L 417.46875,304.59375 L 413.71875,304.4375 L 413.5,304.40625 L 413.375,304.25 L 411.40625,301.9375 L 411.28125,301.78125 L 411.28125,301.59375 L 411.28125,299.65625 L 410.625,296.875 L 406.71875,293.125 L 405.5625,292.5 L 401.96875,299.21875 L 401.90625,299.3125 L 401.8125,299.375 L 399.46875,301.0625 L 397.75,308.125 L 397.25,312.3125 L 399.4375,317.6875 L 399.46875,317.71875 L 403.46875,324.96875 L 403.5,325 L 406.65625,330.125 L 413.15625,332.0625 L 422.625,329.8125 C 422.625,329.8125 423.90182,329.47496 425.375,329.21875 C 426.11159,329.09065 426.91086,328.98675 427.625,328.9375 C 428.33914,328.88825 428.95159,328.89011 429.46875,329.0625 C 430.90801,329.54223 432.59307,330.19915 432.8125,330.28125 L 436.75,329.0625 L 436.84375,329.03125 L 436.96875,329.03125 L 440.1875,329.46875 C 440.1875,329.26159 440.1875,329.00475 440.1875,328.53125 C 440.1875,328.20675 440.29662,327.9371 440.4375,327.625 C 440.57838,327.3129 440.76153,326.9878 440.96875,326.65625 C 441.17597,326.3247 441.4001,325.99291 441.625,325.71875 C 441.8499,325.44459 442.04957,325.22025 442.3125,325.0625 C 442.56092,324.91345 443.15054,324.47319 443.71875,324.03125 C 444.28696,323.58931 444.83583,323.136 445.21875,322.90625 C 445.85009,322.52746 447.74364,321.41006 448.375,321.03125 C 449.10723,320.59191 450.77489,319.89072 452.21875,318.6875 C 453.78226,317.38457 454.17237,317.61693 454.46875,317.46875 C 454.88437,317.26094 455.33398,316.84348 456.28125,316.4375 C 457.13873,316.07001 458.33023,315.43769 458.84375,314.71875 C 459.22357,314.18701 459.76881,313.76244 460.21875,313.3125 C 460.66869,312.86256 460.99079,312.42667 461.03125,312.0625 C 461.13238,311.15232 460.5466,309.78836 460.28125,309.125 C 460.20407,308.93205 459.95201,308.62283 459.71875,308.375 C 459.4855,308.12717 459.28125,307.9375 459.28125,307.9375 L 459.09375,307.78125 L 459.125,307.53125 C 459.125,307.53125 459.2393,305.41862 459.375,304.46875 C 459.4905,303.66023 459.96116,303.31071 460.28125,303.125 C 460.24592,302.91984 460.125,302.78259 460.125,302.5 C 460.12501,302.02439 459.97573,301.50829 459.875,300.9375 C 459.77427,300.36671 459.71964,299.72501 460.0625,299.125 C 460.56758,298.24111 460.52998,298.38262 460.65625,297.625 C 460.77363,296.92071 460.75,296.20146 460.75,294.8125 C 460.75001,294.02711 460.98043,293.44938 461.0625,293.09375 C 461.10353,292.91594 461.10549,292.80607 461.09375,292.75 C 461.08201,292.69393 461.06394,292.63661 460.9375,292.53125 C 460.50622,292.17186 460.38899,291.89598 460.3125,291.78125 C 460.23601,291.66652 460.10651,291.48922 459.375,291.0625 C 458.69496,290.66581 458.13694,290.61543 457.46875,290.46875 C 456.80056,290.32207 456.04182,290.08746 455.15625,289.40625 C 453.52063,288.14809 453.65586,288.28073 452.90625,287.28125 C 452.54544,286.80018 452.38931,286.72459 452.21875,286.46875 C 452.13347,286.34083 452.08003,286.15486 452.0625,286 C 452.04497,285.84514 452.0625,285.68972 452.0625,285.46875 C 452.0625,284.6325 451.92815,283.45914 452.0625,282.25 C 452.11913,281.74037 452.04988,281.46031 452.03125,281.125 C 452.01262,280.78969 452.0953,280.35743 452.40625,279.96875 C 452.76037,279.52612 453.18574,279.34551 453.3125,279.21875 C 453.37588,279.15537 453.37064,279.15296 453.375,279.09375 C 453.37936,279.03454 453.38399,278.89297 453.25,278.625 C 453.0713,278.26758 452.98131,277.97603 452.96875,277.75 C 452.96502,277.68286 452.96619,277.7102 452.96875,277.65625 C 452.85842,277.59696 452.70297,277.50954 452.34375,277.34375 C 451.51562,276.96153 451.25266,276.80851 451.0625,276.6875 C 450.87234,276.56649 450.80692,276.49721 450.1875,276.1875 C 449.55664,275.87207 449.20704,275.61751 448.96875,275.40625 L 448.75,275.53125 L 448.375,275.78125 L 448.125,275.40625 L 445.96875,272.65625 L 445.96875,272.625 L 445.9375,272.625 C 445.9375,272.625 445.32187,271.71718 444.65625,270.71875 C 444.32344,270.21953 443.96378,269.68844 443.6875,269.25 C 443.41122,268.81156 443.23296,268.48865 443.125,268.21875 C 443.003,267.91375 442.74493,267.31771 442.46875,266.75 C 442.19257,266.18229 441.85344,265.6347 441.71875,265.5 C 441.59879,265.38004 440.96121,264.96498 440.40625,264.6875 C 439.85129,264.41002 439.34375,264.21875 439.34375,264.21875 L 439.15625,264.125 L 439.09375,263.9375 C 439.09375,263.9375 438.20284,261.94467 437.9375,261.28125 C 437.87526,261.12566 437.61602,260.84575 437.3125,260.625 C 437.00898,260.40425 436.66965,260.2221 436.53125,260.1875 C 436.49058,260.17733 436.22283,260.14212 435.9375,260.125 C 435.65217,260.10788 435.328,260.10156 434.96875,260.09375 C 434.25026,260.07813 433.47256,260.09376 433.09375,260.09375 zM 819.96875,274.96875 L 819.0625,275.09375 L 819.03125,275.09375 L 816.78125,276.28125 L 816.75,276.28125 C 816.71939,276.30039 815.7243,276.9356 815.375,277.25 C 815.08881,277.50757 814.68394,277.78636 814.25,278.0625 C 813.81606,278.33864 813.36679,278.59688 813.15625,278.75 C 812.98284,278.87612 812.60287,279.22989 812.3125,279.5625 C 812.16732,279.7288 812.05288,279.91182 811.96875,280.03125 C 811.92668,280.09097 811.88708,280.13342 811.875,280.15625 C 811.86292,280.17908 811.87499,280.18666 811.875,280.03125 C 811.875,280.32853 811.78953,280.34717 811.75,280.40625 C 811.71047,280.46533 811.67426,280.50376 811.625,280.5625 C 811.52648,280.67998 811.40471,280.81007 811.25,280.96875 C 810.94058,281.28612 810.53739,281.69846 810.09375,282.09375 C 809.65011,282.48904 809.18017,282.87219 808.75,283.1875 C 808.31983,283.50281 807.98764,283.75872 807.5625,283.84375 C 806.5667,284.04292 805.11046,283.94631 804.96875,283.9375 C 804.90968,283.95966 804.30237,284.18664 803.5625,284.46875 C 802.78841,284.76391 801.90605,285.10236 801.71875,285.1875 C 801.15492,285.44379 800.38614,285.66171 799.625,286 C 798.801,286.36622 798.72921,286.32333 797.71875,286.71875 C 797.21782,286.91477 797.09304,286.99458 796.90625,287.0625 C 796.71946,287.13042 796.57966,287.13427 796.25,287.15625 C 795.94241,287.17675 795.65504,287.08911 795.3125,287 C 794.96996,286.91089 794.58824,286.80358 794.1875,286.6875 C 793.38602,286.45535 792.51474,286.23273 792.03125,286.25 C 790.75155,286.2957 790.10257,286.21396 787.65625,286.125 C 785.19738,286.03558 785.92407,286.03125 785.03125,286.03125 C 784.45149,286.03125 784.06027,285.71066 783.84375,285.5 C 783.62723,285.28934 783.56425,285.19081 783.21875,285.125 C 782.77723,285.0409 782.65578,285.08386 782.625,285.09375 C 782.59422,285.10364 782.45791,285.17539 782.15625,285.3125 C 782.14197,285.33724 782.11404,285.40284 782.0625,285.5 C 781.98004,285.65546 781.89924,285.88917 781.8125,286.125 C 781.72576,286.36083 781.65145,286.59244 781.5625,286.8125 C 781.47355,287.03256 781.43238,287.22762 781.1875,287.4375 C 780.87501,287.70535 780.51285,287.98191 779.875,288.4375 C 779.49011,288.71242 779.06816,288.87038 778.71875,289 C 778.36934,289.12962 778.11233,289.26891 778.0625,289.3125 C 778.10419,289.27602 778.05308,289.30258 778.03125,289.40625 C 778.00942,289.50992 778,289.67363 778,289.84375 C 778,290.184 778.03123,290.53758 778.03125,290.8125 C 778.03125,291.106 777.9989,291.62586 777.90625,292.1875 C 777.85993,292.46832 777.7835,292.72133 777.71875,292.96875 C 777.654,293.21617 777.63571,293.43363 777.46875,293.65625 C 777.20089,294.01342 776.7618,294.57015 776.6875,294.71875 C 776.56484,294.96406 776.43144,295.00197 776.34375,295.03125 C 776.25606,295.06053 776.17272,295.05215 776.09375,295.0625 C 775.93582,295.08321 775.76981,295.09155 775.5625,295.09375 C 775.14789,295.09816 774.62332,295.09067 774.09375,295.0625 C 773.56418,295.03433 773.02088,294.99806 772.59375,294.96875 C 772.16662,294.93944 771.80761,294.90625 771.78125,294.90625 C 771.34243,294.90625 769.62234,294.875 767.53125,294.875 C 765.44012,294.875 764.61508,294.90624 764.09375,294.90625 C 764.146,294.90625 764.03068,294.9345 763.875,294.96875 C 763.71932,295.003 763.48841,295.06307 763.25,295.125 C 762.77317,295.24885 762.19941,295.39504 761.59375,295.5625 C 760.98809,295.72996 760.37115,295.90385 759.875,296.03125 C 759.62692,296.09495 759.40065,296.14846 759.21875,296.1875 C 759.03685,296.22654 758.92112,296.25 758.75,296.25 C 758.21428,296.25 757.35264,296.24999 756.28125,296.25 C 755.57887,296.25 755.05575,295.91456 754.65625,295.59375 C 754.25675,295.27294 753.93609,294.98163 753.8125,294.9375 C 753.80113,294.93344 753.74503,294.92843 753.625,294.96875 C 753.50497,295.00907 753.33423,295.0839 753.15625,295.1875 C 752.81366,295.38692 752.47268,295.69591 751.9375,295.71875 C 751.93468,295.72231 751.90976,295.733 751.875,295.78125 C 751.80548,295.87774 751.72763,296.05062 751.65625,296.25 C 751.58487,296.44938 751.53842,296.66426 751.5,296.84375 C 751.46158,297.02324 751.4375,297.20462 751.4375,297.1875 C 751.4375,297.64289 751.31403,299.03388 750.8125,300.1875 C 750.5671,300.75193 750.28413,301.16174 749.90625,301.40625 C 749.52837,301.65076 749.11895,301.74279 748.65625,301.875 C 747.7127,302.14459 746.89919,302.35652 745.4375,302.84375 C 744.67071,303.09935 743.6061,303.36493 742.71875,303.59375 C 742.27508,303.70816 741.89706,303.82143 741.59375,303.90625 C 741.44209,303.94866 741.30685,303.97063 741.21875,304 C 741.13065,304.02937 741.05049,304.08092 741.125,304.03125 C 741.10871,304.04211 740.91029,304.19458 740.6875,304.375 C 740.46471,304.55542 740.19723,304.7787 739.90625,305.03125 C 739.32429,305.53635 738.69413,306.13881 738.4375,306.46875 C 737.72356,307.38668 736.81847,307.74135 736.09375,308.125 C 735.17558,308.6111 733.3537,309.06249 732.3125,309.0625 C 731.66032,309.0625 731.14392,308.69789 730.65625,308.34375 C 730.16858,307.98961 729.7013,307.6233 729.375,307.46875 C 728.71216,307.15477 727.58593,307.1943 726.46875,307 C 725.82219,306.88755 725.3259,306.55182 724.90625,306.28125 C 724.4866,306.01068 724.17578,305.82682 723.875,305.8125 C 722.98119,305.76994 721.31689,305.8125 720.1875,305.8125 C 719.69613,305.8125 719.60063,305.88894 719.46875,306 C 719.33687,306.11106 719.14196,306.37393 718.75,306.6875 C 718.40988,306.9596 718.06683,307.22617 717.71875,307.4375 C 717.37067,307.64883 717.00594,307.81249 716.59375,307.8125 C 716.42396,307.8125 715.78904,307.8818 715.1875,307.9375 C 714.70662,307.98203 714.35285,307.98333 714.0625,308 C 714.0596,308.20593 714.06479,308.40912 714.0625,308.65625 C 714.05967,308.96222 714.05704,309.29049 714.03125,309.5625 C 714.01835,309.69851 713.99952,309.8134 713.96875,309.9375 C 713.93798,310.0616 713.91115,310.1826 713.75,310.34375 C 713.74688,310.34687 713.63334,310.50084 713.53125,310.65625 C 713.42916,310.81166 713.32925,310.99614 713.21875,311.1875 C 713.10825,311.37886 712.98206,311.56906 712.90625,311.71875 C 712.83044,311.86844 712.78909,312.05455 712.8125,311.9375 C 712.77111,312.14458 712.70884,312.17623 712.65625,312.25 C 712.60366,312.32377 712.53489,312.38997 712.46875,312.46875 C 712.33646,312.62631 712.18837,312.81579 712.03125,313 C 711.87413,313.18421 711.73064,313.37695 711.625,313.53125 C 711.51936,313.68555 711.46247,313.81907 711.46875,313.75 C 711.45743,313.8744 711.49259,314.53591 711.53125,315.09375 C 711.5494,315.35567 711.54703,315.4035 711.5625,315.59375 L 711.78125,315.375 L 711.84375,315.28125 L 711.9375,315.25 C 711.9375,315.25 712.8261,314.86345 713.8125,314.4375 C 714.3057,314.22453 714.83969,313.99082 715.28125,313.8125 C 715.72281,313.63418 716.05784,313.50117 716.3125,313.4375 C 716.74787,313.32866 717.08958,313.55885 717.34375,313.78125 C 717.59792,314.00365 717.80833,314.28698 718,314.5625 C 718.38333,315.11354 718.65625,315.65625 718.65625,315.65625 L 718.71875,315.78125 L 718.71875,315.90625 L 718.71875,319.65625 L 718.34375,319.65625 C 718.3339,319.66537 718.18429,319.81773 718.15625,319.84375 L 718.71875,319.6875 L 719.1875,321.59375 L 721.125,323.40625 L 723.75,322.625 L 724.46875,322.40625 L 724.40625,323.15625 C 724.40625,323.15625 724.37435,323.52463 724.25,323.96875 C 724.12564,324.41287 723.9405,324.9607 723.40625,325.28125 C 723.42706,325.26876 723.12964,325.56107 722.875,325.90625 C 722.62036,326.25143 722.33514,326.66532 722.0625,327.09375 C 721.64538,327.74922 721.43341,328.11505 721.28125,328.375 C 721.86666,328.53853 722.86497,328.85177 724.0625,329.21875 C 725.44749,329.64318 726.75,330.0625 726.75,330.0625 L 726.78125,330.0625 L 731.4375,331.84375 L 731.53125,331.90625 L 731.625,331.96875 L 734.8125,335.34375 L 738.8125,339.1875 L 740.84375,339.65625 L 746.71875,336.34375 L 746.84375,336.28125 L 746.96875,336.28125 L 749.65625,336.28125 L 750.03125,336.28125 L 750.125,336.65625 L 750.84375,339.34375 L 750.84375,339.375 L 751.375,341.84375 L 751.375,341.875 L 752.09375,344.5 L 752.125,344.65625 L 752.09375,344.78125 L 751.21875,347.53125 L 751.21875,347.5625 L 751.03125,351.0625 L 751.03125,351.09375 L 751.21875,355.5625 L 753.3125,358.09375 L 753.5,357.9375 L 753.71875,357.75 L 753.96875,357.8125 L 757,358.53125 L 757.03125,358.53125 C 757.03125,358.53125 757.41051,358.68253 757.84375,358.8125 C 758.27699,358.94247 758.83631,359.0625 758.9375,359.0625 C 759.01588,359.0625 759.40032,359.03331 759.875,359 C 760.34968,358.96669 760.93157,358.91958 761.5,358.875 C 762.55738,358.79207 763.42783,358.6987 763.5625,358.6875 L 765.375,357.125 L 765.53125,357 L 765.71875,357 L 768.21875,357 C 768.33962,356.94964 768.46358,356.95095 768.625,356.9375 C 768.94784,356.9106 769.47733,356.90957 770.5625,357 C 771.09821,357.04464 771.37575,357.06387 771.5625,357.09375 C 771.65588,357.10869 771.7463,357.1095 771.875,357.1875 C 771.98786,357.2559 772.03608,357.39175 772.0625,357.4375 C 772.06952,357.44495 772.10491,357.49107 772.09375,357.46875 C 772.10351,357.47663 772.11686,357.44487 772.15625,357.46875 C 772.28756,357.54833 772.61009,357.72012 773.21875,357.9375 C 773.83132,358.15627 774.20169,358.24895 774.40625,358.28125 C 774.61081,358.31355 774.57498,358.30399 774.625,358.28125 C 774.67502,358.25851 774.83017,358.12406 775.09375,358.03125 C 775.35733,357.93844 775.72105,357.90625 776.25,357.90625 C 776.72592,357.90625 777.01212,357.87297 777.15625,357.84375 C 777.30038,357.81453 777.2596,357.8013 777.25,357.8125 C 777.2308,357.8349 777.41723,357.39341 777.96875,357.0625 C 778.78594,356.57219 779.0625,356.15625 779.0625,356.15625 L 779.125,356.03125 L 779.25,355.96875 C 779.25,355.96875 779.96082,355.61567 780.875,355.25 C 781.28941,355.08423 781.25893,355.08482 781.4375,354.90625 C 781.61607,354.72768 781.9251,354.42494 782.75,353.875 C 783.14112,353.61426 783.35143,353.43157 783.4375,353.34375 C 783.48053,353.29984 783.49546,353.30606 783.5,353.3125 C 783.50524,353.26006 783.44935,352.69507 783.84375,351.90625 C 784.02418,351.54538 784.13045,351.31287 784.25,351.125 C 784.36955,350.93713 784.53453,350.77985 784.75,350.6875 C 784.96547,350.59515 785.10886,350.62244 785.21875,350.625 C 785.32864,350.62756 785.44578,350.62959 785.625,350.59375 C 786.15943,350.48686 786.59126,350.64657 786.8125,350.8125 C 787.03374,350.97843 787.0604,351.05583 787.40625,351.125 C 787.83382,351.21051 787.87089,351.20868 788.125,351.1875 C 788.37911,351.16632 788.81521,351.09375 789.8125,351.09375 C 791.77679,351.09375 790.77948,351.1208 792.0625,350.9375 C 792.34695,350.89686 792.52665,350.844 792.59375,350.8125 C 792.66085,350.781 792.63448,350.78047 792.65625,350.75 C 792.69978,350.68906 792.88227,350.3245 793.34375,350.09375 C 793.85619,349.83754 794.22999,349.35073 794.3125,349.25 L 794.15625,347 L 794.15625,346.96875 C 794.15625,346.96875 794.15623,345.3527 794.15625,344.28125 C 794.15625,343.99951 794.15489,343.8013 794.21875,343.59375 C 794.28261,343.3862 794.42198,343.22061 794.53125,343.125 C 794.74978,342.93378 794.9591,342.7957 795.46875,342.03125 C 795.76505,341.5868 796.01836,341.30436 796.46875,341.25 C 796.69394,341.22282 796.9235,341.29191 797.0625,341.40625 C 797.2015,341.52059 797.27231,341.6598 797.34375,341.78125 C 797.48664,342.02416 797.58624,342.27346 797.6875,342.46875 C 797.78876,342.66404 797.90656,342.7814 797.90625,342.78125 C 798.06991,342.86308 798.14424,342.88815 798.25,342.9375 C 798.35576,342.98685 798.51875,343.08125 798.625,343.1875 C 798.8375,343.4 798.9683,343.6348 799.5,344.34375 C 800.00571,345.01803 800.32544,345.24452 800.75,345.4375 C 801.17456,345.63048 801.7653,345.78737 802.6875,346.15625 C 803.11792,346.32842 803.38235,346.38305 803.53125,346.40625 C 803.68015,346.42945 803.70874,346.43818 803.8125,346.40625 C 804.02002,346.3424 804.48851,346.09375 805.53125,346.09375 C 806.02232,346.09375 806.25181,346.11814 806.40625,346.125 C 806.48347,346.12843 806.56262,346.11384 806.6875,346.15625 C 806.74994,346.17746 806.81318,346.24888 806.875,346.3125 C 806.86879,346.30611 806.88004,346.2849 806.875,346.28125 C 806.96969,346.31341 807.2265,346.3815 807.75,346.46875 C 808.27127,346.55563 808.59686,346.59592 808.78125,346.59375 C 808.96564,346.59158 809.00228,346.5786 809.03125,346.5625 C 809.0892,346.53031 809.38294,346.22654 810.09375,346.125 C 810.37808,346.08438 810.52125,346.04342 810.5625,346.03125 C 810.56515,346.03047 810.59203,346.03184 810.59375,346.03125 C 810.64689,345.96905 810.7148,345.86521 810.84375,345.78125 C 811.01338,345.6708 811.24862,345.57864 811.625,345.4375 C 812.25378,345.20171 812.4829,344.93947 812.71875,344.625 C 812.9546,344.31053 813.16119,343.87911 813.625,343.53125 C 813.91535,343.31349 814.17843,343.43336 814.46875,343.4375 L 814.15625,343.28125 C 814.15625,343.28125 814.2561,343.03603 814.375,342.78125 C 814.4939,342.52647 814.61401,342.26836 814.71875,342.09375 C 814.80589,341.94852 814.9696,341.72061 815.125,341.46875 C 815.2027,341.34282 815.26602,341.21395 815.3125,341.125 C 815.33574,341.08052 815.33784,341.04618 815.34375,341.03125 C 815.35188,340.97873 815.36306,340.92087 815.375,340.875 C 815.39393,340.80229 815.44076,340.71794 815.46875,340.625 C 815.52473,340.43912 815.58506,340.20696 815.65625,339.96875 C 815.78005,339.55449 815.87911,339.13789 815.90625,338.9375 C 815.68426,338.94795 815.30534,338.99048 814.71875,338.96875 C 814.00724,338.9424 813.47906,338.66948 813.125,338.34375 C 812.77094,338.01802 812.57348,337.65728 812.46875,337.46875 C 812.32048,337.20188 812.11277,336.75827 811.9375,336.25 C 811.76223,335.74173 811.61587,335.26562 811.65625,334.78125 C 811.72342,333.9752 812.27305,333.32992 812.875,332.96875 C 812.95531,332.92057 813.36662,332.52077 813.78125,332.0625 C 814.19588,331.60423 814.66386,331.04974 815.0625,330.5625 C 815.87443,329.57013 815.98946,329.59762 816.4375,329.3125 C 816.47873,329.28626 816.64339,329.00092 816.78125,328.65625 C 816.91911,328.31158 817.01733,327.9623 817.3125,327.625 C 817.30855,327.62951 817.49772,327.34984 817.6875,327.03125 C 817.87728,326.71266 818.107,326.32126 818.34375,325.90625 C 818.81725,325.07623 819.27388,324.22979 819.53125,323.84375 C 819.79571,323.44706 820.14358,323.09638 820.375,322.78125 C 820.60642,322.46612 820.73366,322.21945 820.71875,321.90625 C 820.68908,321.28307 820.90415,320.65167 821.125,320.09375 C 821.34585,319.53583 821.59245,318.99436 821.625,318.875 C 821.68927,318.63936 821.80185,318.16382 821.90625,317.71875 C 821.95845,317.49621 821.99754,317.29486 822.03125,317.125 C 822.06496,316.95514 822.09375,316.79961 822.09375,316.84375 C 822.09375,316.6534 822.14307,316.56575 822.1875,316.5 C 822.23193,316.43425 822.29909,316.38841 822.34375,316.34375 C 822.43307,316.25443 822.51028,316.14969 822.625,316.0625 C 822.85445,315.88812 823.15251,315.71365 823.4375,315.53125 C 823.86851,315.2554 824.09816,315.10769 824.28125,315 L 823.78125,312.3125 L 823.78125,312.28125 L 822.9375,310.46875 L 821.25,307.90625 L 821.21875,307.875 C 821.21875,307.875 820.92882,307.33489 820.65625,306.75 C 820.51996,306.45756 820.38796,306.14401 820.28125,305.875 C 820.17454,305.60599 820.09373,305.4477 820.09375,305.125 C 820.09375,304.97965 820.03346,304.33226 820,303.71875 C 819.96654,303.10524 819.93751,302.5401 819.9375,302.3125 C 819.9375,302.15439 819.97054,302.10248 820,302 C 820.02946,301.89752 820.08034,301.78108 820.125,301.65625 C 820.21432,301.4066 820.3195,301.1075 820.4375,300.8125 C 820.5555,300.5175 820.68655,300.20825 820.78125,299.96875 C 820.87595,299.72925 820.93598,299.53733 820.9375,299.53125 C 821.03089,299.15771 821.24062,298.8752 821.4375,298.5625 C 821.62231,298.26898 821.76064,298.02971 821.78125,298 C 821.78125,298 821.81194,297.96974 821.8125,297.96875 C 821.83186,297.9343 822.17327,297.33986 822.5625,296.6875 C 822.76273,296.35191 822.97103,296.0311 823.15625,295.75 C 823.24886,295.60945 823.32627,295.48046 823.40625,295.375 C 823.48623,295.26954 823.53895,295.19987 823.6875,295.09375 C 823.89369,294.94647 824.42152,294.37529 825.125,293.8125 C 825.56187,293.463 825.5812,292.70646 825.75,292.03125 C 825.84332,291.65795 826.13092,291.47074 826.375,291.34375 C 826.61908,291.21676 826.88441,291.13718 827.15625,291.0625 C 827.69994,290.91314 828.31243,290.81877 828.4375,290.78125 C 828.3927,290.79469 828.6167,290.62049 828.75,290.40625 C 828.84522,290.25322 828.87272,290.16573 828.90625,290.09375 C 828.89211,289.89115 828.63689,286.35443 828.59375,285.75 C 828.5894,285.68911 828.5972,285.69126 828.59375,285.6875 C 828.5903,285.68374 828.56661,285.68325 828.5,285.65625 C 828.43339,285.62925 828.33762,285.60451 828.21875,285.5625 C 828.09988,285.52049 827.93762,285.47675 827.78125,285.28125 C 827.57769,285.0268 827.54604,284.75404 827.5,284.4375 C 827.45396,284.12096 827.41203,283.68517 827.28125,283.03125 C 827.15277,282.38884 827.02331,282.15202 826.9375,282.03125 C 826.85169,281.91048 826.71708,281.81666 826.4375,281.5625 C 825.99387,281.1592 826.01285,280.60405 826.03125,280.15625 C 826.04965,279.70845 826.08458,279.26854 826.0625,279.125 C 826.00369,278.74272 825.50088,277.59464 824.59375,276.6875 C 824.05715,276.15089 823.81357,275.70719 823.71875,275.34375 C 823.71246,275.31963 823.7237,275.30448 823.71875,275.28125 L 820.0625,274.96875 L 819.96875,274.96875 zM 837.375,284.78125 L 837.3125,284.875 L 834.65625,288.40625 L 834.59375,288.5 L 834.5,288.5625 L 829.9375,290.96875 L 829.75,290.625 C 829.69946,290.72922 829.6933,290.77751 829.59375,290.9375 C 829.41456,291.22549 829.20998,291.57138 828.71875,291.71875 C 828.3974,291.81516 827.90944,291.9016 827.4375,292.03125 C 827.20153,292.09608 826.97774,292.18029 826.84375,292.25 C 826.77675,292.28485 826.75998,292.30803 826.75,292.3125 C 826.66001,292.7493 826.62083,293.89708 825.75,294.59375 C 825.13045,295.0894 824.69081,295.5734 824.28125,295.875 C 824.29062,295.86264 824.28521,295.88109 824.25,295.90625 C 824.23777,295.92082 824.23658,295.94524 824.21875,295.96875 C 824.16079,296.04517 824.08526,296.15185 824,296.28125 C 823.82947,296.54005 823.60223,296.89028 823.40625,297.21875 C 823.01429,297.87569 822.65625,298.5 822.65625,298.5 L 822.65625,298.53125 C 822.65625,298.53125 822.46382,298.80379 822.28125,299.09375 C 822.09867,299.38373 821.90215,299.76639 821.90625,299.75 C 821.86312,299.92249 821.78532,300.09636 821.6875,300.34375 C 821.58968,300.59114 821.49137,300.89656 821.375,301.1875 C 821.25863,301.47844 821.14338,301.77393 821.0625,302 C 821.02206,302.11304 820.98847,302.21266 820.96875,302.28125 C 820.96283,302.30183 820.94185,302.2992 820.9375,302.3125 C 820.93751,302.39739 820.9665,303.04208 821,303.65625 C 821.0335,304.27042 821.09375,304.86856 821.09375,305.125 C 821.09376,305.00318 821.12457,305.26259 821.21875,305.5 C 821.31293,305.73741 821.43093,306.03016 821.5625,306.3125 C 821.81053,306.84472 822.03466,307.28906 822.0625,307.34375 C 822.0642,307.34708 822.09375,307.40625 822.09375,307.40625 L 823.75,309.90625 L 823.78125,309.9375 L 823.8125,309.96875 L 824.6875,311.875 L 824.71875,311.9375 L 824.71875,312 L 825.3125,315.1875 L 825.375,315.53125 L 825.0625,315.6875 C 825.0625,315.6875 824.51484,316.0255 823.96875,316.375 C 823.69571,316.54975 823.43908,316.7313 823.25,316.875 C 823.17079,316.9352 823.10082,316.96459 823.0625,317 C 823.0508,317.10069 823.0561,317.18726 823.03125,317.3125 C 822.99381,317.50118 822.92883,317.73928 822.875,317.96875 C 822.76735,318.4277 822.66341,318.90082 822.59375,319.15625 C 822.49238,319.52797 822.26576,319.95525 822.0625,320.46875 C 821.85924,320.98225 821.70378,321.52943 821.71875,321.84375 C 821.74846,322.46805 821.44938,322.97584 821.15625,323.375 C 820.86312,323.77416 820.55697,324.10205 820.375,324.375 C 820.18592,324.6586 819.66266,325.57332 819.1875,326.40625 C 818.94992,326.82272 818.72791,327.20112 818.53125,327.53125 C 818.33459,327.86138 818.2227,328.09817 818.0625,328.28125 C 818.04515,328.30107 817.87106,328.65047 817.71875,329.03125 C 817.56644,329.41203 817.41859,329.86999 816.96875,330.15625 C 816.43468,330.49612 816.63896,330.24682 815.84375,331.21875 C 815.43884,331.71366 814.96484,332.27077 814.53125,332.75 C 814.09766,333.22923 813.74112,333.59282 813.375,333.8125 C 813.08409,333.98704 812.67836,334.60961 812.65625,334.875 C 812.65197,334.92633 812.74669,335.44353 812.90625,335.90625 C 813.06581,336.36897 813.2688,336.86509 813.34375,337 C 813.46222,337.21326 813.57727,337.43734 813.78125,337.625 C 813.98523,337.81266 814.25615,337.95046 814.75,337.96875 C 815.30703,337.98938 815.67618,337.9375 816.03125,337.9375 C 816.20879,337.9375 816.43821,337.94682 816.65625,338.125 C 816.87429,338.30318 816.9375,338.56565 816.9375,338.78125 C 816.93749,339.23807 816.77279,339.75545 816.625,340.25 C 816.5511,340.49728 816.45909,340.7308 816.40625,340.90625 C 816.37983,340.99397 816.35655,341.07582 816.34375,341.125 C 816.34376,341.28275 816.30759,341.33974 816.28125,341.40625 C 816.25491,341.47276 816.22076,341.53011 816.1875,341.59375 C 816.12098,341.72104 816.05288,341.86365 815.96875,342 C 815.80049,342.2727 815.60929,342.54702 815.5625,342.625 C 815.53333,342.67362 815.39673,342.97131 815.28125,343.21875 C 815.23447,343.31899 815.22344,343.3277 815.1875,343.40625 C 815.46551,343.55366 815.71875,343.75 815.71875,343.75 L 815.71875,343.78125 C 815.71875,343.78125 816.97128,345.17095 817.5625,346.15625 C 817.81018,346.56905 817.96631,346.73278 818.15625,347.03125 C 818.34619,347.32972 818.50298,347.69943 818.6875,348.4375 C 819.02042,349.76919 819.49615,350.8859 819.53125,350.96875 L 820.9375,353.125 L 821,353.1875 L 821.03125,353.28125 C 821.03125,353.28125 821.21875,354.06102 821.21875,355.53125 C 821.21875,355.72054 821.21372,355.68712 821.21875,355.71875 C 821.48891,355.62526 821.99435,355.37311 822.65625,355.59375 C 823.6012,355.90873 825.01338,355.93751 825.90625,355.9375 C 826.79911,355.9375 828.93748,355.93751 831.4375,355.9375 C 833.91369,355.9375 836.20238,355.75 837.5,355.75 C 838.70238,355.75 838.55337,355.60385 839.34375,355.40625 C 839.49164,355.36928 839.9366,355.06339 840.40625,354.59375 C 840.8759,354.12411 841.4018,353.5 841.9375,352.875 C 843.07796,351.54446 844.85926,350.91649 845.0625,350.84375 C 845.11703,350.78926 845.65946,350.2254 846.34375,349.5625 C 847.06142,348.86726 847.84945,348.13635 848.28125,347.8125 C 848.70239,347.49664 849.39926,347.11982 850.03125,346.78125 C 850.61046,346.47096 851.04503,346.25887 851.125,346.21875 L 851.21875,346.15625 L 853.28125,344.59375 L 853.34375,344.5625 L 853.40625,344.53125 C 853.40625,344.53125 854.24097,344.22176 855.1875,343.90625 C 855.66077,343.74849 856.16189,343.58967 856.59375,343.46875 C 857.02561,343.34783 857.36309,343.25 857.6875,343.25 C 857.88993,343.25 858.01017,343.40742 858.1875,343.46875 L 858.46875,342.15625 L 856.875,340.125 L 853.875,340.125 L 852.15625,340.96875 L 852,341.0625 L 851.8125,341 L 850.3125,340.625 L 850,340.5625 L 849.9375,340.25 L 849.3125,337.34375 L 849.28125,337.21875 L 849.3125,337.0625 L 850.15625,334.625 L 849.75,331.625 L 843.53125,330.78125 L 843.5,330.78125 L 843.4375,330.78125 L 836.75,328.5 L 836.6875,328.46875 L 836.625,328.4375 L 833.09375,325.90625 L 832.875,325.75 L 832.875,325.5 C 832.875,325.5 832.875,323.85011 832.875,323.21875 C 832.875,322.74424 833.16076,322.53061 833.4375,322.3125 C 833.71424,322.09439 834.05492,321.89442 834.40625,321.71875 C 834.75758,321.54308 835.11955,321.39359 835.4375,321.28125 C 835.6744,321.19754 835.86294,321.15419 836.0625,321.125 C 836.09617,321.07617 836.15523,320.96601 836.21875,320.8125 C 836.34579,320.50548 836.50157,320.07243 836.625,319.625 C 836.87186,318.73014 837.0625,317.8125 837.0625,317.8125 L 837.125,317.4375 L 837.5,317.40625 L 841.84375,317.0625 L 844.25,313.75 L 844.25,313.71875 L 845.15625,310.71875 L 845.15625,310.6875 L 846.15625,307.53125 L 846.1875,307.5 L 846.21875,307.4375 L 847.46875,305.28125 L 847.8125,305.5 C 847.70339,305.38572 847.57442,305.29395 847.46875,305.15625 C 847.2574,304.88086 847.03064,304.5819 846.84375,304.28125 C 846.46997,303.67995 846.1875,303.125 846.1875,303.125 L 846.15625,303.0625 L 846.15625,302.96875 C 846.15625,302.96875 845.4835,299.40284 845.25,298.46875 C 845.11778,297.93989 844.96471,297.15674 844.78125,296.46875 C 844.68952,296.12475 844.59669,295.79904 844.5,295.5625 C 844.40331,295.32596 844.28143,295.19545 844.3125,295.21875 C 843.93022,294.93205 843.93352,294.58014 843.90625,294.21875 C 843.87898,293.85736 843.90497,293.44592 843.9375,293.03125 C 844.00255,292.20191 844.12501,291.29892 844.125,291.03125 C 844.125,290.708 844.06299,289.63231 844,288.6875 C 843.94808,287.90879 843.92291,287.44604 843.90625,287.21875 C 843.71054,287.14879 843.35887,287.04457 842.71875,286.84375 C 841.92625,286.59512 840.93896,286.34375 840.6875,286.34375 C 840.31177,286.34375 840.00092,286.22816 839.625,286.0625 C 839.24908,285.89684 838.83361,285.67956 838.46875,285.46875 C 837.87462,285.12547 837.54641,284.89642 837.375,284.78125 zM 215.1875,287.59375 L 212.65625,289.90625 L 212.625,289.96875 L 212.5625,290 L 208.53125,292.0625 L 208.46875,292.09375 L 208.40625,292.09375 L 207.3125,292.3125 L 206.5625,297.40625 L 206.5625,297.4375 L 206.1875,299.03125 L 206.1875,299.0625 L 206.1875,299.09375 L 205.1875,301.78125 L 205.15625,301.90625 L 205.03125,302 L 203.59375,303.09375 L 203.40625,303.21875 L 203.1875,303.15625 L 199.6875,302.28125 L 199.5625,302.21875 L 199.4375,302.125 L 196.6875,299.09375 L 194.78125,297.84375 L 191.9375,298.34375 L 190.46875,299.25 L 190.4375,299.28125 L 187.625,301.3125 L 187.5625,301.34375 L 187.5,301.34375 L 185.28125,302.25 L 185.15625,302.28125 L 185.03125,302.28125 L 182.09375,302.03125 L 182.0625,302 L 182.03125,302 L 179.28125,301.3125 L 169.09375,301.03125 L 169.03125,301.03125 L 168.9375,301 L 165.1875,299.78125 L 164.9375,300.0625 L 164.84375,300.15625 L 164.75,300.1875 L 161.875,301.34375 L 161.84375,301.375 L 161.78125,301.375 L 160.625,301.625 L 158.4375,304.5 L 156.21875,307.53125 L 156.1875,307.53125 L 154.03125,310.3125 C 154.08057,310.39503 154.06701,310.41012 154.125,310.5 C 154.2297,310.66229 154.34426,310.82761 154.4375,310.9375 C 154.53074,311.04739 154.658,311.07075 154.5,311.03125 C 154.75573,311.09518 154.88788,311.18271 155.09375,311.3125 C 155.29962,311.44229 155.53357,311.62747 155.75,311.78125 C 156.18286,312.08881 156.5625,312.375 156.5625,312.375 L 156.6875,312.46875 L 156.71875,312.59375 L 157.1875,313.96875 L 159.90625,315.65625 L 160.03125,315.71875 L 160.09375,315.84375 L 160.8125,317.1875 L 161,317.53125 L 160.6875,317.78125 L 158.4375,319.65625 L 158.4375,319.6875 L 158.40625,319.6875 L 156.125,321.3125 L 155.9375,324.4375 L 155.9375,324.46875 L 155.9375,324.5 L 156.03125,327.4375 C 156.05752,327.49255 156.1873,327.82067 156.40625,328.21875 C 156.52455,328.43384 156.67105,328.65088 156.78125,328.8125 C 156.89145,328.97412 157.03311,329.09468 156.90625,329.03125 C 157.10735,329.13179 157.27787,329.22622 157.5,329.40625 C 157.72213,329.58628 157.96317,329.83531 158.21875,330.0625 C 158.47433,330.28969 158.72848,330.51694 158.9375,330.71875 C 159.14652,330.92056 159.28929,331.0628 159.40625,331.21875 C 159.38921,331.19603 159.6129,331.39935 159.84375,331.59375 C 160.0746,331.78815 160.34302,332.02884 160.625,332.25 C 161.18895,332.69231 161.71875,333.09375 161.71875,333.09375 L 162.03125,333.3125 L 161.875,333.6875 L 160.90625,335.90625 L 160.875,335.96875 L 160.84375,336 L 160.09375,337 L 159.6875,339.625 L 159.65625,339.90625 L 159.375,340 L 157.25,340.90625 L 157.1875,340.9375 L 157.125,340.9375 L 153.96875,341.34375 L 151.28125,343.28125 L 149.03125,345.875 L 148.96875,345.9375 L 148.90625,345.96875 L 147.34375,346.84375 L 146.9375,349.71875 L 146.90625,349.96875 L 147.65625,351.375 L 147.71875,351.4375 L 147.71875,351.53125 L 148,353.6875 L 148.53125,355.5 L 151.375,357.8125 L 151.4375,357.875 L 151.46875,357.90625 L 153.15625,360.15625 L 153.3125,360.3125 L 153.25,360.5625 C 153.25,360.5625 153.08571,361.3724 153,362.21875 C 152.95715,362.64192 152.94029,363.05839 152.96875,363.375 C 152.99009,363.61246 153.064,363.74895 153.0625,363.78125 C 153.55717,364.09743 153.97192,364.6412 154.375,365.15625 C 154.57926,365.41726 154.75053,365.679 154.90625,365.875 C 155.06197,366.071 155.23614,366.23179 155.21875,366.21875 C 155.22272,366.22172 155.44029,366.31927 155.6875,366.4375 C 155.93471,366.55573 156.22337,366.7118 156.53125,366.84375 C 156.83913,366.9757 157.15592,367.08954 157.40625,367.1875 C 157.65658,367.28546 157.86181,367.3717 157.875,367.375 C 158.25438,367.46984 158.33707,367.65635 158.46875,367.84375 C 158.60043,368.03115 158.7373,368.26176 158.84375,368.46875 C 159.02342,368.8181 159.11587,369.06004 159.15625,369.15625 C 159.21785,369.21128 159.95089,369.87042 160.8125,370.59375 C 161.26063,370.96996 161.72696,371.35092 162.09375,371.625 C 162.27714,371.76204 162.44981,371.86847 162.5625,371.9375 C 162.61884,371.97202 162.66827,371.99134 162.6875,372 C 162.78793,372.00905 162.86596,372.03758 162.96875,372.0625 C 163.10458,372.09543 163.26657,372.13557 163.4375,372.1875 C 163.77936,372.29136 164.17392,372.42734 164.5625,372.5625 C 165.33967,372.83282 166.0625,373.09375 166.0625,373.09375 L 166.125,373.125 L 166.1875,373.1875 L 168.25,374.78125 L 168.3125,374.84375 L 168.375,374.90625 L 170.15625,377.78125 L 170.1875,377.8125 L 170.1875,377.84375 C 170.1875,377.84375 170.39732,378.33668 170.65625,378.84375 C 170.78571,379.09729 170.94603,379.3529 171.0625,379.53125 C 171.12074,379.62043 171.15762,379.68575 171.1875,379.71875 C 171.41044,379.80434 171.50261,379.95154 171.5625,380.0625 C 171.63094,380.18931 171.67551,380.32702 171.71875,380.46875 C 171.80523,380.75221 171.84857,381.07748 171.90625,381.40625 C 172.02161,382.06378 172.09375,382.71875 172.09375,382.71875 L 172.125,382.78125 L 172.09375,382.875 L 171.375,386.125 L 171.625,388.28125 L 173.875,390.9375 L 173.90625,390.96875 L 173.96875,391.03125 L 177.125,393.4375 L 177.1875,393.46875 L 178.40625,393.875 L 180.71875,393.21875 L 183.46875,390.28125 L 183.96875,386.875 L 184,386.75 L 184.09375,386.625 L 185.46875,385.09375 L 185.375,385.03125 L 187.59375,381 L 187.625,381 L 189.65625,377.6875 L 191.0625,374.03125 L 191.0625,373.96875 L 191.09375,373.9375 L 193.75,369.84375 L 193.78125,369.8125 L 196.4375,365.1875 L 196.46875,365.15625 L 198.53125,362.375 L 198.5625,362.34375 L 198.5625,362.3125 L 200.65625,360.25 L 200.65625,357.84375 L 196.78125,356.28125 L 196.53125,356.15625 L 196.46875,355.90625 L 196.03125,353.40625 L 196,353.28125 L 196.03125,353.15625 L 196.65625,351.03125 L 196.8125,348.53125 L 196.8125,348.4375 L 196.375,344.15625 L 196.34375,343.6875 L 196.8125,343.625 L 201.1875,343 L 203.8125,342.15625 L 203.8125,342.125 L 207.4375,340.375 L 212.25,337.875 L 212.28125,337.875 L 215,336.28125 L 214.53125,334.5 L 212.03125,332.03125 L 211.96875,331.96875 L 210.09375,330.6875 L 206.875,328.625 L 206.78125,328.5625 L 206.71875,328.46875 C 206.71875,328.46875 206.59228,328.27831 206.46875,328.03125 C 206.34522,327.78418 206.1875,327.54316 206.1875,327.15625 C 206.1875,326.89436 206.23649,326.25169 206.28125,325.625 C 206.32601,324.99831 206.375,324.4375 206.375,324.4375 L 206.375,324.375 L 206.40625,324.3125 L 207.5625,320.8125 L 207.625,320.65625 L 207.78125,320.5625 L 210.71875,318.84375 L 214.1875,315.375 L 214.34375,315.21875 L 214.5,315.21875 L 218.375,314.84375 L 220.53125,312.53125 L 220.5625,312.46875 L 220.625,312.4375 C 220.625,312.4375 221.2926,312.00653 222,311.53125 C 222.3537,311.29361 222.7086,311.05825 223,310.84375 C 223.2914,310.62925 223.53592,310.40041 223.53125,310.40625 C 223.66498,310.23908 223.87615,310.02586 224.15625,309.75 C 224.43635,309.47414 224.76876,309.15193 225.09375,308.84375 C 225.72707,308.24319 226.28268,307.71512 226.3125,307.6875 L 226.34375,307.65625 L 227.15625,305.6875 L 226.6875,303.5625 L 225.78125,302.5625 L 225.71875,302.5 L 225.6875,302.40625 L 224.625,299.5625 L 224.59375,299.5 L 224.59375,299.40625 L 224.21875,295.59375 L 222.53125,292.4375 L 218.78125,289.53125 L 218.71875,289.5 L 215.1875,287.59375 zM 615.125,291.0625 L 613.9375,291.84375 L 613.8125,291.9375 L 613.65625,291.9375 L 609.65625,291.9375 L 603.03125,292.03125 L 599.125,292.8125 L 599.0625,292.8125 L 599.03125,292.8125 C 599.03125,292.8125 597.66812,292.8707 596.1875,292.9375 C 594.70688,293.0043 593.0474,293.09082 592.6875,293.15625 C 591.84965,293.30858 589.84375,294.125 589.84375,294.125 L 589.75,294.15625 L 589.6875,294.15625 L 585.71875,294.5 C 585.66643,294.54901 585.66847,294.61889 585.59375,294.65625 C 585.18451,294.86087 584.19262,295.26621 584.15625,295.28125 C 584.15558,295.28153 584.125,295.28125 584.125,295.28125 C 584.0996,295.29622 583.71946,295.51967 583.5625,295.78125 C 583.42353,296.01287 583.31627,296.15721 583.25,296.25 C 583.23726,296.26784 583.23096,296.26539 583.21875,296.28125 L 583.1875,296.34375 L 582.90625,296.96875 L 583.96875,298.34375 L 584.09375,298.5 L 584.0625,298.6875 L 583.90625,301.90625 L 583.875,302.25 L 583.53125,302.34375 C 583.53125,302.34375 582.94083,302.52695 582.21875,302.71875 C 581.49667,302.91055 580.65845,303.13416 580.125,303.1875 C 579.60467,303.23954 579.06039,303.17904 578.59375,303.21875 C 578.12711,303.25846 577.81471,303.38109 577.625,303.625 C 577.40459,303.9084 576.87761,304.91743 576.46875,305.8125 C 576.05989,306.70757 575.71875,307.5 575.71875,307.5 L 575.65625,307.6875 L 575.5,307.75 C 575.5,307.75 575.04925,308.01589 574.59375,308.3125 C 574.366,308.46081 574.12547,308.61069 573.96875,308.75 C 573.85121,308.85448 573.7944,308.9433 573.78125,308.9375 C 573.71379,309.32096 573.53134,309.88577 573.34375,310.4375 C 573.15202,311.00142 572.96875,311.5 572.96875,311.5 L 572.96875,311.53125 L 572.9375,311.5625 L 571.78125,313.875 L 571.75,313.9375 L 571.6875,314 L 569.90625,315.875 L 569.78125,316 L 569.59375,316.03125 L 567.53125,316.25 L 567.8125,317.40625 L 567.84375,317.59375 L 567.78125,317.75 L 566.15625,321.5 L 566.15625,321.53125 L 565.5625,323.28125 L 565.53125,323.375 L 565.15625,325.90625 L 565.1875,325.90625 L 565.0625,329.6875 L 565.0625,329.71875 L 565.03125,329.78125 L 564.53125,332.03125 L 564.53125,332.0625 C 564.53125,332.0625 564.15276,333.45144 564.03125,333.9375 C 563.8776,334.55195 563.44092,335.54935 563.40625,335.625 C 563.40491,335.62792 563.375,335.6875 563.375,335.6875 L 563.15625,337.4375 L 563.875,339.46875 L 563.90625,339.5625 L 563.90625,339.625 L 563.90625,342.03125 L 563.90625,342.09375 L 563.90625,342.1875 L 563,345.21875 L 563,345.25 L 562.96875,345.3125 C 562.96875,345.3125 562.73006,345.75863 562.46875,346.28125 C 562.20744,346.80387 561.91296,347.45976 561.875,347.6875 C 561.77188,348.30625 561.3471,348.819 560.96875,349.3125 C 560.5904,349.806 560.25,350.21875 560.25,350.21875 L 560.15625,350.3125 L 560.0625,350.34375 L 560.125,352 L 560.125,352.25 L 559.90625,352.40625 L 557.25,354.3125 L 559.46875,356.3125 L 559.59375,356.4375 L 559.625,356.65625 L 560,362.34375 L 560,362.40625 L 559.96875,362.5 L 558.71875,367.03125 L 558.71875,367.0625 L 558.6875,367.09375 L 558.125,368.53125 L 558.84375,370.65625 L 558.84375,370.6875 L 559.53125,373.28125 L 560.4375,373.875 L 564.75,373.75 C 564.75,373.75 564.78069,373.75007 564.78125,373.75 C 564.80955,373.74646 565.52536,373.63934 566.34375,373.53125 C 567.1782,373.42104 568.11588,373.30182 568.375,373.25 C 568.55867,373.21327 569.17634,372.9511 569.6875,372.71875 C 570.19867,372.4864 570.625,372.28125 570.625,372.28125 L 570.71875,372.21875 L 570.8125,372.21875 C 570.8125,372.21875 571.67673,372.15699 572.59375,372.09375 C 573.51077,372.03051 574.4454,371.96876 574.78125,371.96875 C 575.07419,371.96875 575.2618,372.05038 575.5,372.15625 C 575.7382,372.26212 575.98887,372.39989 576.21875,372.53125 C 576.6785,372.79396 577.0625,373.0625 577.0625,373.0625 L 577.15625,373.125 L 577.21875,373.1875 L 578.84375,375.59375 L 578.90625,375.65625 L 578.90625,375.71875 C 578.90625,375.71875 579.07332,376.16459 579.28125,376.625 C 579.38521,376.85521 579.4894,377.09347 579.59375,377.25 C 579.64593,377.32826 579.69144,377.38253 579.71875,377.40625 C 580.16489,377.52749 580.48114,377.84169 580.75,378.09375 C 581.02478,378.35136 581.21875,378.59375 581.21875,378.59375 L 581.28125,378.65625 L 581.3125,378.75 L 582.96875,383.71875 L 583.46875,383.40625 L 583.5,383.375 L 583.5625,383.375 L 588.65625,381.25 L 590.1875,379.5625 L 590.21875,379.53125 L 590.28125,379.5 L 590.9375,379.0625 L 592.53125,376.15625 L 592.625,375.96875 L 592.8125,375.90625 C 592.8125,375.90625 593.37687,375.72493 594,375.59375 C 594.31157,375.52816 594.63159,375.49535 594.9375,375.46875 C 595.24341,375.44215 595.51624,375.39875 595.84375,375.5625 C 596.23836,375.7598 596.28857,376.03951 596.4375,376.34375 C 596.58643,376.64799 596.7383,376.98494 596.90625,377.34375 C 597.24216,378.06137 597.67707,378.76041 598.09375,378.96875 C 598.57638,379.21007 598.8682,379.64074 599.09375,380.125 C 599.3193,380.60926 599.4784,381.16844 599.59375,381.6875 C 599.80602,382.6427 599.86497,383.366 599.875,383.5 L 601.65625,385.375 L 602.4375,386 L 605,384.21875 L 605.0625,384.1875 L 609.65625,379.6875 L 609.71875,379.625 L 609.78125,379.59375 L 613.3125,377.96875 L 613.34375,377.9375 L 616.125,375.5 C 616.125,375.5 616.59258,375.09129 617.1875,374.625 C 617.78241,374.15871 618.46782,373.64772 619.03125,373.40625 C 619.93099,373.02063 622.6875,371.875 622.6875,371.875 L 622.75,371.84375 L 622.8125,371.84375 L 627.15625,371.125 L 630.5,367.8125 L 631.5,363.28125 L 631.53125,363.15625 L 631.34375,363.25 L 629.5,359.40625 L 625.65625,358.875 L 625.5,358.875 L 625.375,358.78125 L 621.28125,355.1875 L 620.9375,354.90625 L 621.21875,354.53125 L 622.25,353.125 C 622.25058,353.12342 622.28045,353.09596 622.28125,353.09375 C 622.32248,352.98048 622.59138,352.16257 622.96875,351.15625 C 623.3716,350.08197 623.80795,348.97785 624.03125,348.53125 C 624.06836,348.45703 624.14066,348.18725 624.1875,347.875 C 624.23434,347.56275 624.2595,347.19183 624.28125,346.84375 C 624.32476,346.14759 624.3125,345.53125 624.3125,345.53125 L 624.3125,345.34375 L 624.46875,345.1875 L 626.625,343.03125 L 626.625,343 L 626.65625,343 L 631.3125,339.5625 L 632,334.5625 L 632.0625,334.09375 C 631.99749,333.88787 631.96747,333.69168 631.8125,333.25 C 631.70283,332.93744 631.5797,332.60923 631.46875,332.34375 C 631.3578,332.07827 631.22677,331.85378 631.21875,331.84375 C 630.95171,331.50994 630.98715,331.20251 630.96875,330.84375 C 630.95035,330.48499 630.94597,330.07768 630.96875,329.65625 C 631.01431,328.81339 631.09376,327.92144 631.09375,327.59375 C 631.09375,327.06233 631.34604,326.65023 631.59375,326.375 C 631.84146,326.09977 632.06733,325.90021 632.1875,325.75 C 632.46765,325.39981 632.93133,325.094 633.40625,324.78125 C 633.88117,324.4685 634.30577,324.22146 634.625,324.09375 C 634.55541,324.12159 634.62037,324.09365 634.6875,324.03125 C 634.75463,323.96885 634.86896,323.86348 634.96875,323.75 C 635.16832,323.52303 635.40033,323.23341 635.625,322.9375 C 636.07434,322.34568 636.46875,321.78125 636.46875,321.78125 C 636.46875,321.78125 636.7496,321.30509 637.09375,320.75 C 637.4379,320.19491 637.83336,319.55201 637.9375,319.34375 C 637.9349,319.34896 638.0335,319.03296 638.09375,318.6875 C 638.154,318.34204 638.20038,317.90795 638.25,317.5 C 638.33726,316.78255 638.39258,316.27586 638.40625,316.125 L 637.5,314.28125 L 637.5,314.25 L 636.125,311.8125 C 636.125,311.8125 636.09489,311.78273 636.09375,311.78125 C 636.06966,311.74983 635.81193,311.43682 635.5,311.0625 C 635.33667,310.8665 635.17762,310.65407 635.03125,310.5 C 634.88488,310.34593 634.71399,310.24762 634.78125,310.28125 C 634.52799,310.15462 634.40482,309.96025 634.3125,309.78125 C 634.22018,309.60225 634.14932,309.41017 634.09375,309.21875 C 633.98591,308.84732 633.91724,308.4655 633.875,308.25 C 633.86946,308.25347 633.83756,308.18131 633.75,308.09375 C 633.63325,307.977 633.47032,307.81362 633.25,307.65625 C 632.80935,307.3415 632.19257,306.99311 631.625,306.6875 C 630.61238,306.14224 628.40662,305.68761 627.375,305.40625 C 626.74787,305.23522 626.01021,304.78166 625.34375,304.375 C 625.01052,304.17167 624.71139,303.99015 624.46875,303.84375 C 624.34743,303.77055 624.2326,303.69717 624.15625,303.65625 C 624.0799,303.61533 624.00728,303.6112 624.0625,303.625 C 623.87757,303.57877 623.83727,303.50778 623.71875,303.4375 C 623.60023,303.36722 623.46358,303.28894 623.3125,303.1875 C 623.01034,302.98462 622.62994,302.72183 622.28125,302.46875 C 621.60207,301.9758 621.00142,301.52477 620.96875,301.5 C 620.96763,301.49952 620.93907,301.46943 620.9375,301.46875 C 620.82453,301.4199 619.64973,300.91614 618.21875,300.34375 C 617.46935,300.04399 616.67947,299.73884 616,299.5 C 615.32053,299.26116 614.73742,299.09415 614.5,299.0625 C 613.15928,298.88374 612.57488,298.81251 611.53125,298.8125 C 611.35913,298.8125 611.19412,298.7849 611.03125,298.71875 C 610.86838,298.6526 610.6866,298.48658 610.625,298.28125 C 610.5634,298.07592 610.60625,297.90573 610.65625,297.78125 C 610.70625,297.65677 610.77585,297.56167 610.84375,297.46875 C 610.97955,297.28291 611.13996,297.11432 611.28125,296.96875 C 611.42254,296.82318 611.54153,296.68421 611.5625,296.65625 C 611.76443,296.387 612.1184,296.0578 612.46875,295.71875 C 612.76917,295.42802 612.99025,295.25483 613.0625,295.1875 L 613.0625,295.15625 L 615.28125,291.6875 L 615.125,291.0625 zM 284.96875 291.28125 L 282.65625 291.625 L 279.6875 293.40625 L 277.4375 296.5 L 277.375 296.59375 L 277.28125 296.625 L 269.53125 300.875 L 269.5 300.90625 L 269.4375 300.9375 L 266.25 303.53125 L 266.21875 303.5625 L 266.1875 303.5625 L 260.25 307.21875 L 260.21875 307.25 L 260.15625 307.28125 L 255.625 309.03125 L 255.59375 309.0625 L 251.15625 310.40625 L 247.78125 313.78125 L 247.71875 313.84375 L 245 317.71875 L 244.96875 317.75 L 244.90625 317.78125 L 242.375 319.9375 L 242.34375 319.96875 L 242.28125 320 L 235.71875 323.21875 L 232.65625 327.625 L 232.625 327.6875 L 230.375 331.65625 L 228.71875 334.75 L 233.1875 335.125 L 236.1875 334.09375 L 236.21875 334.0625 L 236.25 334.0625 L 239.65625 333.34375 L 242.0625 331.96875 L 242.375 331.8125 L 242.625 332 L 244.84375 333.71875 L 244.9375 333.75 L 244.96875 333.84375 L 247.09375 337.21875 L 250.125 341.65625 L 250.15625 341.65625 C 250.17553 341.67057 250.896 342.25137 251.71875 342.84375 C 252.13538 343.14372 252.58799 343.44901 252.9375 343.6875 C 253.11225 343.80674 253.25563 343.89372 253.375 343.96875 C 253.49437 344.04378 253.61799 344.10345 253.59375 344.09375 C 253.63598 344.11064 254.02689 344.24786 254.53125 344.40625 C 255.03561 344.56464 255.66245 344.74796 256.28125 344.9375 C 257.51886 345.31659 258.71875 345.6875 258.71875 345.6875 L 258.78125 345.6875 L 258.84375 345.75 L 262.125 347.78125 L 262.28125 347.875 L 262.34375 348.03125 L 263.25 350.34375 L 263.28125 350.4375 L 263.28125 350.53125 L 263.28125 353.09375 L 264.8125 356.03125 L 264.84375 356.03125 L 264.84375 356.0625 L 266.03125 359.25 L 266.0625 359.28125 L 268.96875 363.1875 L 269 363.21875 L 270.96875 366.34375 L 271.125 366.625 L 271.03125 366.78125 L 272.65625 368.40625 L 276.125 367.9375 L 279.0625 366.21875 L 279.125 366.1875 L 279.1875 366.1875 L 281.90625 365.4375 L 281.96875 365.40625 L 286.21875 363.90625 L 286.28125 363.875 L 286.34375 363.875 L 292.0625 363.625 L 293.46875 359.4375 L 293.9375 355.875 L 292.96875 352.15625 L 292.9375 352 L 292.96875 351.84375 L 294 349.0625 L 294.03125 348.90625 L 294.1875 348.8125 L 298.46875 345.875 L 297.9375 345.46875 L 297.75 345.3125 L 297.75 345.0625 L 297.75 343.9375 L 297.75 343.4375 L 298.25 343.4375 L 299.625 343.4375 L 299.25 338.65625 L 296.21875 334.78125 L 296.1875 334.71875 L 296.15625 334.6875 L 294.53125 331.53125 L 294.5 331.53125 L 294.5 331.5 L 293.75 329.875 L 293.6875 329.75 L 293.71875 329.625 L 293.84375 327.5 L 293.84375 327.125 L 294.21875 327.03125 L 298.34375 326.03125 L 298.375 326.03125 L 302.375 324.65625 L 302.75 324.53125 L 302.96875 324.84375 L 303 324.90625 L 308.40625 323.78125 L 310.0625 321.53125 L 309.15625 319.375 L 308.1875 317.1875 L 304.5 314 L 301.84375 311.875 L 301.8125 311.84375 L 297 307.03125 L 297 307 L 294.59375 304.21875 L 294.53125 304.15625 L 294.5 304.09375 L 293.25 301.0625 L 293.21875 301 L 293.21875 300.9375 L 292.84375 297.65625 L 291.4375 296.90625 L 291.34375 296.84375 L 291.28125 296.75 L 288.875 293.71875 L 288.875 293.6875 L 287.375 291.40625 L 285.0625 291.28125 L 284.96875 291.28125 z M 268.75 306.25 L 275.375 307.03125 L 271.09375 311.71875 L 275 314.4375 L 277.75 323.0625 L 274.21875 328.90625 L 269.9375 326.9375 L 271.875 316.8125 L 269.9375 316.8125 L 265.625 314.84375 L 265.625 311.71875 L 268.75 306.25 z M 460.78125,304.03125 C 460.6542,304.08578 460.44375,304.11254 460.375,304.59375 C 460.26672,305.3517 460.17339,307.09766 460.15625,307.375 C 460.2514,307.46176 460.30416,307.51262 460.46875,307.6875 C 460.74057,307.97631 461.04339,308.34285 461.21875,308.78125 C 461.45849,309.38058 462.15141,310.79357 462,312.15625 C 461.91421,312.92849 461.40333,313.50292 460.90625,314 C 460.40917,314.49708 459.90778,314.96036 459.65625,315.3125 C 458.90709,316.36134 457.56655,316.98487 456.65625,317.375 C 455.83576,317.72664 455.50077,318.07775 454.90625,318.375 C 454.19247,318.73187 454.34195,318.21503 452.875,319.4375 C 451.28841,320.75966 449.43672,321.55672 448.90625,321.875 C 448.27491,322.2538 446.38136,323.40244 445.75,323.78125 C 445.50159,323.9303 444.91196,324.37056 444.34375,324.8125 C 443.77554,325.25444 443.22668,325.70774 442.84375,325.9375 C 442.791,325.96915 442.59567,326.11284 442.40625,326.34375 C 442.21683,326.57466 441.99987,326.88771 441.8125,327.1875 C 441.62513,327.48729 441.45935,327.77514 441.34375,328.03125 C 441.22815,328.28736 441.1875,328.54008 441.1875,328.53125 C 441.1875,329.06789 441.1875,329.44483 441.1875,329.59375 L 444.53125,330.0625 L 444.78125,330.09375 L 444.90625,330.3125 L 446.5,333.21875 L 446.5,333.25 L 446.53125,333.28125 L 447.1875,335.125 L 449.71875,337.1875 L 449.78125,337.21875 L 452.5625,339.03125 L 452.625,339.0625 L 452.65625,339.125 L 457.03125,344.03125 L 459.875,346.53125 L 460.03125,346.65625 L 460.0625,346.875 C 460.0625,346.875 460.11652,347.92668 460.15625,349.03125 C 460.17612,349.58354 460.19055,350.13952 460.1875,350.59375 C 460.18598,350.82086 460.16904,351.02117 460.15625,351.1875 C 460.14985,351.27066 460.16937,351.36342 460.15625,351.4375 C 460.14313,351.51158 460.14401,351.55165 460.0625,351.6875 C 460.11196,351.60507 460.0539,351.68699 460.03125,351.78125 C 460.0086,351.87551 459.99578,352.03243 459.96875,352.1875 C 459.91469,352.49763 459.83204,352.89445 459.78125,353.28125 C 459.67967,354.05485 459.625,354.78125 459.625,354.78125 L 459.59375,354.96875 L 459.4375,355.09375 L 457.1875,357.125 L 455.9375,358.65625 L 456.03125,365.5 C 456.12188,365.60885 456.28908,365.79436 456.5625,366.125 C 456.9026,366.53628 457.24829,366.95605 457.375,367.125 C 457.45632,367.23344 457.58798,367.42736 457.78125,367.71875 C 457.97452,368.01014 458.20442,368.36321 458.4375,368.71875 C 458.90366,369.42983 459.34375,370.125 459.34375,370.125 L 459.40625,370.1875 L 459.40625,370.28125 L 460.3125,375.09375 L 460.78125,375 C 460.78125,375 461.53323,374.84325 462.40625,374.625 C 463.27927,374.40675 464.28678,374.10661 464.6875,373.90625 C 465.63802,373.43098 467.4375,372.3125 467.4375,372.3125 L 467.5,372.25 L 467.5625,372.25 C 467.5625,372.25 471.54381,371.11404 472.125,370.96875 C 472.22536,370.94366 472.61959,370.73749 473.03125,370.5 C 473.44291,370.26251 473.91713,369.99637 474.375,369.84375 C 474.71857,369.72923 475.02086,369.76003 475.375,369.8125 C 475.72914,369.86497 476.12419,369.96405 476.46875,370.0625 C 477.05504,370.23001 477.39164,370.38447 477.53125,370.4375 C 477.59762,370.42472 478.80209,370.18123 479.9375,369.5 C 480.5121,369.15524 480.98385,368.71926 481.40625,368.3125 C 481.82865,367.90574 482.16448,367.54045 482.65625,367.34375 C 482.59797,367.36706 482.78726,367.22796 482.9375,367 C 483.08774,366.77204 483.26221,366.45949 483.40625,366.15625 C 483.67873,365.5826 483.85336,365.08938 483.875,365.03125 C 483.8801,364.89892 483.99098,361.9786 484.125,360.90625 C 484.16969,360.54874 484.07801,359.43649 483.96875,358.5 C 483.85949,357.56351 483.75,356.75 483.75,356.75 L 483.71875,356.65625 L 483.75,356.5625 L 484.375,353.78125 L 484.40625,353.65625 L 484.5,353.5625 L 485.90625,352.0625 L 486.03125,351.90625 L 486.25,351.90625 L 489.15625,351.78125 L 489.15625,351.75 L 493.5,351.75 L 496.28125,350.4375 L 496.3125,350.40625 L 496.34375,350.40625 L 499.46875,349.375 L 499.5,349.375 C 499.61308,349.29551 499.98777,349.01857 500.53125,348.65625 C 501.15338,348.2415 501.79561,347.80677 502.25,347.625 C 502.39492,347.56703 502.63265,347.34277 502.8125,347.09375 C 502.97022,346.87537 503.07059,346.73216 503.09375,346.6875 L 503.125,346.625 L 503.71875,344.5625 L 503.71875,344.53125 L 503.71875,344.5 C 503.71875,344.5 504.00002,343.78119 504.28125,343 C 504.42186,342.60941 504.58482,342.20586 504.6875,341.875 C 504.79018,341.54414 504.84375,341.22 504.84375,341.28125 C 504.84375,340.94665 504.99588,340.72169 505.15625,340.53125 C 505.31662,340.34081 505.51885,340.16658 505.71875,340 C 506.11855,339.66683 506.55638,339.34987 506.75,339.15625 C 506.79629,339.10996 506.83402,338.84785 506.78125,338.53125 C 506.72848,338.21465 506.625,337.9375 506.625,337.9375 L 506.625,337.90625 L 506.625,337.875 L 505.96875,335.59375 L 505.90625,335.34375 L 506.09375,335.15625 L 507.15625,333.84375 C 507.12063,333.70692 507.10897,333.55048 506.96875,333.25 C 506.77505,332.83492 506.47178,332.4695 506.21875,332.40625 C 505.91652,332.33069 505.70184,332.10392 505.59375,331.875 C 505.48566,331.64608 505.43334,331.41927 505.40625,331.15625 C 505.35207,330.63022 505.40391,329.99905 505.46875,329.375 C 505.53359,328.75095 505.60841,328.13314 505.6875,327.625 C 505.76659,327.11686 505.84375,326.6495 505.84375,326.625 C 505.84375,326.17599 505.96517,325.59376 506.09375,325.03125 C 506.18418,324.63562 506.23564,324.45721 506.28125,324.28125 L 503.625,321.96875 L 503.59375,321.96875 L 503.59375,321.9375 L 502.21875,320.65625 C 502.21875,320.65625 502.18791,320.65643 502.1875,320.65625 C 502.15818,320.64356 501.10706,320.1751 500.09375,320.0625 C 499.08662,319.9506 497.35412,320.18749 496.375,320.1875 C 495.74258,320.1875 495.21456,319.87345 494.8125,319.59375 C 494.41043,319.31405 494.125,319.03125 494.125,319.03125 L 494.09375,319 C 494.09375,319 493.06759,317.72511 492.5625,317.09375 C 492.18299,316.61937 492.03828,315.98389 491.90625,315.40625 C 491.77422,314.82861 491.6875,314.3125 491.6875,314.3125 L 491.71875,314.3125 C 491.71312,314.28433 491.51641,313.39541 491.34375,312.34375 C 491.2561,311.80986 491.17987,311.24379 491.125,310.75 C 491.07013,310.25621 491.01396,309.83977 491.0625,309.5 C 491.06083,309.51167 491.06361,309.41635 490.90625,309.25 C 490.74889,309.08365 490.48972,308.88719 490.21875,308.71875 C 489.68886,308.38936 489.14956,308.16672 489.125,308.15625 L 489.09375,308.15625 L 485.59375,307.53125 C 485.34898,307.82433 484.98854,308.17009 484.4375,308.40625 C 484.01405,308.58772 483.34437,308.89912 482.6875,309.1875 C 482.03063,309.47588 481.40947,309.72863 480.90625,309.8125 C 480.08643,309.94914 479.15044,309.94884 477.84375,309.6875 C 476.59364,309.43749 476.4164,309.46875 475.40625,309.46875 C 474.77617,309.46875 473.54489,309.2521 472.3125,309.0625 C 471.6963,308.9677 471.12059,308.88274 470.625,308.8125 C 470.12941,308.74226 469.69982,308.6875 469.59375,308.6875 C 469.50157,308.6875 469.4931,308.71433 469.4375,308.75 C 469.3819,308.78567 469.29526,308.87575 469.09375,308.96875 C 468.89224,309.06175 468.5825,309.08709 468.3125,309 C 468.0425,308.91291 467.77571,308.73745 467.40625,308.46875 C 466.73727,307.98222 466.34724,307.79862 466,307.625 C 465.65276,307.45138 465.30031,307.26906 464.9375,306.90625 C 464.59826,306.56701 464.1498,306.04021 463.6875,305.5625 C 463.2252,305.08479 462.69598,304.66589 462.59375,304.625 C 462.24605,304.48593 461.98816,304.33107 461.8125,304.25 C 461.63684,304.16893 461.5442,304.15625 461.375,304.15625 C 461.24873,304.15625 461.13268,304.15574 460.96875,304.125 C 460.9116,304.11428 460.84473,304.05683 460.78125,304.03125 zM 848.25,305.90625 L 847.125,307.84375 L 846.09375,311 L 845.21875,314.03125 L 845.1875,314.09375 L 845.15625,314.1875 L 842.5,317.84375 L 842.34375,318.03125 L 842.125,318.03125 L 837.9375,318.375 C 837.88267,318.63149 837.80344,319.11486 837.59375,319.875 C 837.46464,320.34302 837.31331,320.80793 837.15625,321.1875 C 837.07772,321.37728 837.01068,321.56732 836.90625,321.71875 C 836.80182,321.87018 836.64647,322.09375 836.28125,322.09375 C 836.32166,322.09375 836.05519,322.12196 835.78125,322.21875 C 835.50731,322.31554 835.18658,322.46921 834.875,322.625 C 834.56342,322.78079 834.25138,322.94489 834.0625,323.09375 C 833.92084,323.2054 833.88347,323.30332 833.875,323.28125 C 833.875,323.86141 833.875,324.96698 833.875,325.25 L 837.125,327.59375 L 837.1875,327.625 L 843.75,329.8125 L 850.25,330.6875 L 850.625,330.71875 L 850.65625,331.09375 L 851.15625,334.65625 L 851.1875,334.75 L 851.15625,334.875 L 850.3125,337.25 L 850.84375,339.71875 L 851.875,340 L 853.46875,339.1875 L 853.59375,339.125 L 853.71875,339.125 L 857.125,339.125 L 857.34375,339.125 L 857.5,339.34375 L 859.40625,341.71875 L 859.5625,341.90625 L 859.5,342.15625 L 859.125,343.78125 L 858.65625,343.6875 C 858.84401,343.79863 859.08017,343.81875 859.25,343.9375 C 859.70007,344.2522 860.0625,344.5625 860.0625,344.5625 L 860.03125,344.625 L 860.125,344.6875 L 861.65625,345.8125 L 861.71875,345.84375 C 861.77334,345.87213 862.19376,346.0967 862.71875,346.34375 C 862.99765,346.475 863.29327,346.59387 863.53125,346.6875 C 863.76923,346.78113 864.02587,346.8125 863.9375,346.8125 C 864.36533,346.8125 865.29226,346.8125 865.375,346.8125 L 866.96875,346.21875 L 867,346.21875 L 867.0625,346.21875 C 867.0625,346.21875 868.13989,346.02279 869.28125,345.84375 C 869.85193,345.75423 870.42435,345.66139 870.90625,345.59375 C 871.38815,345.52611 871.7237,345.46875 871.96875,345.46875 C 872.26935,345.46875 872.52621,345.55342 872.9375,345.65625 C 873.34879,345.75908 873.84073,345.89646 874.3125,346.03125 C 875.25604,346.30084 876.125,346.5625 876.125,346.5625 C 876.30567,346.56985 878.19885,346.65626 878.75,346.65625 C 879.3406,346.65625 881.69487,346.65625 881.96875,346.65625 C 882.06297,346.58167 882.30789,346.36567 882.71875,346.03125 C 883.1953,345.64336 883.76144,345.17607 883.9375,345 C 884.04286,344.89464 884.49858,344.24651 884.9375,343.59375 C 885.37642,342.94099 885.82085,342.24658 886.28125,341.84375 C 886.5396,341.61769 886.907,341.05901 887.21875,340.5 C 887.5305,339.94099 887.81034,339.39042 887.9375,339.09375 C 888.07068,338.78299 888.2748,338.55995 888.53125,338.3125 C 888.7877,338.06505 889.0833,337.82825 889.375,337.59375 C 889.9584,337.12475 890.5,336.75 890.5,336.75 L 890.5625,336.6875 L 890.625,336.6875 L 893.03125,335.6875 L 893.09375,335.6875 L 893.15625,335.65625 L 898.0625,335.03125 L 898.15625,335.03125 L 898.28125,335.0625 L 900.59375,335.78125 L 900.6875,335.8125 L 900.75,335.875 C 900.75,335.875 901.41703,336.37615 902.1875,336.9375 C 902.57274,337.21817 902.98196,337.52087 903.34375,337.75 C 903.70554,337.97913 904.04288,338.15349 904.15625,338.1875 C 904.67591,338.3434 905.00731,338.59383 905.1875,338.75 C 905.2776,338.82809 905.32816,338.86565 905.34375,338.875 C 905.60536,338.875 905.7913,338.94976 906.03125,339.03125 C 906.2712,339.11274 906.53493,339.20939 906.78125,339.3125 C 907.26007,339.51293 907.6642,339.70773 907.6875,339.71875 L 907.71875,339.71875 L 910.78125,340.125 L 910.84375,340.125 L 910.875,340.15625 L 912.71875,340.84375 L 913.78125,339.8125 L 914.8125,337.3125 L 914.84375,337.25 L 914.875,337.21875 L 915.96875,335.6875 L 916.03125,335.59375 L 917.28125,333 C 917.0339,332.96916 916.71871,332.90625 916.6875,332.90625 C 916.49033,332.90625 916.286,332.80453 916.15625,332.65625 C 916.0265,332.50797 915.96191,332.35821 915.9375,332.21875 C 915.88869,331.93983 915.92481,331.68859 915.96875,331.4375 C 916.03665,331.04948 916.10739,330.83504 916.15625,330.6875 L 915.25,328.3125 L 915.25,328.28125 L 915.21875,328.25 L 914.46875,324.90625 L 913.15625,323.28125 L 906.96875,323.1875 L 907.21875,323.46875 L 905.0625,325.46875 L 905,325.53125 L 904.9375,325.5625 L 901.78125,327.1875 L 901.3125,327.4375 L 901.09375,326.96875 L 900.0625,324.53125 L 897.34375,323.5625 L 897.21875,323.53125 L 897.125,323.40625 L 894.28125,319.9375 L 888.1875,316.71875 L 883.53125,314.3125 L 883.46875,314.28125 L 883.40625,314.25 L 878.9375,310.125 L 878.875,310.09375 L 874.90625,307.6875 C 874.77866,307.69292 874.23394,307.70749 873.46875,307.75 C 872.62053,307.79712 871.64257,307.8877 871.34375,307.9375 C 871.30764,307.94352 870.99736,308.05614 870.65625,308.25 C 870.31514,308.44386 869.89158,308.72359 869.5,309 C 869.10842,309.27641 868.73523,309.55784 868.4375,309.8125 C 868.13977,310.06716 867.92529,310.31202 867.90625,310.34375 C 867.72958,310.6382 867.47584,310.83105 867.1875,311 C 866.89916,311.16895 866.55409,311.31175 866.21875,311.4375 C 865.54807,311.68901 864.91984,311.84375 864.4375,311.84375 C 863.92183,311.84375 863.58029,311.5524 863.34375,311.375 C 863.10721,311.1976 862.95533,311.09375 862.65625,311.09375 C 862.29242,311.09375 861.92987,310.99131 861.46875,310.84375 C 861.00763,310.69619 860.48746,310.50429 860,310.3125 C 859.04536,309.9369 858.25349,309.57792 858.21875,309.5625 C 858.21875,309.5625 857.03601,309.15772 855.71875,308.75 C 855.06012,308.54614 854.36057,308.33812 853.78125,308.1875 C 853.20193,308.03688 852.67963,307.9375 852.5625,307.9375 C 852.17455,307.9375 851.79093,307.79602 851.375,307.625 C 850.95907,307.45398 850.52187,307.23425 850.09375,307 C 849.28022,306.55486 848.57748,306.10552 848.25,305.90625 zM 556.46875,306.03125 C 556.19284,306.03125 555.95517,306.24067 555.65625,306.625 C 555.35733,307.00933 555.08565,307.50808 554.6875,307.90625 C 554.21862,308.37513 553.41418,308.73041 552.625,309.125 C 552.23041,309.32229 551.85691,309.52166 551.5625,309.6875 C 551.26809,309.85334 551.03719,310.03375 551.0625,310 C 551.0158,310.06227 550.85413,310.34237 550.6875,310.65625 C 550.52087,310.97013 550.33135,311.35317 550.125,311.75 C 549.7123,312.54365 549.3024,313.33714 548.90625,313.8125 C 548.38685,314.43578 547.9536,315.78275 546.8125,316.78125 C 546.40288,317.13967 546.28713,317.51051 546.1875,317.9375 C 546.08787,318.36449 546.06394,318.84131 545.78125,319.3125 C 545.61959,319.58193 545.07679,320.61217 544.59375,321.625 C 544.35223,322.13141 544.13329,322.64453 543.96875,323.0625 C 543.80421,323.48047 543.71875,323.8488 543.71875,323.84375 C 543.71875,324.1329 543.57286,324.34047 543.4375,324.5 C 543.30214,324.65953 543.15276,324.79949 542.96875,324.9375 C 542.60072,325.21352 542.14167,325.47544 541.6875,325.71875 C 540.81069,326.18847 539.99669,326.53706 539.9375,326.5625 C 539.93537,326.56342 539.875,326.59375 539.875,326.59375 L 537.03125,328.3125 L 537.03125,328.34375 L 537,328.34375 L 534.125,329.84375 L 529.9375,332.25 L 529.90625,332.25 L 529.875,332.28125 L 526.90625,333.375 L 526.84375,333.40625 L 523.8125,335.15625 L 523.375,336.84375 L 523.375,336.875 L 523.5,338.1875 L 523.5,338.21875 L 524,339.75 L 524,339.8125 L 524,339.875 L 524.125,342.65625 C 524.125,342.65625 524.1406,343.37375 524.15625,344.125 C 524.16408,344.50063 524.17024,344.86536 524.1875,345.1875 C 524.20476,345.50964 524.24459,345.82209 524.25,345.84375 C 524.33387,346.17926 524.2468,346.40551 524.15625,346.65625 C 524.0657,346.90699 523.93774,347.14122 523.8125,347.375 C 523.56202,347.84257 523.28125,348.25 523.28125,348.25 L 523.28125,348.28125 L 523.21875,348.3125 C 523.21875,348.3125 522.87548,348.69382 522.40625,349.0625 C 521.93702,349.43118 521.40312,349.87501 520.71875,349.875 C 520.17327,349.875 519.6557,349.63917 519.21875,349.4375 C 518.86743,349.27535 518.72384,349.15125 518.625,349.09375 C 518.625,349.09375 518.56481,349.09417 518.5625,349.09375 C 518.50846,349.08389 517.89006,348.96538 517.15625,348.8125 C 516.77364,348.73279 516.37358,348.64808 516.03125,348.5625 C 515.68892,348.47692 515.44938,348.39657 515.21875,348.28125 C 515.2341,348.28892 514.94378,348.20529 514.625,348.15625 C 514.30622,348.10721 513.91722,348.07848 513.5,348.03125 C 512.66556,347.93679 511.79778,347.84402 511.25,347.6875 C 510.4949,347.47176 508.05875,347.07643 507.96875,347.0625 L 507.96875,347.09375 L 503.96875,347.09375 C 503.95249,347.12588 503.84137,347.35666 503.625,347.65625 C 503.39448,347.97543 503.11143,348.36793 502.625,348.5625 C 502.44805,348.63328 501.6715,349.094 501.0625,349.5 C 500.4535,349.906 499.9375,350.28125 499.9375,350.28125 L 499.875,350.3125 L 499.8125,350.34375 L 496.71875,351.3125 L 496.65625,351.34375 L 493.8125,352.71875 L 493.6875,352.75 L 493.59375,352.75 L 489.1875,352.75 L 486.46875,352.90625 L 485.34375,354.125 L 484.75,356.59375 C 484.75,356.59375 484.74993,356.62453 484.75,356.625 C 484.75422,356.65248 484.85894,357.46498 484.96875,358.40625 C 485.08046,359.36379 485.20658,360.3786 485.125,361.03125 C 485.00956,361.95493 484.875,365.15625 484.875,365.15625 L 484.875,365.25 L 484.84375,365.3125 C 484.84375,365.3125 484.6242,365.93753 484.3125,366.59375 C 484.15665,366.92186 483.9743,367.2696 483.78125,367.5625 C 483.5882,367.8554 483.4052,368.10042 483.03125,368.25 C 482.89168,368.30582 482.55492,368.61725 482.125,369.03125 C 481.69508,369.44525 481.15684,369.96215 480.46875,370.375 C 479.49918,370.95673 478.94321,371.00197 478.4375,371.125 L 479.5,373.875 L 479.53125,373.90625 L 479.53125,373.9375 L 480.5,375.75 L 480.53125,375.78125 C 480.55123,375.81386 480.68417,376.05122 480.90625,376.3125 C 481.14324,376.59131 481.48641,376.78125 481.46875,376.78125 C 481.7511,376.78125 482.51639,376.73467 483.3125,376.71875 C 484.10861,376.70283 484.90976,376.70586 485.4375,376.78125 C 486.38079,376.91599 487.17295,377.23544 487.875,377.9375 C 488.60063,378.66313 489.8125,380.375 489.8125,380.375 L 489.9375,380.53125 L 489.90625,380.6875 L 489.78125,383.84375 L 489.78125,384.03125 L 489.6875,384.15625 L 488.21875,385.875 L 487.8125,387.4375 L 488.59375,389.03125 L 488.625,389.0625 L 488.625,389.09375 L 489.46875,391.25 L 490.5625,392.9375 L 493.71875,392.9375 L 493.84375,392.9375 L 493.96875,393 L 496.625,394.5 L 496.65625,394.53125 L 496.71875,394.59375 L 497.71875,395.59375 L 497.90625,395.78125 L 497.875,396 L 497.75,397.15625 L 497.75,397.1875 L 497.34375,399.09375 L 497.34375,399.21875 L 497.25,399.3125 L 496.09375,400.59375 L 496.09375,403.09375 L 497.78125,405.25 L 499.65625,407.625 L 499.78125,407.78125 L 499.78125,407.9375 L 499.78125,410.71875 C 499.78125,410.71875 499.76352,411.24489 499.65625,411.78125 C 499.60261,412.04943 499.53198,412.33212 499.375,412.59375 C 499.21802,412.85538 498.89774,413.125 498.5,413.125 C 498.12119,413.125 497.28285,413.10934 496.46875,413.125 C 496.0617,413.13283 495.66547,413.17027 495.34375,413.1875 C 495.02203,413.20473 494.74515,413.21215 494.71875,413.21875 C 494.4039,413.29746 493.54277,413.84868 492.4375,414.125 C 491.50374,414.35845 489.33962,415.06404 489.25,415.09375 L 489.1875,415.125 L 489,415.21875 L 491.15625,416.53125 L 497.40625,420.28125 L 502.90625,423.65625 L 502.9375,423.6875 L 506.28125,425.4375 L 506.3125,425.4375 L 508.75,426.5 L 510.59375,427.28125 L 512.6875,425.1875 L 512.8125,425.0625 L 512.96875,425.03125 L 515.84375,424.6875 L 515.875,424.6875 L 515.90625,424.6875 L 522.03125,424.6875 L 524.03125,424.21875 L 524.6875,420.65625 L 524.6875,420.625 L 525.03125,416.90625 L 525.0625,416.78125 L 525.125,416.6875 L 526.5625,414.53125 L 526.625,414.40625 L 526.78125,414.34375 L 529.46875,413.28125 L 529.5,413.28125 L 529.53125,413.25 L 535.09375,411.875 L 538.34375,407.5625 L 542.09375,402.5625 L 542.21875,402.40625 L 542.4375,402.375 L 544.21875,402.09375 L 544.46875,400.5625 L 544.5,400.46875 L 544.53125,400.375 L 546.3125,397.34375 L 546.34375,397.3125 L 546.34375,397.28125 L 547.75,395.53125 C 547.75,395.28314 547.74998,392.51485 547.75,392.03125 C 547.75,391.52619 547.75,389.90625 547.75,389.90625 C 547.71613,389.76654 547.01394,386.91005 546.875,385.9375 C 546.84109,385.70016 546.70707,385.56564 546.375,385.40625 C 546.04293,385.24686 545.57336,385.13044 545.125,384.90625 C 545.10951,384.89851 545.03993,384.87565 544.875,384.9375 C 544.71007,384.99935 544.51061,385.13267 544.3125,385.28125 C 543.91627,385.57842 543.5625,385.9375 543.5625,385.9375 L 543.53125,386 L 543.4375,386.03125 L 540.65625,387.5625 L 540.5625,387.59375 L 540.46875,387.625 C 540.46875,387.625 538.72927,387.74999 538.03125,387.75 C 537.75675,387.75 537.46856,387.60487 537.3125,387.40625 C 537.15644,387.20763 537.10586,387.01331 537.09375,386.84375 C 537.06953,386.50464 537.15625,386.21875 537.15625,386.21875 L 537.8125,383.84375 L 537.8125,383.8125 L 537.8125,383.78125 L 538.75,381.46875 L 538.5,380.96875 L 538.46875,380.90625 L 537.125,379.0625 L 537,378.90625 L 537.03125,378.6875 L 537.53125,376.28125 L 537.5625,376.15625 L 537.625,376.0625 L 539.78125,373.3125 L 539.8125,373.25 L 539.84375,373.25 C 539.84375,373.25 540.20103,372.89159 540.5625,372.5 C 540.74324,372.3042 540.94176,372.10855 541.0625,371.9375 C 541.15305,371.80921 541.18064,371.69153 541.1875,371.6875 C 541.19047,371.07343 541.3125,369.15625 541.3125,369.15625 L 541.3125,369.09375 L 541.34375,369.03125 L 541.96875,367.125 L 542,367.0625 L 542.03125,367 L 542.84375,365.875 L 543.21875,362.3125 L 543.21875,362.28125 C 543.21875,362.28125 543.29187,361.8517 543.40625,361.3125 C 543.52063,360.7733 543.63615,360.16893 543.90625,359.71875 C 544.28001,359.09583 545.14415,357.57458 546,356.71875 C 546.62012,356.09863 547.15625,354.75 547.15625,354.75 L 547.15625,354.71875 L 547.1875,354.6875 L 549.0625,350.90625 L 549.1875,350.65625 L 549.46875,350.625 L 552.375,350.25 L 552.40625,350.25 L 552.4375,350.25 L 556.8125,350.25 L 556.84375,350.25 L 559,349.59375 L 559,349.375 L 559.65625,349.34375 C 559.76142,349.2259 559.91953,349.06827 560.1875,348.71875 C 560.5352,348.26523 560.88311,347.63887 560.90625,347.5 C 560.99456,346.97013 561.28717,346.36317 561.5625,345.8125 C 561.83783,345.26183 562.09375,344.8125 562.09375,344.8125 L 562.90625,342.03125 L 562.90625,342 L 562.90625,339.71875 L 562.1875,337.65625 L 562.15625,337.53125 L 562.15625,337.4375 L 562.40625,335.40625 L 562.40625,335.34375 L 562.4375,335.28125 C 562.4375,335.28125 562.96948,334.09074 563.0625,333.71875 C 563.19353,333.19465 563.5625,331.8125 563.5625,331.8125 L 564.0625,329.5625 L 564.1875,325.84375 L 564.1875,325.8125 L 564.5625,323.15625 L 564.5625,323.09375 L 564.59375,323.0625 L 565.21875,321.15625 L 565.21875,321.125 L 566.8125,317.5 L 565.96875,314.25 C 565.96875,314.25 565.71528,313.11104 565.59375,312.625 C 565.59191,312.61762 565.4557,312.3489 565.3125,312.0625 C 565.1693,311.7761 564.99227,311.42202 564.8125,311.09375 C 564.47056,310.46934 564.18761,309.9605 564.15625,309.90625 C 564.15625,309.90625 563.13312,308.67695 562.25,308.125 C 561.26526,307.50953 560.34192,307.02417 558.625,306.65625 C 557.70932,306.46003 557.31472,306.26674 557.09375,306.15625 C 556.87278,306.04576 556.93217,306.03125 556.46875,306.03125 zM 135.125,306.125 L 134.53125,306.6875 L 133.03125,310.28125 L 133.03125,310.34375 L 132.96875,310.40625 L 131.46875,312.3125 L 131.375,312.40625 L 131.25,312.4375 L 128.96875,313.34375 L 128.90625,313.34375 L 128.875,313.375 L 125.1875,313.875 L 125.125,313.875 L 125.0625,313.875 C 125.0625,313.875 124.57221,313.79822 124,313.71875 C 123.42779,313.63927 122.82863,313.55091 122.5,313.46875 C 122.50689,313.47047 122.09966,313.43542 121.65625,313.40625 C 121.21284,313.37708 120.65963,313.33609 120.125,313.3125 C 119.08763,313.26673 118.15125,313.25181 118.09375,313.25 L 115.34375,314.46875 L 115.28125,314.5 L 115.1875,314.5 L 106.09375,315 L 106.03125,315 L 105.96875,315 C 105.96875,315 104.98306,314.81545 103.90625,314.59375 C 102.82944,314.37205 101.73157,314.12927 101.25,313.96875 C 100.89457,313.85028 100.62303,313.62093 100.3125,313.34375 C 100.00197,313.06657 99.667315,312.72982 99.34375,312.40625 C 99.020185,312.08268 98.697478,311.79298 98.4375,311.5625 C 98.177522,311.33202 97.906405,311.20003 98,311.21875 C 98.010647,311.22088 97.89413,311.18589 97.71875,311.1875 C 97.54337,311.18911 97.289865,311.20422 97.03125,311.21875 C 96.51402,311.24781 95.901695,311.32003 95.28125,311.375 C 94.104294,311.47928 93.111064,311.58181 93,311.59375 C 92.893984,311.68701 92.534202,312.01889 92,312.46875 C 91.697425,312.72355 91.374019,312.96816 91.09375,313.1875 C 90.813481,313.40684 90.598164,313.57592 90.375,313.6875 C 90.464659,313.64267 90.325141,313.74056 90.1875,313.875 C 90.049859,314.00944 89.859941,314.21635 89.65625,314.4375 C 89.248868,314.8798 88.737317,315.43408 88.25,316 C 87.275366,317.13183 86.375,318.25 86.375,318.25 L 86.25,318.375 L 86.0625,318.40625 L 82.78125,318.90625 L 82.65625,318.9375 L 82.53125,318.90625 L 80.78125,318.28125 L 79.15625,317.71875 L 78.75,318.8125 L 79.59375,321.84375 L 79.625,321.9375 L 79.59375,322.03125 L 79.0625,325.96875 L 79.0625,326.09375 L 78.96875,326.1875 L 77.375,328.34375 L 77.25,328.5 L 77.0625,328.53125 L 71.75,329.59375 L 71.71875,329.59375 L 68.375,330.65625 L 68.0625,330.75 L 67.875,330.53125 L 66.90625,329.59375 L 65.5,329.59375 L 65.5,329.90625 L 66.28125,330.4375 L 68.84375,330.9375 L 68.90625,330.9375 L 68.96875,330.96875 L 73.4375,333.125 L 73.625,333.21875 L 73.6875,333.4375 L 74.40625,335.9375 L 74.5,336.3125 L 74.1875,336.5 L 73.53125,336.875 L 73.53125,342.5625 L 74.21875,344.28125 L 74.25,344.375 L 74.25,344.5 L 73.90625,348.96875 L 73.875,349.0625 L 73.84375,349.15625 L 73.46875,349.90625 L 74.34375,350.78125 L 77.75,351.25 L 80.0625,349.4375 L 80.0625,349.40625 L 80.09375,349.40625 L 82.25,348.09375 L 82.03125,347.28125 L 81.96875,347.09375 L 82.03125,346.9375 L 83,344.75 L 83.03125,344.71875 L 83.8125,342.5 L 83.84375,342.4375 L 83.90625,342.375 L 85.15625,340.75 L 85.25,340.625 L 85.4375,340.59375 L 88.5625,339.96875 L 88.6875,339.9375 L 88.84375,339.96875 L 90.9375,340.78125 L 90.96875,340.78125 L 94.15625,341.65625 L 94.1875,341.65625 L 94.21875,341.6875 L 96.34375,342.5625 L 96.40625,342.59375 L 96.4375,342.625 L 98.65625,344.21875 L 100.8125,345.65625 L 100.84375,345.6875 L 100.875,345.6875 L 102.34375,347 L 109.1875,347 L 109.3125,347 L 109.40625,347.03125 L 111.625,348.0625 L 111.6875,348.0625 L 120.09375,348.4375 L 122.71875,347.375 C 122.71875,347.375 122.74853,347.34501 122.75,347.34375 C 122.77912,347.31887 123.05962,347.09035 123.4375,346.8125 C 123.63598,346.66656 123.84653,346.53301 124.0625,346.40625 C 124.27847,346.27949 124.48722,346.1688 124.75,346.125 C 124.85345,346.10776 125.40868,345.89416 125.84375,345.6875 C 126.27882,345.48084 126.65625,345.28125 126.65625,345.28125 L 126.75,345.21875 L 126.875,345.21875 L 130.71875,345.21875 L 130.84375,345.21875 L 130.96875,345.28125 L 132.09375,345.96875 L 134.71875,344.90625 L 134.96875,344.78125 L 135.1875,344.9375 L 137.96875,346.8125 L 138,346.84375 L 138.03125,346.875 L 139.875,348.8125 L 139.90625,348.84375 L 141,349.8125 L 141.84375,349.21875 L 142,349.15625 L 142.15625,349.15625 L 146,349.15625 L 146.375,346.4375 L 146.40625,346.1875 L 146.625,346.09375 L 148.375,345.125 L 148.40625,345.09375 L 150.5,342.625 L 150.5625,342.5625 L 150.59375,342.53125 L 153.46875,340.5 L 153.5625,340.40625 L 153.6875,340.40625 L 157,339.9375 L 158.71875,339.21875 L 159.15625,336.71875 L 159.15625,336.59375 L 159.25,336.5 L 160.03125,335.40625 L 160.8125,333.625 C 160.62223,333.48117 160.41104,333.35364 160,333.03125 C 159.71278,332.80598 159.43377,332.55114 159.1875,332.34375 C 158.94123,332.13636 158.77596,332.01379 158.625,331.8125 C 158.60803,331.78988 158.44556,331.62632 158.25,331.4375 C 158.05444,331.24868 157.80915,331.03174 157.5625,330.8125 C 157.31585,330.59326 157.04852,330.35346 156.84375,330.1875 C 156.63898,330.02154 156.44623,329.89499 156.46875,329.90625 C 156.16332,329.75353 156.07842,329.58168 155.9375,329.375 C 155.79658,329.16832 155.65849,328.91884 155.53125,328.6875 C 155.27677,328.22482 155.09375,327.8125 155.09375,327.8125 L 155.03125,327.71875 L 155.03125,327.59375 L 154.9375,324.46875 L 154.9375,324.4375 L 155.125,321.03125 L 155.125,320.8125 L 155.34375,320.65625 L 157.8125,318.90625 L 157.84375,318.875 L 159.71875,317.3125 L 159.25,316.40625 L 156.53125,314.71875 L 156.375,314.625 L 156.3125,314.4375 L 155.84375,313.09375 C 155.77049,313.03802 155.52302,312.85435 155.15625,312.59375 C 154.94857,312.44619 154.74167,312.30046 154.5625,312.1875 C 154.38333,312.07454 154.17284,311.98071 154.25,312 C 153.91343,311.91585 153.82864,311.76009 153.6875,311.59375 C 153.54636,311.42741 153.39976,311.21494 153.28125,311.03125 C 153.11656,310.77598 153.07008,310.65791 153,310.53125 L 149.8125,309.21875 L 146.90625,308 L 142.21875,307.90625 C 142.09731,308.01584 142.12666,308.06546 141.9375,308.15625 C 141.40379,308.41243 140.58544,308.44681 139.65625,307.875 C 138.09029,306.91134 136.78125,306.65625 136.78125,306.65625 L 136.75,306.65625 L 136.71875,306.65625 L 135.125,306.125 zM 716.53125,314.4375 C 716.41168,314.47141 716.06739,314.58396 715.65625,314.75 C 715.22727,314.92324 714.70769,315.13262 714.21875,315.34375 C 713.30765,315.73718 712.57854,316.04443 712.46875,316.09375 L 710.75,317.78125 L 710.71875,317.84375 L 707.1875,322.78125 L 707.125,322.875 L 707.03125,322.9375 L 703.28125,325.0625 L 703.25,325.09375 L 698.25,327.40625 L 698.1875,327.4375 L 698.15625,327.4375 L 696,328 L 695.78125,328.03125 L 695.59375,327.90625 L 692.375,325.59375 L 692.375,325.5625 L 692.34375,325.5625 L 689.3125,323 C 689.17269,323.00983 688.80943,323.03125 688.21875,323.03125 C 687.52688,323.03125 686.7995,323.07162 686.21875,322.78125 C 685.42315,322.38345 683.92637,321.29018 683.78125,321.1875 L 683.71875,321.15625 L 678.40625,319.40625 L 678.34375,319.375 L 678.3125,319.34375 L 675.5,317.59375 L 671.34375,316.5625 L 671.3125,316.5625 L 667.875,316.75 L 664.4375,319.84375 L 664.40625,319.875 L 662.25,321.46875 L 662.15625,321.53125 L 662.03125,321.5625 L 657.65625,322.25 L 657,323.6875 L 659.65625,326.8125 L 659.75,326.90625 L 659.75,327 L 660.65625,330.03125 L 660.75,330.34375 L 660.53125,330.53125 C 660.53125,330.53125 659.74804,331.26261 658.84375,332.03125 C 658.39161,332.41557 657.92011,332.82641 657.46875,333.15625 C 657.01739,333.48609 656.60914,333.74487 656.21875,333.875 C 655.13151,334.23742 651.21875,335.46875 651.21875,335.46875 L 644.96875,337.28125 L 644.875,337.28125 L 644.8125,337.28125 L 638.375,337.09375 L 638.3125,337.09375 L 638.25,337.09375 L 632.90625,335.3125 L 632.28125,339.875 L 632.25,340.09375 L 632.09375,340.21875 L 627.3125,343.75 L 627.25,343.78125 L 625.3125,345.75 C 625.31157,345.90909 625.31974,346.2903 625.28125,346.90625 C 625.25836,347.27246 625.20986,347.67386 625.15625,348.03125 C 625.10264,348.38864 625.04771,348.68583 624.90625,348.96875 C 624.7724,349.23644 624.30697,350.43142 623.90625,351.5 C 623.50553,352.56858 623.15625,353.5625 623.15625,353.5625 L 623.125,353.625 L 623.09375,353.6875 L 622.28125,354.75 L 625.9375,357.9375 L 629.875,358.4375 L 630.15625,358.46875 L 630.28125,358.71875 L 632.25,362.8125 L 632.09375,362.875 L 634.46875,363.09375 L 637.09375,361.09375 L 637.25,360.96875 L 637.40625,360.96875 L 639.1875,360.96875 L 639.375,360.96875 L 639.53125,361.125 L 641.6875,363.28125 L 641.78125,363.375 L 641.8125,363.5 C 641.81988,363.51329 641.83598,363.54105 641.90625,363.59375 C 642.04678,363.69915 642.4063,363.875 643.21875,363.875 C 644.05503,363.875 644.72941,363.75353 645.40625,363.6875 C 646.08309,363.62147 646.78113,363.62211 647.5625,363.90625 C 648.19408,364.13592 649.21342,364.37394 650.15625,364.5625 C 651.09908,364.75106 651.90458,364.87433 652.375,365.0625 C 652.52483,365.12243 652.62056,365.15237 652.75,365.21875 C 652.87944,365.28513 653.05483,365.43788 653.125,365.625 C 653.26534,365.99924 653.1875,366.17201 653.1875,366.65625 C 653.1875,366.74846 653.20904,366.96908 653.21875,367.09375 L 653.28125,366.65625 L 656.65625,367 L 656.78125,367.03125 L 656.875,367.09375 L 658.90625,368.40625 L 661.625,368.0625 L 667.9375,364.59375 L 667.5,362.15625 L 665.125,360.09375 L 663.59375,358.84375 L 663.3125,358.59375 L 663.46875,358.25 L 664.5625,355.9375 L 661.71875,353.53125 L 661.53125,353.375 L 661.53125,353.15625 L 661.53125,351.125 L 661.53125,350.6875 L 661.96875,350.625 L 666.375,350.03125 L 667.65625,347.625 L 667.6875,347.5625 L 667.71875,347.53125 L 669.96875,344.875 L 670.4375,344.3125 L 670.8125,344.9375 L 672.53125,348.03125 L 672.5625,348.09375 L 673.4375,349.25 L 675.5625,347.21875 L 676.03125,346.78125 L 676.34375,347.34375 L 677.15625,348.78125 L 679.21875,346.75 L 679.71875,346.25 L 680.03125,346.84375 L 681.09375,348.84375 L 682.0625,349.28125 L 682.625,349.53125 L 682.25,350.03125 L 679.4375,353.90625 L 679.4375,353.9375 L 678.8125,356.65625 L 678.8125,356.6875 L 681.375,354.9375 C 681.375,354.9375 681.43486,354.87766 681.4375,354.875 C 681.53115,354.78057 683.17167,353.12136 683.59375,352.59375 C 683.79112,352.34704 684.08353,352.13588 684.40625,351.90625 C 684.72897,351.67662 685.08429,351.43549 685.4375,351.21875 C 686.14392,350.78527 686.78125,350.4375 686.78125,350.4375 L 686.96875,350.34375 L 687.15625,350.375 L 689.5625,350.96875 L 688.78125,349.90625 L 686.75,347.125 L 686.65625,347 L 686.65625,346.84375 L 686.53125,342.40625 L 685.59375,340.625 L 685.53125,340.5625 L 685.53125,340.46875 L 685.03125,337.1875 L 684.8125,335.875 L 685.84375,336.71875 L 688.25,338.75 L 688.34375,338.84375 L 688.375,338.96875 C 688.375,338.96875 688.56168,339.49779 688.78125,340.09375 C 689.00082,340.68971 689.286,341.38449 689.375,341.5625 C 689.33379,341.48009 689.44892,341.65685 689.65625,341.78125 C 689.86358,341.90565 690.13314,342.03487 690.40625,342.15625 C 690.95248,342.39902 691.5,342.5625 691.5,342.5625 L 691.59375,342.625 L 691.65625,342.6875 L 693.6875,344.5625 L 693.8125,344.6875 L 693.84375,344.84375 L 694.3125,347 L 696.40625,345.46875 L 697.8125,343.46875 L 698.78125,338.78125 L 698.84375,338.5 L 699.125,338.40625 L 701.6875,337.59375 L 703,334.625 L 703.03125,334.53125 L 703.15625,334.4375 L 705.53125,332.6875 L 706.46875,331.90625 L 705.84375,330.625 L 705.78125,330.53125 L 704.71875,329.375 L 704.5625,329.1875 L 704.59375,328.96875 L 704.84375,326.9375 L 704.90625,326.53125 L 705.3125,326.5 L 709.46875,326.25 L 713.09375,325.40625 L 714.09375,324.5625 C 714.01978,324.51184 714.01132,324.53091 713.9375,324.46875 C 713.74747,324.30873 713.53653,324.08932 713.4375,323.78125 C 713.33847,323.47318 713.41358,323.07245 713.65625,322.78125 C 714.03664,322.32478 715.03481,321.38645 715.96875,320.5 C 716.88587,319.62951 717.68879,318.87149 717.71875,318.84375 L 717.71875,316.03125 C 717.67533,315.94649 717.48644,315.55472 717.1875,315.125 C 717.02202,314.88713 716.83511,314.66041 716.6875,314.53125 C 716.6137,314.46667 716.55383,314.45016 716.53125,314.4375 zM 710.75,354.65625 C 710.75325,354.75234 710.75438,354.75103 710.8125,354.6875 C 710.86231,354.63305 710.84165,354.64802 710.75,354.65625 zM 978.8125,323.1875 C 978.6101,323.30515 978.22382,323.53087 977.625,323.90625 C 977.25622,324.13743 976.86573,324.36541 976.59375,324.5625 C 976.45776,324.66104 976.34728,324.7528 976.28125,324.8125 C 976.2287,324.98034 976.13765,325.07375 976.0625,325.15625 C 975.97779,325.24924 975.88906,325.31538 975.78125,325.40625 C 975.56562,325.58799 975.30445,325.80648 975.03125,326 C 974.48484,326.38704 973.88163,326.77594 973.71875,326.90625 C 973.35587,327.19655 972.7849,327.42863 972.25,327.65625 C 971.74963,327.86918 971.36838,328.00988 971.3125,328.03125 C 971.3125,328.03125 971.25185,328.06146 971.25,328.0625 C 971.16229,328.11168 969.08709,329.28457 968.34375,329.65625 C 967.88971,329.88327 967.01884,330.16787 966.1875,330.4375 C 965.35616,330.70713 964.59375,330.9375 964.59375,330.9375 L 964.53125,330.9375 L 964.46875,330.9375 L 961.1875,330.9375 L 961.15625,330.9375 L 956,331.21875 L 955.96875,331.21875 C 955.96875,331.21875 954.92704,331.24306 954.25,331.46875 C 953.91673,331.57984 953.33894,331.86307 952.71875,332.15625 C 952.09856,332.44943 951.45239,332.7541 950.84375,332.90625 C 949.91181,333.13924 948.28125,334 948.28125,334 L 948.21875,334.03125 L 948.125,334.0625 C 948.125,334.0625 947.40742,334.21801 946.8125,334.34375 L 947.1875,336.625 L 947.21875,336.71875 L 947.1875,336.8125 L 946.75,338.9375 L 946.71875,339.09375 L 946.625,339.1875 L 944.75,341.15625 L 944.71875,341.15625 L 944.71875,341.1875 L 942.5625,343.125 L 942.53125,343.15625 L 942.5,343.1875 L 940.65625,344.46875 L 940.0625,345.625 L 940.15625,347.5625 L 941.0625,349.3125 L 941.21875,349.59375 L 941.03125,349.84375 L 939.34375,352.15625 L 939.34375,352.1875 L 939.3125,352.1875 L 938.34375,353.46875 L 939,355.40625 L 939.03125,355.40625 L 939.78125,356.96875 L 939.8125,357 L 941.21875,359.1875 L 941.125,359.25 L 943.875,361.0625 L 949.28125,364.375 L 953.5,363.65625 L 953.71875,363.59375 L 953.90625,363.75 L 956,365.375 L 960.4375,364.65625 L 960.46875,364.65625 L 960.5,364.65625 L 969.3125,364.125 L 972.1875,361.375 L 974.25,358.3125 L 974.3125,358.21875 L 974.375,358.15625 L 976.78125,356.53125 L 976.90625,356.4375 L 977.0625,356.4375 L 981,356.4375 L 981.03125,356.4375 L 981.0625,356.4375 L 984.46875,356.9375 L 984.5,356.96875 L 984.5625,356.96875 L 988.71875,358.34375 L 988.875,358.40625 L 989,358.5625 L 991.5,362.59375 L 991.5625,362.65625 L 991.5625,362.75 L 992.5625,366.28125 L 992.6875,366.65625 L 992.3125,366.84375 L 989.46875,368.28125 L 988.5,370.78125 L 990.125,373.34375 L 990.15625,373.40625 L 990.1875,373.5 L 990.90625,376.84375 L 993.125,378.25 L 994.59375,376.21875 L 994.625,376.1875 L 994.625,376.15625 L 997.28125,373.28125 L 997.375,373.15625 L 997.5,373.125 L 1000.4688,372.28125 L 1004.8438,368.6875 L 1006.2812,365.3125 L 1006.3125,365.21875 L 1006.4062,365.15625 L 1008.9375,362.75 L 1009.1562,362.53125 L 1009.4375,362.65625 L 1011.625,363.5 L 1015.625,363.15625 L 1015.9688,358.40625 L 1016,358.09375 L 1016.3125,357.96875 L 1018.625,357.21875 L 1016.875,355.28125 L 1016.8438,355.25 L 1012.8438,351.59375 C 1012.7377,351.57467 1012.2125,351.47434 1011.5312,351.375 C 1011.1578,351.32053 1010.7841,351.27817 1010.4688,351.25 C 1010.1532,351.22183 1009.8519,351.2636 1009.9062,351.25 C 1009.7391,351.29179 1009.5505,351.24873 1009.4375,351.1875 C 1009.3245,351.12627 1009.2479,351.03971 1009.1875,350.96875 C 1009.0667,350.82684 1008.9876,350.67257 1008.9062,350.5 C 1008.7438,350.15485 1008.5985,349.74263 1008.4688,349.3125 C 1008.2505,348.58959 1008.1424,348.05715 1008.0938,347.84375 L 1005.8125,347.0625 L 1005.625,346.96875 L 1005.5312,346.78125 L 1004.25,343.875 L 1004.1875,343.6875 L 1004.25,343.5 L 1005.0938,341.40625 L 1005.0938,341.375 L 1005.2188,336.84375 L 1004.5312,335.4375 L 1004.5,335.40625 L 1004.5,335.375 L 1003.5,332.09375 L 1003.4375,331.875 L 1003.5312,331.6875 L 1005.2188,328.875 L 1002.75,326.59375 L 1002.7188,326.5625 L 1000.7188,325.75 L 997.3125,326 L 997.125,326 L 996.96875,325.90625 L 996.1875,325.3125 C 996.05903,325.40971 996.03439,325.42633 995.84375,325.5625 C 995.44286,325.84885 994.96745,326.1702 994.5625,326.34375 C 994.38207,326.42108 994.26789,326.58765 994.09375,326.84375 C 993.91961,327.09985 993.70179,327.42322 993.375,327.75 C 992.99911,328.12589 992.56756,328.30587 992.1875,328.46875 C 991.80744,328.63163 991.49477,328.76981 991.375,328.9375 C 991.10335,329.31781 990.74026,329.62481 990.28125,329.75 C 989.82224,329.87519 989.28721,329.875 988.5625,329.875 C 987.13393,329.875 986.95086,329.875 985.96875,329.875 C 985.04721,329.875 984.78433,330.00176 984,330.4375 C 983.19093,330.88699 982.87378,331.04631 981.90625,331.75 C 981.36345,332.14476 980.90033,332.29154 980.5,332.21875 C 980.09967,332.14596 979.90628,331.96876 979.6875,331.90625 C 979.41484,331.82835 979.13382,331.574 979.0625,331.3125 C 978.99118,331.051 979.04442,330.86368 979.09375,330.6875 C 979.19241,330.33514 979.3125,329.98986 979.3125,330 C 979.3125,329.43252 979.46568,328.74262 979.84375,328.21875 C 979.84742,328.20407 979.86592,328.16044 979.875,328.125 C 979.89316,328.05411 979.92031,327.9698 979.9375,327.84375 C 979.97188,327.59164 979.98367,327.25317 980,326.9375 C 980.03098,326.33853 980.03115,325.83752 980.03125,325.78125 L 980.03125,325.71875 L 979.8125,324.03125 L 978.8125,323.1875 zM 711.78125,328.25 C 711.63973,328.23113 711.53364,328.2531 711.15625,328.46875 C 710.72989,328.7124 710.31047,328.98408 710.03125,329.25 C 709.75203,329.51592 709.625,329.72189 709.625,329.90625 C 709.62502,330.775 709.43513,331.47844 709.59375,331.875 C 709.85485,332.52771 710.09375,333.28125 710.09375,333.28125 L 710.21875,333.625 L 709.9375,333.84375 L 707.15625,335.875 L 706.71875,336.1875 L 706.4375,335.75 C 706.4375,335.75 706.42976,335.73381 706.40625,335.71875 C 706.3292,335.8247 706.21138,336.09381 706.09375,336.59375 C 705.84622,337.64575 705.73986,338.47743 705.8125,338.9375 C 705.84882,339.16753 705.89226,339.29851 705.96875,339.375 C 706.04524,339.45149 706.17268,339.50789 706.40625,339.53125 C 707.63937,339.65456 708.75,339.65625 708.75,339.65625 L 709.34375,339.65625 L 709.25,340.25 L 708.875,342.125 L 708.8125,342.375 L 708.59375,342.5 L 707.53125,342.96875 L 708.75,344.46875 L 710.6875,344.6875 L 711.0625,344.75 L 711.125,345.09375 L 711.5,346.84375 L 711.625,347.34375 L 711.15625,347.4375 L 707.21875,348.4375 C 707.18601,348.47115 707.17054,348.51073 707.125,348.5625 C 707.16272,348.582 707.13997,348.59363 707.3125,348.625 C 708.11981,348.77178 709.18079,349.20856 710.09375,349.625 C 711.00671,350.04144 711.75,350.4375 711.75,350.4375 L 711.90625,350.5 L 711.96875,350.65625 C 711.96875,350.65625 712.11851,350.94094 712.15625,351.375 C 712.19399,351.80905 712.15124,352.42785 711.875,353.1875 C 711.66446,353.76651 711.73138,354.16538 711.75,354.59375 C 711.75931,354.80794 711.76735,355.11694 711.53125,355.375 C 711.29515,355.63306 710.99591,355.65625 710.65625,355.65625 C 709.86581,355.65626 709.16003,355.23106 708.5,354.8125 C 707.83997,354.39394 707.17763,353.95847 706.84375,353.875 C 706.36244,353.75467 705.59931,353.60787 704.875,353.5 C 704.15069,353.39213 703.39579,353.35209 703.28125,353.375 C 702.85244,353.46075 702.42035,353.42612 702.0625,353.375 C 701.84916,353.34452 701.80172,353.33735 701.6875,353.3125 L 699.9375,354.5625 L 699.8125,354.6875 L 699.59375,354.65625 C 699.59375,354.65625 699.53937,354.65379 699.5,354.65625 C 699.51875,354.69749 699.49866,354.66487 699.5625,354.75 C 699.8933,355.19107 700.30285,355.51129 700.59375,355.84375 C 700.66648,355.92686 700.7542,356.005 700.8125,356.15625 C 700.8708,356.3075 700.84791,356.64139 700.6875,356.8125 C 700.52709,356.98361 700.38735,357.00669 700.25,357.03125 C 700.11265,357.05581 699.95575,357.0625 699.78125,357.0625 C 699.21656,357.0625 698.83532,357.17456 698.5,357.28125 C 698.16468,357.38794 697.81776,357.54818 697.375,357.4375 C 696.91323,357.32204 696.70408,356.98547 696.5,356.75 C 696.29592,356.51453 696.11444,356.32078 695.9375,356.25 C 695.14604,355.93344 694.68741,355.4336 693.90625,355.53125 C 693.48515,355.58388 692.50182,355.82762 691.65625,356.0625 C 690.91308,356.26894 690.42705,356.42467 690.28125,356.46875 L 688.96875,359 L 689.75,360.78125 L 690.125,361.625 L 689.21875,361.46875 C 689.21875,361.46875 688.49442,361.34195 687.78125,361.28125 C 687.46028,361.25393 687.17181,361.23818 686.9375,361.25 C 687.1077,361.46662 687.38877,361.74017 687.65625,362 C 688.1912,362.51967 688.75,363 688.75,363 L 688.90625,363.15625 L 688.90625,363.375 L 688.90625,365.40625 L 688.90625,366 L 688.34375,365.875 L 685.28125,365.34375 C 685.21197,365.62122 685.11809,365.90429 685.03125,366.46875 C 684.97097,366.86056 684.95094,367.26847 684.96875,367.5 C 684.97594,367.5935 684.99683,367.61134 685,367.625 C 685.24781,367.66872 685.49986,367.7267 685.75,367.84375 C 686.08262,367.9994 686.43152,368.17629 686.78125,368.375 C 687.13098,368.57371 687.45808,368.78592 687.75,368.9375 C 688.04192,369.08908 688.31001,369.17667 688.375,369.1875 C 688.90932,369.27656 689.34196,369.5846 689.6875,369.84375 C 690.03304,370.1029 690.28125,370.34375 690.28125,370.34375 L 691.25,371.3125 L 689.90625,371.1875 L 684.03125,370.71875 C 683.92205,370.92185 683.76144,371.22636 683.4375,371.71875 C 683.23073,372.03304 682.98857,372.36287 682.75,372.59375 C 682.63071,372.70919 682.51941,372.80764 682.3125,372.875 C 682.20905,372.90868 682.08299,372.91409 681.9375,372.875 C 681.79201,372.83591 681.67093,372.75915 681.59375,372.65625 C 681.33234,372.30771 681.23198,371.94654 681.09375,371.65625 C 680.95552,371.36596 680.80246,371.10444 680.4375,370.84375 C 679.89475,370.45608 679.36219,369.81575 678.84375,369.21875 C 678.32531,368.62175 677.77379,368.09002 677.59375,368 C 677.38387,367.89506 676.63399,367.75122 675.9375,367.65625 C 675.58926,367.60876 675.24731,367.56454 674.9375,367.5 C 674.62769,367.43546 674.35602,367.3842 674.09375,367.1875 C 674.13816,367.22081 673.82349,367.04535 673.4375,366.9375 C 673.05151,366.82965 672.56173,366.7264 672.09375,366.625 C 671.15779,366.42221 670.28125,366.28125 670.28125,366.28125 L 670.25,366.25 L 670.21875,366.25 L 668.125,365.625 L 662.03125,369 L 661.9375,369.0625 L 661.84375,369.0625 L 658.8125,369.4375 L 658.625,369.4375 L 658.46875,369.34375 L 656.46875,368 L 653.25,367.625 C 653.28772,367.98471 653.31819,368.25587 653.34375,368.65625 C 653.36851,369.04411 653.39274,369.45091 653.34375,369.8125 C 653.29476,370.17409 653.18783,370.53092 652.90625,370.8125 C 652.65413,371.06462 652.31936,371.25295 651.90625,371.46875 C 651.49314,371.68455 651.01864,371.89369 650.5625,372.09375 C 649.65022,372.49387 648.8125,372.8125 648.8125,372.8125 L 648.78125,372.8125 C 648.78125,372.8125 648.45775,372.92545 648.15625,373.0625 C 648.0055,373.13103 647.85527,373.18944 647.78125,373.25 C 647.74424,373.28028 647.74856,373.28377 647.75,373.28125 C 647.74218,373.5016 647.69449,373.68813 647.625,373.90625 C 647.54862,374.14599 647.4379,374.42859 647.34375,374.6875 C 647.15546,375.20531 647,375.75932 647,375.875 C 647.00001,376.32402 646.85351,377.07117 646.65625,377.84375 C 646.55762,378.23004 646.44649,378.61815 646.3125,378.9375 C 646.17851,379.25685 646.11334,379.52145 645.71875,379.71875 C 645.54776,379.80424 645.39582,379.84779 645.3125,379.875 C 645.22918,379.90221 645.23855,379.91643 645.25,379.90625 C 645.27289,379.8859 645.15327,379.99853 645.09375,380.59375 C 644.96519,381.87942 644.72832,383.50193 644.84375,384.65625 C 644.91919,385.41074 644.61403,385.83623 644.5625,385.96875 C 644.53673,386.03501 644.49357,386.09847 644.53125,386.3125 C 644.56893,386.52653 644.69403,386.85845 644.9375,387.40625 C 645.93931,389.66024 646.40625,390.375 646.40625,390.375 L 646.4375,390.4375 L 646.46875,390.53125 L 647.3125,393.5625 C 647.3125,393.5625 647.57956,393.97381 647.96875,394.40625 C 648.35794,394.83869 648.86582,395.1875 649.15625,395.1875 C 649.65038,395.1875 650.1814,395.0836 650.6875,395.03125 C 650.94055,395.00507 651.20277,394.99354 651.46875,395.0625 C 651.73473,395.13146 652.0053,395.35701 652.125,395.65625 C 652.41166,396.37295 652.41298,396.86621 652.78125,398.09375 C 652.99392,398.80271 652.93462,399.29005 652.90625,399.53125 C 652.89206,399.65185 652.90077,399.66894 652.90625,399.6875 C 652.91173,399.70606 652.90877,399.78377 653.03125,399.90625 C 653.29978,400.17478 653.55987,400.2989 653.84375,400.5625 C 654.12763,400.8261 654.36419,401.22601 654.4375,401.8125 C 654.56041,402.79583 654.67482,404.29218 654.6875,404.46875 L 655.84375,406.03125 L 656.75,405.09375 L 656.8125,405 L 656.9375,404.96875 L 662.25,403.0625 L 666.53125,401.53125 L 666.6875,401.5 L 666.8125,401.53125 L 670.53125,402.40625 L 670.59375,402.40625 L 677.34375,402.90625 L 677.4375,402.90625 L 677.5,402.9375 L 683.3125,405.34375 L 683.40625,405.375 L 683.46875,405.46875 L 687.34375,409.5625 L 687.40625,409.625 L 691.84375,412.9375 L 691.875,412.96875 L 697.3125,415.125 L 700.84375,414.65625 L 700.875,414.65625 L 700.90625,414.65625 L 712.40625,414.53125 L 712.46875,414.53125 L 712.53125,414.53125 L 715.90625,415.40625 L 715.9375,415.40625 L 722.15625,416.65625 L 724.15625,415.46875 L 724.25,415.4375 L 724.34375,415.40625 L 730.125,414.65625 L 735.46875,413.78125 L 738.5,412.65625 L 738.53125,412.65625 L 738.59375,412.625 L 743.21875,411.875 L 743.28125,411.875 L 746.53125,410.15625 L 746.625,410.125 L 746.71875,410.09375 L 751.84375,409.59375 L 754.28125,407.8125 L 754.34375,407.75 L 754.4375,407.71875 C 754.4375,407.71875 755.56706,407.34749 756.78125,406.9375 C 757.99544,406.52751 759.31084,406.06941 759.5625,405.96875 C 760.15719,405.73087 762.829,404.6934 763.15625,404.5625 L 764.25,402.4375 L 764.375,402.1875 L 764.625,402.15625 L 766.8125,401.9375 L 766.78125,401.78125 L 770.125,401.4375 L 772.84375,399.125 L 767.25,393.75 L 767.09375,393.59375 L 767.09375,393.40625 C 767.09375,393.40625 767.09375,390.79466 767.09375,390.4375 C 767.09375,390.13988 767.18909,390.02446 767.28125,389.8125 C 767.37341,389.60054 767.47878,389.3747 767.59375,389.15625 C 767.75717,388.84575 767.8572,388.70168 767.9375,388.5625 L 767.0625,386.71875 L 767,386.65625 L 767,386.5625 L 766.8125,385.09375 L 765.15625,383 L 765.125,382.96875 L 765.09375,382.9375 L 762.25,378.21875 L 760.28125,375.09375 L 760.28125,375.0625 L 760.25,375.03125 L 758.5625,371.46875 L 758.5625,371.4375 L 758.53125,371.40625 L 756.96875,366.40625 C 756.96875,366.40625 756.94036,366.31738 756.9375,366.3125 C 756.89445,366.23904 756.56489,365.71244 756.1875,365.0625 C 755.78506,364.36942 755.40781,363.69061 755.28125,363.4375 C 755.27388,363.42276 755.06261,363.0731 754.8125,362.65625 C 754.56239,362.2394 754.2497,361.7004 753.9375,361.1875 C 753.3131,360.16169 752.6875,359.1875 752.6875,359.1875 L 752.46875,358.84375 L 752.5625,358.75 L 750.3125,356.03125 L 750.21875,355.90625 L 750.21875,355.71875 L 750.03125,351.09375 L 750.03125,351.0625 L 750.03125,351.03125 L 750.21875,347.46875 L 750.21875,347.40625 L 750.25,347.34375 L 751.09375,344.625 L 750.40625,342.09375 L 750.40625,342.0625 L 749.875,339.59375 L 749.875,339.5625 L 749.25,337.28125 L 747.09375,337.28125 L 741.125,340.625 L 740.96875,340.71875 L 740.78125,340.65625 L 738.46875,340.125 L 738.3125,340.09375 L 738.21875,340 L 734.125,336.0625 L 734.09375,336.0625 L 730.96875,332.75 L 726.46875,331 C 726.46875,331 726.43779,331.00009 726.4375,331 C 726.41036,330.99158 725.14938,330.60677 723.78125,330.1875 C 722.5217,329.80151 721.32882,329.46923 720.875,329.34375 L 720.71875,329.71875 L 720.53125,330.15625 L 720.09375,330 L 716.5,328.90625 C 716.5,328.90625 715.63163,328.78213 714.6875,328.65625 C 714.21543,328.59331 713.71046,328.51557 713.3125,328.46875 C 712.91454,328.42193 712.57419,328.40625 712.53125,328.40625 C 712.15371,328.40625 711.92277,328.26887 711.78125,328.25 zM 924.4375,331.9375 C 924.26689,331.96187 923.65412,332.15227 923.125,332.40625 C 922.86044,332.53324 922.5947,332.69013 922.40625,332.8125 C 922.2178,332.93487 922.09992,333.07305 922.125,333.03125 C 921.92948,333.35712 921.69092,333.34653 921.5,333.375 C 921.30908,333.40347 921.10755,333.413 920.875,333.40625 C 920.40989,333.39275 919.85761,333.32346 919.28125,333.25 C 918.91079,333.20278 918.56426,333.14351 918.21875,333.09375 L 918.3125,333.15625 L 916.875,336.125 L 916.875,336.15625 L 916.84375,336.1875 L 915.6875,337.78125 L 914.65625,340.28125 L 914.625,340.375 L 914.5625,340.4375 L 913.21875,341.78125 L 912.96875,342 L 912.6875,341.90625 L 910.65625,341.125 L 910.53125,341.09375 L 907.4375,340.6875 L 907.34375,340.65625 L 907.28125,340.625 C 907.28125,340.625 906.87343,340.44556 906.40625,340.25 C 906.17266,340.15222 905.92243,340.03793 905.71875,339.96875 C 905.51507,339.89957 905.30535,339.875 905.34375,339.875 C 905.14881,339.875 904.95037,339.80147 904.8125,339.71875 C 904.67463,339.63603 904.60856,339.567 904.53125,339.5 C 904.37663,339.36599 904.2482,339.23696 903.875,339.125 C 903.54193,339.02509 903.20406,338.84174 902.8125,338.59375 C 902.42094,338.34576 901.98976,338.03852 901.59375,337.75 C 900.84986,337.20802 900.29406,336.74757 900.21875,336.6875 L 898.09375,336.03125 L 893.40625,336.625 L 893.28125,336.65625 L 891.09375,337.5625 C 891.09375,337.5625 890.555,337.92883 890,338.375 C 889.7225,338.59809 889.43942,338.84958 889.21875,339.0625 C 888.99808,339.27542 888.8445,339.46701 888.84375,339.46875 C 888.70302,339.79708 888.42931,340.39829 888.09375,341 C 887.75819,341.60171 887.39343,342.19481 886.9375,342.59375 C 886.68358,342.81592 886.18161,343.48312 885.75,344.125 C 885.31839,344.76688 884.96607,345.37768 884.625,345.71875 C 884.35465,345.98911 883.85828,346.41913 883.375,346.8125 C 882.89172,347.20587 882.4375,347.53125 882.4375,347.53125 L 882.3125,347.65625 L 882.15625,347.65625 C 882.15625,347.65625 879.375,347.65625 878.75,347.65625 C 878.07736,347.65626 875.96875,347.5625 875.96875,347.5625 L 875.90625,347.5625 L 875.84375,347.53125 C 875.84375,347.53125 874.9627,347.26613 874.03125,347 C 873.56552,346.86693 873.07977,346.72307 872.6875,346.625 C 872.29523,346.52693 871.93601,346.46875 871.96875,346.46875 C 871.94594,346.46875 871.53484,346.52746 871.0625,346.59375 C 870.59016,346.66004 870.00521,346.7547 869.4375,346.84375 C 868.35134,347.01413 867.3995,347.14177 867.3125,347.15625 L 867.21875,347.1875 L 865.625,347.78125 L 865.53125,347.8125 L 865.4375,347.8125 C 865.4375,347.8125 864.38393,347.8125 863.9375,347.8125 C 863.62591,347.81249 863.42888,347.73226 863.15625,347.625 C 862.88362,347.51774 862.60279,347.38661 862.3125,347.25 C 861.73191,346.97678 861.1875,346.6875 861.1875,346.6875 L 861.15625,346.6875 L 861.125,346.65625 L 860.3125,346.0625 L 860.3125,346.75 L 860.3125,346.78125 L 860.59375,349.6875 L 860.59375,349.875 L 860.5,350 L 859.78125,351.09375 L 859.78125,351.125 L 859.25,351.78125 L 859.25,357.3125 L 859.25,357.71875 L 858.875,357.8125 L 856.59375,358.375 C 856.53607,358.52134 856.51299,358.63547 856.34375,358.90625 C 856.0858,359.31897 855.66643,359.83546 855,359.96875 C 854.01287,360.16617 850.5,360.59375 850.5,360.59375 L 847.3125,361 L 846.75,363.75 L 845.9375,368.125 L 845.9375,368.21875 L 846.03125,374.21875 C 846.049,374.2356 846.04335,374.25965 846.09375,374.28125 C 846.18374,374.31982 846.29817,374.37276 846.6875,374.125 C 847.13059,373.84303 847.298,373.65931 847.59375,373.4375 C 847.8895,373.21569 848.30586,373.0625 848.9375,373.0625 C 849.46657,373.06249 849.91784,372.98534 850.3125,372.9375 C 850.50983,372.91358 850.69809,372.90811 850.90625,372.9375 C 851.11441,372.96689 851.40462,373.09048 851.53125,373.34375 C 851.62063,373.52249 851.63493,373.68395 851.6875,373.90625 C 851.74007,374.12855 851.80295,374.39977 851.84375,374.65625 C 851.88455,374.91273 851.92068,375.17985 851.9375,375.40625 C 851.95432,375.63265 851.96424,375.76805 851.90625,376 C 851.87825,376.11197 851.79369,376.5829 851.6875,377.03125 C 851.58131,377.4796 851.52634,377.94242 851.15625,378.3125 C 851.20692,378.26183 851.13503,378.35926 851.09375,378.53125 C 851.05247,378.70324 851.02097,378.93604 851,379.15625 C 850.96269,379.548 850.93803,379.83064 850.9375,379.90625 L 851.84375,379.8125 L 851.875,379.8125 L 857,378.6875 L 857,378.65625 L 863,377.4375 L 863.0625,377.40625 L 867.875,375.53125 L 867.90625,375.53125 L 871.34375,372.9375 L 874.84375,370.4375 L 874.875,370.40625 L 877.03125,367.03125 L 877.21875,366.71875 L 877.59375,366.8125 L 880.21875,367.5625 L 884.4375,367.9375 L 884.5625,367.9375 L 884.6875,368.03125 L 886.8125,369.53125 L 887,369.65625 L 887.03125,369.875 C 887.03125,369.875 887.18559,370.98589 887.34375,372.15625 C 887.42283,372.74143 887.50284,373.32327 887.5625,373.8125 C 887.62216,374.30173 887.65626,374.64452 887.65625,374.875 C 887.65625,374.8346 887.69246,375.08847 887.78125,375.34375 C 887.87004,375.59903 888.00116,375.89339 888.125,376.1875 C 888.31075,376.62866 888.41836,376.8548 888.5,377.03125 L 890.8125,377.15625 L 893.75,375.6875 L 893.8125,375.65625 L 893.90625,375.625 L 899.5,374.6875 L 900.0625,371.375 L 900.0625,371.28125 L 900.125,371.1875 L 902.65625,367.03125 L 902.65625,367 L 902.6875,367 L 905.84375,362.6875 L 905.84375,362.65625 L 905.875,362.625 L 909.6875,358.96875 L 909.875,358.78125 L 910.15625,358.84375 L 912.8125,359.625 L 912.84375,359.625 L 912.90625,359.65625 L 914.8125,360.625 L 914.90625,360.65625 L 918.75,361.5625 L 921.09375,359.8125 L 921.125,359.78125 L 921.15625,359.78125 L 924.84375,358 L 924.9375,357.9375 L 925.0625,357.9375 L 930.84375,357.9375 L 930.90625,357.9375 L 930.9375,357.96875 L 933.59375,358.46875 L 933.625,358.46875 L 933.6875,358.5 L 938.75,360.28125 L 940.15625,359.375 L 938.96875,357.5 L 938.9375,357.46875 L 938.125,355.84375 L 938.125,355.8125 L 938.09375,355.78125 L 937.3125,353.5625 L 937.21875,353.3125 L 937.375,353.09375 L 938.53125,351.59375 L 940.03125,349.5 L 939.1875,347.90625 L 939.15625,347.8125 L 939.15625,347.6875 L 939.0625,345.5625 L 939.0625,345.4375 L 939.09375,345.3125 L 939.8125,343.875 L 939.875,343.78125 L 940,343.6875 L 941.9375,342.34375 L 941.9375,342.375 L 944,340.46875 L 944.03125,340.4375 L 945.78125,338.59375 L 946.1875,336.6875 L 945.8125,334.53125 C 944.95292,334.70988 944.04295,334.92243 943.71875,334.96875 C 943.24555,335.03635 942.16916,335.45954 941.375,335.8125 C 940.32335,336.27991 939.11608,335.93749 937.9375,335.9375 C 936.61607,335.9375 934.5,335.6875 934.5,335.6875 L 934.3125,335.65625 L 934.1875,335.53125 C 934.1875,335.53125 933.72926,335.04902 933.15625,334.5625 C 932.86974,334.31924 932.55141,334.08509 932.28125,333.90625 C 932.01109,333.72741 931.74188,333.62757 931.71875,333.625 C 931.09072,333.55522 930.59734,333.16029 930.0625,332.84375 C 929.52766,332.52721 928.99753,332.28125 928.65625,332.28125 C 928.05109,332.28125 927.13886,332.16274 926.28125,332.0625 C 925.85244,332.01238 925.46063,331.96581 925.125,331.9375 C 924.78937,331.90919 924.48817,331.93026 924.4375,331.9375 zM 242.28125,333 L 240.0625,334.28125 L 240,334.3125 L 239.9375,334.34375 L 236.5,335.03125 L 233.375,336.09375 L 233.28125,336.125 L 233.15625,336.125 L 228.1875,335.6875 L 225.03125,337.25 L 224.84375,337.34375 L 224.625,337.25 L 221.21875,335.78125 L 217,336.90625 L 216.96875,336.9375 L 216.90625,336.9375 L 215.625,337.03125 L 212.75,338.75 L 212.71875,338.75 L 207.90625,341.25 L 204.25,343.03125 L 204.21875,343.0625 L 204.1875,343.0625 L 201.5,343.96875 L 201.46875,343.96875 L 201.40625,343.96875 L 197.40625,344.53125 L 197.8125,348.4375 L 197.8125,348.46875 L 197.8125,348.5 L 197.65625,351.1875 L 197.625,351.25 L 197.625,351.3125 L 197.03125,353.34375 L 197.40625,355.4375 L 201.34375,357.03125 L 201.65625,357.15625 L 201.65625,357.5 L 201.65625,360.4375 L 201.65625,360.65625 L 201.5,360.8125 L 199.34375,362.96875 L 199.28125,363.03125 L 197.3125,365.6875 L 197.28125,365.75 L 194.625,370.34375 L 194.625,370.375 L 192,374.375 L 190.5625,378.125 L 190.53125,378.15625 L 190.5,378.21875 L 188.46875,381.5 L 186.40625,385.21875 C 186.47658,385.32005 186.61614,385.5061 186.84375,385.8125 C 186.9856,386.00345 187.117,386.18337 187.25,386.34375 C 187.383,386.50413 187.52463,386.65128 187.53125,386.65625 C 187.56186,386.67921 187.77189,386.81122 188,386.9375 C 188.22811,387.06378 188.48436,387.2054 188.75,387.34375 C 189.28127,387.62045 189.78125,387.84375 189.78125,387.84375 L 190.15625,388.03125 L 190.03125,388.4375 L 189.0625,391.75 L 189.03125,391.84375 L 188.96875,391.90625 L 188,393.15625 C 188.06933,393.27783 188.10035,393.35365 188.21875,393.53125 C 188.32182,393.68586 188.44648,393.81542 188.53125,393.90625 C 188.55733,393.9342 188.5778,393.92782 188.59375,393.9375 C 188.62644,393.93294 188.61605,393.9442 188.65625,393.9375 C 188.78019,393.91684 188.96641,393.88089 189.15625,393.84375 C 189.53593,393.76946 190.00159,393.66261 190.46875,393.5625 C 191.30874,393.3825 191.97101,393.25331 192.125,393.21875 L 194.5625,390.96875 L 194.59375,390.9375 L 194.625,390.9375 L 198.1875,388.4375 L 198.21875,388.40625 L 198.25,388.40625 L 200.21875,387.34375 L 200.375,387.25 L 200.5625,387.28125 L 204.5625,388.1875 L 204.75,388.21875 L 204.875,388.375 L 205.03125,388.59375 L 209.1875,386.625 L 210.53125,385.15625 L 210.8125,383.03125 L 209.9375,381.5 L 209.75,381.1875 L 209.96875,380.9375 L 210.84375,379.9375 L 210.84375,379.90625 L 211.65625,377.1875 L 211.71875,377 L 211.90625,376.875 L 213.9375,375.71875 L 213.96875,375.71875 L 216.90625,374.125 L 216.96875,374.09375 L 217.03125,374.0625 L 219.78125,373.46875 L 219.8125,373.46875 L 224.03125,371.4375 L 224.0625,371.4375 L 227.125,369.65625 L 227.15625,369.65625 L 230.4375,367.53125 L 230.5625,367.4375 L 230.75,367.4375 L 236.4375,367.71875 L 236.5,367.71875 L 236.5625,367.71875 C 236.5625,367.71875 237.16056,367.88265 237.8125,368.0625 C 238.13847,368.15242 238.4668,368.25793 238.75,368.34375 C 239.0332,368.42957 239.22007,368.46941 239.40625,368.5625 C 239.55516,368.63696 239.76022,368.7681 240.03125,368.9375 C 240.30228,369.1069 240.62399,369.29846 240.9375,369.5 C 241.55313,369.89576 242.10442,370.2678 242.125,370.28125 C 242.12538,370.2815 242.15625,370.28125 242.15625,370.28125 L 245.0625,371.9375 L 245.15625,371.96875 L 248.15625,372.96875 L 251.46875,372.09375 L 251.59375,372.0625 L 251.71875,372.09375 L 253.875,372.625 L 253.90625,372.65625 L 253.96875,372.65625 L 257.375,374.21875 L 264.78125,373.875 L 265.8125,371.90625 L 265.84375,371.875 L 265.875,371.8125 L 268.4375,368.8125 L 268.46875,368.78125 L 269.9375,366.59375 L 268.15625,363.78125 L 268.15625,363.75 L 265.21875,359.84375 L 265.1875,359.78125 L 265.15625,359.71875 L 263.9375,356.46875 L 263.90625,356.4375 L 262.3125,353.4375 L 262.28125,353.34375 L 262.28125,353.21875 L 262.28125,350.625 L 261.4375,348.53125 L 258.3125,346.59375 C 258.20139,346.56019 257.17725,346.26685 256,345.90625 C 255.37997,345.71633 254.75847,345.50344 254.25,345.34375 C 253.74153,345.18406 253.39974,345.10365 253.21875,345.03125 C 253.0829,344.97691 252.98073,344.8986 252.84375,344.8125 C 252.70677,344.7264 252.55599,344.6235 252.375,344.5 C 252.01301,344.253 251.57668,343.95896 251.15625,343.65625 C 250.31539,343.05083 249.53125,342.46875 249.53125,342.46875 L 249.46875,342.40625 L 249.40625,342.34375 L 246.28125,337.78125 L 244.15625,334.4375 L 242.28125,333 zM 188.59375,393.9375 C 188.52565,393.94701 188.43557,393.96875 188.46875,393.96875 C 188.62329,393.96875 188.62965,393.95928 188.59375,393.9375 zM 88.625,340.96875 L 85.8125,341.53125 L 84.6875,343 L 83.9375,345.09375 L 83.9375,345.125 L 83.03125,347.21875 L 83.1875,347.71875 L 84.6875,347.90625 L 85.15625,347.9375 L 85.15625,348.40625 L 85.15625,350.71875 L 85.15625,350.90625 L 85.03125,351.03125 L 82.8125,353.59375 L 83.875,354.9375 L 86.25,355.78125 L 86.375,355.84375 L 86.46875,355.96875 L 88.3125,358.4375 L 92.875,358.59375 L 93.3125,358.625 L 93.34375,359.0625 L 93.71875,362.28125 L 93.75,362.5 L 93.5625,362.6875 L 90.15625,366.09375 L 90.15625,367.6875 L 90.15625,367.71875 L 89.96875,369.6875 L 89.9375,370.03125 L 89.59375,370.125 L 87.78125,370.625 L 86.46875,372.28125 L 86.28125,372.5 L 86.03125,372.46875 L 84.40625,372.28125 L 84.1875,372.25 L 84.0625,372.0625 L 82.9375,370.4375 L 82.90625,370.40625 L 80.6875,369.03125 L 78.75,368.5625 L 76.46875,369.1875 L 73.28125,371.78125 L 73.6875,373.0625 L 73.71875,373.15625 L 73.71875,373.25 L 73.53125,376.15625 L 74.21875,377.5 L 75.46875,377.375 L 75.9375,375.09375 L 75.96875,374.875 L 76.15625,374.78125 L 78.46875,373.15625 L 78.8125,372.9375 L 79.09375,373.21875 L 80.375,374.5 L 81.4375,374.5 L 81.46875,374.5 L 81.5,374.5 L 84,374.875 L 84.1875,374.875 L 84.3125,375.03125 L 85.9375,377 L 87.96875,377 L 89.84375,376.3125 L 89.96875,376.25 L 90.125,376.3125 L 93.9375,377.34375 L 100.65625,377.53125 L 100.71875,377.53125 L 106.90625,376.65625 L 106.9375,376.65625 L 106.96875,376.65625 L 113.21875,376.65625 L 113.25,376.65625 L 113.28125,376.65625 L 119.4375,377.375 L 119.4375,377.34375 L 131.0625,376.8125 L 131.5625,376.8125 L 131.5625,377.3125 L 131.5625,380 L 131.5625,380.4375 L 131.15625,380.5 L 127.6875,381 L 125.125,382.53125 L 125.09375,382.5625 L 123.1875,384.125 L 123.09375,384.21875 L 123,384.21875 L 119.0625,385.3125 L 118.78125,385.375 L 118.5625,385.1875 L 117.84375,384.4375 L 115.53125,384.4375 L 114.65625,385.09375 L 115.375,385.9375 L 115.46875,386.03125 L 115.5,386.1875 L 115.6875,388 L 115.71875,388.375 L 115.375,388.5 L 113.4375,389.25 L 115.3125,390.875 L 115.5,391.03125 L 115.5,391.25 L 115.5,393.40625 L 115.5,393.84375 L 115.0625,393.875 L 112.375,394.25 L 112.3125,394.25 L 112.21875,394.25 L 108.8125,393.53125 L 104.8125,392.46875 L 100.1875,392.46875 L 96.90625,393.34375 L 96.8125,393.375 L 96.71875,393.34375 L 92.46875,392.84375 L 91,393.8125 L 90.90625,393.875 L 90.8125,393.875 L 87.4375,394.59375 L 87.375,394.59375 L 87.34375,394.59375 L 81.625,394.78125 L 81.1875,396.375 L 81.15625,396.5625 L 81,396.65625 L 79.65625,397.59375 L 80.21875,398.28125 L 84.40625,398.78125 L 86.375,397.78125 L 86.4375,397.75 L 86.53125,397.71875 L 89.5625,397.1875 L 89.71875,397.15625 L 89.875,397.21875 L 92.3125,398.4375 L 93.125,397.125 L 93.15625,397.0625 L 94.375,394.25 L 94.46875,394 L 94.75,393.96875 C 94.75,393.96875 95.424052,393.87107 96.1875,393.78125 C 96.950948,393.69143 97.778264,393.59375 98.21875,393.59375 C 98.480655,393.59375 98.823257,393.65047 99.25,393.71875 C 99.676743,393.78703 100.15338,393.87892 100.625,393.96875 C 101.51822,394.13889 102.26022,394.29496 102.34375,394.3125 L 115.71875,394.6875 L 116.1875,394.6875 L 116.21875,395.15625 L 116.40625,398 L 116.40625,398.15625 L 116.3125,398.3125 L 115.4375,399.71875 L 115.28125,399.9375 L 115.03125,399.96875 L 111.78125,400.25 L 114.5,400.40625 L 114.625,400.40625 L 114.71875,400.46875 L 116.15625,401.375 L 116.375,401.5 L 116.40625,401.75 L 116.5625,403.71875 L 116.59375,403.875 L 116.5,404 L 115.4375,405.78125 L 115.28125,406.03125 L 115.03125,406.03125 L 112.28125,406.1875 L 112,406.78125 L 112.46875,406.53125 L 112.53125,406.46875 L 112.65625,406.46875 L 115.28125,406.28125 L 115.3125,406.28125 L 116.9375,405.53125 L 117.90625,403.25 L 118.0625,401.21875 L 118.125,400.75 L 118.5625,400.75 L 121.21875,400.75 L 123.9375,398.21875 L 124,398.15625 L 124.03125,398.125 L 125,397.59375 L 124.5,397.4375 L 124.28125,397.375 L 124.1875,397.15625 L 123.125,394.65625 L 123.03125,394.46875 L 123.09375,394.28125 L 124,391.96875 L 124.71875,390 L 124.84375,389.6875 L 125.1875,389.6875 L 127.84375,389.6875 L 128.28125,389.6875 L 128.34375,390.09375 L 128.65625,392.125 L 131.5625,393.25 L 131.625,393.28125 L 133.15625,393.65625 L 133.78125,389.75 L 133.875,389.21875 L 134.375,389.34375 L 136.875,389.875 L 137.25,389.9375 L 137.28125,390.3125 L 137.59375,393.4375 L 139.34375,394.53125 L 139.96875,393.78125 L 140.125,393.59375 L 140.34375,393.59375 L 143.75,393.59375 L 144,393.59375 L 144.15625,393.8125 L 145.0625,395.0625 L 145.15625,395.1875 L 145.15625,395.34375 L 145.15625,399.09375 L 147.1875,400.9375 L 149.5,401.09375 L 149.5625,401.125 L 149.625,401.125 L 153.53125,402.375 L 153.75,402.4375 L 153.84375,402.65625 L 154.71875,404.5625 L 156.25,406.0625 L 156.28125,406.09375 L 156.28125,403.9375 L 156.28125,403.71875 L 156.4375,403.5625 L 158.9375,401.25 L 159.09375,401.125 L 159.25,401.09375 L 163.375,400.9375 L 163.5625,400.90625 L 163.71875,401.03125 L 167.9375,404.375 L 170.84375,405.0625 L 171.21875,405.125 L 171.21875,405.53125 L 171.21875,408.21875 L 171.21875,408.53125 L 170.9375,408.65625 L 168.78125,409.65625 L 167.8125,411.875 L 172.125,413.46875 L 172.5625,413.625 L 172.4375,414.0625 L 171.75,416.625 L 171.40625,422.1875 L 171.375,422.1875 L 171.0625,425.46875 L 174,427.59375 L 174.03125,427.625 L 177.46875,429.53125 L 178.71875,428.78125 L 179.6875,426.96875 L 179.6875,426.90625 L 180.21875,423.65625 L 180.21875,423.625 L 180.25,423.59375 L 180.96875,421.625 L 181.0625,421.3125 L 181.375,421.28125 L 183.96875,421.0625 L 185.96875,419.6875 L 186,419.65625 L 186.03125,419.65625 C 186.03125,419.65625 186.99876,419.12871 188.03125,418.5625 C 188.5475,418.2794 189.07732,418.00032 189.5,417.75 C 189.92268,417.49968 190.29338,417.23787 190.28125,417.25 C 190.57517,416.95608 191.29451,416.35236 192,415.78125 C 192.68759,415.22463 193.28078,414.74391 193.3125,414.71875 L 193.34375,414.6875 L 196.28125,412.03125 L 196.3125,412 L 199.53125,407.5 L 199.59375,407.375 L 201.3125,403.15625 L 201.3125,403.125 L 202.28125,400.28125 L 202.3125,400.25 L 203.5625,397.5625 L 203.59375,397.5 L 203.625,397.46875 L 206.03125,394.25 L 205.84375,391.5 L 204.1875,389.125 L 200.53125,388.28125 L 198.78125,389.25 L 198.71875,389.28125 L 195.25,391.71875 L 195.1875,391.75 L 192.75,394.03125 L 192.65625,394.125 L 192.53125,394.15625 C 192.53125,394.15625 191.62818,394.36092 190.6875,394.5625 C 190.21716,394.66329 189.73415,394.76737 189.34375,394.84375 C 189.14855,394.88194 188.98348,394.91421 188.84375,394.9375 C 188.70402,394.96079 188.60714,394.96875 188.46875,394.96875 C 188.06696,394.96875 187.9621,394.75404 187.8125,394.59375 C 187.6629,394.43346 187.52639,394.24271 187.40625,394.0625 C 187.16597,393.70208 186.96875,393.375 186.96875,393.375 L 186.8125,393.0625 L 187,392.8125 L 188.125,391.40625 L 188.9375,388.5625 C 188.74516,388.46534 188.61805,388.39417 188.28125,388.21875 C 188.01117,388.07809 187.74064,387.94571 187.5,387.8125 C 187.25936,387.67929 187.08546,387.57973 186.9375,387.46875 C 186.76555,387.33979 186.6516,387.18281 186.5,387 C 186.3484,386.81719 186.17958,386.60593 186.03125,386.40625 C 185.93497,386.27664 185.92321,386.26708 185.84375,386.15625 L 184.9375,387.15625 L 184.4375,390.625 L 184.40625,390.75 L 184.28125,390.875 L 181.34375,394 L 181.25,394.09375 L 181.125,394.15625 L 178.53125,394.84375 L 178.375,394.90625 L 178.25,394.84375 L 176.8125,394.40625 L 176.71875,394.375 L 176.65625,394.3125 L 173.28125,391.75 L 173.21875,391.71875 L 173.1875,391.65625 L 170.78125,388.8125 L 170.6875,388.6875 L 170.65625,388.53125 L 170.40625,386.125 L 170.375,386.03125 L 170.40625,385.96875 L 171.125,382.71875 C 171.11595,382.63671 171.03725,382.16234 170.9375,381.59375 C 170.88357,381.28636 170.81419,380.99165 170.75,380.78125 C 170.72344,380.69419 170.70767,380.63208 170.6875,380.59375 C 170.59176,380.542 170.52534,380.46874 170.46875,380.40625 C 170.38145,380.30985 170.29444,380.20965 170.21875,380.09375 C 170.06737,379.86194 169.91964,379.58352 169.78125,379.3125 C 169.52093,378.80271 169.33737,378.36945 169.3125,378.3125 L 169.28125,378.25 L 167.625,375.5625 L 167.59375,375.53125 L 165.625,374 C 165.62277,373.99916 165.59685,373.96991 165.59375,373.96875 C 165.48349,373.92756 164.9452,373.74181 164.25,373.5 C 163.86849,373.3673 163.47566,373.25329 163.15625,373.15625 C 162.99655,373.10773 162.85586,373.05691 162.75,373.03125 C 162.64414,373.00559 162.54955,373 162.59375,373 C 162.42418,373 162.36077,372.94206 162.28125,372.90625 C 162.20173,372.87044 162.11041,372.82974 162.03125,372.78125 C 161.87294,372.68427 161.69746,372.58506 161.5,372.4375 C 161.10507,372.14239 160.64339,371.75772 160.1875,371.375 C 159.27572,370.60956 158.40625,369.84375 158.40625,369.84375 L 158.34375,369.75 L 158.28125,369.65625 C 158.28125,369.65625 158.12638,369.30478 157.9375,368.9375 C 157.84306,368.75386 157.7422,368.55981 157.65625,368.4375 C 157.61327,368.37635 157.57686,368.32692 157.5625,368.3125 C 157.41321,368.26901 157.25506,368.21258 157.03125,368.125 C 156.76819,368.02206 156.47337,367.88591 156.15625,367.75 C 155.83913,367.61409 155.51618,367.47105 155.25,367.34375 C 154.98382,367.21645 154.79961,367.13095 154.625,367 C 154.42904,366.85303 154.29294,366.71137 154.125,366.5 C 153.95706,366.28863 153.79127,366.03364 153.59375,365.78125 C 153.19871,365.27647 152.71104,364.7569 152.5,364.625 C 152.05464,364.34665 152.00726,363.89712 151.96875,363.46875 C 151.93024,363.04038 151.95357,362.55227 152,362.09375 C 152.08129,361.29102 152.21364,360.73655 152.25,360.5625 L 150.75,358.59375 L 150.71875,358.5625 L 150.6875,358.53125 L 147.8125,356.1875 L 147.6875,356.09375 L 147.65625,355.9375 L 147.03125,353.90625 L 147,353.84375 L 147,353.8125 L 146.78125,351.84375 L 146.78125,351.8125 L 145.90625,350.25 L 146.0625,350.15625 L 142.3125,350.15625 L 141.28125,350.84375 L 140.9375,351.09375 L 140.65625,350.8125 L 139.21875,349.5625 L 139.1875,349.53125 L 137.40625,347.65625 L 134.84375,345.90625 L 132.25,346.96875 L 132,347.0625 L 131.78125,346.9375 L 130.5625,346.21875 L 126.96875,346.21875 C 126.8774,346.26667 126.64048,346.40827 126.25,346.59375 C 125.79221,346.8112 125.33851,347.02171 124.90625,347.09375 C 124.90118,347.0946 124.73158,347.15076 124.5625,347.25 C 124.39342,347.34924 124.21224,347.49192 124.03125,347.625 C 123.66928,347.89116 123.375,348.15625 123.375,348.15625 L 123.3125,348.1875 L 123.21875,348.21875 L 120.375,349.40625 L 120.28125,349.4375 L 120.15625,349.4375 L 111.59375,349.0625 L 111.5,349.0625 L 111.40625,349.03125 L 109.0625,348 L 102.15625,348 L 101.9375,348 L 101.8125,347.875 L 100.25,346.46875 L 100.25,346.5 L 98.125,345.0625 L 98.09375,345.0625 L 95.96875,343.5 L 95.9375,343.5 L 93.875,342.625 L 93.8125,342.59375 L 90.65625,341.71875 L 90.625,341.71875 L 88.625,340.96875 zM 796.53125,342.3125 C 796.53155,342.32868 796.49445,342.32082 796.3125,342.59375 C 795.7507,343.43643 795.3261,343.75372 795.1875,343.875 C 795.1182,343.93564 795.15935,343.89617 795.15625,343.90625 C 795.15315,343.91633 795.15625,344.02728 795.15625,344.28125 C 795.15623,345.34021 795.15625,346.90085 795.15625,346.9375 L 795.15625,346.96875 L 795.3125,349.4375 L 795.34375,349.625 L 795.21875,349.75 C 795.21875,349.75 794.64461,350.53708 793.78125,350.96875 C 793.52846,351.09515 793.64843,351.0922 793.46875,351.34375 C 793.37891,351.46953 793.20634,351.6219 793,351.71875 C 792.79366,351.8156 792.5593,351.88885 792.21875,351.9375 C 791.00172,352.11137 791.77679,352.09375 789.8125,352.09375 C 788.84552,352.09375 788.50035,352.16403 788.21875,352.1875 C 787.93715,352.21097 787.68404,352.18681 787.21875,352.09375 C 786.67176,351.98435 786.35465,351.69568 786.21875,351.59375 C 786.08285,351.49182 786.17092,351.49082 785.8125,351.5625 C 785.54528,351.61594 785.34881,351.62803 785.21875,351.625 C 785.16998,351.62386 785.14496,351.62728 785.125,351.625 C 785.12085,351.62888 785.08646,351.62287 785.09375,351.625 C 785.08665,351.63498 785.10249,351.64251 785.09375,351.65625 C 785.01799,351.7753 784.89546,352.02158 784.71875,352.375 C 784.39888,353.01475 784.5394,353.01227 784.5,353.40625 C 784.4803,353.60324 784.34362,353.87131 784.15625,354.0625 C 783.96888,354.25369 783.72495,354.41253 783.3125,354.6875 C 782.53027,355.20899 782.30357,355.44643 782.125,355.625 C 781.94643,355.80357 781.72845,355.99612 781.25,356.1875 C 780.3785,356.5361 779.6875,356.875 779.6875,356.875 C 779.58586,357.01074 779.31026,357.4326 778.46875,357.9375 C 778.1274,358.1423 778.28705,358.13385 778,358.46875 C 777.85647,358.6362 777.64382,358.75801 777.375,358.8125 C 777.10618,358.86699 776.75622,358.90625 776.25,358.90625 C 775.79681,358.90625 775.57012,358.9533 775.4375,359 C 775.30488,359.0467 775.25801,359.09863 775.0625,359.1875 C 774.86699,359.27637 774.57558,359.30141 774.25,359.25 C 773.92442,359.19859 773.51243,359.10265 772.875,358.875 C 772.23367,358.64595 771.86199,358.48738 771.625,358.34375 C 771.5065,358.27193 771.41913,358.17374 771.34375,358.09375 C 771.23389,358.07861 770.99916,358.0416 770.5,358 C 769.56982,357.92249 769.16179,357.92592 768.90625,357.9375 L 768.90625,358 L 768.40625,358 L 765.875,358 L 764.0625,359.5625 L 763.96875,359.6875 L 763.78125,359.6875 C 763.78125,359.6875 762.73366,359.7856 761.59375,359.875 C 761.02379,359.9197 760.41707,359.96635 759.9375,360 C 759.45793,360.03365 759.12698,360.0625 758.9375,360.0625 C 758.50296,360.06251 758.02211,359.88788 757.5625,359.75 C 757.11854,359.61681 756.77523,359.50888 756.75,359.5 L 756.71875,359.5 L 753.96875,358.84375 L 753.78125,359.03125 C 753.94584,359.2997 754.2703,359.84808 754.78125,360.6875 C 755.09405,361.20138 755.40412,361.70479 755.65625,362.125 C 755.90838,362.54521 756.07434,362.83617 756.15625,363 C 756.20826,363.10402 756.66136,363.87166 757.0625,364.5625 C 757.46364,365.25334 757.84375,365.90625 757.84375,365.90625 L 757.875,365.96875 L 757.875,366 L 759.46875,371.03125 L 759.5,371.09375 L 761.125,374.5625 L 761.15625,374.59375 L 763.09375,377.6875 L 765.9375,382.375 L 765.96875,382.40625 L 767.71875,384.59375 L 767.8125,384.71875 L 767.8125,384.84375 L 768,386.4375 L 768,386.46875 L 768.9375,388.34375 L 769.0625,388.59375 L 768.90625,388.8125 C 768.90625,388.8125 768.68523,389.18244 768.46875,389.59375 C 768.36051,389.79941 768.26275,390.01442 768.1875,390.1875 C 768.14047,390.29568 768.10578,390.39394 768.09375,390.4375 C 768.09375,390.46726 768.09084,390.47309 768.09375,390.46875 C 768.09375,390.83485 768.09375,392.86202 768.09375,393.1875 L 773.65625,398.5 L 776.65625,396.4375 L 776.6875,396.40625 L 776.71875,396.40625 C 776.71875,396.40625 777.61112,395.91319 778.625,395.40625 C 779.63888,394.89931 780.68219,394.38719 781.1875,394.21875 C 781.15159,394.23072 781.34758,394.11888 781.5,393.875 C 781.65242,393.63112 781.80181,393.30043 781.9375,392.96875 C 782.20887,392.30539 782.375,391.65625 782.375,391.65625 L 782.4375,391.4375 L 782.65625,391.34375 L 786.1875,389.6875 L 786.28125,389.65625 L 786.40625,389.65625 L 789.9375,389.65625 L 794.0625,387.34375 L 794.125,387.3125 L 797.71875,384.4375 L 797.75,384.40625 L 797.84375,384.375 L 802.125,382.625 L 802.1875,382.59375 L 802.25,382.59375 L 806.28125,382.0625 L 806.28125,382.09375 L 809.28125,381.4375 L 809.375,381.4375 L 809.46875,381.4375 L 814.25,382.1875 L 820.8125,382.96875 L 820.84375,382.96875 L 820.875,382.96875 L 826.71875,384.3125 L 830.53125,383.71875 L 830.5625,383.71875 L 830.59375,383.71875 L 840.8125,383.59375 L 844.53125,382.46875 L 844.59375,382.46875 L 848.125,380.25 L 848.25,380.1875 L 848.34375,380.1875 L 850.125,380 L 849.9375,380 C 849.9375,380 849.95266,379.55959 850,379.0625 C 850.02367,378.81396 850.06583,378.55903 850.125,378.3125 C 850.18417,378.06597 850.20825,377.82298 850.4375,377.59375 C 850.42456,377.60669 850.62405,377.21236 850.71875,376.8125 C 850.81345,376.41264 850.8762,376.02643 850.9375,375.78125 C 850.92416,375.83463 850.95136,375.6553 850.9375,375.46875 C 850.92364,375.2822 850.88107,375.04709 850.84375,374.8125 C 850.80643,374.57791 850.76384,374.3469 850.71875,374.15625 C 850.68869,374.02915 850.67715,373.96896 850.65625,373.90625 C 850.59853,373.90652 850.55769,373.92293 850.4375,373.9375 C 850.09555,373.97895 849.56913,374.06249 848.9375,374.0625 C 848.40843,374.0625 848.33818,374.10574 848.1875,374.21875 C 848.03682,374.33176 847.75779,374.62573 847.21875,374.96875 C 846.62594,375.34599 846.06626,375.34982 845.6875,375.1875 C 845.30874,375.02518 845.125,374.71875 845.125,374.71875 L 845.03125,374.625 L 845.03125,374.46875 L 844.9375,368.125 L 844.9375,368.09375 L 844.96875,368.03125 L 845.75,363.5625 L 846.375,360.4375 L 846.46875,360.09375 L 846.8125,360.03125 L 850.375,359.59375 C 850.375,359.59375 854.01394,359.12846 854.8125,358.96875 C 855.03892,358.92346 855.31152,358.67656 855.5,358.375 C 855.68848,358.07344 855.78125,357.78125 855.78125,357.78125 L 855.875,357.53125 L 856.125,357.46875 L 858.25,356.9375 L 858.25,351.59375 L 858.25,351.4375 L 858.34375,351.3125 L 858.96875,350.53125 L 858.96875,350.5 L 859.59375,349.625 L 859.3125,346.84375 L 859.3125,346.8125 L 859.3125,346.78125 L 859.3125,345.25 C 859.24749,345.19348 859.03467,344.99275 858.6875,344.75 C 858.29159,344.47317 857.7686,344.25 857.6875,344.25 C 857.65476,344.25 857.28019,344.32405 856.875,344.4375 C 856.46981,344.55095 855.96423,344.68901 855.5,344.84375 C 854.64086,345.13013 853.98751,345.36497 853.875,345.40625 L 853.84375,345.4375 L 851.71875,347 L 851.6875,347.03125 L 851.65625,347.0625 C 851.65625,347.0625 851.11801,347.32517 850.5,347.65625 C 849.88199,347.98733 849.16815,348.40514 848.875,348.625 C 848.59253,348.83685 847.74216,349.59256 847.03125,350.28125 C 846.32034,350.96994 845.71875,351.59375 845.71875,351.59375 L 845.625,351.6875 L 845.53125,351.71875 C 845.53125,351.71875 843.62367,352.43906 842.6875,353.53125 C 842.15179,354.15625 841.6375,354.8 841.125,355.3125 C 840.6125,355.825 840.16014,356.2334 839.59375,356.375 C 838.95554,356.53456 838.79762,356.75 837.5,356.75 C 836.29762,356.75 833.96131,356.9375 831.4375,356.9375 C 828.93748,356.93751 826.79911,356.9375 825.90625,356.9375 C 825.01336,356.93751 823.54166,356.93055 822.34375,356.53125 C 822.00568,356.41856 821.74696,356.5723 821.34375,356.6875 C 821.24295,356.7163 821.12338,356.75711 820.96875,356.75 C 820.81412,356.74289 820.60113,356.64121 820.46875,356.5 C 820.20399,356.21759 820.21875,355.93006 820.21875,355.53125 C 820.21875,354.18677 820.07191,353.60025 820.0625,353.5625 L 818.6875,351.53125 L 818.65625,351.5 L 818.65625,351.4375 C 818.65625,351.4375 818.08778,350.16363 817.71875,348.6875 C 817.54612,347.99699 817.43506,347.7551 817.3125,347.5625 C 817.18994,347.3699 817.00678,347.16756 816.71875,346.6875 C 816.24587,345.89942 815.03749,344.51216 815,344.46875 C 815,344.46875 814.97252,344.44089 814.96875,344.4375 C 814.94313,344.41448 814.86337,344.34151 814.71875,344.28125 C 814.55285,344.21213 814.42656,344.18789 814.21875,344.34375 C 813.96826,344.53162 813.8311,344.81894 813.53125,345.21875 C 813.2314,345.61856 812.76854,346.07507 811.96875,346.375 C 811.63085,346.50171 811.44533,346.5792 811.375,346.625 C 811.30467,346.6708 811.35399,346.63219 811.3125,346.6875 C 811.27101,346.74281 811.073,346.91158 810.90625,346.96875 C 810.7395,347.02592 810.5724,347.04769 810.25,347.09375 C 809.71079,347.17078 809.84383,347.24648 809.5,347.4375 C 809.32808,347.53301 809.10243,347.59034 808.8125,347.59375 C 808.52257,347.59716 808.14391,347.56044 807.59375,347.46875 C 807.04581,347.37742 806.76357,347.28704 806.5625,347.21875 C 806.49409,347.19552 806.43436,347.15758 806.375,347.125 C 806.37142,347.12484 806.34776,347.12515 806.34375,347.125 C 806.23946,347.12111 806.00416,347.09375 805.53125,347.09375 C 804.60972,347.09375 804.46659,347.22903 804.09375,347.34375 C 803.90733,347.40111 803.65579,347.45001 803.375,347.40625 C 803.09421,347.36249 802.77494,347.24748 802.3125,347.0625 C 801.44899,346.7171 800.90133,346.59719 800.34375,346.34375 C 799.78617,346.09031 799.28447,345.69179 798.71875,344.9375 C 798.17905,344.21789 797.96161,343.93036 797.90625,343.875 C 797.87857,343.84732 797.90541,343.87252 797.84375,343.84375 C 797.78209,343.81498 797.66223,343.75299 797.46875,343.65625 C 797.11129,343.47752 796.94561,343.19422 796.8125,342.9375 C 796.68702,342.69549 796.60943,342.45318 796.53125,342.3125 zM 559.0625,350.625 L 557,351.21875 L 556.90625,351.25 L 556.84375,351.25 L 552.5,351.25 L 552.4375,351.25 L 549.84375,351.59375 L 548.09375,355.09375 L 548.0625,355.125 C 548.04735,355.16944 547.5996,356.5254 546.71875,357.40625 C 546.05934,358.06565 545.16511,359.57899 544.78125,360.21875 C 544.67255,360.39993 544.4816,360.99748 544.375,361.5 C 544.2684,362.00252 544.21875,362.40625 544.21875,362.40625 L 543.84375,366.09375 L 543.8125,366.21875 L 543.75,366.3125 L 542.9375,367.4375 L 542.90625,367.5 L 542.875,367.5625 L 542.3125,369.21875 C 542.3125,369.21875 542.31254,369.24936 542.3125,369.25 C 542.30945,369.30047 542.1875,371.30226 542.1875,371.71875 C 542.18752,372.09504 542.03836,372.26857 541.875,372.5 C 541.71164,372.73143 541.51057,372.97292 541.3125,373.1875 C 540.94012,373.59091 540.6053,373.86685 540.5625,373.90625 L 540.53125,373.96875 L 538.5,376.59375 L 538.0625,378.6875 L 539.3125,380.375 L 539.34375,380.40625 L 539.375,380.4375 L 539.75,381.21875 L 539.84375,381.40625 L 539.75,381.625 L 538.78125,384.09375 L 538.75,384.15625 L 538.125,386.5 C 538.125,386.5 538.0864,386.64717 538.09375,386.75 C 538.67177,386.74411 540.11499,386.63645 540.28125,386.625 L 542.90625,385.1875 C 542.90962,385.18386 542.96293,385.16245 542.96875,385.15625 C 543.05262,385.06688 543.26711,384.81529 543.6875,384.5 C 543.93133,384.31713 544.22267,384.11572 544.53125,384 C 544.83983,383.88428 545.23043,383.84959 545.59375,384.03125 C 545.90297,384.18586 546.35538,384.31183 546.8125,384.53125 C 547.26962,384.75067 547.78264,385.13471 547.875,385.78125 C 547.98525,386.55296 548.75,389.78125 548.75,389.78125 L 548.75,389.84375 L 548.75,389.90625 C 548.75,389.90625 548.75,391.52615 548.75,392.03125 C 548.74998,392.5362 548.75,395.6875 548.75,395.6875 L 548.75,395.875 L 548.65625,396 L 548.40625,396.3125 L 549.75,395.84375 L 550,395.78125 L 550.21875,395.96875 L 551.125,396.71875 L 557.25,397.09375 L 557.4375,397.09375 L 557.5625,397.21875 C 557.5625,397.21875 559.34934,398.89238 560.15625,399.46875 C 560.52119,399.72943 561.42275,400.17229 562.1875,400.53125 C 562.85086,400.84262 563.29495,401.03217 563.4375,401.09375 C 563.60397,401.02613 564.0364,400.83791 564.6875,400.59375 C 565.07058,400.45009 565.46783,400.29828 565.8125,400.1875 C 566.15717,400.07672 566.37373,400 566.6875,400 C 566.87627,400 567.17984,400.02663 567.5625,400.0625 C 567.94516,400.09837 568.40056,400.14001 568.84375,400.1875 C 569.3518,400.24193 569.48933,400.24472 569.8125,400.28125 C 569.92684,399.83236 570.14075,399.21654 570.375,398.5 C 570.50826,398.09238 570.62589,397.70854 570.71875,397.375 C 570.81161,397.04146 570.875,396.74326 570.875,396.71875 C 570.87498,396.23638 571.02711,395.59427 571.1875,394.96875 C 571.34789,394.34323 571.53125,393.78125 571.53125,393.78125 L 571.5625,393.6875 L 571.625,393.59375 L 574.03125,390.84375 L 574.03125,390.8125 L 574.0625,390.8125 L 578.09375,386.875 L 578.125,386.84375 L 578.15625,386.8125 L 581.1875,384.8125 L 581.21875,384.78125 L 582.09375,384.25 L 580.40625,379.15625 C 580.36331,379.10733 580.25736,378.99518 580.0625,378.8125 C 579.83221,378.5966 579.51205,378.38582 579.46875,378.375 C 579.08091,378.27805 578.93732,378.04661 578.78125,377.8125 C 578.62518,377.57839 578.49201,377.29034 578.375,377.03125 C 578.17119,376.57996 578.06665,376.26017 578.03125,376.15625 L 577.96875,376.03125 L 576.4375,373.84375 C 576.36484,373.79585 576.09283,373.62001 575.71875,373.40625 C 575.50668,373.28507 575.28171,373.17729 575.09375,373.09375 C 574.90579,373.01021 574.74085,372.96875 574.78125,372.96875 C 574.61202,372.96875 573.57013,373.03072 572.65625,373.09375 C 571.77485,373.15454 571.02614,373.2145 570.96875,373.21875 C 570.87467,373.26546 570.55718,373.41435 570.09375,373.625 C 569.5632,373.86616 569.01017,374.12921 568.5625,374.21875 C 568.19025,374.2932 567.30736,374.42049 566.46875,374.53125 C 565.63014,374.64201 564.875,374.71875 564.875,374.71875 L 564.84375,374.75 L 564.8125,374.75 L 560.28125,374.875 L 560.125,374.875 L 559.96875,374.78125 L 558.84375,374.03125 L 558.6875,373.90625 L 558.625,373.75 L 557.875,371 L 557.875,370.96875 L 557.125,368.71875 L 557.0625,368.53125 L 557.125,368.375 L 557.75,366.78125 L 557.78125,366.71875 L 559,362.34375 L 558.625,356.9375 L 556.125,354.65625 L 555.6875,354.25 L 556.1875,353.875 L 559.125,351.75 L 559.0625,350.625 zM 421.21875,352.75 C 421.27758,352.75 420.95513,352.82327 420.625,352.96875 C 420.29487,353.11423 419.91173,353.32936 419.53125,353.53125 C 418.77029,353.93502 418.09375,354.34375 418.09375,354.34375 L 418,354.375 L 417.90625,354.40625 L 413.8125,355.15625 L 409.96875,357.3125 L 407.78125,360.5625 L 407.75,360.625 L 405.40625,365.5 L 405.25,365.75 L 404.96875,365.78125 L 402.0625,365.90625 L 401.90625,365.90625 L 401.78125,365.8125 L 399.09375,364.09375 L 397.09375,365.09375 L 396.78125,365.25 L 396.53125,365 L 395.28125,363.875 L 395.21875,363.84375 L 395.1875,363.78125 L 394.09375,362.25 L 391.09375,362.25 L 387.25,366.375 L 387.21875,366.40625 L 383.90625,369.34375 L 383.90625,369.375 L 381.875,372.5 L 381.75,372.6875 L 381.5,372.71875 L 373.9375,373.3125 L 373.75,374.5 L 373.75,374.5625 L 374.125,377.71875 L 374.15625,377.96875 L 373.96875,378.125 L 371.21875,380.90625 L 371.1875,380.90625 L 371.1875,380.9375 L 369.59375,382.25 C 369.55231,382.34545 369.42801,382.64399 369.1875,383.125 C 368.91216,383.67567 368.59388,384.33108 368.21875,384.78125 C 367.65456,385.45828 366.48374,386.89562 366.25,387.1875 L 366.875,388.5625 L 366.90625,388.59375 L 366.9375,388.6875 L 367.53125,392.25 L 370,393.90625 L 373.71875,396.40625 L 373.78125,396.4375 L 376,397.53125 L 376.5,397.78125 L 376.1875,398.25 L 375.1875,399.78125 L 375.15625,399.78125 L 375.15625,399.8125 L 372.375,403.21875 L 372.34375,403.28125 L 372.28125,403.3125 L 368.25,406.21875 L 368.25,406.1875 L 364.96875,408.84375 L 364.84375,408.96875 L 364.65625,408.96875 L 360.8125,408.96875 L 359.71875,410.0625 L 359.65625,410.125 L 359.5625,410.1875 L 355.90625,411.8125 L 353.15625,413.125 L 353.15625,413.25 L 354.15625,415.71875 L 354.1875,415.84375 L 354.1875,415.96875 L 353.8125,418.34375 L 354.625,420.875 L 354.65625,420.875 L 355.78125,423.40625 L 355.8125,423.5 L 355.8125,423.59375 L 355.9375,429.65625 L 355.9375,432.6875 L 355.9375,432.84375 L 355.875,432.96875 L 355.25,434.03125 L 355.875,436.375 L 357.6875,437.25 L 360.90625,435.78125 L 360.9375,435.75 L 361,435.75 L 363.5,435 L 363.53125,435 L 363.5625,434.96875 L 367.53125,434.375 L 367.625,434.34375 L 369.9375,433.625 L 369.96875,433.59375 L 371.9375,433.125 L 372,433.09375 L 374.84375,431.96875 L 375,431.90625 L 375.15625,431.96875 C 375.15625,431.96875 375.96807,432.21856 376.875,432.46875 C 377.32846,432.59384 377.81653,432.72056 378.21875,432.8125 C 378.62097,432.90444 378.9842,432.96875 379.0625,432.96875 C 379.27465,432.96875 379.82909,432.80587 380.28125,432.625 C 380.73341,432.44414 381.09375,432.25 381.09375,432.25 L 381.125,432.25 L 381.15625,432.21875 L 384.1875,431.1875 L 385.03125,428.625 L 385.03125,428.5625 L 385.09375,428.5 L 386.21875,426.75 L 386.3125,426.59375 L 386.5,426.53125 L 388.28125,426.03125 L 388.5,425.96875 L 388.6875,426.09375 L 390.09375,427.03125 L 391.8125,426.9375 L 392.125,425.9375 L 390.5,424.625 L 390.46875,424.625 L 388.59375,422.9375 L 388.5625,422.90625 L 386.5625,422.03125 L 386.4375,422 L 386.34375,421.875 L 384.8125,419.625 C 384.64573,419.57114 383.77631,419.29085 383.15625,419.1875 C 382.71136,419.11335 382.47876,418.80331 382.28125,418.5 C 382.08374,418.19669 381.91471,417.842 381.78125,417.5 C 381.52737,416.84945 381.39,416.27825 381.375,416.21875 L 381.34375,416.15625 L 380.5,414.09375 L 380.5,414.0625 L 379.125,411.34375 L 379.0625,411.21875 L 379.0625,411.0625 L 379.3125,406.65625 L 379.34375,406.1875 L 379.84375,406.1875 L 388.9375,406.4375 L 389.125,406.4375 L 389.25,406.59375 L 390.09375,407.4375 L 390.15625,407.46875 L 390.625,407.84375 L 391.21875,405.8125 L 391.21875,405.78125 L 391.21875,405.75 L 392.34375,402.84375 L 392.46875,402.5625 L 392.75,402.53125 L 395.34375,402.15625 L 395.40625,402.15625 L 399.21875,401.03125 L 399.25,401.03125 L 402.6875,399.6875 L 402.71875,399.65625 L 402.75,399.65625 L 403.5625,399.1875 L 403.6875,399.125 L 403.84375,399.125 L 408.90625,399.375 L 409,399.375 L 413.1875,398.65625 L 416.25,396.0625 L 416.3125,396 L 416.40625,395.96875 L 419.3125,395.09375 L 419.53125,395.03125 L 419.71875,395.15625 L 421.5625,396.25 C 421.64598,396.26999 422.32685,396.41638 423.125,396.59375 C 423.54861,396.68789 423.98466,396.8055 424.34375,396.875 C 424.70284,396.9445 425.03,396.96875 425.03125,396.96875 C 425.01169,396.96875 425.2984,396.92327 425.59375,396.84375 C 425.8891,396.76423 426.21943,396.67166 426.5625,396.5625 C 427.24864,396.34418 427.875,396.125 427.875,396.125 L 430.9375,394.03125 L 430.9375,394 L 433.9375,392.15625 L 433.96875,392.125 L 437.03125,389.65625 C 437.02641,389.44291 436.99755,388.38729 436.96875,387.0625 C 436.93717,385.61009 436.90625,384.13798 436.90625,383.84375 C 436.90625,383.46748 437.05773,383.27278 437.21875,383.03125 C 437.37977,382.78972 437.58419,382.5424 437.78125,382.3125 C 438.01615,382.03845 438.09985,381.9689 438.25,381.8125 C 438.15231,381.69797 438.11784,381.65654 437.96875,381.5 C 437.81966,381.34346 437.67187,381.20926 437.53125,381.09375 C 437.39063,380.97824 437.25534,380.89977 437.28125,380.90625 C 437.15457,380.87458 436.99123,380.80317 436.90625,380.6875 C 436.82127,380.57183 436.79081,380.4417 436.78125,380.34375 C 436.76214,380.14785 436.82861,380.01803 436.875,379.875 C 436.96778,379.58894 437.11527,379.29046 437.28125,379 C 437.57447,378.48688 437.83156,378.10686 437.90625,378 L 438.125,375.6875 L 437.125,374.53125 L 433.53125,372.9375 L 433.53125,372.90625 L 429.75,371.15625 L 429.59375,371.09375 L 429.5,370.9375 L 428.375,368.78125 L 428.34375,368.75 L 426.84375,365.375 L 425.0625,361.6875 L 425.0625,361.65625 L 425.03125,361.59375 L 424.5625,359.28125 L 424.53125,359.1875 L 423.5625,356.875 L 423.53125,356.84375 L 423.53125,356.78125 L 422.90625,353.6875 C 422.78973,353.60249 422.61772,353.45885 422.28125,353.25 C 422.06333,353.11474 421.82631,352.99916 421.625,352.90625 C 421.42369,352.81334 421.22658,352.75 421.21875,352.75 zM 637.59375,361.96875 L 634.9375,364.03125 L 634.78125,364.15625 L 634.59375,364.125 L 632.375,363.90625 L 631.46875,368.15625 L 631.4375,368.3125 L 631.3125,368.40625 L 627.78125,371.9375 L 627.65625,372.0625 L 627.5,372.0625 L 623.0625,372.8125 C 623.0625,372.8125 622.97215,372.84236 622.96875,372.84375 C 622.83605,372.89806 620.25261,373.94976 619.40625,374.3125 C 619.0858,374.44984 618.38557,374.95709 617.8125,375.40625 C 617.23943,375.85541 616.78125,376.25 616.78125,376.25 L 613.875,378.78125 L 613.8125,378.8125 L 613.75,378.84375 L 610.28125,380.46875 L 610.21875,380.5 L 605.6875,384.9375 L 605.65625,384.96875 L 605.625,385 L 602.71875,387.03125 L 602.40625,387.21875 L 602.125,387 L 601,386.125 L 600.96875,386.09375 L 600.9375,386.0625 L 599.03125,384.0625 L 598.90625,383.90625 L 598.90625,383.75 C 598.90625,383.75 598.83625,382.85687 598.625,381.90625 C 598.51938,381.43094 598.36444,380.94239 598.1875,380.5625 C 598.01056,380.18261 597.80497,379.94936 597.65625,379.875 C 596.81024,379.45199 596.35858,378.5473 596,377.78125 C 595.82071,377.39823 595.68978,377.04127 595.5625,376.78125 C 595.48295,376.61874 595.37952,376.5196 595.34375,376.46875 C 595.36186,376.46608 595.39749,376.44875 595.375,376.4375 C 595.3306,376.4153 595.30244,376.45053 595.3125,376.46875 C 595.24702,376.46928 595.15056,376.45837 595.03125,376.46875 C 594.79263,376.4895 594.47571,376.53308 594.1875,376.59375 C 593.72715,376.69066 593.46524,376.76923 593.3125,376.8125 L 591.75,379.65625 L 591.6875,379.75 L 591.59375,379.84375 L 590.875,380.34375 L 590.84375,380.34375 L 589.28125,382.03125 L 589.21875,382.09375 L 589.125,382.15625 L 584,384.25 L 583.9375,384.28125 L 581.75,385.625 L 578.78125,387.59375 L 578.71875,387.65625 L 574.78125,391.46875 L 574.75,391.5 L 572.4375,394.1875 C 572.40921,394.28451 572.29483,394.67829 572.15625,395.21875 C 572.00096,395.82435 571.87499,396.56977 571.875,396.71875 C 571.875,397.00992 571.78799,397.26406 571.6875,397.625 C 571.58701,397.98594 571.44756,398.39937 571.3125,398.8125 C 571.08652,399.50374 570.9081,400.07222 570.8125,400.40625 L 570.875,400.40625 L 570.96875,400.75 L 572.03125,404.59375 L 575.875,407.25 C 575.875,407.25 575.93503,407.28002 575.9375,407.28125 C 575.99279,407.30884 576.59672,407.62511 577.34375,407.96875 C 577.73394,408.14824 578.14521,408.32569 578.5,408.46875 C 578.85479,408.61181 579.1896,408.70347 579.28125,408.71875 C 579.78447,408.80261 580.25315,409.06152 580.625,409.28125 C 580.92758,409.46005 581.04701,409.56814 581.125,409.625 L 581.65625,408.5 L 581.84375,408.09375 L 582.25,408.21875 L 582.96875,408.46875 L 584.6875,405.1875 L 584.75,405.09375 L 584.84375,405 L 587.875,403 L 587.96875,402.9375 L 588.09375,402.90625 C 588.09375,402.90625 588.90466,402.78153 589.78125,402.625 C 590.21954,402.54673 590.66337,402.45547 591.03125,402.375 C 591.39913,402.29453 591.72665,402.18355 591.71875,402.1875 C 592.08952,402.00212 593.50448,401.20189 593.84375,401 C 593.8382,400.77174 593.81556,399.99454 593.84375,398.9375 C 593.85977,398.33691 593.90596,397.69613 593.96875,397.1875 C 594.00015,396.93318 594.03755,396.73228 594.09375,396.53125 C 594.14995,396.33022 594.17837,396.13185 594.4375,395.9375 C 594.99591,395.51871 597.34375,393.90625 597.34375,393.90625 L 597.78125,393.59375 L 598.0625,394.0625 L 599.46875,396.46875 L 599.5,396.5 L 601.75,398.5 L 601.84375,398.5625 L 601.875,398.65625 L 603.25,401.6875 L 603.375,401.90625 L 603.25,402.125 C 603.25,402.125 603.0285,402.53577 602.96875,402.90625 C 602.93887,403.09149 602.95914,403.25482 603,403.34375 C 603.04086,403.43268 603.07534,403.49782 603.3125,403.5625 C 604.65944,403.92983 606.29682,404.17576 607.84375,404.5625 C 608.57282,404.74477 609.87804,405.00878 611,405.28125 C 611.56098,405.41749 612.09615,405.53769 612.5,405.6875 C 612.70192,405.76241 612.87377,405.83616 613.03125,405.9375 C 613.18873,406.03884 613.40625,406.19728 613.40625,406.5625 C 613.40626,406.69008 613.49905,407.18274 613.59375,407.65625 C 613.68182,408.09661 613.76818,408.5151 613.78125,408.875 C 613.81056,408.91304 613.87571,408.98066 613.96875,409.0625 C 614.15483,409.22618 614.43227,409.44139 614.71875,409.65625 C 615.00523,409.87111 615.31745,410.0788 615.5625,410.3125 C 615.80755,410.5462 616.0625,410.76091 616.0625,411.21875 C 616.0625,411.46776 616.13226,412.04738 616.25,412.5625 C 616.36774,413.07762 616.59701,413.56576 616.6875,413.65625 C 617.10208,414.07083 617.17957,414.56964 617.375,414.875 C 617.57043,415.18036 617.70609,415.33178 618.3125,415.28125 C 619.10745,415.215 619.56704,415.29944 619.71875,415.3125 C 619.7315,415.29291 619.72474,415.30052 619.78125,415.1875 C 620.01538,414.71927 620.53838,413.94956 621.03125,413.25 C 621.52412,412.55044 621.96875,411.9375 621.96875,411.9375 L 622.3125,411.46875 L 622.71875,411.875 C 622.71875,411.875 624.00479,413.11725 625.03125,413.6875 C 626.21106,414.34297 627.96286,415.66842 628.03125,415.71875 C 628.03256,415.71971 628.09375,415.75 628.09375,415.75 L 628.96875,416.1875 L 629.09375,416.0625 L 629.21875,416.03125 L 633.03125,415.3125 L 633.0625,415.3125 L 636.1875,413.8125 L 636.25,413.78125 L 636.3125,413.78125 L 642.8125,412.5 L 648.03125,409.53125 L 648.0625,409.5 L 648.125,409.5 L 654.40625,407.5 L 655.125,406.78125 L 653.8125,404.96875 L 653.71875,404.84375 L 653.6875,404.6875 C 653.6875,404.6875 653.55995,402.91715 653.4375,401.9375 C 653.38454,401.51384 653.31432,401.42802 653.15625,401.28125 C 652.99818,401.13448 652.70656,400.95656 652.34375,400.59375 C 652.15056,400.40056 652.00305,400.22215 651.9375,400 C 651.87195,399.77785 651.88887,399.55397 651.90625,399.40625 C 651.94101,399.1108 651.9786,398.92872 651.8125,398.375 C 651.42797,397.09324 651.42938,396.56977 651.21875,396.03125 C 651.16511,396.01734 650.98593,396.01008 650.78125,396.03125 C 650.37189,396.0736 649.79853,396.1875 649.15625,396.1875 C 648.31026,396.1875 647.68186,395.60833 647.21875,395.09375 C 646.75563,394.57917 646.4375,394.0625 646.4375,394.0625 L 646.40625,394 L 646.40625,393.9375 L 645.5625,390.9375 C 645.5625,390.9375 645.50249,390.78511 645.5,390.78125 C 645.45078,390.70514 645.00069,389.99365 644.03125,387.8125 C 643.76964,387.22388 643.62347,386.81504 643.5625,386.46875 C 643.50153,386.12246 643.54028,385.8116 643.625,385.59375 C 643.79443,385.15806 643.89456,385.28945 643.84375,384.78125 C 643.70664,383.41019 643.96979,381.73969 644.09375,380.5 C 644.1605,379.83253 644.2555,379.42914 644.5625,379.15625 C 644.716,379.01981 644.88997,378.97343 645,378.9375 C 645.11003,378.90157 645.16845,378.88452 645.25,378.84375 C 645.10794,378.91478 645.30349,378.77616 645.40625,378.53125 C 645.50901,378.28634 645.59672,377.94929 645.6875,377.59375 C 645.86905,376.88267 646,376.05733 646,375.875 C 646,375.35933 646.21574,374.86766 646.40625,374.34375 C 646.50151,374.0818 646.59058,373.83114 646.65625,373.625 C 646.72192,373.41886 646.75,373.22002 646.75,373.21875 C 646.75,372.86332 646.96984,372.65252 647.15625,372.5 C 647.34266,372.34748 647.55352,372.21431 647.75,372.125 C 648.12824,371.95307 648.44203,371.88227 648.46875,371.875 C 648.46875,371.875 648.49959,371.87516 648.5,371.875 C 648.5252,371.86529 649.28328,371.57038 650.15625,371.1875 C 650.59978,370.99297 651.05748,370.76102 651.4375,370.5625 C 651.81752,370.36398 652.1552,370.1573 652.21875,370.09375 C 652.25284,370.05966 652.30988,369.90627 652.34375,369.65625 C 652.37762,369.40623 652.39759,369.07272 652.375,368.71875 C 652.32981,368.01081 652.1875,367.24467 652.1875,366.65625 C 652.1875,366.22596 652.16971,366.10766 652.1875,366.09375 C 652.13498,366.07222 652.11284,366.04514 652,366 C 651.83907,365.93563 650.91996,365.72149 649.96875,365.53125 C 649.01754,365.34101 647.9761,365.11916 647.21875,364.84375 C 646.61116,364.62281 646.11741,364.62726 645.5,364.6875 C 644.88259,364.74774 644.15027,364.875 643.21875,364.875 C 642.26344,364.875 641.67704,364.67965 641.3125,364.40625 C 641.13023,364.26955 641.00903,364.12876 640.9375,364 C 640.90505,363.9416 640.89187,363.92621 640.875,363.875 L 638.9375,361.96875 L 637.59375,361.96875 zM 292.0625,364.65625 L 286.4375,364.875 L 286.40625,364.875 L 282.25,366.375 L 282.21875,366.375 L 279.46875,367.15625 L 279.4375,367.15625 L 276.53125,368.875 L 276.4375,368.90625 L 276.34375,368.9375 L 272.5625,369.4375 L 272.3125,369.46875 L 272.125,369.28125 L 270.46875,367.59375 L 269.25,369.375 L 269.25,369.40625 L 269.21875,369.4375 L 266.6875,372.375 L 266.65625,372.4375 L 266.625,372.46875 L 265.53125,374.59375 L 265.40625,374.875 L 265.125,374.875 L 257.34375,375.21875 L 257.21875,375.25 L 257.125,375.1875 L 253.625,373.625 L 253.53125,373.59375 L 251.59375,373.09375 L 248.25,373.96875 L 248.09375,374 L 247.96875,373.96875 L 244.75,372.875 L 244.71875,372.875 L 244.65625,372.84375 L 241.625,371.15625 L 241.59375,371.125 C 241.59375,371.125 241.02922,370.74423 240.40625,370.34375 C 240.09476,370.14351 239.76468,369.94668 239.5,369.78125 C 239.23532,369.61582 238.99841,369.48358 238.96875,369.46875 C 238.97636,369.47255 238.738,369.36284 238.46875,369.28125 C 238.1995,369.19966 237.8526,369.1199 237.53125,369.03125 C 236.93864,368.86777 236.48936,368.74036 236.40625,368.71875 L 230.875,368.4375 L 227.6875,370.5 L 227.65625,370.53125 L 224.53125,372.3125 L 224.5,372.3125 L 220.21875,374.375 L 220.15625,374.40625 L 220.09375,374.40625 L 217.375,375 L 214.4375,376.59375 L 212.5625,377.625 L 211.8125,380.21875 L 211.78125,380.34375 L 211.71875,380.40625 L 210.96875,381.3125 L 211.78125,382.6875 L 211.875,382.84375 L 211.84375,383.03125 L 211.46875,385.4375 L 211.46875,385.59375 L 211.34375,385.6875 L 209.84375,387.375 L 209.78125,387.46875 L 209.6875,387.5 L 205.59375,389.4375 L 206.75,391.0625 L 206.84375,391.15625 L 206.84375,391.3125 L 207.03125,394.34375 L 207.03125,394.53125 L 206.90625,394.65625 L 204.46875,397.96875 L 204.46875,398 L 204.40625,398.0625 L 203.25,400.59375 L 203.21875,400.65625 L 202.25,403.46875 L 202.25,403.5 L 200.46875,407.875 L 200.4375,407.90625 L 200.40625,407.96875 L 197.09375,412.625 L 197.0625,412.65625 L 197.03125,412.6875 L 194,415.46875 L 193.96875,415.46875 C 193.96875,415.46875 193.32576,415.99522 192.625,416.5625 C 191.92424,417.12978 191.12126,417.78499 190.96875,417.9375 C 190.7334,418.17284 190.43949,418.33347 190,418.59375 C 189.56051,418.85403 189.0217,419.15141 188.5,419.4375 C 187.48819,419.99237 186.58829,420.47016 186.53125,420.5 C 186.52947,420.50093 186.46875,420.53125 186.46875,420.53125 L 184.46875,421.9375 L 184.375,422 L 184.25,422 L 181.8125,422.25 L 181.21875,423.84375 L 180.6875,427.125 L 180.65625,427.21875 L 180.625,427.28125 L 179.5625,429.34375 L 179.5,429.46875 L 179.375,429.53125 L 178.15625,430.3125 L 178.03125,431.125 L 180,434.25 L 183.5625,435.59375 L 188.71875,437.5625 L 188.75,437.5625 L 195.84375,439.53125 L 196,439.5625 L 196.09375,439.65625 L 198.4375,442.34375 L 206.65625,442 L 212.4375,439.5625 L 212.46875,439.53125 L 213.6875,438.84375 L 213.9375,438.71875 L 214.1875,438.875 L 215.34375,439.59375 L 217.9375,437.8125 L 218.09375,437.6875 L 218.25,437.71875 L 223.21875,438.21875 L 223.8125,436.125 L 223.84375,435.9375 L 224,435.84375 L 227.75,433.34375 L 227.90625,433.21875 L 228.09375,433.25 L 233.09375,433.78125 L 233.1875,433.8125 L 233.28125,433.84375 L 237.25,435.9375 L 240,435.9375 L 240.53125,435.9375 L 240.5,436.46875 L 240.34375,438.8125 L 241.8125,439.53125 L 243.65625,436.875 L 243.6875,436.84375 L 244.65625,432.6875 L 243.625,428.875 L 243.59375,428.71875 L 243.65625,428.5625 L 245.25,424.625 L 245.28125,424.59375 L 245.28125,424.5625 L 246.90625,421.875 L 246.90625,421.84375 L 246.9375,421.84375 L 249.625,418.4375 L 248.625,414.59375 L 248.59375,414.5 L 248.625,414.40625 L 249.15625,409.0625 L 249.15625,409.03125 L 250.03125,402.78125 L 250.0625,402.65625 L 250.125,402.5625 L 254.59375,396.65625 L 254.75,396.46875 L 254.96875,396.46875 L 258.375,396.28125 L 258.75,396.28125 L 258.875,396.625 L 259.625,398.8125 L 266.4375,399.5 L 266.46875,399.5 L 274.65625,399.5 L 274.6875,399.5 L 274.75,399.5 L 282.78125,401.28125 L 292.0625,403.09375 L 292.21875,403.125 L 292.3125,403.21875 L 295.375,406.3125 L 295.4375,406.34375 L 301.4375,408.8125 L 301.5,408.84375 L 301.5625,408.90625 L 308.125,414.375 L 312.4375,415.40625 L 312.5,415.4375 L 312.59375,415.46875 L 320.53125,420.25 L 320.625,420.28125 L 327.15625,422.9375 L 327.1875,422.9375 L 327.25,422.96875 L 331.53125,425.84375 L 331.59375,425.875 L 331.65625,425.9375 L 335.40625,430.75 L 335.40625,430.78125 L 335.4375,430.8125 L 339.15625,437.40625 L 339.1875,437.4375 L 342.03125,441.5 L 342.0625,441.5625 L 342.09375,441.625 L 343.3125,445.40625 L 347.25,448.34375 L 347.28125,448.34375 L 353.40625,453.09375 L 356.625,454.34375 L 356.625,454.375 L 357.9375,454.9375 L 358.65625,454.40625 L 359.25,452.8125 L 359,443.0625 L 358.28125,441.34375 L 358.25,441.28125 L 358.21875,441.21875 L 357.875,438.46875 L 355.21875,437.1875 L 355.03125,437.09375 L 354.96875,436.875 L 354.21875,434.09375 L 354.15625,433.875 L 354.25,433.71875 L 354.9375,432.59375 L 354.9375,429.6875 L 354.8125,423.6875 L 353.71875,421.28125 L 353.71875,421.25 L 352.8125,418.59375 L 352.78125,418.46875 L 352.8125,418.34375 L 353.15625,415.96875 L 352.21875,413.5625 L 352.15625,413.46875 L 352.15625,413.375 L 352.15625,411.625 L 350.53125,409.5625 L 350.5,409.53125 L 346.75,405.65625 L 346.71875,405.59375 L 346.6875,405.5625 L 345.6875,403.90625 L 345.65625,403.875 L 345.625,403.8125 L 344.6875,400.84375 L 340.15625,398.15625 L 336.375,395.75 L 336.34375,395.71875 L 336.3125,395.6875 L 332.8125,392.71875 L 332.78125,392.6875 L 330,391.5 L 329.84375,391.4375 L 329.75,391.28125 L 328.65625,389.4375 L 328.625,389.40625 L 326.125,386.15625 L 326.125,386.125 L 323.84375,382.71875 L 323.8125,382.65625 L 323.78125,382.59375 L 322.8125,379.25 L 322.78125,379.1875 L 321.21875,375.9375 L 321.15625,375.84375 L 317.21875,371.3125 L 317.1875,371.28125 L 314.71875,369.0625 L 311.5,370.875 L 311.46875,370.90625 C 311.46875,370.90625 310.64845,371.27235 309.71875,371.625 C 309.2539,371.80132 308.76937,371.95792 308.3125,372.09375 C 307.85563,372.22958 307.46087,372.34374 307.09375,372.34375 C 306.44284,372.34375 305.52068,372.09932 304.6875,371.875 C 303.85432,371.65068 303.15625,371.4375 303.15625,371.4375 L 303.125,371.40625 L 303.0625,371.40625 L 299.03125,369.375 L 299,369.375 L 298.96875,369.34375 L 295.84375,367.09375 L 295.8125,367.0625 L 292.03125,364.6875 L 292.0625,364.65625 zM 474.6875,370.78125 C 474.38774,370.88117 473.94034,371.13899 473.53125,371.375 C 473.12216,371.61101 472.77971,371.83632 472.375,371.9375 C 471.95781,372.04179 468.18176,373.09646 467.96875,373.15625 C 467.96875,373.15625 466.22603,374.27761 465.15625,374.8125 C 464.54683,375.11722 463.55101,375.37006 462.65625,375.59375 C 461.77716,375.81352 461.02616,375.99454 461,376 L 461.5625,376.625 L 461.6875,376.75 L 461.6875,376.90625 L 462,380.125 L 462.03125,380.375 L 461.84375,380.53125 L 459.21875,383.0625 L 459.125,383.15625 L 459,383.1875 C 459,383.1875 458.35447,383.34876 457.65625,383.53125 C 456.95803,383.71374 456.28092,383.89067 455.90625,383.9375 C 455.67661,383.96621 454.64603,384.13197 453.6875,384.28125 C 453.20824,384.35589 452.73715,384.43512 452.375,384.5 C 452.19392,384.53244 452.04733,384.53871 451.9375,384.5625 C 451.82767,384.58629 451.69872,384.65064 451.8125,384.59375 C 451.61322,384.69339 451.60265,384.66298 451.46875,384.6875 C 451.33485,384.71202 451.15886,384.75409 450.96875,384.78125 C 450.58853,384.83557 450.09273,384.88201 449.625,384.9375 C 448.75505,385.04072 448.05102,385.11299 447.9375,385.125 L 447.8125,385.15625 L 444.875,386.4375 L 441.84375,387.84375 L 441.78125,387.875 L 439.84375,389.28125 L 439.78125,389.3125 L 439.71875,389.34375 L 438.03125,390 L 438.03125,390.125 L 437.84375,390.28125 L 434.5625,392.9375 L 434.53125,392.9375 L 434.5,392.96875 L 431.5,394.84375 L 428.34375,397 L 428.28125,397.03125 L 428.21875,397.0625 C 428.21875,397.0625 427.57782,397.27637 426.875,397.5 C 426.52359,397.61181 426.16396,397.72629 425.84375,397.8125 C 425.52354,397.89871 425.30335,397.96875 425.03125,397.96875 C 424.77997,397.96875 424.5311,397.9163 424.15625,397.84375 C 423.7814,397.7712 423.33496,397.68902 422.90625,397.59375 C 422.04883,397.40321 421.25,397.1875 421.25,397.1875 L 421.15625,397.1875 L 421.09375,397.15625 L 419.40625,396.125 L 416.78125,396.90625 L 413.71875,399.5 L 413.625,399.59375 L 413.5,399.59375 L 409.0625,400.375 L 409.03125,400.375 L 408.96875,400.375 L 403.9375,400.125 L 403.1875,400.5625 L 403.15625,400.5625 L 403.09375,400.59375 L 399.5625,401.96875 L 399.53125,402 L 395.625,403.125 L 395.59375,403.125 L 395.53125,403.15625 L 393.1875,403.5 L 392.15625,406.125 L 391.40625,408.84375 L 391.21875,409.5625 L 390.625,409.09375 L 389.5,408.21875 L 389.46875,408.1875 L 389.4375,408.1875 L 388.71875,407.4375 L 380.28125,407.1875 L 380.0625,411 L 381.40625,413.65625 L 381.40625,413.6875 L 382.3125,415.84375 L 382.3125,415.875 L 382.3125,415.90625 C 382.3125,415.90625 382.4806,416.51474 382.71875,417.125 C 382.83783,417.43013 382.9598,417.73179 383.09375,417.9375 C 383.2277,418.14321 383.37858,418.19851 383.3125,418.1875 C 384.15008,418.32711 385.28125,418.71875 385.28125,418.71875 L 385.4375,418.78125 L 385.53125,418.90625 L 387.09375,421.1875 L 388.96875,422 L 389.0625,422.03125 L 389.125,422.09375 L 391.125,423.84375 L 393,425.375 L 393.28125,425.5625 L 393.1875,425.90625 L 392.65625,427.53125 L 392.5625,427.875 L 392.21875,427.90625 L 389.9375,428.03125 L 389.78125,428.03125 L 389.65625,427.9375 L 388.3125,427.0625 L 386.9375,427.4375 L 385.96875,428.9375 L 385.9375,429 L 385.09375,431.71875 L 385.03125,431.9375 L 384.78125,432.03125 L 381.5625,433.125 L 381.5625,433.15625 C 381.5625,433.15625 381.15111,433.33331 380.65625,433.53125 C 380.1614,433.72919 379.60797,433.96875 379.0625,433.96875 C 378.76199,433.96875 378.42642,433.87872 378,433.78125 C 377.57358,433.68378 377.08699,433.56494 376.625,433.4375 C 375.7664,433.20065 375.10527,433.00101 375,432.96875 L 372.3125,434.0625 L 372.28125,434.0625 L 372.25,434.0625 L 370.25,434.5625 L 370.21875,434.5625 L 367.84375,435.3125 L 367.8125,435.34375 L 367.78125,435.34375 L 363.8125,435.96875 L 361.34375,436.6875 L 361.28125,436.71875 L 358.8125,437.875 L 358.84375,438.0625 L 359.1875,440.96875 L 359.21875,441.03125 L 359.21875,441.09375 L 359.9375,442.71875 L 360,442.8125 L 360,442.90625 L 360.25,452.875 L 360.25,452.96875 L 360.21875,453.0625 L 359.59375,454.84375 L 359.53125,454.96875 L 359.40625,455.0625 L 359,455.375 L 359.125,455.4375 L 359.15625,455.4375 L 359.1875,455.46875 L 363.78125,458.46875 L 370.40625,459.28125 L 373.125,457.4375 L 373.15625,457.40625 L 376.375,455.8125 L 376.46875,455.75 L 376.5625,455.75 L 381.5625,455.21875 L 381.71875,455.1875 L 381.84375,455.28125 L 384.46875,456.65625 L 386.1875,453.84375 L 386.3125,453.625 L 386.59375,453.59375 L 397.34375,453.25 L 399.625,452.21875 L 399.8125,452.125 L 400,452.21875 L 402.96875,453.46875 L 403.3125,452.8125 L 403.4375,452.53125 L 403.75,452.53125 L 408.21875,452.53125 L 408.25,452.53125 L 408.3125,452.53125 L 411.4375,453.15625 L 412.03125,451.125 L 412.125,450.75 L 412.5,450.75 L 419.28125,450.9375 L 420.5625,449.8125 L 420.625,449.75 L 420.6875,449.71875 L 423.8125,448.40625 L 423.96875,446.03125 L 423.96875,445.84375 L 424.125,445.71875 L 426.96875,442.875 L 427.125,442.6875 L 427.375,442.71875 L 431.8125,443.0625 L 432,443.09375 L 432.125,443.21875 L 434.5,445.59375 L 436.84375,443.875 L 436.875,443.84375 L 436.9375,443.84375 L 439.6875,442.53125 L 439.5,436.625 L 439.5,436.3125 L 439.75,436.1875 L 441.6875,435.0625 L 441.8125,434.03125 L 441.84375,433.84375 L 442,433.71875 L 444.625,431.46875 L 444.6875,431.40625 L 448.1875,427.34375 L 451.59375,423.4375 L 451.65625,423.34375 L 451.75,423.28125 L 456.875,421 L 461.78125,415.71875 L 461.90625,415.59375 L 462.09375,415.5625 L 465.0625,415.25 L 466.1875,413.3125 L 466.21875,413.21875 L 466.3125,413.15625 L 469,411.21875 L 469.09375,411.125 L 469.1875,411.125 L 476.15625,409.6875 L 476.25,409.65625 L 476.375,409.6875 L 481.71875,410.9375 L 481.78125,410.96875 L 481.84375,411 L 486.5,413.6875 L 488,414.59375 L 488.8125,414.1875 L 488.84375,414.1875 L 488.875,414.15625 C 488.875,414.15625 491.1203,413.42306 492.1875,413.15625 C 493.10253,412.92749 493.77342,412.42382 494.46875,412.25 C 494.69489,412.19347 494.94006,412.20578 495.28125,412.1875 C 495.62244,412.16922 496.0238,412.13296 496.4375,412.125 C 497.2649,412.10909 498.1212,412.125 498.5,412.125 C 498.48107,412.125 498.47515,412.156 498.53125,412.0625 C 498.58735,411.969 498.64643,411.76782 498.6875,411.5625 C 498.76963,411.15185 498.78125,410.71875 498.78125,410.71875 L 498.78125,408.125 L 496.96875,405.875 L 496.96875,405.84375 L 495.21875,403.59375 L 495.09375,403.4375 L 495.09375,403.28125 L 495.09375,400.375 L 495.09375,400.1875 L 495.25,400.03125 L 496.40625,398.78125 L 496.75,397.03125 L 496.75,397 L 496.84375,396.125 L 496,395.3125 L 493.59375,393.9375 L 490.3125,393.9375 L 490.03125,393.9375 L 489.875,393.71875 L 488.625,391.8125 L 488.59375,391.78125 L 488.5625,391.71875 L 487.71875,389.5 L 487.6875,389.4375 L 486.8125,387.71875 L 486.75,387.5625 L 486.78125,387.375 L 487.28125,385.46875 L 487.3125,385.375 L 487.40625,385.28125 L 488.78125,383.625 L 488.90625,380.84375 C 488.78221,380.6731 487.66519,379.13394 487.15625,378.625 C 486.59562,378.06436 486.13698,377.86777 485.3125,377.75 C 484.95636,377.69912 484.126,377.70311 483.34375,377.71875 C 482.5615,377.73439 481.81774,377.78124 481.46875,377.78125 C 480.81974,377.78125 480.4559,377.32129 480.15625,376.96875 C 479.8566,376.61621 479.65625,376.25 479.65625,376.25 L 479.625,376.25 L 478.625,374.34375 L 478.625,374.3125 L 478.59375,374.28125 L 477.5,371.46875 L 477.375,371.40625 C 477.375,371.40625 476.82421,371.21317 476.1875,371.03125 C 475.86915,370.94029 475.5351,370.85474 475.25,370.8125 C 474.9649,370.77026 474.72274,370.7695 474.6875,370.78125 zM 597.46875,395.03125 C 596.9401,395.39416 595.52745,396.33687 595.09375,396.65625 C 595.08915,396.66932 595.07929,396.72122 595.0625,396.78125 C 595.02893,396.90131 594.96529,397.08739 594.9375,397.3125 C 594.88192,397.76272 594.8593,398.35432 594.84375,398.9375 C 594.81264,400.10387 594.84375,401.25 594.84375,401.25 L 594.84375,401.53125 L 594.59375,401.6875 C 594.59375,401.6875 592.78201,402.79649 592.1875,403.09375 C 591.92706,403.22397 591.63973,403.28975 591.25,403.375 C 590.86027,403.46025 590.41434,403.54543 589.96875,403.625 C 589.10913,403.7785 588.36797,403.89769 588.3125,403.90625 L 585.5,405.78125 L 583.96875,408.78125 L 587.6875,410 L 587.71875,410.03125 L 587.78125,410.03125 L 590.3125,411.5 L 590.34375,411.5 L 601.9375,414.53125 L 602.375,414.65625 L 602.28125,415.125 L 601.59375,418.71875 L 603.21875,419.78125 L 603.40625,419.90625 L 603.4375,420.15625 L 603.5,421.125 L 607.9375,419.34375 L 608.03125,419.3125 L 608.125,419.3125 C 608.125,419.3125 610.49132,419.37437 612.9375,419.4375 C 615.38368,419.50063 617.96971,419.5625 618.21875,419.5625 C 618.431,419.5625 618.54597,419.6276 618.75,419.6875 C 618.95403,419.7474 619.19975,419.80953 619.46875,419.90625 C 620.00675,420.09969 620.65439,420.37108 621.28125,420.625 C 622.38857,421.07353 623.2089,421.40155 623.4375,421.5 L 625.1875,419.96875 L 625.21875,419.9375 L 628.21875,416.9375 L 627.59375,416.59375 L 627.5625,416.59375 L 627.5,416.5625 C 627.5,416.5625 625.6017,415.15721 624.53125,414.5625 C 623.5028,413.99114 622.80102,413.26096 622.46875,412.9375 C 622.30442,413.16266 622.1727,413.3456 621.84375,413.8125 C 621.35804,414.5019 620.8322,415.33562 620.6875,415.625 C 620.58286,415.83428 620.50172,416.00583 620.3125,416.15625 C 620.12328,416.30667 619.85444,416.32363 619.6875,416.3125 C 619.35362,416.29024 619.07765,416.22269 618.375,416.28125 C 617.46618,416.35699 616.8409,415.89007 616.53125,415.40625 C 616.2216,414.92243 616.05923,414.46549 615.96875,414.375 C 615.55417,413.96042 615.3848,413.37099 615.25,412.78125 C 615.12105,412.2171 615.06693,411.66389 615.0625,411.28125 C 615.05221,411.28899 615.01083,411.16079 614.875,411.03125 C 614.69389,410.85853 614.40674,410.6488 614.125,410.4375 C 613.84326,410.2262 613.55258,410.02368 613.3125,409.8125 C 613.19246,409.70691 613.09498,409.59201 613,409.46875 C 612.90502,409.34549 612.78125,409.21938 612.78125,408.96875 C 612.78125,408.84121 612.68845,408.31726 612.59375,407.84375 C 612.51521,407.45105 612.46431,407.11288 612.4375,406.78125 C 612.38202,406.74828 612.27761,406.68161 612.125,406.625 C 611.79491,406.50255 611.32513,406.38208 610.78125,406.25 C 609.6935,405.98583 608.41115,405.72779 607.625,405.53125 C 606.14147,405.16037 604.49353,404.92151 603.0625,404.53125 C 602.60518,404.40652 602.25413,404.09907 602.09375,403.75 C 601.93337,403.40093 601.91971,403.05406 601.96875,402.75 C 602.04192,402.29632 602.19374,402.10573 602.28125,401.9375 L 601,399.125 L 598.8125,397.21875 L 598.75,397.15625 L 598.71875,397.09375 L 597.46875,395.03125 zM 547.96875,396.875 L 547.1875,397.84375 L 545.4375,400.78125 L 545.28125,401.9375 L 546.1875,401.8125 L 546.34375,401.8125 L 546.5,401.875 L 550.59375,404.21875 L 550.625,404.21875 L 550.65625,404.25 L 554.40625,407.28125 L 554.5,407.34375 L 554.53125,407.40625 L 557.21875,411.875 L 557.3125,412.03125 L 557.28125,412.21875 L 556.9375,414.875 L 556.5625,418.28125 L 556.5625,418.3125 L 557.4375,421.84375 L 557.46875,421.96875 L 557.4375,422.09375 L 556.375,426.03125 L 556.3125,426.25 L 556.125,426.34375 L 551.1875,428.8125 L 551.125,428.84375 L 546.0625,433.75 L 546,433.8125 L 545.9375,433.84375 L 541.0625,436.09375 L 538.65625,440.59375 L 538.625,440.65625 L 538.5625,440.71875 L 534.5625,444.5625 L 535.96875,447.28125 L 537.9375,451 L 537.9375,451.03125 L 541.625,457.1875 L 541.625,457.21875 L 541.65625,457.25 L 543.65625,461.53125 L 543.6875,461.5625 L 544.1875,462.8125 L 544.21875,462.90625 L 544.21875,463.03125 L 544.09375,466.3125 L 544.09375,466.4375 L 544,466.5625 L 542.53125,468.625 L 543.90625,468.09375 L 544.375,467.90625 L 544.5625,468.375 L 545.96875,471.8125 L 549.1875,472.875 L 551.59375,473.78125 L 551.6875,473.8125 L 551.78125,473.875 L 552.90625,475.03125 L 553.03125,475.15625 L 553.0625,475.3125 L 553.28125,477 L 553.4375,477.03125 L 553.5625,471.3125 L 553.5625,471.21875 L 553.59375,471.15625 L 554.875,468.125 L 555,467.84375 L 555.28125,467.8125 L 559.4375,467.46875 L 560.03125,464.78125 L 560.125,464.28125 L 560.625,464.40625 L 562.53125,464.90625 L 562.5625,464.9375 L 563.625,465.3125 L 564.9375,463.625 L 564.9375,463.5625 L 565.40625,461.96875 L 564.875,461.125 L 564.8125,461 L 564.8125,460.875 L 564.4375,454.1875 L 564.40625,453.96875 L 564.59375,453.8125 L 566.46875,452.03125 L 566.53125,452 L 566.5625,451.96875 L 568.71875,450.71875 L 572,448.6875 L 572.1875,448.5625 L 572.4375,448.65625 L 574.71875,449.5 L 580.59375,449.375 L 581.3125,447.15625 L 580.59375,445.78125 L 580.53125,445.6875 L 578.59375,443.65625 L 578.53125,443.59375 L 578.5,443.53125 L 577.03125,440.59375 L 577,440.53125 L 576.96875,440.5 L 574.53125,437.5625 L 574.40625,437.40625 L 574.40625,437.21875 L 574.65625,431.40625 L 574.65625,431.375 L 574.65625,431.3125 L 575.5625,427.90625 L 575.59375,427.78125 L 575.6875,427.6875 L 576.71875,426.625 L 575.6875,425.59375 L 575.53125,425.46875 L 575.53125,425.25 L 575.40625,420.46875 L 575.40625,420.21875 L 575.59375,420.0625 L 578.65625,417.6875 L 577.65625,416.1875 L 577.53125,416 L 577.5625,415.78125 L 578.21875,413.375 L 578.25,413.21875 L 578.40625,413.09375 L 580.0625,411.90625 L 580.84375,410.25 L 580.65625,410.5 C 580.65625,410.5 580.44763,410.31565 580.125,410.125 C 579.80237,409.93435 579.37938,409.76114 579.125,409.71875 C 578.83784,409.67089 578.50415,409.52788 578.125,409.375 C 577.74585,409.22212 577.33649,409.05854 576.9375,408.875 C 576.13952,408.50793 575.4375,408.15625 575.4375,408.15625 L 575.40625,408.125 L 575.375,408.09375 L 571.34375,405.34375 L 571.1875,405.21875 L 571.125,405.0625 L 570.09375,401.34375 C 569.85613,401.31656 569.42419,401.26308 568.71875,401.1875 C 568.27806,401.14028 567.8437,401.09765 567.46875,401.0625 C 567.0938,401.02735 566.75128,401 566.6875,401 C 566.74873,401 566.44325,401.05396 566.125,401.15625 C 565.80675,401.25854 565.40578,401.3908 565.03125,401.53125 C 564.28219,401.81215 563.59375,402.09375 563.59375,402.09375 L 563.40625,402.1875 L 563.21875,402.09375 C 563.21875,402.09375 562.53205,401.80458 561.75,401.4375 C 560.96795,401.07042 560.11266,400.65191 559.59375,400.28125 C 558.68034,399.6288 557.15752,398.24051 557,398.09375 L 550.875,397.71875 L 550.71875,397.71875 L 550.59375,397.59375 L 549.78125,396.90625 L 548.15625,397.4375 L 547.96875,396.875 zM 109.9375,406.40625 L 110.6875,407.40625 L 111.09375,407.21875 L 111,407.03125 L 110.625,406.40625 L 109.9375,406.40625 zM 156.53125,407.40625 L 156.71875,408.5625 L 157.1875,407.8125 L 156.53125,407.40625 z"></path></g>';
    var m=Math.PI,p=2*m,r=m/2,y=m/180,A=180/m;function B(d){return d}rebind=function(d,a){for(var e=1,c=arguments.length,b;++e<c;)d[b=arguments[e]]=C(d,a,a[b]);return d};function C(d,a,e){return function(){var c=e.apply(a,arguments);return c===a?d:c}}var D=function(d){return function(a,e){return{b:function(c,b){var f=a(c,b);d(c=f[0],b=f[1])&&e.b(c,b)}}}}(function(){return!0});function I(d){return function(a,e){return a+=d,[a>m?a-p:a<-m?a+p:a,e]}}
    function J(d,a,e,c){return function(b){return{b:function(f,k){d<=f&&f<=e&&a<=k&&k<=c&&b.b(f,k)}}}}function K(d,a){function e(c,b){return c=d(c,b),a(c[0],c[1])}d.a&&a.a&&(e.a=function(c,b){return c=a.a(c,b),c&&d.a(c[0],c[1])});return e};

    var TURKEYProjection=function(){function d(a){var c=a[0];a=a[1];b=null;(k(c,a),b)||(t(c,a),b)||u(c,a);return b}var a=L().rotate([96,0]).c([-.6,38.7]).g([29.5,45.5]).scale(1070),e=L().rotate([154,0]).c([-2,58.5]).g([55,65]),c=L().rotate([157,0]).c([-3,19.9]).g([8,18]),b,f={b:function(a,c){b=[a,c]}},k,t,u;d.a=function(d){var b=a.scale(),f=a.translate(),h=(d[0]-f[0])/b,b=(d[1]-f[1])/b;return(.12<=b&&.234>b&&-.425<=h&&-.214>h?e:.166<=b&&.234>b&&-.214<=h&&-.115>h?c:a).a(d)};d.stream=function(){return{}};d.scale=
        function(b){if(!arguments.length)return a.scale();a.scale(b);e.scale(.35*b);c.scale(b);return d.translate(a.translate())};d.translate=function(b){if(!arguments.length)return a.translate();var g=a.scale(),l=+b[0],h=+b[1];k=a.translate(b).f([[l-.455*g,h-.238*g],[l+.455*g,h+.238*g]]).stream(f).b;t=e.translate([l-.307*g,h+.201*g]).f([[l-.425*g+1E-6,h+.12*g+1E-6],[l-.214*g-1E-6,h+.234*g-1E-6]]).stream(f).b;u=c.translate([l-.205*g,h+.212*g]).f([[l-.214*g+1E-6,h+.166*g+1E-6],[l-.115*g-1E-6,h+.234*g-1E-6]]).stream(f).b;
        return d};return d.scale(1070)};function M(d){function a(a){return{b:function(c,b){c=d(c,b);a.b(c[0],c[1])}}}return function(d){return a(d)}}function N(d){return{b:d}}
    function O(){var d=P;function a(a){a=t(a[0]*y,a[1]*y);return[a[0]*n+v,w-a[1]*n]}function e(a){return(a=t.a((a[0]-v)/n,(w-a[1])/n))&&[a[0]*A,a[1]*A]}function c(){var a=I(x);a.a=I(-x);t=K(k=a,f);a=f(h,z);v=g-a[0]*n;w=l+a[1]*n;return b()}function b(){q&&(q.valid=!1,q=null);return a}var f,k,t,u=M(function(a,b){a=f(a,b);return[a[0]*n+v,w-a[1]*n]}),n=150,g=480,l=250,h=0,z=0,x=0,E=0,F=0,v,w,G=B,H=null,q;a.stream=function(a){q&&(q.valid=!1);q=Q(D(k,u(G(a))));q.valid=!0;return q};a.f=function(a){if(!arguments.length)return H;
        G=(H=a)?J(a[0][0],a[0][1],a[1][0],a[1][1]):B;return b()};a.scale=function(a){if(!arguments.length)return n;n=+a;return c()};a.translate=function(a){if(!arguments.length)return[g,l];g=+a[0];l=+a[1];return c()};a.c=function(a){if(!arguments.length)return[h*A,z*A];h=a[0]%360*y;z=a[1]%360*y;return c()};a.rotate=function(a){if(!arguments.length)return[x*A,E*A,F*A];x=a[0]%360*y;E=a[1]%360*y;F=2<a.length?a[2]%360*y:0;return c()};rebind(a,u,"precision");return function(){f=d.apply(this,arguments);a.a=f.a&&
    e;return c()}}function Q(d){return N(function(a,e){d.b(a*y,e*y)})}function L(){var d=0,a=m/3,e=O(),c=e(d,a);c.g=function(b){return arguments.length?e(d=b[0]*m/180,a=b[1]*m/180):[d/m*180,a/m*180]};return c}
    function P(d,a){function e(a,c){var d=Math.sqrt(f-2*b*Math.sin(c))/b;return[d*Math.sin(a*=b),k-d*Math.cos(a)]}var c=Math.sin(d),b=(c+Math.sin(a))/2,f=1+c*(2*b-c),k=Math.sqrt(f)/b;e.a=function(a,c){var d=k-c,e=(f-(a*a+d*d)*b*b)/(2*b);return[Math.atan2(a,d)/b,1<e?r:-1>e?-r:Math.asin(e)]};return e}

    /* jshint camelcase:true */

    var NXprojection = TURKEYProjection();
    NXprojection.invert = NXprojection.a;

    /**
     * TURKEY map layout class
     *
     files:
     * example

     var topo = new nx.graphic.Topology({
        adaptive: true,
        nodeConfig: {
                        label: 'model.name'
                    },
        showIcon: false,
        layoutType: 'TURKEYMap',
        layoutConfig: {
            longitude: 'model.longitude',
            latitude: 'model.latitude'
        },
        data: topologyData
     })

     * @class nx.graphic.Topology.TURKEYMapLayout
     * @module nx.graphic.Topology
     */

    /**
     * Map's longitude attribute
     * @property longitude
     */
    /**
     * Map's latitude attribute
     * @property latitude
     */

    nx.define("nx.graphic.Topology.TURKEYMapLayout", {
        properties: {
            topology: {},
            projection: {}
        },
        methods: {
            process: function (graph, config, callback) {
                this._process(graph, config, callback);
            },
            _process: function (graph, config, callback) {
                var topo = this.topology();
                var projection = NXprojection;
                topo.prependLayer('turkeymap', 'nx.graphic.Topology.TURKEYMapLayer');

                var longitude = config.longitude || 'model.longitude',
                    latitude = config.latitude || 'model.latitude';


                var _longitude = longitude.split(".").pop(),
                    _latitude = latitude.split(".").pop();

                topo.graph().vertexSets().toArray().reverse().forEach(function (dictItem) {
                    var vertex = dictItem.value();
                    vertex.positionGetter(function () {
                        var p = projection([nx.path(vertex, _longitude), nx.path(vertex, _latitude)]);
                        if(p){
                            return {
                                x: p[0],
                                y: p[1]
                            };
                        }else{
                            if(console){
                                console.log("Data Error",[nx.path(vertex, _longitude), nx.path(vertex, _latitude)]);
                            }
                            return {
                                x: 0,
                                y: 0
                            };
                        }

                    });
                    vertex.positionSetter(function (position) {
                        var p = projection.invert([position.x, position.y]);
                        if(p){
                            vertex.set(_longitude, p[0]);
                            vertex.set(_latitude, p[1]);
                        }else{
                            if(console){
                                console.log("Data Error",position);
                            }
                            return {
                                x: 0,
                                y: 0
                            };
                        }
                    });

                    vertex.position(vertex.positionGetter().call(vertex));
                });


                topo.graph().eachVertex(function (vertex) {
                    vertex.positionGetter(function () {
                        var p = projection([nx.path(vertex, _longitude), nx.path(vertex, _latitude)]);
                        if(p){
                            return {
                                x: p[0],
                                y: p[1]
                            };
                        }else{
                            if(console){
                                console.log("Data Error",[nx.path(vertex, _longitude), nx.path(vertex, _latitude)]);
                            }
                            return {
                                x: 0,
                                y: 0
                            };
                        }
                    });
                    vertex.positionSetter(function (position) {
                        var p = projection.invert([position.x, position.y]);
                        if(p){
                            vertex.set(_longitude, p[0]);
                            vertex.set(_latitude, p[1]);
                        }else{
                            if(console){
                                console.log("Data Error",position);
                            }
                            return {
                                x: 0,
                                y: 0
                            };
                        }

                    });

                    vertex.position(vertex.positionGetter().call(vertex));
                });


                topo.stage().resetFitMatrix();

                this.projection(projection);

                topo.fit(function () {
                    if (callback) {
                        callback.call(topo);
                    }
                }, this, false);


            }
        }
    });


    //

    nx.define("nx.graphic.Topology.TURKEYMapLayer", nx.graphic.Topology.Layer, {
        view: {
            type: 'nx.graphic.Group',
            content: {
                name: 'map',
                type: 'nx.graphic.Group'
            }
        },
        methods: {
            draw: function () {
                var map = this.view('map');
                var ns = "http://www.w3.org/2000/svg";
                var el = new DOMParser().parseFromString('<svg  xmlns="' + ns + '">' + TURKEYMAP + '</svg>', 'text/xml');
                map.view().dom().$dom.appendChild(document.importNode(el.documentElement.firstChild, true));
            },
            updateMap: function () {
                //                var topo = this.topology();
                //                var g = this.view('map');
                //                var width = 960, height = 500;
                //                var containerWidth = topo._width - topo._padding * 2, containerHeight = topo._height - topo._padding * 2;
                //                var scale = Math.min(containerWidth / width, containerHeight / height);
                //                var translateX = (containerWidth - width * scale) / 2;
                //                var translateY = (containerHeight - height * scale) / 2;
                //                g.setTransform(translateX, translateY, scale);
            }

        }
    });


})(nx, nx.global);

(function (nx, global) {

    /**
     * Topology force layout
     * @class nx.graphic.Topology.NeXtForceLayout
     * @module nx.graphic.Topology
     */
    nx.define("nx.graphic.Topology.NeXtForceLayout", {
        properties: {
            topology: {},
            bound: {}
        },
        methods: {
            process: function (graph, config, callback) {
                var topo = this.topology();
                var selectedNodes = topo.selectedNodes().toArray();
                this._layoutTopology(graph, config, callback);
//                if (selectedNodes.length !== 0) {
//                    this._layoutNodes(graph, config, callback);
//                } else {
//                    this._layoutTopology(graph, config, callback);
//                }
            },
            _layoutNodes: function (graph, config, callback) {

            },
            _layoutTopology: function (graph, config, callback) {
                var topo = this.topology();
                var stage = topo.stage();
                var linksLayer = topo.getLayer('links');
                var linkSetLayer = topo.getLayer('linkSet');
                var transform = nx.geometry.Vector.transform;
                var data = {nodes: [], links: []};
                var nodeMap = {}, linkMap = {};

                topo.eachNode(function (node) {
                    nodeMap[node.id()] = data.nodes.length;
                    data.nodes.push({
                        id: node.id()
                    });
                });


                if (topo.supportMultipleLink()) {
                    linkSetLayer.eachLinkSet(function (linkSet) {
                        if (!linkMap[linkSet.linkKey()] && nodeMap[linkSet.sourceNodeID()] && nodeMap[linkSet.targetNodeID()]) {
                            data.links.push({
                                source: nodeMap[linkSet.sourceNodeID()],
                                target: nodeMap[linkSet.targetNodeID()]
                            });
                            linkMap[linkSet.linkKey()] = linkSet;
                        }

                    });
                } else {
                    linksLayer.eachLink(function (link) {
                        if (!linkMap[link.id()] && nodeMap[link.sourceNodeID()] && nodeMap[link.targetNodeID()]) {
                            data.links.push({
                                source: nodeMap[link.sourceNodeID()],
                                target: nodeMap[link.targetNodeID()]
                            });
                            linkMap[link.id()] = link;
                        }
                    });
                }

                topo.hideLoading();
                topo.stage().fit();
                topo.stage().show();

                //force
                var force = new nx.data.Force();
                force.nodes(data.nodes);
                force.links(data.links);
                force.start();
                while (force.alpha()) {
                    force.tick();
                }
                force.stop();

                var bound = this._getBound(data.nodes);
                var matrix = stage.calcRectZoomMatrix(topo.graph().getBound(), bound);


                topo.getLayer('links').hide();


                nx.each(data.nodes, function (n, i) {
                    var node = topo.getNode(n.id);
                    if (node) {
                        var p = transform([n.x, n.y], matrix);
                        node.translateTo(p[0], p[1]);
                    }
                }, this);

                if (this._timer) {
                    clearTimeout(this._timer);
                }

                this._timer = setTimeout(function () {
                    topo.getLayer('links').show();
                    topo.adjustLayout();
                    if (callback) {
                        callback.call(topo);
                    }
                }, 2000);
            },
            _getBound: function (nodes) {
                var lastIndex = nodes.length - 1;
                var bound = {
                    left: 0,
                    x: 0,
                    top: 0,
                    y: 0,
                    width: 0,
                    height: 0,
                    maxX: 0,
                    maxY: 0
                };


                //
                nodes.sort(function (a, b) {
                    return a.x - b.x;
                });

                bound.x = bound.left = nodes[0].x;
                bound.maxX = nodes[lastIndex].x;
                bound.width = bound.maxX - bound.x;


                //
                nodes.sort(function (a, b) {
                    return a.y - b.y;
                });

                bound.y = bound.top = nodes[0].y;
                bound.maxY = nodes[lastIndex].y;
                bound.height = bound.maxY - bound.x;
                return bound;
            }
        }
    });


    //                    console.log(JSON.stringify(data));

//                    var force = new nx.data.NextForce(100, 100);
//                    force.setData(data);
//                    if (data.nodes.length < 50) {
//                        while (true) {
//                            force.tick();
//                            if (force.maxEnergy < data.nodes.length * 0.1) {
//                                break;
//                            }
//                        }
//                    } else {
//                        var step = 0;
//                        while (++step < 900) {
//                            force.tick();
//                        }
//                    }
})(nx, nx.global);
(function(nx, global) {

    nx.define("nx.graphic.Topology.EnterpriseNetworkLayout", nx.graphic.Topology.HierarchicalLayout, {
        properties: {},
        methods: {

            process: function(graph, config, callback) {
                this.inherited(graph, config, function() {
                    this._appendGroupElements();
                    if (callback) {
                        var topo = this.topology();
                        callback.call(topo);
                    }
                }.bind(this));
            },
            _appendGroupElements: function() {
                var topo = this.topology();
                var matrix = topo.matrix();
                var layer = topo.prependLayer('ENLLayer', new Layer());
                var stage = topo.stage();
                var padding = topo.padding();
                var width = topo.width() - padding * 2;
                var height = topo.height() - padding * 2;
                var groups = this.groups();
                var order = this.order();
                var perHeight = height / (order.length);
                var y = padding;
                var items = [];
                var gap = 0;
                nx.each(groups, function(nodes, key) {
                    var label = key !== '__other__' ? key : '';
                    var firstNode = nodes[0];
                    if (firstNode) {
                        items.push({
                            left: (padding - matrix.x()) / matrix.scale(),
                            top: firstNode.y() - 30 / matrix.scale(),
                            width: width / matrix.scale(),
                            height: 65 / matrix.scale(),
                            label: label,
                            stroke: '#b2e47f'
                        });
                    }
                    y += perHeight;
                }, this);

                console.log(items);

                layer.items(items);

            }
        }
    });

    var GroupItem = nx.define(nx.graphic.Group, {
        properties: {
            scale: {},
            top: {},
            left: {},
            label: {},
            width: {},
            height: {},
            stroke: {}
        },
        view: {
            type: 'nx.graphic.Group',
            props: {
                translateY: '{#top}',
                translateX: '{#left}',
                scale: '{#scale}'
            },

            content: [{
                type: 'nx.graphic.Text',
                props: {
                    text: '{#label}',
                    fill: '{#stroke}',
                    'style': 'font-size:19px',
                    y: -5
                }
            }, {
                type: 'nx.graphic.Rect',
                props: {
                    width: '{#width}',
                    height: '{#height}',
                    stroke: '{#stroke}'
                }
            }]
        }
    });

    var Layer = nx.define(nx.graphic.Topology.Layer, {
        properties: {
            items: {}
        },
        view: {
            type: 'nx.graphic.Group',
            content: [{
                type: 'nx.graphic.Group',
                props: {
                    items: '{#items}',
                    template: {
                        type: GroupItem,
                        props: {
                            top: '{top}',
                            left: '{left}',
                            label: '{label}',
                            width: '{width}',
                            height: '{height}',
                            scale: '{scale}',
                            stroke: '{stroke}',
                            fill: 'none'
                        }
                    }
                }
            }]
        }
    });

})(nx, nx.global);
(function (nx, global) {
    /**
     * Topology tooltip policy
     * @class nx.graphic.Topology.TooltipPolicy
     */

    nx.define("nx.graphic.Topology.TooltipPolicy", {
        events: [],
        properties: {
            topology: {},
            tooltipManager: {}
        },
        methods: {
            init: function (args) {
                this.inherited(args);
                this.sets(args);
                this._tm = this.tooltipManager();
            },
            pressStage: function () {
                this._tm.closeAll();
            },
            zoomstart: function () {
                this._tm.closeAll();
            },
            clickNode: function (node) {
                this._tm.openNodeTooltip(node);
            },
            clickLinkSetNumber: function (linkSet) {
                this._tm.openLinkSetTooltip(linkSet);
            },
            dragStageStart: function () {
                this._tm.closeAll();
            },
            clickLink: function (link) {
                this._tm.openLinkTooltip(link);
            },
            resizeStage: function () {
                this._tm.closeAll();
            },
            fitStage: function () {
                this._tm.closeAll();
            },
            deleteNode: function () {
                this._tm.closeAll();
            },
            deleteNodeSet: function () {
                this._tm.closeAll();
            }
        }
    });

})(nx, nx.global);
(function (nx, global) {
    /**
     * Basic tooltip class for topology
     * @class nx.graphic.Topology.Tooltip
     * @extend nx.ui.Popover
     */
    nx.define("nx.graphic.Topology.Tooltip", nx.ui.Popover, {
        properties: {
            /**
             * Lazy closing a tooltip
             * @type Boolean
             * @property lazyClose
             */
            lazyClose: {
                value: false
            },
            /**
             * Pin a tooltip
             * @type Boolean
             * @property pin
             */
            pin: {
                value: false
            },
            /**
             * Is tooltip response to resize event
             * @type Boolean
             * @property listenWindow
             */
            listenWindow: {
                value: true
            }
        }
    });
})(nx, nx.global);
(function (nx, global) {
    /**
     * Node tooltip content class
     * @class nx.graphic.NodeTooltipContent
     * @extend nx.ui.Component
     * @module nx.graphic.Topology
     */

    nx.define('nx.graphic.Topology.NodeTooltipContent', nx.ui.Component, {
        properties: {
            node: {
                set: function (value) {
                    var model = value.model();
                    this.view('list').set('items', new nx.data.Dictionary(model.getData()));
                    this.title(value.label());
                }
            },
            topology: {},
            title: {}
        },
        view: {
            content: [
                {
                    name: 'header',
                    props: {
                        'class': 'n-topology-tooltip-header'
                    },
                    content: [
                        {
                            tag: 'span',
                            props: {
                                'class': 'n-topology-tooltip-header-text'
                            },
                            name: 'title',
                            content: '{#title}'
                        }
                    ]
                },
                {
                    name: 'content',
                    props: {
                        'class': 'n-topology-tooltip-content n-list'
                    },
                    content: [
                        {
                            name: 'list',
                            tag: 'ul',
                            props: {
                                'class': 'n-list-wrap',
                                template: {
                                    tag: 'li',
                                    props: {
                                        'class': 'n-list-item-i',
                                        role: 'listitem'
                                    },
                                    content: [
                                        {
                                            tag: 'label',
                                            content: '{key}: '
                                        },
                                        {
                                            tag: 'span',
                                            content: '{value}'
                                        }
                                    ]

                                }
                            }
                        }
                    ]
                }
            ]
        },
        methods: {
            init: function (args) {
                this.inherited(args);
                this.sets(args);
            }
        }
    });
})(nx, nx.global);
(function (nx, global) {
    /**
     * @class nx.graphic.LinkTooltipContent
     * @extend nx.ui.Component
     * @module nx.graphic.Topology
     */
    nx.define("nx.graphic.Topology.LinkTooltipContent", nx.ui.Component, {
        properties: {
            link: {
                set: function (value) {
                    var model = value.model();
                    this.view('list').set('items', new nx.data.Dictionary(model.getData()));
                }
            },
            topology: {},
            tooltipmanager: {}
        },
        view: {
            content: {
                props: {
                    'class': 'n-topology-tooltip-content n-list'
                },
                content: [
                    {
                        name: 'list',
                        tag: 'ul',
                        props: {
                            'class': 'n-list-wrap',
                            template: {
                                tag: 'li',
                                props: {
                                    'class': 'n-list-item-i',
                                    role: 'listitem'
                                },
                                content: [
                                    {
                                        tag: 'label',
                                        content: '{key}: '
                                    },
                                    {
                                        tag: 'span',
                                        content: '{value}'
                                    }
                                ]

                            }
                        }
                    }
                ]
            }
        }
    });


})(nx, nx.global);
(function (nx, global) {
    /**
     * @class nx.graphic.LinkSetTooltipContent
     * @extend nx.ui.Component
     * @module nx.graphic.Topology
     */
    nx.define("nx.graphic.Topology.LinkSetTooltipContent", nx.ui.Component, {
        properties: {
            linkSet: {
                set: function (value) {
                    var items = [];
                    nx.each(value.model().edges(), function (edge) {
                        items.push({
                            item: "Source:" + edge.sourceID() + " Target :" + edge.targetID(),
                            edge: edge});
                    });
                    this.view("list").items(items);
                }
            },
            topology: {}
        },
        view: [
            {
                props: {
                    style: {
                        'maxHeight': '247px',
                        'overflow': 'auto',
                        'overflow-x': 'hidden'
                    }
                },
                content: {
                    name: 'list',
                    props: {
                        'class': 'list-group',
                        style: 'width:200px',
                        template: {
                            tag: 'a',
                            props: {
                                'class': 'list-group-item'
                            },
                            content: '{item}',
                            events: {
                                'click': '{#_click}'
                            }
                        }
                    }
                }
            }
        ],
        methods: {
            _click: function (sender, events) {
                var link = sender.model().edge;
//                this.topology().fire('clickLink', link);
            }
        }
    });


})(nx, nx.global);
(function (nx, global) {


    /**
     * Tooltip manager for topology
     * @class nx.graphic.Topology.TooltipManager
     * @extend nx.data.ObservableObject
     * @module nx.graphic.Topology
     */
    nx.define("nx.graphic.Topology.TooltipManager", {
        events: ['openNodeToolTip', 'closeNodeToolTip', 'openLinkToolTip', 'closeLinkToolTip', 'openLinkSetTooltip', 'closeLinkSetToolTip'],
        properties: {
            /**
             * Get topology
             * @property  topology
             */
            topology: {
                value: null
            },
            /**
             * All tooltip's instance array
             */
            tooltips: {
                value: function () {
                    return new nx.data.ObservableDictionary();
                }
            },
            /**
             * Get node's tooltip
             * @property nodeTooltip
             */
            nodeTooltip: {},
            /**
             * Get link's tooltip
             * @property linkTooltip
             */
            linkTooltip: {},
            /**
             * Get linkSet tooltip
             * @method linkSetTooltip
             */
            linkSetTooltip: {},
            nodeSetTooltip: {},

            /**
             * node tooltip class
             * @property nodeTooltipClass
             */
            nodeTooltipClass: {
                value: 'nx.graphic.Topology.Tooltip'
            },

            /**
             * link tooltip class
             * @property linkTooltipClass
             */
            linkTooltipClass: {
                value: 'nx.graphic.Topology.Tooltip'
            },
            /**
             * linkSet tooltip class
             * @property linkSetTooltipClass
             */
            linkSetTooltipClass: {
                value: 'nx.graphic.Topology.Tooltip'
            },
            nodeSetTooltipClass: {
                value: 'nx.graphic.Topology.Tooltip'
            },
            /**
             * @property nodeTooltipContentClass
             */
            nodeTooltipContentClass: {
                value: 'nx.graphic.Topology.NodeTooltipContent'
            },
            /**
             * @property linkTooltipContentClass
             */
            linkTooltipContentClass: {
                value: 'nx.graphic.Topology.LinkTooltipContent'
            },
            /**
             * @property linkSetTooltipContentClass
             */
            linkSetTooltipContentClass: {
                value: 'nx.graphic.Topology.LinkSetTooltipContent'
            },

            nodeSetTooltipContentClass: {
                value: 'nx.graphic.Topology.NodeSetTooltipContent'
            },
            /**
             * Show/hide node's tooltip
             * @type Boolean
             * @property showNodeTooltip
             */
            showNodeTooltip: {
                value: true
            },
            /**
             * Show/hide link's tooltip
             * @type Boolean
             * @property showLinkTooltip
             */
            showLinkTooltip: {
                value: true
            },
            /**
             * Show/hide linkSet's tooltip
             * @type Boolean
             * @property showLinkSetTooltip
             */
            showLinkSetTooltip: {
                value: true
            },
            showNodeSetTooltip: {
                value: true
            },
            /**
             * Tooltip policy class
             * @property tooltipPolicyClass
             */
            tooltipPolicyClass: {
                get: function () {
                    return this._tooltipPolicyClass !== undefined ? this._tooltipPolicyClass : 'nx.graphic.Topology.TooltipPolicy';
                },
                set: function (value) {
                    if (this._tooltipPolicyClass !== value) {
                        this._tooltipPolicyClass = value;
                        var topology = this.topology();
                        var tooltipPolicyClass = nx.path(global, this.tooltipPolicyClass());
                        if (tooltipPolicyClass) {
                            var tooltipPolicy = new tooltipPolicyClass({
                                topology: topology,
                                tooltipManager: this
                            });
                            this.tooltipPolicy(tooltipPolicy);
                        }
                        return true;
                    } else {
                        return false;
                    }
                }
            },
            tooltipPolicy: {
                value: function () {
                    var topology = this.topology();
                    return new nx.graphic.Topology.TooltipPolicy({
                        topology: topology,
                        tooltipManager: this
                    });
                }
            },
            /**
             * Set/get tooltip's activate statues
             * @property activated
             */
            activated: {
                get: function () {
                    return this._activated !== undefined ? this._activated : true;
                },
                set: function (value) {
                    if (this._activated !== value) {
                        this._activated = value;
                        return true;
                    } else {
                        return false;
                    }
                }
            }
        },
        methods: {

            init: function (args) {

                this.inherited(args);

                this.sets(args);

                this.registerTooltip('nodeTooltip', this.nodeTooltipClass());
                this.registerTooltip('linkTooltip', this.linkTooltipClass());
                this.registerTooltip('linkSetTooltip', this.linkSetTooltipClass());
                this.registerTooltip('nodeSetTooltip', this.nodeSetTooltipClass());


                //build in tooltips


                var nodeTooltip = this.getTooltip('nodeTooltip');
                nodeTooltip.on("close", function () {
                    this.fire("closeNodeToolTip");
                }, this);
                nodeTooltip.view().dom().addClass('n-topology-tooltip');
                this.nodeTooltip(nodeTooltip);


                var linkTooltip = this.getTooltip('linkTooltip');
                linkTooltip.on("close", function () {
                    this.fire("closeLinkToolTip", linkTooltip);
                }, this);
                linkTooltip.view().dom().addClass('n-topology-tooltip');
                this.linkTooltip(linkTooltip);


                var linkSetTooltip = this.getTooltip('linkSetTooltip');
                linkSetTooltip.on("close", function () {
                    this.fire("closeLinkSetToolTip", linkSetTooltip);
                }, this);
                linkSetTooltip.view().dom().addClass('n-topology-tooltip');
                this.linkSetTooltip(linkSetTooltip);


                var nodeSetTooltip = this.getTooltip('nodeSetTooltip');
                nodeSetTooltip.on("close", function () {
                    this.fire("closeNodeSetToolTip");
                }, this);
                nodeSetTooltip.view().dom().addClass('n-topology-tooltip');
                this.nodeSetTooltip(nodeSetTooltip);


                var topology = this.topology();
                var tooltipPolicyClass = nx.path(global, this.tooltipPolicyClass());
                if (tooltipPolicyClass) {
                    var tooltipPolicy = new tooltipPolicyClass({
                        topology: topology,
                        tooltipManager: this
                    });
                    this.tooltipPolicy(tooltipPolicy);
                }
            },
            /**
             * Register tooltip class
             * @param name {String}
             * @param tooltipClass {nx.ui.Component}
             */
            registerTooltip: function (name, tooltipClass) {
                var tooltips = this.tooltips();
                var topology = this.topology();
                var clz = tooltipClass;
                if (nx.is(clz, 'String')) {
                    clz = nx.path(global, tooltipClass);
                }
                var instance = new clz();
                instance.sets({
                    topology: topology,
                    tooltipManager: this,
                    model: topology.graph(),
                    'data-tooltip-type': name
                });
                tooltips.setItem(name, instance);
            },
            /**
             * Get tooltip instance by name
             * @param name {String}
             * @returns {nx.ui.Component}
             */
            getTooltip: function (name) {
                var tooltips = this.tooltips();
                return tooltips.getItem(name);
            },

            executeAction: function (action, data) {
                if (this.activated()) {
                    var tooltipPolicy = this.tooltipPolicy();
                    if (tooltipPolicy && tooltipPolicy[action]) {
                        tooltipPolicy[action].call(tooltipPolicy, data);
                    }
                }
            },
            /**
             * Open a node's tooltip
             * @param node {nx.graphic.Topology.Node}
             * @param position {Object}
             * @method openNodeTooltip
             */
            openNodeTooltip: function (node, position) {
                var topo = this.topology();
                var nodeTooltip = this.nodeTooltip();
                var content;

                nodeTooltip.close(true);

                if (this.showNodeTooltip() === false) {
                    return;
                }


                var pos = position || topo.getAbsolutePosition(node.position());

                var contentClass = nx.path(global, this.nodeTooltipContentClass());
                if (contentClass) {
                    content = new contentClass();
                    content.sets({
                        topology: topo,
                        node: node,
                        model: topo.model()
                    });
                }

                if (content) {
                    nodeTooltip.content(null);
                    content.attach(nodeTooltip);
                }

                var size = node.getBound(true);

                nodeTooltip.open({
                    target: pos,
                    offset: Math.max(size.height, size.width) / 2
                });

                this.fire("openNodeToolTip", node);
            },
            /**
             * Open a nodeSet's tooltip
             * @param nodeSet {nx.graphic.Topology.NodeSet}
             * @param position {Object}
             * @method openNodeSetTooltip
             */
            openNodeSetTooltip: function (nodeSet, position) {
                var topo = this.topology();
                var nodeSetTooltip = this.nodeSetTooltip();
                var content;

                nodeSetTooltip.close(true);

                if (this.showNodeSetTooltip() === false) {
                    return;
                }


                var pos = position || topo.getAbsolutePosition(nodeSet.position());

                var contentClass = nx.path(global, this.nodeSetTooltipContentClass());
                if (contentClass) {
                    content = new contentClass();
                    content.sets({
                        topology: topo,
                        nodeSet: nodeSet,
                        model: topo.model()
                    });
                }

                if (content) {
                    nodeSetTooltip.content(null);
                    content.attach(nodeSetTooltip);
                }

                var size = nodeSet.getBound(true);

                nodeSetTooltip.open({
                    target: pos,
                    offset: Math.max(size.height, size.width) / 2
                });

                this.fire("openNodeSetToolTip", nodeSet);
            },
            /**
             * open a link's tooltip
             * @param link
             * @param position
             * @method openLinkTooltip
             */
            openLinkTooltip: function (link, position) {
                var topo = this.topology();
                var linkTooltip = this.linkTooltip();
                var content;

                linkTooltip.close(true);

                if (this.showLinkTooltip() === false) {
                    return;
                }

                var pos = position || topo.getAbsolutePosition(link.centerPoint());

                var contentClass = nx.path(global, this.linkTooltipContentClass());
                if (contentClass) {
                    content = new contentClass();
                    content.sets({
                        topology: topo,
                        link: link,
                        model: topo.model()
                    });
                }

                if (content) {
                    linkTooltip.content(null);
                    content.attach(linkTooltip);
                }

                linkTooltip.open({
                    target: pos,
                    offset: 4
                });

                this.fire("openLinkToolTip", link);
            },
            /**
             * Open linkSet tooltip
             * @method openLinkSetTooltip
             * @param linkSet
             * @param position
             */
            openLinkSetTooltip: function (linkSet, position) {
                var topo = this.topology();
                var linkSetTooltip = this.linkSetTooltip();
                var content;

                linkSetTooltip.close(true);

                if (this.showLinkSetTooltip() === false) {
                    return;
                }

                var pos = position || topo.getAbsolutePosition(linkSet.centerPoint());
                var contentClass = nx.path(global, this.linkSetTooltipContentClass());
                if (contentClass) {
                    content = new contentClass();
                    content.sets({
                        topology: topo,
                        linkSet: linkSet,
                        model: topo.model()
                    });
                }

                if (content) {
                    linkSetTooltip.content(null);
                    content.attach(linkSetTooltip);
                }

                linkSetTooltip.open({
                    target: pos,
                    offsetX: 0,
                    offsetY: 8
                });

                this.fire("openLinkSetToolTip", linkSet);
            },
            /**
             * Close all tooltip
             * @method closeAll
             */
            closeAll: function () {
                this.tooltips().each(function (obj, name) {
                    obj.value().close(true);
                }, this);
            },
            dispose: function () {
                this.tooltips().each(function (obj, name) {
                    obj.value().close(true);
                    obj.value().dispose();
                }, this);
                this.inherited();
            }
        }
    });


})(nx, nx.global);
(function (nx, global) {

    /**
     * Basic scene class
     * @class nx.graphic.Topology.Scene
     * @extend nx.data.ObservableObject
     */
    nx.define("nx.graphic.Topology.Scene", nx.data.ObservableObject, {
        properties: {
            topology: {
                value: null
            }
        },
        methods: {
            init: function (args) {
                this.sets(args);
            },
            /**
             * Factory function ,entry of a scene
             * @method activate
             */
            activate: function () {

            },
            /**
             * Deactivate a scene
             * @method deactivate
             */
            deactivate: function () {

            }
        }
    });

})(nx, nx.global);
(function (nx, global) {
    /**
     * Default Scene for topology
     * @class nx.graphic.Topology.DefaultScene
     * @extend nx.graphic.Topology.Scene
     */

    nx.define('nx.graphic.Topology.DefaultScene', nx.graphic.Topology.Scene, {
        events: [],
        methods: {
            /**
             * active scene
             * @method activate
             */

            activate: function () {
                this._topo = this.topology();
                this._nodesLayer = this._topo.getLayer('nodes');
                this._nodeSetLayer = this._topo.getLayer('nodeSet');
                this._linksLayer = this._topo.getLayer('links');
                this._linkSetLayer = this._topo.getLayer('linkSet');
                this._groupsLayer = this._topo.getLayer('groups');
                this._tooltipManager = this._topo.tooltipManager();
                this._nodeDragging = false;
                this._sceneTimer = null;
                this._interval = 600;
            },
            deactivate: function () {
                this._tooltipManager.closeAll();
            },
            dispatch: function (eventName, sender, data) {
                this._tooltipManager.executeAction(eventName, data);
            },
            pressStage: function (sender, event) {
            },
            clickStage: function (sender, event) {
                if (event.target == this._topo.stage().view().dom().$dom && !event.shiftKey) {
                    this._topo.selectedNodes().clear();
                }
            },
            dragStageStart: function (sender, event) {
                var nodes = this._nodesLayer.nodes().length;
                if (nodes > 300) {
                    this._linksLayer.hide();
                }
                this._recover();
                this._blockEvent(true);
                nx.dom.Document.html().addClass('n-moveCursor');
            },
            dragStage: function (sender, event) {
                var stage = this._topo.stage();
                stage.applyTranslate(event.drag.delta[0], event.drag.delta[1]);
            },
            dragStageEnd: function (sender, event) {
                this._linksLayer.show();
                this._blockEvent(false);
                nx.dom.Document.html().removeClass('n-moveCursor');
            },
            projectionChange: function () {

            },

            zoomstart: function () {
                var nodes = this._nodesLayer.nodes().length;
                if (nodes > 300) {
                    this._linksLayer.setStyle('display', 'none');
                }
                this._recover();
                //this._topo.adjustLayout();
            },
            zooming: function () {

            },
            zoomend: function () {
                this._linksLayer.setStyle('display', 'block');
                this._topo.adjustLayout();
            },

            beforeSetData: function () {

            },

            afterSetData: function () {

            },


            insertData: function () {

            },


            ready: function () {

            },
            enterNode: function (sender, node) {
                clearTimeout(this._sceneTimer);
                if (!this._nodeDragging) {
                    this._sceneTimer = setTimeout(function () {
                        if (!this._nodeDragging) {
                            this._topo.activeRelatedNode(node);
                        }
                    }.bind(this), this._interval);
                    this._recover();
                }
                nx.dom.Document.body().addClass('n-dragCursor');
            },
            leaveNode: function (sender, node) {
                clearTimeout(this._sceneTimer);
                if (!this._nodeDragging) {
                    this._recover();
                }
                nx.dom.Document.body().removeClass('n-dragCursor');
            },

            hideNode: function (sender, node) {

            },
            dragNodeStart: function (sender, node) {
                this._nodeDragging = true;
                this._blockEvent(true);
                nx.dom.Document.html().addClass('n-dragCursor');
                setTimeout(this._recover.bind(this), 0);
            },
            dragNode: function (sender, node) {
                this._topo._moveSelectionNodes(event, node);
            },
            dragNodeEnd: function () {
                this._nodeDragging = false;
                this._blockEvent(false);
                this._topo.stage().resetFitMatrix();
                nx.dom.Document.html().removeClass('n-dragCursor');
            },

            pressNode: function (sender, node) {
            },
            clickNode: function (sender, node) {
                if (!this._nodeDragging) {
                    if (!event.shiftKey) {
                        this._topo.selectedNodes().clear();
                    }
                    node.selected(!node.selected());
                }
            },
            selectNode: function (sender, node) {
                var selectedNodes = this._topo.selectedNodes();
                if (node.selected()) {
                    if (selectedNodes.indexOf(node) == -1) {
                        this._topo.selectedNodes().add(node);
                    }
                } else {
                    if (selectedNodes.indexOf(node) !== -1) {
                        this._topo.selectedNodes().remove(node);
                    }
                }
            },

            updateNodeCoordinate: function () {

            },
            clickLinkSet: function(){
                this._topo.selectedNodes().clear();
            },
            clickLink: function(){
                this._topo.selectedNodes().clear();
            },
            enterLink: function (sender, events) {
            },

            pressNodeSet: function (sender, nodeSet) {
            },
            clickNodeSet: function (sender, nodeSet) {
                clearTimeout(this._sceneTimer);
                this._recover();
                if (event.shiftKey) {
                    nodeSet.selected(!nodeSet.selected());
                } else {
                    nodeSet.collapsed(false);
                }
            },

            enterNodeSet: function (sender, nodeSet) {
                clearTimeout(this._sceneTimer);
                if (!this._nodeDragging) {
                    this._sceneTimer = setTimeout(function () {
                        this._topo.activeRelatedNode(nodeSet);
                    }.bind(this), this._interval);
                }
            },
            leaveNodeSet: function (sender, nodeSet) {
                clearTimeout(this._sceneTimer);
                if (!this._nodeDragging) {
                    this._recover();
                }
            },
            beforeExpandNodeSet: function (sender, nodeSet) {

                this._blockEvent(true);
                //update parent group
                var parentNodeSet = nodeSet.parentNodeSet();
                while (parentNodeSet && parentNodeSet.group) {
                    var group = parentNodeSet.group;
                    group.clear();
                    group.nodes(nx.util.values(parentNodeSet.nodes()));
                    group.draw();
                    parentNodeSet = parentNodeSet.parentNodeSet();
                }
                this._recover();
            },
            expandNodeSet: function (sender, nodeSet) {
                clearTimeout(this._sceneTimer);
                this._recover();
                this._topo.stage().resetFitMatrix();
                this._topo.fit(function () {
                    nodeSet.group = this._groupsLayer.addGroup({
                        shapeType: 'nodeSetPolygon',
                        nodeSet: nodeSet,
                        nodes: nx.util.values(nodeSet.nodes()),
                        label: nodeSet.label(),
                        color: '#9BB150',
                        id: nodeSet.id()
                    });
                    var parentNodeSet = nodeSet.parentNodeSet();
                    while (parentNodeSet && parentNodeSet.group) {
                        parentNodeSet.group.draw();
                        parentNodeSet = parentNodeSet.parentNodeSet();
                    }

                    this._blockEvent(false);
                    this._topo.adjustLayout();

                }, this, nodeSet.animation() ? 1.5 : false);

                //
            },
            beforeCollapseNodeSet: function (sender, nodeSet) {
                this._blockEvent(true);
                if (nodeSet.group) {
                    this._groupsLayer.removeGroup(nodeSet.id());
                    delete nodeSet.group;
                }

                nx.each(nodeSet.nodeSets(), function (ns, id) {
                    if (ns.group) {
                        this._groupsLayer.removeGroup(ns.id());
                        delete ns.group;
                    }
                }, this);

                this._topo.fadeIn();
                this._recover();
            },
            collapseNodeSet: function (sender, nodeSet) {
                var parentNodeSet = nodeSet.parentNodeSet();
                while (parentNodeSet && parentNodeSet.group) {
                    var group = parentNodeSet.group;
                    group.clear();
                    group.nodes(nx.util.values(parentNodeSet.nodes()));
                    parentNodeSet = parentNodeSet.parentNodeSet();
                }

                this._topo.stage().resetFitMatrix();
                this._topo.fit(function () {
                    this._blockEvent(false);
                }, this, nodeSet.animation() ? 1.5 : false);
            },
            removeNodeSet: function (sender, nodeSet) {
                if (nodeSet.group) {
                    this._groupsLayer.removeGroup(nodeSet.id());
                    delete nodeSet.group;
                }
                this._topo.stage().resetFitMatrix();
            },
            updateNodeSet: function (sender, nodeSet) {
                if (nodeSet.group) {
                    nodeSet.group.clear();
                    nodeSet.group.nodes(nx.util.values(nodeSet.nodes()));
                }

            },
            dragNodeSetStart: function (sender, nodeSet) {
                this._nodeDragging = true;
                this._recover();
                this._blockEvent(true);
                nx.dom.Document.html().addClass('n-dragCursor');
            },
            dragNodeSet: function (sender, nodeSet) {
                this._topo._moveSelectionNodes(event, nodeSet);
            },
            dragNodeSetEnd: function () {
                this._nodeDragging = false;
                this._blockEvent(false);
                nx.dom.Document.html().removeClass('n-dragCursor');
                this._topo.stage().resetFitMatrix();
            },
            selectNodeSet: function (sender, nodeSet) {
                var selectedNodes = this._topo.selectedNodes();
                if (nodeSet.selected()) {
                    if (selectedNodes.indexOf(nodeSet) == -1) {
                        this._topo.selectedNodes().add(nodeSet);
                    }
                } else {
                    if (selectedNodes.indexOf(nodeSet) !== -1) {
                        this._topo.selectedNodes().remove(nodeSet);
                    }
                }
            },

            addNode: function () {
                this._topo.stage().resetFitMatrix();
                this._topo.adjustLayout();
            },
            addNodeSet: function () {
                this._topo.stage().resetFitMatrix();
//                this._topo.fit();
                this._topo.adjustLayout();

            },
            removeNode: function () {
                this._topo.adjustLayout();
            },

            dragGroupStart: function (sender, group) {
            },

            dragGroup: function (sender, group) {
                if (event) {
                    var stageScale = this._topo.stageScale();
                    group.updateNodesPosition(event.drag.delta[0], event.drag.delta[1]);
                    group.move(event.drag.delta[0] * stageScale, event.drag.delta[1] * stageScale);
                }
            },

            dragGroupEnd: function (sender, group) {
            },
            clickGroupLabel: function (sender, group) {

            },
            collapseNodeSetGroup: function (sender, group) {
                var nodeSet = group.nodeSet();
                if (nodeSet) {
                    nodeSet.collapsed(true);
                }
            },

            enterGroup: function (sender, group) {
                if (nx.is(group, 'nx.graphic.Topology.NodeSetPolygonGroup')) {
                    var ns = group.nodeSet();
                    this._topo.activeNodes(nx.util.values(ns.nodes()));
                    this._topo.fadeOut();
                    this._groupsLayer.fadeOut();

                    group.view().dom().addClass('fade-active-item');
                }
            },
            leaveGroup: function (sender, group) {
                group.view().dom().removeClass('fade-active-item');
                this._topo.fadeIn();
                this._topo.recoverActive();
            },


            right: function (sender, events) {
                this._topo.move(30, null, 0.5);
            },
            left: function (sender, events) {
                this._topo.move(-30, null, 0.5);
            },
            up: function () {
                this._topo.move(null, -30, 0.5);
            },
            down: function () {
                this._topo.move(null, 30, 0.5);
            },
            pressR: function () {
                if (nx.DEBUG) {
                    this._topo.activateLayout('force');
                }
            },
            pressA: function () {
                if (nx.DEBUG) {
                    var nodes = this._topo.selectedNodes().toArray();
                    this._topo.selectedNodes().clear();
                    this._topo.aggregationNodes(nodes);
                }
            },
            pressS: function () {
                if (nx.DEBUG) {
                    this._topo.activateScene('selection');
                }
            },
            pressM: function () {
                if (nx.DEBUG) {
                    this._topo.activateScene('default');
                }
            },
            pressF: function () {
                if (nx.DEBUG) {
                    this._topo.fit();
                }
            },
            topologyGenerated: function () {
                this._topo.adjustLayout();
            },
            _recover: function () {
                this._topo.fadeIn();
                this._topo.recoverActive();
            },
            _blockEvent: function (value) {
                this._topo.blockEvent(value);
            }
        }
    });
})(nx, nx.global);

(function (nx, global) {


    /**
     * Selection scene
     * @class nx.graphic.Topology.SelectionScene
     * @extend nx.graphic.Topology.Scene
     */
    nx.define("nx.graphic.Topology.SelectionScene", nx.graphic.Topology.DefaultScene, {
        methods: {
            /**
             * Entry
             * @method activate
             */

            activate: function (args) {
                this.appendRect();
                this.inherited(args);
                this.topology().dom().addClass('n-crosshairCursor');

            },
            deactivate: function () {
                this.inherited();
                this.rect.dispose();
                delete this.rect;
                this.topology().dom().removeClass('n-crosshairCursor');
                nx.dom.Document.html().removeClass('n-crosshairCursor');
            },
            _dispatch: function (eventName, sender, data) {
                if (this[eventName]) {
                    this[eventName].call(this, sender, data);
                }
            },
            appendRect: function () {
                var topo = this.topology();
                if (!this.rect) {
                    this.rect = new nx.graphic.Rect({
                        'class': 'selectionRect'
                    });
                    this.rect.attach(topo.stage().staticLayer());
                }
                this.rect.sets({
                    x: 0,
                    y: 0,
                    width: 0,
                    height: 0
                });
            },
            dragStageStart: function (sender, event) {
                this.rect.set('visible', true);
                this._blockEvent(true);
                nx.dom.Document.html().addClass('n-crosshairCursor');
            },
            dragStage: function (sender, event) {
                var rect = this.rect;
                var origin = event.drag.origin;
                var size = event.drag.offset;
                // check if width negative
                if (size[0] < 0) {
                    rect.set('x', origin[0] + size[0]);
                    rect.set('width', -size[0]);
                } else {
                    rect.set('x', origin[0]);
                    rect.set('width', size[0]);
                }
                if (size[1] < 0) {
                    rect.set('y', origin[1] + size[1]);
                    rect.set('height', -size[1]);
                } else {
                    rect.set('y', origin[1]);
                    rect.set('height', size[1]);
                }
            },
            dragStageEnd: function (sender, event) {
                this._stageTranslate = null;
                this.rect.set('visible', false);
                this._blockEvent(false);
                nx.dom.Document.html().removeClass('n-crosshairCursor');
            },
            _getRectBound: function () {
                var rectbound = this.rect.getBoundingClientRect();
                var topoBound = this.topology().getBound();
                return {
                    top: rectbound.top - topoBound.top,
                    left: rectbound.left - topoBound.left,
                    width: rectbound.width,
                    height: rectbound.height,
                    bottom: rectbound.bottom - topoBound.top,
                    right: rectbound.right - topoBound.left
                };
            },
            esc: {

            },
            clickNodeSet: function (sender, nodeSet) {},
            dragNode: function () {

            },
            dragNodeSet: function () {

            },
            _blockEvent: function (value) {
                if (value) {
                    this.topology().scalable(false);
                    nx.dom.Document.body().addClass('n-userselect n-blockEvent');
                } else {
                    this.topology().scalable(true);
                    nx.dom.Document.body().removeClass('n-userselect');
                    nx.dom.Document.body().removeClass('n-blockEvent');
                }
            }
        }
    });


})(nx, nx.global);

(function(nx, global) {

    /**
     * Selection node scene
     * @class nx.graphic.Topology.SelectionNodeScene
     * @extend nx.graphic.Topology.SelectionScene
     */

    nx.define('nx.graphic.Topology.SelectionNodeScene', nx.graphic.Topology.SelectionScene, {
        properties: {
            /**
             * Get all selected nodes
             * @property selectedNodes
             */
            selectedNodes: {
                get: function() {
                    return this.topology().selectedNodes();
                }
            }
        },
        methods: {

            activate: function() {
                this.inherited();
                var tooltipManager = this._tooltipManager;
                tooltipManager.activated(false);
            },
            deactivate: function() {
                this.inherited();
                var tooltipManager = this._tooltipManager;
                tooltipManager.activated(true);
            },

            pressStage: function(sender, event) {
                var selectedNodes = this.selectedNodes();
                var multi = this._multi = event.metaKey || event.ctrlKey || event.shiftKey;
                if (!multi) {
                    selectedNodes.clear();
                }

                event.captureDrag(sender.stage().view(), this.topology().stage());
            },
            enterNode: function() {

            },
            clickNode: function(sender, node) {},
            dragStageStart: function(sender, event) {
                this.inherited(sender, event);
                var selectedNodes = this.selectedNodes();
                var multi = this._multi = event.metaKey || event.ctrlKey || event.shiftKey;
                if (!multi) {
                    selectedNodes.clear();
                }
                this._prevSelectedNodes = this.selectedNodes().toArray().slice();
            },
            dragStage: function(sender, event) {
                this.inherited(sender, event);
                this.selectNodeByRect(this.rect.getBound());
            },
            selectNode: function(sender, node) {
                if (node.selected()) {
                    this._topo.selectedNodes().add(node);
                } else {
                    this._topo.selectedNodes().remove(node);
                }
            },
            selectNodeSet: function(sender, nodeset) {
                if (nodeset.selected()) {
                    this._topo.selectedNodes().add(nodeset);
                } else {
                    this._topo.selectedNodes().remove(nodeset);
                }
            },


            pressNode: function(sender, node) {
                if (node.enable()) {
                    var selectedNodes = this.selectedNodes();
                    this._multi = event.metaKey || event.ctrlKey || event.shiftKey;
                    if (!this._multi) {
                        selectedNodes.clear();
                    }
                    node.selected(!node.selected());
                }
            },
            pressNodeSet: function(sender, nodeSet) {
                if (nodeSet.enable()) {
                    var selectedNodes = this.selectedNodes();
                    this._multi = event.metaKey || event.ctrlKey || event.shiftKey;
                    if (!this._multi) {
                        selectedNodes.clear();
                    }
                    nodeSet.selected(!nodeSet.selected());
                }
            },
            selectNodeByRect: function(bound) {
                this.topology().eachNode(function(node) {
                    if (node.model().type() == 'vertexSet' && !node.collapsed()) {
                        return;
                    }
                    var nodeBound = node.getBound();
                    // FIXME for firefox bug with g.getBoundingClientRect
                    if (nx.util.isFirefox()) {
                        var position = [node.x(), node.y()];
                        var svgbound = this.topology().stage().dom().getBound();
                        var matrix = this.topology().stage().matrix();
                        position = nx.geometry.Vector.transform(position, matrix);
                        nodeBound.x = nodeBound.left = position[0] + svgbound.left - nodeBound.width / 2;
                        nodeBound.right = nodeBound.left + nodeBound.width;
                        nodeBound.y = nodeBound.top = position[1] + svgbound.top - nodeBound.height / 2;
                        nodeBound.bottom = nodeBound.top + nodeBound.height;
                    }
                    var nodeSelected = node.selected();
                    if (this._hittest(bound, nodeBound)) {
                        if (!nodeSelected) {
                            node.selected(true);
                        }
                    } else {
                        if (this._multi) {
                            if (this._prevSelectedNodes.indexOf(node) == -1) {
                                if (nodeSelected) {
                                    node.selected(false);
                                }
                            }
                        } else {
                            if (nodeSelected) {
                                node.selected(false);
                            }
                        }
                    }
                }, this);
            },
            collapseNodeSetGroup: function(sender, group) {

            },
            enterGroup: function(sender, group) {

            },
            _hittest: function(sourceBound, targetBound) {
                var t = targetBound.top >= sourceBound.top && targetBound.top <= ((sourceBound.top + sourceBound.height)),
                    l = targetBound.left >= sourceBound.left && targetBound.left <= (sourceBound.left + sourceBound.width),
                    b = (sourceBound.top + sourceBound.height) >= (targetBound.top + targetBound.height) && (targetBound.top + targetBound.height) >= sourceBound.top,
                    r = (sourceBound.left + sourceBound.width) >= (targetBound.left + targetBound.width) && (targetBound.left + targetBound.width) >= sourceBound.left,
                    hm = sourceBound.top >= targetBound.top && (sourceBound.top + sourceBound.height) <= (targetBound.top + targetBound.height),
                    vm = sourceBound.left >= targetBound.left && (sourceBound.left + sourceBound.width) <= (targetBound.left + targetBound.width);

                return (t && l) || (b && r) || (t && r) || (b && l) || (t && vm) || (b && vm) || (l && hm) || (r && hm);
            }
        }
    });

})(nx, nx.global);
(function (nx, global) {

    /**
     * Zoom by selection scene
     * @class nx.graphic.Topology.ZoomBySelection
     * @extend nx.graphic.Topology.SelectionScene
     */
    nx.define("nx.graphic.Topology.ZoomBySelection", nx.graphic.Topology.SelectionScene, {
        events: ['finish'],
        properties: {
        },
        methods: {
            activate: function (args) {
                this.inherited(args);
                nx.dom.Document.html().addClass('n-zoomInCursor');
            },
            deactivate: function () {
                this.inherited();
                nx.dom.Document.html().removeClass('n-zoomInCursor');
            },
            dragStageEnd: function (sender, event) {
                var bound = this.rect.getBound();
                this.inherited(sender, event);

                this.fire('finish', bound);
            },
            esc: function () {
                this.fire('finish');
            }
        }
    });


})(nx, nx.global);
(function (nx, global) {


    var shapeMap = {
        'rect': 'nx.graphic.Topology.RectGroup',
        'circle': 'nx.graphic.Topology.CircleGroup',
        'polygon': 'nx.graphic.Topology.PolygonGroup',
        'nodeSetPolygon': 'nx.graphic.Topology.NodeSetPolygonGroup'
    };


    var colorTable = ['#C3A5E4', '#75C6EF', '#CBDA5C', '#ACAEB1 ', '#2CC86F'];
    //    var colorTable = ['#75C6EF', '#75C6EF', '#75C6EF', '#75C6EF ', '#75C6EF'];


    /**
     * Topology group layer class

     var groupsLayer = topo.getLayer('groups');
     var nodes1 = [0, 1];
     var group1 = groupsLayer.addGroup({
                    nodes: nodes1,
                    label: 'Rect',
                    color: '#f00'
                });
     group1.on('clickGroupLabel', function (sender, events) {
                    console.log(group1.nodes());
                }, this);

     *
     * @class nx.graphic.Topology.GroupsLayer
     * @extend nx.graphic.Topology.Layer
     * @module nx.graphic.Topology
     */

    nx.define('nx.graphic.Topology.GroupsLayer', nx.graphic.Topology.Layer, {
        statics: {
            /**
             * Default color table, with 5 colors
             * @property colorTable
             * @static
             */
            colorTable: colorTable
        },
        events: ['dragGroupStart', 'dragGroup', 'dragGroupEnd', 'clickGroupLabel', 'enterGroup', 'leaveGroup', 'collapseNodeSetGroup'],
        properties: {
            shapeType: 'polygon',
            /**
             * Groups elements
             * @property groupItems {nx.data.ObservableDictionary}
             */
            groupItems: {
                value: function () {
                    var dict = new nx.data.ObservableDictionary();
                    dict.on('change', function (sender, args) {
                        var action = args.action;
                        var items = args.items;
                        if (action == 'clear') {
                            nx.each(items, function (item) {
                                var group = item.value();
                                if (group) {
                                    group.dispose();
                                }

                            });
                        }
                    }, this);
                    return dict;
                }
            },
            /**
             * groups data
             * @property groups {Array}
             */
            groups: {
                get: function () {
                    return this._groups || [];
                },
                set: function (value) {
                    if (nx.is(value, Array)) {
                        nx.each(value, function (item) {
                            this.addGroup(item);
                        }, this);
                        this._groups = value;
                    }
                }
            }
        },
        methods: {

            /**
             * Register a group item class
             * @param name {String} group items' name
             * @param className {Object} which should extend nx.graphic.Topology.GroupItem
             */
            registerGroupItem: function (name, className) {
                shapeMap[name] = className;
            },


            attach: function (args) {
                this.inherited(args);
                var topo = this.topology();
                topo.on('afterFitStage', this._redraw.bind(this), this);
                topo.on('zoomend', this._redraw.bind(this), this);
                topo.on('collapseNode', this._redraw.bind(this), this);
                topo.on('expandNode', this._redraw.bind(this), this);
                topo.watch('revisionScale', this._redraw.bind(this), this);
                topo.watch('showIcon', this._redraw.bind(this), this);
            },
            /**
             * Add a group to group layer
             * @param obj {Object} config of a group
             */
            addGroup: function (obj) {
                var groupItems = this.groupItems();
                var shape = obj.shapeType || this.shapeType();
                var nodes = obj.nodes;

                var GroupClass = nx.path(global, shapeMap[shape]);
                var group = new GroupClass({
                    'topology': this.topology()
                });

                var config = nx.clone(obj);

                if (!config.color) {
                    config.color = colorTable[groupItems.count() % 5];
                }
                delete config.nodes;
                delete config.shapeType;

                group.sets(config);
                group.attach(this);


                group.nodes(nodes);

                var id = config.id || group.__id__;

                groupItems.setItem(id, group);

                var events = ['dragGroupStart', 'dragGroup', 'dragGroupEnd', 'clickGroupLabel', 'enterGroup', 'leaveGroup', 'collapseNodeSetGroup'];

                nx.each(events, function (e) {
                    group.on(e, function (sender, event) {
                        if (event instanceof MouseEvent) {
                            window.event = event;
                        }
                        this.fire(e, group);
                    }, this);
                }, this);


                return group;

            },
            _redraw: function () {
                this.groupItems().each(function (item) {
                    item.value()._draw();
                }, this);
            },
            /**
             * Remove a group
             * @method removeGroup
             * @param id
             */
            removeGroup: function (id) {
                var groupItems = this.groupItems();
                var group = groupItems.getItem(id);
                if (group) {
                    group.dispose();
                    groupItems.removeItem(id);
                }
            },
            /**
             * Get a group by id
             * @method getGroup
             * @param id
             * @returns {*}
             */
            getGroup: function (id) {
                return this.groupItems().getItem(id);
            },
            /**
             * Iterate all group
             * @method eachGroupItem
             * @param callBack
             * @param context
             */
            eachGroupItem: function (callBack, context) {
                this.groupItems().each(function (item) {
                    callBack.call(context || this, item.value(), item.key());
                }, this);
            },
            /**
             * clear all group
             * @clear
             */
            clear: function () {
                this.groupItems().clear();
                this.inherited();
            },
            dispose: function () {
                this.clear();
                var topo = this.topology();
                topo.off('collapseNode', this._redraw.bind(this), this);
                topo.off('expandNode', this._redraw.bind(this), this);
                topo.off('zoomend', this._redraw.bind(this), this);
                topo.off('fitStage', this._redraw.bind(this), this);
                topo.unwatch('revisionScale', this._redraw.bind(this), this);
                topo.unwatch('showIcon', this._redraw.bind(this), this);
                this.inherited();
            }

        }
    });


})(nx, nx.global);

(function (nx, global) {

    /**
     *
     * Base group shape class
     * @class nx.graphic.Topology.GroupItem
     * @extend nx.graphic.Component
     * @module nx.graphic.Topology.Group
     *
     */


    nx.define("nx.graphic.Topology.GroupItem", nx.graphic.Group, {
        events: [],
        properties: {
            /**
             * Topology
             * @property topology
             * @readyOnly
             */
            topology: {

            },
            /**
             * Node array in the shape
             * @property nodes {Array}
             */
            nodes: {
                get: function () {
                    return this._nodes || [];
                },
                set: function (value) {
                    var topo = this.topology();
                    var graph = topo.graph();
                    var vertices = this.vertices();
                    if (nx.is(value, Array) || nx.is(value, nx.data.ObservableCollection)) {

                        //
                        nx.each(value, function (value) {
                            var vertex;
                            if (nx.is(value, nx.graphic.Topology.AbstractNode)) {
                                vertex = value.model();
                            } else if (graph.getVertex(value)) {
                                vertex = graph.getVertex(value);
                            }

                            if (vertex && vertices.indexOf(vertex) == -1) {
                                vertices.push(vertex);
                            }

                        }, this);

                        //
                        nx.each(vertices, function (vertex) {
                            this.attachEvent(vertex);
                        }, this);

                        this.draw();


                    }
                    this._nodes = value;
                }
            },
            vertices: {
                value: function () {
                    return [];
                }
            },
            /**
             * Shape's color
             * @property color
             */
            color: {

            },
            /**
             * Group's label
             * @property label
             */
            label: {

            },
            blockDrawing: {
                value: false
            }
        },
        view: {

        },
        methods: {
            attachEvent: function (vertex) {
                vertex.watch('generated', this._draw, this);
                vertex.on('updateCoordinate', this._draw, this);
            },
            detachEvent: function (vertex) {
                vertex.unwatch('generated', this._draw, this);
                vertex.off('updateCoordinate', this._draw, this);
            },
            getNodes: function () {
                var nodes = [];
                var topo = this.topology();
                nx.each(this.vertices(), function (vertex) {
                    if (vertex.generated()) {
                        var node = topo.getNode(vertex.id());
                        if (node) {
                            nodes.push(node);
                        }
                    }
                });
                return nodes;
            },
            addNode: function (value) {
                var vertex;
                var topo = this.topology();
                var graph = topo.graph();
                var vertices = this.vertices();

                if (nx.is(value, nx.graphic.Topology.AbstractNode)) {
                    vertex = value.model();
                } else if (graph.getVertex(value)) {
                    vertex = graph.getVertex(value);
                }

                if (vertex && vertices.indexOf(vertex) == -1) {
                    vertices.push(vertex);
                    this.attachEvent(vertex);
                    this.draw();
                }

            },
            removeNode: function (value) {
                var vertex;
                var topo = this.topology();
                var graph = topo.graph();
                var vertices = this.vertices();
                var nodes = this.nodes();

                if (nx.is(value, nx.graphic.Topology.AbstractNode)) {
                    vertex = value.model();
                } else if (graph.getVertex(value)) {
                    vertex = graph.getVertex(value);
                }

                if (vertex && vertices.indexOf(vertex) != -1) {
                    vertices.splice(vertices.indexOf(vertex), 1);
                    this.detachEvent(vertex);
                    if (nx.is(nodes, Array)) {
                        var id = vertex.id();
                        var node = topo.getNode(id);
                        if (nodes.indexOf(id) !== -1) {
                            nodes.splice(nodes.indexOf(id), 1);
                        } else if (node && nodes.indexOf(node) !== -1) {
                            nodes.splice(nodes.indexOf(node), 1);
                        } else {
                            //todo throw error
                        }

                    }

                    this.draw();

                }


            },
            _draw: function () {
                if (!this.blockDrawing()) {
                    this.draw();
                }
            },
            draw: function () {
                if (this.getNodes().length === 0) {
                    this.hide();
                } else {
                    this.show();
                }
            },
            updateNodesPosition: function (x, y) {
                var stageScale = this.topology().stageScale();
                nx.each(this.getNodes(), function (node) {
                    node.move(x * stageScale, y * stageScale);
                });
            },
            clear: function () {
                nx.each(this.vertices(), function (vertex) {
                    this.detachEvent(vertex);
                }, this);
                this.vertices([]);
                this.nodes([]);
            },
            dispose: function () {
                this.clear();
                this.inherited();
            }
        }
    });


})(nx, nx.global);
(function (nx, global) {

    /**
     * Rectangle shape group class
     * @class nx.graphic.Topology.RectGroup
     * @extend nx.graphic.Topology.GroupItem
     * @module nx.graphic.Topology.Group
     *
     */


    nx.define('nx.graphic.Topology.RectGroup', nx.graphic.Topology.GroupItem, {
        events: ['dragGroupStart', 'dragGroup', 'dragGroupEnd', 'clickGroupLabel', 'enterGroup', 'leaveGroup'],
        view: {
            type: 'nx.graphic.Group',
            props: {
                'class': 'group'
            },
            content: [
                {
                    name: 'shape',
                    type: 'nx.graphic.Rect',
                    props: {
                        'class': 'bg'
                    },
                    events: {
                        'mousedown': '{#_mousedown}',
                        'dragstart': '{#_dragstart}',
                        'dragmove': '{#_drag}',
                        'dragend': '{#_dragend}'
                    }
                },
                {
                    name: 'text',
                    type: 'nx.graphic.Group',
                    content: {
                        name: 'label',
                        type: 'nx.graphic.Text',
                        props: {
                            'class': 'groupLabel',
                            text: '{#label}'
                        },
                        events: {
                            'click': '{#_clickLabel}'
                        }
                    }
                }
            ]
        },
        properties: {
        },
        methods: {

            draw: function () {
                this.inherited();
                this.setTransform(0, 0);

                var topo = this.topology();
                var stageScale = topo.stageScale();
                var revisionScale = topo.revisionScale();
                var translate = {
                    x: topo.matrix().x(),
                    y: topo.matrix().y()
                };
                var bound = topo.getBoundByNodes(this.getNodes());
                if (bound == null) {
                    return;
                }
                bound.left -= translate.x;
                bound.top -= translate.y;
                var shape = this.view('shape');
                shape.sets({
                    x: bound.left,
                    y: bound.top,
                    width: bound.width,
                    height: bound.height,
                    fill: this.color(),
                    stroke: this.color(),
                    scale: topo.stageScale()
                });


                var text = this.view('text');


                text.setTransform((bound.left + bound.width / 2) * stageScale, (bound.top - 12) * stageScale, stageScale);
                text.view().dom().setStyle('fill', this.color());

                this.view('label').view().dom().setStyle('font-size', 11);
            },
            _clickLabel: function (sender, event) {
                this.fire('clickGroupLabel');
            },
            _mousedown: function (sender, event) {
                event.captureDrag(this.view('shape'),this.topology().stage());
            },
            _dragstart: function (sender, event) {
                this.blockDrawing(true);
                this.fire('dragGroupStart', event);
            },
            _drag: function (sender, event) {
                this.fire('dragGroup', event);
            },
            _dragend: function (sender, event) {
                this.blockDrawing(false);
                this.fire('dragGroupEnd', event);
            }
        }
    });


})(nx, nx.global);
(function (nx, global) {
    /**
     * Circle shape group class
     * @class nx.graphic.Topology.CircleGroup
     * @extend nx.graphic.Topology.GroupItem
     * @module nx.graphic.Topology.Group
     *
     */
    nx.define('nx.graphic.Topology.CircleGroup', nx.graphic.Topology.GroupItem, {
        events: ['dragGroupStart', 'dragGroup', 'dragGroupEnd', 'clickGroupLabel', 'enterGroup', 'leaveGroup'],
        view: {
            type: 'nx.graphic.Group',
            props: {
                'class': 'group'
            },
            content: [
                {
                    name: 'shape',
                    type: 'nx.graphic.Circle',
                    props: {
                        'class': 'bg'
                    },
                    events: {
                        'mousedown': '{#_mousedown}',
                        'touchstart': '{#_mousedown}',
                        'dragstart': '{#_dragstart}',
                        'dragmove': '{#_drag}',
                        'dragend': '{#_dragend}'
                    }
                },
                {
                    name: 'text',
                    type: 'nx.graphic.Group',
                    content: {
                        name: 'label',
                        type: 'nx.graphic.Text',
                        props: {
                            'class': 'groupLabel',
                            text: '{#label}'
                        },
                        events: {
                            'click': '{#_clickLabel}'
                        }
                    }
                }
            ]
        },
        methods: {

            draw: function () {


                this.inherited();
                this.setTransform(0, 0);

                var topo = this.topology();
                var revisionScale = topo.revisionScale();
                var translate = {
                    x: topo.matrix().x(),
                    y: topo.matrix().y()
                };
                var bound = topo.getBoundByNodes(this.getNodes());
                if (bound == null) {
                    return;
                }
                var radius = Math.sqrt(Math.pow(bound.width / 2, 2) + Math.pow(bound.height / 2, 2));

                var shape = this.view('shape');
                shape.sets({
                    cx: bound.left - translate.x + bound.width / 2,
                    cy: bound.top - translate.y + bound.height / 2,
                    r: radius,
                    fill: this.color(),
                    stroke: this.color(),
                    scale: topo.stageScale()
                });


                var text = this.view('text');
                var stageScale = topo.stageScale();
                bound.left -= translate.x;
                bound.top -= translate.y;

                text.setTransform((bound.left + bound.width / 2) * stageScale, (bound.top + bound.height / 2 - radius - 12) * stageScale, stageScale);
                text.view().dom().setStyle('fill', this.color());

                this.view('label').view().dom().setStyle('font-size', 11);


                this.setTransform(0, 0);
            },
            _clickLabel: function (sender, event) {
                this.fire('clickGroupLabel');
            },
            _mousedown: function (sender, event) {
                event.captureDrag(this.view('shape'), this.topology().stage());
            },
            _dragstart: function (sender, event) {
                this.blockDrawing(true);
                this.fire('dragGroupStart', event);
            },
            _drag: function (sender, event) {
                this.fire('dragGroup', event);
            },
            _dragend: function (sender, event) {
                this.blockDrawing(false);
                this.fire('dragGroupEnd', event);
            }
        }
    });


})(nx, nx.global);
(function (nx, global) {


    /**
     * Polygon shape group class
     * @class nx.graphic.Topology.PolygonGroup
     * @extend nx.graphic.Topology.GroupItem
     * @module nx.graphic.Topology.Group
     *
     */

    nx.define('nx.graphic.Topology.PolygonGroup', nx.graphic.Topology.GroupItem, {
        events: ['dragGroupStart', 'dragGroup', 'dragGroupEnd', 'clickGroupLabel', 'enterGroup', 'leaveGroup'],
        view: {
            type: 'nx.graphic.Group',
            props: {
                'class': 'group'
            },
            content: [
                {
                    name: 'shape',
                    type: 'nx.graphic.Polygon',
                    props: {
                        'class': 'bg'
                    },
                    events: {
                        'mousedown': '{#_mousedown}',
                        'dragstart': '{#_dragstart}',
                        'dragmove': '{#_drag}',
                        'dragend': '{#_dragend}'
                    }
                },
                {
                    name: 'text',
                    type: 'nx.graphic.Group',
                    content: {
                        name: 'label',
                        type: 'nx.graphic.Text',
                        props: {
                            'class': 'nodeSetGroupLabel',
                            text: '{#label}',
                            style: {
                                'alignment-baseline': 'central',
                                'text-anchor': 'middle',
                                'font-size': 12
                            }
                        },
                        events: {
                            'click': '{#_clickLabel}'
                        }
                    }
                }
            ],
            events: {
                'mouseenter': '{#_mouseenter}',
                'mouseleave': '{#_mouseleave}'
            }
        },
        properties: {
            shape: {
                get: function () {
                    return this.view('shape');
                }
            }
        },
        methods: {

            draw: function () {

                this.inherited();
                this.setTransform(0, 0);


                var topo = this.topology();
                var stageScale = topo.stageScale();
                var revisionScale = topo.revisionScale();
                var translate = {
                    x: topo.matrix().x(),
                    y: topo.matrix().y()
                };
                var vectorArray = [];
                nx.each(this.getNodes(), function (node) {
                    if (node.visible()) {
                        vectorArray.push({x: node.model().x(), y: node.model().y()});
                    }
                });
                var shape = this.view('shape');

                shape.sets({
                    fill: this.color()
                });
                shape.dom().setStyle('stroke', this.color());
                shape.dom().setStyle('stroke-width', 60 * stageScale * revisionScale);
                shape.nodes(vectorArray);


                var bound = topo.getInsideBound(shape.getBound());
                bound.left -= translate.x;
                bound.top -= translate.y;
                bound.left *= stageScale;
                bound.top *= stageScale;
                bound.width *= stageScale;
                bound.height *= stageScale;


                var text = this.view('text');
                text.setTransform(bound.left + bound.width / 2, bound.top - 40 * stageScale * revisionScale, stageScale);

                this.view('label').view().dom().setStyle('font-size', 11);

                text.view().dom().setStyle('fill', this.color());
            },
            _clickLabel: function (sender, event) {
                this.fire('clickGroupLabel');
            },
            _mousedown: function (sender, event) {
                event.captureDrag(this.view('shape'),this.topology().stage());
            },
            _dragstart: function (sender, event) {
                this.blockDrawing(true);
                this.fire('dragGroupStart', event);
            },
            _drag: function (sender, event) {
                this.fire('dragGroup', event);
            },
            _dragend: function (sender, event) {
                this.blockDrawing(false);
                this.fire('dragGroupEnd', event);
            }
        }
    });


})(nx, nx.global);
(function(nx, global) {


    /**
     * Polygon shape group class
     * @class nx.graphic.Topology.PolygonGroup
     * @extend nx.graphic.Topology.GroupItem
     * @module nx.graphic.Topology.Group
     *
     */

    nx.define('nx.graphic.Topology.NodeSetPolygonGroup', nx.graphic.Topology.GroupItem, {
        events: ['dragGroupStart', 'dragGroup', 'dragGroupEnd', 'clickGroupLabel', 'enterGroup', 'leaveGroup', 'collapseNodeSetGroup'],
        view: {
            type: 'nx.graphic.Group',
            props: {
                'class': 'group aggregationGroup'
            },
            content: [{
                    name: 'shape',
                    type: 'nx.graphic.Polygon',
                    props: {
                        'class': 'bg'
                    }
                }, {
                    name: 'icons',
                    type: 'nx.graphic.Group',
                    content: [{
                        name: 'minus',
                        type: 'nx.graphic.Group',
                        content: {
                            name: 'minusIcon',
                            type: 'nx.graphic.Icon',
                            props: {
                                iconType: 'collapse'
                            }
                        },
                        events: {
                            'click': '{#_collapse}'
                        }
                    }, {
                        name: 'nodeIcon',
                        type: 'nx.graphic.Group',
                        content: {
                            name: 'nodeIconImg',
                            type: 'nx.graphic.Icon',
                            props: {
                                iconType: 'nodeSet',
                                scale: 1
                            }
                        }
                    }, {
                        name: 'labelContainer',
                        type: 'nx.graphic.Group',
                        content: {
                            name: 'label',
                            type: 'nx.graphic.Text',
                            props: {
                                'class': 'nodeSetGroupLabel',
                                text: '{#label}',
                                style: {
                                    'alignment-baseline': 'central',
                                    'text-anchor': 'start',
                                    'font-size': 12
                                },
                                visible: false
                            },
                            events: {
                                'click': '{#_clickLabel}'
                            }
                        },
                        events: {

                        }
                    }],
                    events: {
                        'mouseenter': '{#_mouseenter}',
                        'mouseleave': '{#_mouseleave}',
                        'mousedown': '{#_mousedown}',
                        'touchstart': '{#_mousedown}',
                        'dragstart': '{#_dragstart}',
                        'dragmove': '{#_drag}',
                        'dragend': '{#_dragend}'
                    }
                },
                //                {
                //                    name: 'bg',
                //                    type: 'nx.graphic.Rect',
                //                    props: {
                //                        fill: '#f00',
                //                        'opacity': '0.1'
                //                    }
                //                }

            ]
        },
        properties: {
            nodeSet: {},
            topology: {},
            opacity: {
                set: function(value) {
                    var opacity = Math.max(value, 0.1);
                    //                    this.view('shape').dom().setStyle('opacity', opacity);
                    //                    this.view('minus').dom().setStyle('opacity', opacity);
                    //                    this.view('nodeIcon').dom().setStyle('opacity', opacity);
                    //                    this.view('labelContainer').dom().setStyle('opacity', opacity);
                    this._opacity = value;
                }
            },
            shape: {
                get: function() {
                    return this.view('shape');
                }
            }
            //            color: {
            //                set: function (value) {
            //                    var text = this.view('labelContainer');
            //                    text.view().dom().setStyle('fill', value);
            //                    var shape = this.view('shape');
            //                    shape.sets({
            //                        fill: value
            //                    });
            //                    shape.dom().setStyle('stroke', value);
            //                    this._color = value;
            //                }
            //            }
        },
        methods: {
            getNodes: function() {
                return nx.util.values(this.nodeSet().nodes());
            },
            draw: function() {
                this.inherited();
                this.setTransform(0, 0);

                var topo = this.topology();
                var stageScale = topo.stageScale();
                var translate = {
                    x: topo.matrix().x(),
                    y: topo.matrix().y()
                };


                var vectorArray = [];
                nx.each(this.getNodes(), function(node) {
                    if (node.visible()) {
                        vectorArray.push({
                            x: node.model().x(),
                            y: node.model().y()
                        });
                    }
                });
                var shape = this.view('shape');
                //                shape.sets({
                //                    fill: this.color()
                //                });
                //                shape.dom().setStyle('stroke', this.color());
                //
                shape.nodes(vectorArray);

                var bound = topo.getInsideBound(shape.getBound());
                bound.left -= translate.x;
                bound.top -= translate.y;
                bound.left *= stageScale;
                bound.top *= stageScale;
                bound.width *= stageScale;
                bound.height *= stageScale;

                //                this.view('bg').sets({
                //                    x: bound.left,
                //                    y: bound.top,
                //                    width: bound.width,
                //                    height: bound.height
                //                });

                var minus = this.view('minus');
                var label = this.view('label');
                var nodeIcon = this.view('nodeIcon');
                var nodeIconImg = this.view('nodeIconImg');
                var labelContainer = this.view('labelContainer');


                if (topo.showIcon() && topo.revisionScale() > 0.6) {

                    shape.dom().setStyle('stroke-width', 60 * stageScale);


                    nodeIconImg.set('iconType', this.nodeSet().iconType());
                    //                    nodeIconImg.set('color', this.color());

                    var iconSize = nodeIconImg.size();

                    nodeIcon.visible(true);

                    if (nx.util.isFirefox()) {
                        minus.setTransform(bound.left + bound.width / 2, bound.top - iconSize.height * stageScale / 2 + 8 * stageScale, 1 * stageScale);
                        nodeIcon.setTransform(bound.left + bound.width / 2 + 3 * stageScale + iconSize.width * stageScale / 2, bound.top - iconSize.height * stageScale / 2 - 0 * stageScale, 0.5 * stageScale);


                    } else {
                        minus.setTransform(bound.left + bound.width / 2, bound.top - iconSize.height * stageScale / 2 - 22 * stageScale, 1 * stageScale);
                        nodeIcon.setTransform(bound.left + bound.width / 2 + 3 * stageScale + iconSize.width * stageScale / 2, bound.top - iconSize.height * stageScale / 2 - 22 * stageScale, 0.5 * stageScale);
                    }




                    label.sets({
                        x: bound.left + bound.width / 2 - 3 * stageScale + iconSize.width * stageScale,
                        y: bound.top - iconSize.height * stageScale / 2 - 22 * stageScale
                    });
                    label.view().dom().setStyle('font-size', 16 * stageScale);
                    //                    labelContainer.view().dom().setStyle('fill', this.color());

                } else {

                    shape.dom().setStyle('stroke-width', 30 * stageScale);

                    if (nx.util.isFirefox()) {
                        minus.setTransform(bound.left + bound.width / 2, bound.top - 29 * stageScale / 2, stageScale);
                    } else {
                        minus.setTransform(bound.left + bound.width / 2, bound.top - 45 * stageScale / 2, stageScale);
                    }

                    nodeIcon.visible(false);

                    label.sets({
                        x: bound.left + bound.width / 2 + 12 * stageScale,
                        y: bound.top - 45 * stageScale / 2
                    });
                    label.view().dom().setStyle('font-size', 16 * stageScale);

                }


                //                this.view('minusIcon').color(this.color());

            },
            _clickLabel: function(sender, event) {
                this.fire('clickGroupLabel');
            },
            _mousedown: function(sender, event) {
                event.captureDrag(this.view('icons'), this.topology().stage());
            },
            _dragstart: function(sender, event) {
                this.blockDrawing(true);
                this.fire('dragGroupStart', event);
            },
            _drag: function(sender, event) {
                this.fire('dragGroup', event);
                if (!this.view('minus').dom().$dom.contains(event.srcElement)) {
                    this._dragMinusIcon = true;
                }
            },
            _dragend: function(sender, event) {
                this.blockDrawing(false);
                this.fire('dragGroupEnd', event);

            },
            _collapse: function() {
                if(!this._dragMinusIcon){
                    this.fire('collapseNodeSetGroup', event);
                }
                this._dragMinusIcon = false;
            },
            _mouseenter: function(sender, event) {
                this.fire('enterGroup');
            },
            _mouseleave: function(sender, event) {
                this.fire('leaveGroup');
            }
        }
    });


})(nx, nx.global);
(function(nx, global) {

    var Vector = nx.geometry.Vector;
    var Line = nx.geometry.Line;
    var colorIndex = 0;
    var colorTable = ['#b2e47f', '#e4e47f', '#bec2f9', '#b6def7', '#89f0de'];
    /**
     * A topology path class
     Path's background colors : ['#b2e47f', '#e4e47f', '#bec2f9', '#b6def7', '#89f0de']
     * @class nx.graphic.Topology.Path
     * @extend nx.graphic.Component
     * @module nx.graphic.Topology
     */

    nx.define("nx.graphic.Topology.Path", nx.graphic.Component, {
        view: {
            type: 'nx.graphic.Group',
            content: {
                name: 'path',
                type: 'nx.graphic.Path'
            }
        },
        properties: {
            /**
             * get/set links's style ,default value is
             value: {
                    'stroke': '#666',
                    'stroke-width': '1px'
                }

             * @property pathStyle
             */
            pathStyle: {
                value: {
                    'stroke': '#666',
                    'stroke-width': '0px'
                }
            },
            /**
             * Get/set a path's width
             * @property pathWidth
             */
            pathWidth: {
                value: "auto"
            },
            /**
             * Get/set a path's offset
             * @property pathGutter
             */
            pathGutter: {
                value: 13
            },
            /**
             * Get/set a path's padding to a node
             * @property pathPadding
             */
            pathPadding: {
                value: "auto"
            },
			pathColor: {
				get: function(){
					return this._pathStyle.color ? this._pathStyle.color : null;
				},
				set: function(userColor){
					var hexColorRE = /#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})/;
					// if it is a HEX-format color
					if(hexColorRE.test(userColor)){
						this.view("path").setStyle("fill", userColor);
						this._pathStyle.color = userColor;
					}
					else{
						console.warning("Color must be in HEX format, e.g.: #ffe4cc");
						this._setRandomColor();
					}
				}
			},
            /**
             * Get/set path arrow type , 'none'/'cap'/'full'/'end'
             * @property
             */
            arrow: {
                value: 'none'
            },
            /**
             * Get/set links to draw a path pver it
             * @property links
             */
            links: {
                value: [],
                set: function(value) {
                    this._links = value;
                    this.edgeIdCollection().clear();
                    var edges = [];
                    if (nx.is(value, "Array") || nx.is(value, nx.data.Collection)) {
                        nx.each(value, function(item) {
                            edges.push(item.model().id());
                        }.bind(this));
                        this.edgeIdCollection().addRange(edges);
                    }
                    this.draw();
                }
            },
            edgeIdCollection: {
                value: function() {
                    var allEdges, verticesIdCollection, collection = new nx.data.ObservableCollection();
                    var watcher = function(pname, pvalue) {
                        this.draw();
                    }.bind(this);
                    collection.on("change", function(sender, evt) {
                        var waitForTopology = function(pname, pvalue) {
                            if (!pvalue) {
                                return;
                            }
                            this.unwatch("topology", waitForTopology);
                            allEdges = allEdges || nx.path(this, "topology.graph.edges");
                            verticesIdCollection = this.verticesIdCollection();
                            var diff = [];
                            if (evt.action === "add") {
                                nx.each(evt.items, function(item) {
                                    var edge = allEdges.getItem(item);
                                    edge.watch("generated", watcher);
                                    diff.push(edge.sourceID());
                                    diff.push(edge.targetID());
                                }.bind(this));
                                // update vertices
                                nx.each(diff, function(id) {
                                    if (!verticesIdCollection.contains(id)) {
                                        verticesIdCollection.add(id);
                                    }
                                });
                            } else {
                                nx.each(evt.items, function(item) {
                                    var edge = allEdges.getItem(item);
                                    if (edge) {
                                        edge.unwatch("generated", watcher);
                                    }
                                }.bind(this));
                                // update vertices
                                // TODO improve this algorithm
                                verticesIdCollection.clear();
                                nx.each(collection, function(id) {
                                    var edge = allEdges.getItem(id);
                                    if (edge && verticesIdCollection.contains(edge.sourceID())) {
                                        verticesIdCollection.add(edge.sourceID());
                                    }
                                    if (edge && verticesIdCollection.contains(edge.targetID())) {
                                        verticesIdCollection.add(edge.targetID());
                                    }
                                }.bind(this));
                            }
                        }.bind(this);
                        if (!this.topology()) {
                            this.watch("topology", waitForTopology);
                        } else {
                            waitForTopology("topology", this.topology());
                        }
                    }.bind(this));
                    return collection;
                }
            },
            verticesIdCollection: {
                value: function() {
                    var allVertices, collection = new nx.data.ObservableCollection();
                    var watcher = function(pname, pvalue) {
                        this.draw();
                    }.bind(this);
                    collection.on("change", function(sender, evt) {
                        allVertices = allVertices || nx.path(this, "topology.graph.vertices");
                        if (evt.action === "add") {
                            nx.each(evt.items, function(item) {
                                var vertex = allVertices.getItem(item);
                                if (vertex) {
                                    vertex.watch("position", watcher);
                                }
                            }.bind(this));
                        } else {
                            nx.each(evt.items, function(item) {
                                var vertex = allVertices.getItem(item);
                                if (vertex) {
                                    vertex.unwatch("position", watcher);
                                }
                            }.bind(this));
                        }
                    }.bind(this));
                    return collection;
                }
            },
            /**
             * Reverse path direction
             * @property reverse
             */
            reverse: {
                value: false
            },
            owner: {},
            /**
             * Source node defines the path direction
             * It fixes the bug, when you try to draw one-link path and it goes in different direction
             * In that case, sourceNode defines the real direction of the vector
             * @property sourceNode
             */
            sourceNode: {},
            topology: {}
        },
        methods: {
            init: function(props) {
                this.inherited(props);
                var pathStyle = this.pathStyle();
                this.view("path").sets(pathStyle);

				// if user passed a distinct color
				if(props.color){
					this.pathColor(props.color);
				}
				else{
					this._setRandomColor();
				}
            },
            /**
             * Draw a path,internal
             * @method draw
             */
            draw: function() {
                if (!this.topology()) {
                    return;
                }
                var generated = true,
                    topo = this.topology(),
                    allEdges = nx.path(this, "topology.graph.edges"),
                    allVertices = nx.path(this, "topology.graph.vertices");

                // Fix 1-link bug (used to take wrong direction sometimes)
                if(this.links().length == 1 && this.sourceNode() !== undefined){
                    if(this.sourceNode().id() == this.links()[0].model().target().id()){
                        this.reverse(true);
                    }
                }

                nx.each(this.verticesIdCollection(), function(id) {
                    var item = allVertices.getItem(id);
                    if (!item.generated()) {
                        generated = false;
                        return false;
                    }
                }.bind(this));
                nx.each(this.edgeIdCollection(), function(id) {
                    var item = allEdges.getItem(id);
                    if (!item.generated()) {
                        generated = false;
                        return false;
                    }
                }.bind(this));
                if (!generated) {
                    this.view("path").set('d', "M0 0");
                    return;
                }

                var link, line1, line2, pt, d1 = [],
                    d2 = [];
                var stageScale = this.topology().stageScale();
                var pathWidth = this.pathWidth();
                var pathPadding = this.pathPadding();
                var paddingStart, paddingEnd;
                var arrow = this.arrow();
                var v1, v2;


                var edgeIds = this.edgeIdCollection();
                var links = [];
                nx.each(edgeIds, function(id) {
                    links.push(topo.getLink(id));
                });
                var linksSequentialArray = this._serializeLinks(links);
                var count = links.length;

                //first
                var firstLink = links[0];

                var offset = firstLink.getOffset();
                if (firstLink.reverse()) {
                    offset *= -1;
                }

                offset = new Vector(0, this.reverse() ? offset * -1 : offset);

                line1 = linksSequentialArray[0].translate(offset);


                if (pathPadding === "auto") {
                    paddingStart = Math.min(firstLink.sourceNode().showIcon() ? 24 : 4, line1.length() / 4 / stageScale);
                    paddingEnd = Math.min(firstLink.targetNode().showIcon() ? 24 : 4, line1.length() / 4 / stageScale);
                } else if (nx.is(pathPadding, 'Array')) {
                    paddingStart = pathPadding[0];
                    paddingEnd = pathPadding[1];
                } else {
                    paddingStart = paddingEnd = pathPadding;
                }
                if (typeof paddingStart == 'string' && paddingStart.indexOf('%') > 0) {
                    paddingStart = line1.length() * stageScale * parseInt(paddingStart, 10) / 100 / stageScale;
                }

                if (pathWidth === "auto") {
                    pathWidth = Math.min(10, Math.max(3, Math.round(3 / stageScale))); //3/stageScale
                }
                pathWidth *= 1.5 * stageScale;
                v1 = new Vector(0, pathWidth / 2);
                v2 = new Vector(0, -pathWidth / 2);

                paddingStart *= stageScale;

                pt = line1.translate(v1).pad(paddingStart, 0).start;
                d1.push('M', pt.x, pt.y);
                pt = line1.translate(v2).pad(paddingStart, 0).start;
                d2.unshift('L', pt.x, pt.y, 'Z');

                if (links.length > 1) {
                    for (var i = 1; i < count; i++) {
                        link = links[i];
                        line2 = linksSequentialArray[i].translate(new Vector(0, link.getOffset()));
                        pt = line1.translate(v1).intersection(line2.translate(v1));

                        if (isFinite(pt.x) && isFinite(pt.y)) {
                            d1.push('L', pt.x, pt.y);
                        }
                        pt = line1.translate(v2).intersection(line2.translate(v2));
                        if (isFinite(pt.x) && isFinite(pt.y)) {
                            d2.unshift('L', pt.x, pt.y);
                        }
                        line1 = line2;
                    }
                } else {
                    line2 = line1;
                }

                if (typeof paddingEnd == 'string' && paddingEnd.indexOf('%') > 0) {
                    paddingEnd = line2.length() * parseInt(paddingEnd, 10) / 100 / stageScale;
                }

                paddingEnd *= stageScale;

                if (arrow == 'cap') {
                    pt = line2.translate(v1).pad(0, 2.5 * pathWidth + paddingEnd).end;
                    d1.push('L', pt.x, pt.y);
                    pt = pt.add(line2.normal().multiply(pathWidth / 2));
                    d1.push('L', pt.x, pt.y);

                    pt = line2.translate(v2).pad(0, 2.5 * pathWidth + paddingEnd).end;
                    d2.unshift('L', pt.x, pt.y);
                    pt = pt.add(line2.normal().multiply(-pathWidth / 2));
                    d2.unshift('L', pt.x, pt.y);

                    pt = line2.pad(0, paddingEnd).end;
                    d1.push('L', pt.x, pt.y);
                } else if (arrow == 'end') {
                    pt = line2.translate(v1).pad(0, 2 * pathWidth + paddingEnd).end;
                    d1.push('L', pt.x, pt.y);

                    pt = line2.translate(v2).pad(0, 2 * pathWidth + paddingEnd).end;
                    d2.unshift('L', pt.x, pt.y);

                    pt = line2.pad(0, paddingEnd).end;
                    d1.push('L', pt.x, pt.y);
                } else if (arrow == 'full') {
                    pt = line2.pad(0, paddingEnd).end;
                    d1.push('L', pt.x, pt.y);
                } else {
                    pt = line2.translate(v1).pad(0, paddingEnd).end;
                    d1.push('L', pt.x, pt.y);
                    pt = line2.translate(v2).pad(0, paddingEnd).end;
                    d2.unshift('L', pt.x, pt.y);
                }

                this.view("path").set('d', d1.concat(d2).join(' '));
                //this.view("path").setTransform(null, null, this.topology().stageScale());

                //todo
                //                if (links.length == 1) {
                //                    firstLink.view().watch("opacity", function (prop, value) {
                //                        if (this.$ && this.view("path") && this.view("path").opacity) {
                //                            this.view("path").opacity(value);
                //                        }
                //                    }, this);
                //                }
            },

            _serializeLinks: function(links) {
                var linksSequentialArray = [];
                var len = links.length;

                if (this.reverse()) {
                    linksSequentialArray.push(new Line(links[0].targetVector(), links[0].sourceVector()));
                } else {
                    linksSequentialArray.push(new Line(links[0].sourceVector(), links[0].targetVector()));
                }

                for (var i = 1; i < len; i++) {
                    var firstLink = links[i - 1];
                    var secondLink = links[i];
                    var firstLinkSourceVector = firstLink.sourceVector();
                    var firstLinkTargetVector = firstLink.targetVector();
                    var secondLinkSourceVector = secondLink.sourceVector();
                    var secondLinkTargetVector = secondLink.targetVector();

                    if (firstLink.targetNodeID() == secondLink.sourceNodeID()) {
                        linksSequentialArray.push(new Line(secondLinkSourceVector, secondLinkTargetVector));
                    } else if (firstLink.targetNodeID() == secondLink.targetNodeID()) {
                        linksSequentialArray.push(new Line(secondLinkTargetVector, secondLinkSourceVector));
                    } else if (firstLink.sourceNodeID() == secondLink.sourceNodeID()) {
                        linksSequentialArray.pop();
                        linksSequentialArray.push(new Line(firstLinkTargetVector, firstLinkSourceVector));
                        linksSequentialArray.push(new Line(secondLinkSourceVector, secondLinkTargetVector));
                    } else {
                        linksSequentialArray.pop();
                        linksSequentialArray.push(new Line(firstLinkTargetVector, firstLinkSourceVector));
                        linksSequentialArray.push(new Line(secondLinkTargetVector, secondLinkSourceVector));
                    }
                }

                if (this.reverse()) {
                    linksSequentialArray.reverse();
                }

                return linksSequentialArray;
            },
			_setRandomColor: function() {
				var color = colorTable[colorIndex++ % 5];
				this.pathColor(color);
				return color;
			},
            isEqual: function(pos1, pos2) {
                return pos1.x == pos2.x && pos1.y == pos2.y;
            },
            dispose: function() {
                this.edgeIdCollection().clear();
                nx.each(this.nodes, function(node) {
                    node.off('updateNodeCoordinate', this.draw, this);
                }, this);
                this.inherited();
            }
        }
    });
})(nx, nx.global);
(function (nx, global) {

    /**
     * Base path class.
     * @class nx.graphic.Topology.BasePath
     * @extend nx.graphic.BasePath
     * @module nx.graphic.Topology
     */

    nx.define("nx.graphic.Topology.BasePath", nx.graphic.Component, {
        events: [],
        properties: {
            /**
             * nodes to over path
             * @property nodes
             */
            nodes: {},
            /**
             * path 'd' generator function
             * @property pathGenerator
             */
            pathGenerator: {
                value: function () {
                    return function () {

                    };
                }
            },
            /**
             * path style object
             * @property path style
             *
             */
            pathStyle: {
                value: function () {
                    return {
                        'stroke': '#666',
                        'stroke-width': 2,
                        fill: 'none'
                    };
                }
            },
            /**
             * topology reference
             * @property topology
             */
            topology: {}
        },
        view: {
            type: 'nx.graphic.Group',
            content: {
                name: 'path',
                type: 'nx.graphic.Path',
                props: {

                }
            }
        },
        methods: {
            attach: function (parent) {
                this.inherited(parent);
                var watcher = this._nodesWatcher = new nx.graphic.Topology.NodeWatcher();
                watcher.observePosition(true);
                watcher.topology(this.topology());
                watcher.updater(this._draw.bind(this));
                watcher.nodes(this.nodes());

                //watcher
                this.view("path").dom().setStyles(this.pathStyle());
            },
            _draw: function () {
                var pathEL = this.view('path');
                var nodes = this._nodesWatcher.getNodes();
                if (nodes.length == this.nodes().length) {
                    var topo = this.topology();
                    var pathStyle = this.pathStyle();
                    var d = this.pathGenerator().call(this);
                    if (d) {
                        pathEL.set('d', d);
                        pathEL.visible(true);
                        var strokeWidth = parseInt(pathStyle['stroke-width'], 10) || 1;
                        pathEL.dom().setStyle('stroke-width', strokeWidth * topo.stageScale());
                    }
                } else {
                    pathEL.visible(false);
                }


            },
            draw: function () {
                this._draw();
            }
        }
    });
})(nx, nx.global);
(function(nx, global) {
    var Vector = nx.geometry.Vector;
    var Line = nx.geometry.Line;

    /**
     * Path over nodeset, has limited use scene
     * @class nx.graphic.Topology.NodeSetPath
     * @extend nx.graphic.BasePath
     * @module nx.graphic.Topology
     */

    nx.define("nx.graphic.Topology.NodeSetPath", nx.graphic.Topology.BasePath, {
        properties: {
            /**
             * arrow style, could be null, cap, end
             * @property {String}
             */
            arrow: {
                value: null
            },
            pathGenerator: {
                value: function() {
                    return function() {
                        var nodes = this.nodes();
                        var topo = this.topology();
                        if (!topo || !nodes) {
                            return;
                        }
                        var graph = topo.graph();
                        var visibleNodes = [];
                        nodes.forEach(function(id) {
                            var vertex = graph.getVertex(id);
                            if (!vertex.generated()) {
                                vertex = vertex.generatedRootVertexSet();
                            }
                            var node = topo.getNode(vertex.id());
                            if (visibleNodes.indexOf(node) == -1) {
                                visibleNodes.push(node);
                            }
                        });
                        var arrow = this.arrow();
                        var pathStyle = this.pathStyle();
                        var stageScale = topo.stageScale();
                        var revisionScale = topo.revisionScale();
                        var padding = (topo.showIcon() ? 20 : 8) * stageScale * revisionScale;
                        var strokeWidth = (parseInt(pathStyle['stroke-width'], 10) || 1) * stageScale;
                        var visibleNodesLength = visibleNodes.length;
                        var d = this._dArray = [];

                        for (var i = 0; i < visibleNodesLength - 1; i++) {
                            var sourceNode = visibleNodes[i];
                            var targetNode = visibleNodes[i + 1];
                            var line = new Line(sourceNode.vector(), targetNode.vector());
                            // padding start
                            if (i === 0) {
                                line = line.pad(padding, 0);
                                d.push('M', line.start.x, line.start.y);
                            } else if (i == visibleNodesLength - 2) {
                                line = line.pad(0, arrow ? padding + strokeWidth : padding);
                                d.push('L', line.start.x, line.start.y);
                                d.push('L', line.end.x, line.end.y);
                            } else {
                                d.push('L', line.start.x, line.start.y);
                            }
                        }

                        this._drawArrow();
                        return d.join(" ");
                    };
                }
            }
        },
        methods: {
            attach: function(parent) {
                this.inherited(parent);
                var el = this._arrowEL = new nx.graphic.Path();
                el.attach(this);

            },
            _drawArrow: function() {
                var arrow = this.arrow();

                if (!this._arrowEL || !arrow) {
                    return;
                }
                var arrowD = [];
                var d = this._dArray;
                var len = d.length;
                var topo = this.topology();
                var pathStyle = this.pathStyle();
                var stageScale = topo.stageScale();
                var revisionScale = topo.revisionScale();
                var strokeWidth = (parseInt(pathStyle['stroke-width'], 10) || 1) * stageScale;
                var line = new Line(new Vector(d[len - 5], d[len - 4]), new Vector(d[len - 2], d[len - 1]));
                var v1, v2, v3;

                if (arrow == 'cap') {
                    v1 = new Vector(0, -strokeWidth);
                    v2 = new Vector(strokeWidth, strokeWidth);
                    v3 = new Vector(-strokeWidth, strokeWidth);
                    arrowD.push('M', line.end.x, line.end.y);
                    line = line.translate(v1);
                    arrowD.push('L', line.end.x, line.end.y);
                    line = line.translate(v2);
                    arrowD.push('L', line.end.x, line.end.y);
                    line = line.translate(v3);
                    arrowD.push('L', line.end.x, line.end.y);
                    arrowD.push('Z');
                    this._arrowEL.set('d', arrowD.join(" "));
                    this._arrowEL.dom().setStyle('stroke-width', 1 * stageScale);
                    this._arrowEL.dom().setStyle('fill', pathStyle.stroke);
                    this._arrowEL.dom().setStyle('stroke', pathStyle.stroke);

                } else if (arrow == 'end') {
                    v1 = new Vector(0, -strokeWidth / 2);
                    v2 = new Vector(strokeWidth, strokeWidth / 2);
                    v3 = new Vector(-strokeWidth, strokeWidth / 2);
                    arrowD.push('M', line.end.x, line.end.y);
                    line = line.translate(v1);
                    arrowD.push('L', line.end.x, line.end.y);
                    line = line.translate(v2);
                    arrowD.push('L', line.end.x, line.end.y);
                    line = line.translate(v3);
                    arrowD.push('L', line.end.x, line.end.y);
                    arrowD.push('Z');
                    this._arrowEL.set('d', arrowD.join(" "));
                    this._arrowEL.dom().setStyle('stroke-width', 1 * stageScale);
                    this._arrowEL.dom().setStyle('fill', pathStyle.stroke);
                    this._arrowEL.dom().setStyle('stroke', pathStyle.stroke);
                }

            }

        }

    });
})(nx, window);
(function (nx, global) {
    var util = nx.util;
    /**
     * Path layer class
     Could use topo.getLayer("pathLayer") get this
     * @class nx.graphic.Topology.PathLayer
     * @extend nx.graphic.Topology.Layer
     * @module nx.graphic.Topology
     */
    nx.define("nx.graphic.Topology.PathLayer", nx.graphic.Topology.Layer, {
        properties: {

            /**
             * Path array
             * @property paths
             */
            paths: {
                value: function () {
                    return [];
                }
            }
        },
        methods: {
            attach: function (args) {
                this.attach.__super__.apply(this, arguments);
                var topo = this.topology();
                topo.on('zoomend', this._draw, this);
                topo.watch('revisionScale', this._draw, this);

            },
            _draw: function () {
                nx.each(this.paths(), function (path) {
                    path.draw();
                });
            },
            /**
             * Add a path to topology
             * @param path {nx.graphic.Topology.Path}
             * @method addPath
             */
            addPath: function (path) {
                this.paths().push(path);
                path.topology(this.topology());
                path.attach(this);
                path.draw();
            },
            /**
             * Remove a path
             * @method removePath
             * @param path
             */
            removePath: function (path) {
                this.paths().splice(this.paths().indexOf(path), 1);
                path.dispose();
            },
            clear: function () {
                nx.each(this.paths(), function (path) {
                    path.dispose();
                });
                this.paths([]);
                this.inherited();
            },
            dispose: function () {
                this.clear();
                var topo = this.topology();
                topo.off('zoomend', this._draw, this);
                topo.unwatch('revisionScale', this._draw, this);
                this.inherited();
            }
        }
    });


})(nx, nx.global);

(function(nx, global) {


    nx.define("nx.graphic.Topology.Nav", nx.ui.Component, {
        properties: {
            topology: {
                get: function() {
                    return this.owner();
                }
            },
            scale: {},
            showIcon: {
                value: false
            },
            visible: {
                get: function() {
                    return this._visible !== undefined ? this._visible : true;
                },
                set: function(value) {
                    this.view().dom().setStyle("display", value ? "" : "none");
                    this.view().dom().setStyle("pointer-events", value ? "all" : "none");
                    this._visible = value;
                }
            }
        },

        view: {
            props: {
                'class': 'n-topology-nav'
            },
            content: [{
                name: 'icons',
                tag: "ul",
                content: [{
                        tag: 'li',
                        content: {
                            name: 'mode',
                            tag: 'ul',
                            props: {
                                'class': 'n-topology-nav-mode'
                            },
                            content: [{
                                name: 'selectionMode',
                                tag: 'li',
                                content: {
                                    props: {
                                        'class': 'n-icon-selectnode',
                                        title: "Select node mode"
                                    },
                                    tag: 'span'
                                },
                                events: {
                                    'mousedown': '{#_switchSelectionMode}',
                                    'touchstart': '{#_switchSelectionMode}'
                                }

                            }, {
                                name: 'moveMode',
                                tag: 'li',
                                props: {
                                    'class': 'n-topology-nav-mode-selected'
                                },
                                content: {
                                    props: {
                                        'class': 'n-icon-movemode',
                                        title: "Move mode"

                                    },
                                    tag: 'span'
                                },
                                events: {
                                    'mousedown': '{#_switchMoveMode}',
                                    'touchstart': '{#_switchMoveMode}'
                                }

                            }]
                        }
                    }, {
                        tag: 'li',
                        props: {
                            'class': 'n-topology-nav-zoom'
                        },
                        content: [{
                                name: 'zoomin',
                                tag: 'span',
                                props: {
                                    'class': 'n-topology-nav-zoom-in n-icon-zoomin-plus',
                                    title: "Zoom out"
                                },
                                events: {
                                    'click': '{#_in}',
                                    'touchend': '{#_in}'
                                }
                            }, {
                                name: 'zoomout',
                                tag: 'span',
                                props: {
                                    'class': 'n-topology-nav-zoom-out n-icon-zoomout-minus',
                                    title: "Zoom in"
                                },
                                events: {
                                    'click': '{#_out}',
                                    'touchend': '{#_out}'
                                }
                            }

                        ]
                    }, {
                        tag: 'li',
                        name: 'zoomselection',
                        props: {
                            'class': 'n-topology-nav-zoom-selection n-icon-zoombyselection',
                            title: "Zoom by selection"
                        },
                        events: {
                            'click': '{#_zoombyselection}',
                            'touchend': '{#_zoombyselection}'
                        }
                    }, {
                        tag: 'li',
                        name: 'fit',
                        props: {
                            'class': 'n-topology-nav-fit n-icon-fitstage',
                            title: "Fit stage"
                        },
                        events: {
                            'click': '{#_fit}',
                            'touchend': '{#_fit}'
                        }
                    },
                    //                        {
                    //                            tag: 'li',
                    //                            name: 'agr',
                    //                            props: {
                    //                                'class': 'n-topology-nav-agr',
                    //                                title: "Aggregation"
                    //                            },
                    //                            content: [
                    //                                {
                    //                                    tag: 'span',
                    //                                    props: {
                    //                                        'class': 'glyphicon glyphicon-certificate   agr-icon'
                    //                                    }
                    //                                },
                    //                                {
                    //                                    tag: 'span',
                    //                                    content: 'A',
                    //                                    props: {
                    //                                        'class': 'agr-text'
                    //                                    }
                    //                                }
                    //                            ],
                    //                            events: {
                    //                                'click': '{#_agr}'
                    //                            }
                    //                        },



                    {
                        tag: 'li',
                        name: 'agr',
                        props: {
                            'class': 'n-topology-nav-agr n-icon-aggregation',
                            title: 'Aggregation'
                        },
                        events: {
                            'click': '{#_agr}',
                            'touchend': '{#_agr}'
                        }
                    }, {
                        tag: 'li',
                        name: 'fullscreen',
                        props: {
                            'class': 'n-topology-nav-full n-icon-fullscreen',
                            title: 'Enter full screen mode'
                        },
                        events: {
                            'click': '{#_full}',
                            'touchend': '{#_full}'
                        }
                    }, {
                        tag: 'li',
                        name: 'setting',
                        content: [{
                            name: 'icon',
                            tag: 'span',
                            props: {
                                'class': 'n-topology-nav-setting-icon n-icon-viewsetting'
                            },
                            events: {
                                mouseenter: "{#_openPopover}",
                                mouseleave: "{#_closePopover}",
                                //touchend: "{#_togglePopover}"
                            }
                        }, {
                            name: 'settingPopover',
                            type: 'nx.ui.Popover',
                            props: {
                                title: 'Topology Setting',
                                direction: "right",
                                lazyClose: true
                            },
                            content: [{
                                tag: 'h5',
                                content: "Display icons as dots :"
                            }, {
                                tag: 'label',
                                content: [{
                                    tag: 'input',
                                    props: {
                                        type: 'radio',
                                        checked: '{#showIcon,converter=inverted,direction=<>}'
                                    }
                                }, {
                                    tag: 'span',
                                    content: "Always"
                                }],
                                props: {
                                    'class': 'radio-inline'
                                }
                            }, {
                                tag: 'label',
                                content: [{
                                    tag: 'input',
                                    props: {
                                        type: 'radio',
                                        checked: '{#showIcon,direction=<>}'
                                    }
                                }, {
                                    tag: 'span',
                                    content: "Auto-resize"
                                }],
                                props: {
                                    'class': 'radio-inline'
                                }
                            }, {
                                name: 'displayLabelSetting',
                                tag: 'h5',
                                content: [{
                                    tag: 'span',
                                    content: 'Display Label : '
                                }, {
                                    tag: 'input',
                                    props: {
                                        'class': 'toggleLabelCheckBox',
                                        type: 'checkbox',
                                        checked: true
                                    },
                                    events: {
                                        click: '{#_toggleNodeLabel}',
                                        touchend: '{#_toggleNodeLabel}'
                                    }
                                }]
                            }, {
                                tag: 'h5',
                                content: "Theme :"
                            }, {

                                props: {
                                    'class': 'btn-group'
                                },
                                content: [{
                                        tag: 'button',
                                        props: {
                                            'class': 'btn btn-default',
                                            value: 'blue'
                                        },
                                        content: "Blue"
                                    }, {
                                        tag: 'button',
                                        props: {
                                            'class': 'btn btn-default',
                                            value: 'green'
                                        },
                                        content: "Green"
                                    }, {
                                        tag: 'button',
                                        props: {
                                            'class': 'btn btn-default',
                                            value: 'dark'
                                        },
                                        content: "Dark"
                                    }, {
                                        tag: 'button',
                                        props: {
                                            'class': 'btn btn-default',
                                            value: 'slate'
                                        },
                                        content: "Slate"
                                    }, {
                                        tag: 'button',
                                        props: {
                                            'class': 'btn btn-default',
                                            value: 'yellow'
                                        },
                                        content: "Yellow"
                                    }

                                ],
                                events: {
                                    'click': '{#_switchTheme}',
                                    'touchend': '{#_switchTheme}'
                                }
                            }, {
                                name: 'customize'
                            }],
                            events: {
                                'open': '{#_openSettingPanel}',
                                'close': '{#_closeSettingPanel}'
                            }
                        }],
                        props: {
                            'class': 'n-topology-nav-setting'
                        }
                    }
                ]
            }]
        },
        methods: {
            init: function(args) {
                this.inherited(args);


                this.view('settingPopover').view().dom().addClass('n-topology-setting-panel');


                if (window.top.frames.length) {
                    this.view("fullscreen").style().set("display", 'none');
                }
            },
            attach: function(args) {
                this.inherited(args);
                var topo = this.topology();
                topo.watch('scale', function(prop, scale) {
                    var maxScale = topo.maxScale();
                    var minScale = topo.minScale();
                    var navBall = this.view("zoomball").view();
                    var step = 65 / (maxScale - minScale);
                    navBall.setStyles({
                        top: 72 - (scale - minScale) * step + 14
                    });
                }, this);

                topo.selectedNodes().watch('count', function(prop, value) {
                    this.view('agr').dom().setStyle('display', value > 1 ? 'block' : 'none');
                }, this);

                topo.watch('currentSceneName', function(prop, currentSceneName) {
                    if (currentSceneName == 'selection') {
                        this.view("selectionMode").dom().addClass("n-topology-nav-mode-selected");
                        this.view("moveMode").dom().removeClass("n-topology-nav-mode-selected");
                    } else {
                        this.view("selectionMode").dom().removeClass("n-topology-nav-mode-selected");
                        this.view("moveMode").dom().addClass("n-topology-nav-mode-selected");
                    }
                }, this);


                this.view('agr').dom().setStyle('display', 'none');

            },
            _switchSelectionMode: function(sender, event) {
                var topo = this.topology();
                var currentSceneName = topo.currentSceneName();
                if (currentSceneName != 'selection') {
                    topo.activateScene('selection');
                    this._prevSceneName = currentSceneName;
                }
            },
            _switchMoveMode: function(sender, event) {
                var topo = this.topology();
                var currentSceneName = topo.currentSceneName();
                if (currentSceneName == 'selection') {
                    topo.activateScene(this._prevSceneName || 'default');
                    this._prevSceneName = null;
                }
            },
            _fit: function(sender, event) {
                if (!this._fitTimer) {
                    this.topology().fit();

                    sender.dom().setStyle('opacity', '0.1');
                    this._fitTimer = true;
                    setTimeout(function() {
                        sender.dom().setStyle('opacity', '1');
                        this._fitTimer = false;
                    }.bind(this), 1200);
                }
            },
            _zoombyselection: function(sender, event) {
                var icon = sender;
                var topo = this.topology();
                var currentSceneName = topo.currentSceneName();

                if (currentSceneName == 'zoomBySelection') {
                    icon.dom().removeClass('n-topology-nav-zoom-selection-selected');
                    topo.activateScene('default');
                } else {
                    var scene = topo.activateScene('zoomBySelection');
                    scene.upon('finish', function fn(sender, bound) {
                        if (bound) {
                            topo.zoomByBound(topo.getInsideBound(bound));
                        }
                        topo.activateScene(currentSceneName);
                        icon.dom().removeClass('n-topology-nav-zoom-selection-selected');
                        scene.off('finish', fn, this);
                    }, this);
                    icon.dom().addClass('n-topology-nav-zoom-selection-selected');
                }
            },
            _in: function(sender, event) {
                var topo = this.topology();
                topo.stage().zoom(1.2, topo.adjustLayout, topo);
                event.preventDefault();
            },
            _out: function(sender, event) {
                var topo = this.topology();
                topo.stage().zoom(0.8, topo.adjustLayout, topo);
                event.preventDefault();
            },
            _full: function(sender, event) {
                this.toggleFull(event.target);
            },
            _enterSetting: function(event) {
                this.view("setting").addClass("n-topology-nav-setting-open");
            },
            _leaveSetting: function(event) {
                this.view("setting").removeClass("n-topology-nav-setting-open");
            },
            cancelFullScreen: function(el) {
                var requestMethod = el.cancelFullScreen || el.webkitCancelFullScreen || el.mozCancelFullScreen || el.exitFullscreen;
                if (requestMethod) { // cancel full screen.
                    requestMethod.call(el);
                } else if (typeof window.ActiveXObject !== "undefined") { // Older IE.
                    var wscript = new ActiveXObject("WScript.Shell");
                    if (wscript !== null) {
                        wscript.SendKeys("{F11}");
                    }
                }
            },
            requestFullScreen: function(el) {
                document.body.webkitRequestFullscreen.call(document.body);
                return false;
            },
            toggleFull: function(el) {
                var elem = document.body; // Make the body go full screen.
                var isInFullScreen = (document.fullScreenElement && document.fullScreenElement !== null) || (document.mozFullScreen || document.webkitIsFullScreen);

                if (isInFullScreen) {
                    this.cancelFullScreen(document);
                    this.fire("leaveFullScreen");
                } else {
                    this.requestFullScreen(elem);
                    this.fire("enterFullScreen");
                }
                return false;
            },

            _openPopover: function(sender, event) {
                this.view("settingPopover").open({
                    target: sender.dom(),
                    offsetY: 3
                });
                this.view('icon').dom().addClass('n-topology-nav-setting-icon-selected');
            },
            _closePopover: function() {
                this.view("settingPopover").close();
            },
            _closeSettingPanel: function() {
                this.view('icon').dom().removeClass('n-topology-nav-setting-icon-selected');
            },
            _togglePopover: function() {
                var popover = this.view("settingPopover");
                if (popover._closed) {
                    popover.open();
                }else{
                    popover.close();
                }
            },
            _switchTheme: function(sender, event) {
                this.topology().theme(event.target.value);
            },

            _toggleNodeLabel: function(sender, events) {
                var checked = sender.get('checked');
                this.topology().eachNode(function(node) {
                    node.labelVisibility(checked);
                });

                nx.graphic.Topology.NodesLayer.defaultConfig.labelVisibility = checked;
                nx.graphic.Topology.NodeSetLayer.defaultConfig.labelVisibility = checked;
            },
            _agr: function() {
                var topo = this.topology();
                var nodes = topo.selectedNodes().toArray();
                topo.selectedNodes().clear();
                topo.aggregationNodes(nodes);
            }
        }
    });


})(nx, nx.global);
